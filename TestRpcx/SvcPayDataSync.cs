// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SvcPayDataSync.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SvcPayDataSync {

  /// <summary>Holder for reflection information generated from SvcPayDataSync.proto</summary>
  public static partial class SvcPayDataSyncReflection {

    #region Descriptor
    /// <summary>File descriptor for SvcPayDataSync.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SvcPayDataSyncReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRTdmNQYXlEYXRhU3luYy5wcm90bxIOU3ZjUGF5RGF0YVN5bmMaDVN2Y0Jh",
            "c2UucHJvdG8aEFN2Y1BheUJhc2UucHJvdG8iQgoNU2VydmljZVN0YXR1cxIx",
            "CgZTdGF0dXMYASABKA4yIS5TdmNQYXlEYXRhU3luYy5TZXJ2aWNlU3RhdHVz",
            "Q29kZSIoCg5EZXZQYXJhbUNhdGxvZxIWCg5EZXZQYXJhbUNhdGxvZxgBIAMo",
            "CSIuChBVc2VySWRDaGFuZ2VQYWlyEg4KBlVzZXJJZBgBIAEoCRIKCgJVRBgC",
            "IAEoCSJWCg5Vc2VyQ2hhbmdlRGF0YRI2CgxDaGFuZ2VlZExpc3QYASADKAsy",
            "IC5TdmNQYXlEYXRhU3luYy5Vc2VySWRDaGFuZ2VQYWlyEgwKBERwSWQYAyAB",
            "KAUiNwoLQ2hhbmdlZFVzZXISCgoCVUQYASABKAkSDAoERHBJZBgCIAEoBRIO",
            "CgZVc2VySWQYAyABKAkiMgoSRGV2aWNlSWRDaGFuZ2VQYWlyEhAKCERldmlj",
            "ZUlkGAEgASgJEgoKAlVEGAIgASgJIkwKEERldmljZUNoYW5nZURhdGESOAoM",
            "Q2hhbmdlZWRMaXN0GAEgAygLMiIuU3ZjUGF5RGF0YVN5bmMuRGV2aWNlSWRD",
            "aGFuZ2VQYWlyIi0KDUNoYW5nZWREZXZpY2USCgoCVUQYASABKAkSEAoIRGV2",
            "aWNlSWQYAiABKAkiKgoORHBJZENoYW5nZVBhaXISDAoERHBJZBgBIAEoBRIK",
            "CgJVRBgCIAEoCSJECgxEcENoYW5nZURhdGESNAoMQ2hhbmdlZWRMaXN0GAEg",
            "AygLMh4uU3ZjUGF5RGF0YVN5bmMuRHBJZENoYW5nZVBhaXIiJQoJQ2hhbmdl",
            "ZERwEgoKAlVEGAEgASgJEgwKBERwSWQYAiABKAUikAIKBkRwSXRlbRIMCgRE",
            "cElkGAEgASgFEg4KBkRwTmFtZRgCIAEoCRIPCgdHcm91cElkGAMgASgFEhEK",
            "CURiVmVyc2lvbhgFIAEoAxIRCglSZXZlcnNpb24YBiABKAMSMAoFUGFyYW0Y",
            "DCADKAsyIS5TdmNQYXlEYXRhU3luYy5EcEl0ZW0uUGFyYW1FbnRyeRISCgpE",
            "ZXZpY2VMaXN0GA0gAygJEiwKClN0cmF0ZWdpZXMYDiADKAsyGC5TdmNQYXlE",
            "YXRhU3luYy5TdHJhdGVneRIPCgdEYXRhU0hBGA8gASgMGiwKClBhcmFtRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASLXAgoMTWVyY2hh",
            "bnRJdGVtEhIKCk1lcmNoYW50SWQYASABKAkSFAoMTWVyY2hhbnROYW1lGAIg",
            "ASgJEgwKBERwSWQYBCABKAUSEQoJRGJWZXJzaW9uGAUgASgDEhEKCVJldmVy",
            "c2lvbhgGIAEoAxI2CgVQYXJhbRgHIAMoCzInLlN2Y1BheURhdGFTeW5jLk1l",
            "cmNoYW50SXRlbS5QYXJhbUVudHJ5EhIKCkRldmljZUxpc3QYDCADKAkSMAoL",
            "QWNjb3VudExpc3QYDSADKAsyGy5TdmNQYXlEYXRhU3luYy5BY2NvdW50SXRl",
            "bRIsCgpTdHJhdGVnaWVzGA4gAygLMhguU3ZjUGF5RGF0YVN5bmMuU3RyYXRl",
            "Z3kSDwoHRGF0YVNIQRgPIAEoDBosCgpQYXJhbUVudHJ5EgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCToCOAEisQMKDkRldmljZUluZm9JdGVtEhAKCERl",
            "dmljZUlkGAEgASgJEhIKCkRldmljZU5hbWUYAiABKAkSDAoERHBJZBgDIAEo",
            "BRISCgpNZXJjaGFudElkGAQgASgFEg8KB0dyb3VwSWQYBSABKAUSEgoKRGV2",
            "aWNlVHlwZRgGIAEoBRIRCglEYlZlcnNpb24YByABKAMSEQoJUmV2ZXJzaW9u",
            "GAggASgDEjgKBVBhcmFtGAkgAygLMikuU3ZjUGF5RGF0YVN5bmMuRGV2aWNl",
            "SW5mb0l0ZW0uUGFyYW1FbnRyeRIUCgxMb2NhbEJhbGFuY2UYCiABKAUSEAoI",
            "T3BlblRpbWUYCyABKAMSIgoCRHAYDCABKAsyFi5TdmNQYXlEYXRhU3luYy5E",
            "cEl0ZW0SLgoITWVyY2hhbnQYDSABKAsyHC5TdmNQYXlEYXRhU3luYy5NZXJj",
            "aGFudEl0ZW0SFwoPRGV2aWNlU3RhdHVzS2V5GA4gASgMEg8KB0RhdGFTSEEY",
            "DyABKAwaLAoKUGFyYW1FbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiAB",
            "KAk6AjgBIsICCgtQYXlVc2VySXRlbRIOCgZVc2VySWQYASABKAkSEAoIVXNl",
            "ck5hbWUYAiABKAkSDAoERHBJZBgEIAEoBRIRCglEYlZlcnNpb24YBSABKAMS",
            "EQoJUmV2ZXJzaW9uGAYgASgDEjsKCE1ldGFEYXRhGAwgAygLMikuU3ZjUGF5",
            "RGF0YVN5bmMuUGF5VXNlckl0ZW0uTWV0YURhdGFFbnRyeRIwCgtBY2NvdW50",
            "TGlzdBgNIAMoCzIbLlN2Y1BheURhdGFTeW5jLkFjY291bnRJdGVtEiwKClN0",
            "cmF0ZWdpZXMYDiADKAsyGC5TdmNQYXlEYXRhU3luYy5TdHJhdGVneRIPCgdE",
            "YXRhU0hBGA8gASgMGi8KDU1ldGFEYXRhRW50cnkSCwoDa2V5GAEgASgJEg0K",
            "BXZhbHVlGAIgASgJOgI4ASLKAgoLQWNjb3VudEl0ZW0SDQoFSW5kZXgYASAB",
            "KAUSDQoFQWNjTm8YAiABKAkSDwoHQWNjVHlwZRgDIAEoBRINCgVBY2NJZBgE",
            "IAEoCRIRCglBY2NTdGF0dXMYBSABKAUSDwoHQmFsYW5jZRgGIAEoBRIWCg5P",
            "cGVuaW5nQmFsYW5jZRgHIAEoBRIUCgxMb2NhbEJhbGFuY2UYCCABKAUSDwoH",
            "Q2FyZFBXRBgJIAEoCRJBCgtBY2NNZXRhRGF0YRgMIAMoCzIsLlN2Y1BheURh",
            "dGFTeW5jLkFjY291bnRJdGVtLkFjY01ldGFEYXRhRW50cnkSEAoIT3BlblRp",
            "bWUYDSABKAMSEQoJQ2xvc2VUaW1lGA4gASgDGjIKEEFjY01ldGFEYXRhRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASIKCghTdHJhdGVn",
            "eSKuAQoLRGVjaWNlQ2FjaGUSEAoIRGV2aWNlSWQYAiABKAkSEgoKRGV2aWNl",
            "TmFtZRgDIAEoCRIMCgREcElkGAQgASgFEhIKCkRldmljZVR5cGUYBSABKAUS",
            "LgoITWVyY2hhbnQYBiABKAsyHC5TdmNQYXlEYXRhU3luYy5NZXJjaGFudEl0",
            "ZW0SEgoKRmVhdHVyZVZlchgHIAEoCRITCgtVc2VySWRBcnJheRgIIAMoCSLB",
            "AwoRUGF5bWVudFJlY29yZEl0ZW0SDwoHT3JkZXJJZBgBIAEoCRIMCgREcElk",
            "GAIgASgFEhAKCERldmljZUlkGAMgASgJEg4KBlVzZXJJZBgEIAEoCRIOCgZV",
            "QWNjTm8YBSABKAkSEAoIVUFjY1R5cGUYBiABKAUSEgoKTWVyY2hhbnRJZBgH",
            "IAEoCRIOCgZNQWNjTm8YCCABKAkSEAoITUFjY1R5cGUYCSABKAUSDwoHQmFs",
            "YW5jZRgKIAEoBRIRCglQYXlBbW91bnQYCyABKAUSEQoJQWNjU3RhdHVzGAwg",
            "ASgFEkcKC1JlY01ldGFEYXRhGA0gAygLMjIuU3ZjUGF5RGF0YVN5bmMuUGF5",
            "bWVudFJlY29yZEl0ZW0uUmVjTWV0YURhdGFFbnRyeRIPCgdSZXFUaW1lGA4g",
            "ASgJEg8KB0FjY1RpbWUYDyABKAkSEwoLQ3JlZGVudGlhbHMYECABKAwSKAoH",
            "UGF5VHlwZRgRIAEoDjIXLlBheW1lbnRDcmVkZW50aWFsc1R5cGUaMgoQUmVj",
            "TWV0YURhdGFFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgB",
            "IloKB1N1bW1hcnkSEgoKRGF0YU51bWJlchgBIAEoBRIXCg9WYWxpZERhdGFO",
            "dW1iZXIYAiABKAUSDwoHRGF0YVNIQRgDIAEoDBIRCglDb21taXRUYWcYBCAB",
            "KAkqXQoRU2VydmljZVN0YXR1c0NvZGUSCwoHVW5rbm93bhAAEhUKEVNlcnZp",
            "Y2VVbmF2YWxpYmxlEAESEgoOU2VydmljZU9mZmxpbmUQAhIQCgxTZXJ2aWNl",
            "UmVhZHkQAzLdAwoNU3ZjUGF5U1FMU3luYxIdCgVDbG9zZRIGLkVtcHR5Ggou",
            "Qm9vbFZhbHVlIgASOwoQR2V0U2VydmljZVN0YXR1cxIGLkVtcHR5Gh0uU3Zj",
            "UGF5RGF0YVN5bmMuU2VydmljZVN0YXR1cyIAEj0KEUdldERldlBhcmFtQ2F0",
            "bG9nEgYuRW1wdHkaHi5TdmNQYXlEYXRhU3luYy5EZXZQYXJhbUNhdGxvZyIA",
            "EkEKEU5vdGlmeVVzZXJDaGFuZ2VkEh4uU3ZjUGF5RGF0YVN5bmMuVXNlckNo",
            "YW5nZURhdGEaCi5Cb29sVmFsdWUiABJFChNOb3RpZnlEZXZpY2VDaGFuZ2Vk",
            "EiAuU3ZjUGF5RGF0YVN5bmMuRGV2aWNlQ2hhbmdlRGF0YRoKLkJvb2xWYWx1",
            "ZSIAEj0KD05vdGlmeURwQ2hhbmdlZBIcLlN2Y1BheURhdGFTeW5jLkRwQ2hh",
            "bmdlRGF0YRoKLkJvb2xWYWx1ZSIAEjIKCUhlYXJ0QmVhdBIQLlJlcXVlc3RN",
            "ZXRhRGF0YRoRLlJlc3BvbnNlTWV0YURhdGEiABI0Cg9TZW5kTXNnVG9DbGll",
            "bnQSEy5SZXF1ZXN0U2VuZE1lc3NhZ2UaCi5Cb29sVmFsdWUiAEI8Ch5jb20u",
            "bmV3Y2FwZWMuaHQucHJvdG8uUHJvdG9TdmNCDlN2Y1BheURhdGFTeW5jWgou",
            "O1Byb3RvU3ZjYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SvcBaseReflection.Descriptor, global::SvcPayBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SvcPayDataSync.ServiceStatusCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.ServiceStatus), global::SvcPayDataSync.ServiceStatus.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.DevParamCatlog), global::SvcPayDataSync.DevParamCatlog.Parser, new[]{ "DevParamCatlog_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.UserIdChangePair), global::SvcPayDataSync.UserIdChangePair.Parser, new[]{ "UserId", "UD" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.UserChangeData), global::SvcPayDataSync.UserChangeData.Parser, new[]{ "ChangeedList", "DpId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.ChangedUser), global::SvcPayDataSync.ChangedUser.Parser, new[]{ "UD", "DpId", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.DeviceIdChangePair), global::SvcPayDataSync.DeviceIdChangePair.Parser, new[]{ "DeviceId", "UD" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.DeviceChangeData), global::SvcPayDataSync.DeviceChangeData.Parser, new[]{ "ChangeedList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.ChangedDevice), global::SvcPayDataSync.ChangedDevice.Parser, new[]{ "UD", "DeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.DpIdChangePair), global::SvcPayDataSync.DpIdChangePair.Parser, new[]{ "DpId", "UD" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.DpChangeData), global::SvcPayDataSync.DpChangeData.Parser, new[]{ "ChangeedList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.ChangedDp), global::SvcPayDataSync.ChangedDp.Parser, new[]{ "UD", "DpId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.DpItem), global::SvcPayDataSync.DpItem.Parser, new[]{ "DpId", "DpName", "GroupId", "DbVersion", "Reversion", "Param", "DeviceList", "Strategies", "DataSHA" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.MerchantItem), global::SvcPayDataSync.MerchantItem.Parser, new[]{ "MerchantId", "MerchantName", "DpId", "DbVersion", "Reversion", "Param", "DeviceList", "AccountList", "Strategies", "DataSHA" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.DeviceInfoItem), global::SvcPayDataSync.DeviceInfoItem.Parser, new[]{ "DeviceId", "DeviceName", "DpId", "MerchantId", "GroupId", "DeviceType", "DbVersion", "Reversion", "Param", "LocalBalance", "OpenTime", "Dp", "Merchant", "DeviceStatusKey", "DataSHA" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.PayUserItem), global::SvcPayDataSync.PayUserItem.Parser, new[]{ "UserId", "UserName", "DpId", "DbVersion", "Reversion", "MetaData", "AccountList", "Strategies", "DataSHA" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.AccountItem), global::SvcPayDataSync.AccountItem.Parser, new[]{ "Index", "AccNo", "AccType", "AccId", "AccStatus", "Balance", "OpeningBalance", "LocalBalance", "CardPWD", "AccMetaData", "OpenTime", "CloseTime" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.Strategy), global::SvcPayDataSync.Strategy.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.DeciceCache), global::SvcPayDataSync.DeciceCache.Parser, new[]{ "DeviceId", "DeviceName", "DpId", "DeviceType", "Merchant", "FeatureVer", "UserIdArray" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.PaymentRecordItem), global::SvcPayDataSync.PaymentRecordItem.Parser, new[]{ "OrderId", "DpId", "DeviceId", "UserId", "UAccNo", "UAccType", "MerchantId", "MAccNo", "MAccType", "Balance", "PayAmount", "AccStatus", "RecMetaData", "ReqTime", "AccTime", "Credentials", "PayType" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvcPayDataSync.Summary), global::SvcPayDataSync.Summary.Parser, new[]{ "DataNumber", "ValidDataNumber", "DataSHA", "CommitTag" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ServiceStatusCode {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("Unknown")] Unknown = 0,
    /// <summary>
    ///服务不可用
    /// </summary>
    [pbr::OriginalName("ServiceUnavalible")] ServiceUnavalible = 1,
    /// <summary>
    ///服务掉线
    /// </summary>
    [pbr::OriginalName("ServiceOffline")] ServiceOffline = 2,
    /// <summary>
    ///服务就绪
    /// </summary>
    [pbr::OriginalName("ServiceReady")] ServiceReady = 3,
  }

  #endregion

  #region Messages
  public sealed partial class ServiceStatus : pb::IMessage<ServiceStatus> {
    private static readonly pb::MessageParser<ServiceStatus> _parser = new pb::MessageParser<ServiceStatus>(() => new ServiceStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceStatus(ServiceStatus other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceStatus Clone() {
      return new ServiceStatus(this);
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::SvcPayDataSync.ServiceStatusCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SvcPayDataSync.ServiceStatusCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceStatus other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::SvcPayDataSync.ServiceStatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DevParamCatlog : pb::IMessage<DevParamCatlog> {
    private static readonly pb::MessageParser<DevParamCatlog> _parser = new pb::MessageParser<DevParamCatlog>(() => new DevParamCatlog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DevParamCatlog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevParamCatlog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevParamCatlog(DevParamCatlog other) : this() {
      devParamCatlog_ = other.devParamCatlog_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevParamCatlog Clone() {
      return new DevParamCatlog(this);
    }

    /// <summary>Field number for the "DevParamCatlog" field.</summary>
    public const int DevParamCatlog_FieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_devParamCatlog_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> devParamCatlog_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DevParamCatlog_ {
      get { return devParamCatlog_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DevParamCatlog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DevParamCatlog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!devParamCatlog_.Equals(other.devParamCatlog_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= devParamCatlog_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      devParamCatlog_.WriteTo(output, _repeated_devParamCatlog_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += devParamCatlog_.CalculateSize(_repeated_devParamCatlog_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DevParamCatlog other) {
      if (other == null) {
        return;
      }
      devParamCatlog_.Add(other.devParamCatlog_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            devParamCatlog_.AddEntriesFrom(input, _repeated_devParamCatlog_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户变更数据对
  /// </summary>
  public sealed partial class UserIdChangePair : pb::IMessage<UserIdChangePair> {
    private static readonly pb::MessageParser<UserIdChangePair> _parser = new pb::MessageParser<UserIdChangePair>(() => new UserIdChangePair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserIdChangePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdChangePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdChangePair(UserIdChangePair other) : this() {
      userId_ = other.userId_;
      uD_ = other.uD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdChangePair Clone() {
      return new UserIdChangePair(this);
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UD" field.</summary>
    public const int UDFieldNumber = 2;
    private string uD_ = "";
    /// <summary>
    ///操作类型（D=Delete，U及其它=Put）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UD {
      get { return uD_; }
      set {
        uD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserIdChangePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserIdChangePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UD != other.UD) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (UD.Length != 0) hash ^= UD.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (UD.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UD);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (UD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UD);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserIdChangePair other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.UD.Length != 0) {
        UD = other.UD;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            UD = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户变更数据集合
  /// </summary>
  public sealed partial class UserChangeData : pb::IMessage<UserChangeData> {
    private static readonly pb::MessageParser<UserChangeData> _parser = new pb::MessageParser<UserChangeData>(() => new UserChangeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserChangeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserChangeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserChangeData(UserChangeData other) : this() {
      changeedList_ = other.changeedList_.Clone();
      dpId_ = other.dpId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserChangeData Clone() {
      return new UserChangeData(this);
    }

    /// <summary>Field number for the "ChangeedList" field.</summary>
    public const int ChangeedListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SvcPayDataSync.UserIdChangePair> _repeated_changeedList_codec
        = pb::FieldCodec.ForMessage(10, global::SvcPayDataSync.UserIdChangePair.Parser);
    private readonly pbc::RepeatedField<global::SvcPayDataSync.UserIdChangePair> changeedList_ = new pbc::RepeatedField<global::SvcPayDataSync.UserIdChangePair>();
    /// <summary>
    ///变化的用户列表-操作对
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SvcPayDataSync.UserIdChangePair> ChangeedList {
      get { return changeedList_; }
    }

    /// <summary>Field number for the "DpId" field.</summary>
    public const int DpIdFieldNumber = 3;
    private int dpId_;
    /// <summary>
    ///所属客户编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpId {
      get { return dpId_; }
      set {
        dpId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserChangeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserChangeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!changeedList_.Equals(other.changeedList_)) return false;
      if (DpId != other.DpId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= changeedList_.GetHashCode();
      if (DpId != 0) hash ^= DpId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changeedList_.WriteTo(output, _repeated_changeedList_codec);
      if (DpId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DpId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changeedList_.CalculateSize(_repeated_changeedList_codec);
      if (DpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserChangeData other) {
      if (other == null) {
        return;
      }
      changeedList_.Add(other.changeedList_);
      if (other.DpId != 0) {
        DpId = other.DpId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            changeedList_.AddEntriesFrom(input, _repeated_changeedList_codec);
            break;
          }
          case 24: {
            DpId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户变更数据
  /// </summary>
  public sealed partial class ChangedUser : pb::IMessage<ChangedUser> {
    private static readonly pb::MessageParser<ChangedUser> _parser = new pb::MessageParser<ChangedUser>(() => new ChangedUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangedUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedUser(ChangedUser other) : this() {
      uD_ = other.uD_;
      dpId_ = other.dpId_;
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedUser Clone() {
      return new ChangedUser(this);
    }

    /// <summary>Field number for the "UD" field.</summary>
    public const int UDFieldNumber = 1;
    private string uD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UD {
      get { return uD_; }
      set {
        uD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DpId" field.</summary>
    public const int DpIdFieldNumber = 2;
    private int dpId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpId {
      get { return dpId_; }
      set {
        dpId_ = value;
      }
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangedUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangedUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UD != other.UD) return false;
      if (DpId != other.DpId) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UD.Length != 0) hash ^= UD.GetHashCode();
      if (DpId != 0) hash ^= DpId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UD.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UD);
      }
      if (DpId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DpId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UD);
      }
      if (DpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangedUser other) {
      if (other == null) {
        return;
      }
      if (other.UD.Length != 0) {
        UD = other.UD;
      }
      if (other.DpId != 0) {
        DpId = other.DpId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UD = input.ReadString();
            break;
          }
          case 16: {
            DpId = input.ReadInt32();
            break;
          }
          case 26: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设备变更数据对
  /// </summary>
  public sealed partial class DeviceIdChangePair : pb::IMessage<DeviceIdChangePair> {
    private static readonly pb::MessageParser<DeviceIdChangePair> _parser = new pb::MessageParser<DeviceIdChangePair>(() => new DeviceIdChangePair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceIdChangePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceIdChangePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceIdChangePair(DeviceIdChangePair other) : this() {
      deviceId_ = other.deviceId_;
      uD_ = other.uD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceIdChangePair Clone() {
      return new DeviceIdChangePair(this);
    }

    /// <summary>Field number for the "DeviceId" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    /// <summary>
    ///设备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UD" field.</summary>
    public const int UDFieldNumber = 2;
    private string uD_ = "";
    /// <summary>
    ///操作类型（D=Delete，U及其它=Put）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UD {
      get { return uD_; }
      set {
        uD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceIdChangePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceIdChangePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (UD != other.UD) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (UD.Length != 0) hash ^= UD.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceId);
      }
      if (UD.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UD);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (UD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UD);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceIdChangePair other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.UD.Length != 0) {
        UD = other.UD;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DeviceId = input.ReadString();
            break;
          }
          case 18: {
            UD = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设备变更数据集合
  /// </summary>
  public sealed partial class DeviceChangeData : pb::IMessage<DeviceChangeData> {
    private static readonly pb::MessageParser<DeviceChangeData> _parser = new pb::MessageParser<DeviceChangeData>(() => new DeviceChangeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceChangeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceChangeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceChangeData(DeviceChangeData other) : this() {
      changeedList_ = other.changeedList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceChangeData Clone() {
      return new DeviceChangeData(this);
    }

    /// <summary>Field number for the "ChangeedList" field.</summary>
    public const int ChangeedListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SvcPayDataSync.DeviceIdChangePair> _repeated_changeedList_codec
        = pb::FieldCodec.ForMessage(10, global::SvcPayDataSync.DeviceIdChangePair.Parser);
    private readonly pbc::RepeatedField<global::SvcPayDataSync.DeviceIdChangePair> changeedList_ = new pbc::RepeatedField<global::SvcPayDataSync.DeviceIdChangePair>();
    /// <summary>
    ///变化的设备列表-操作对
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SvcPayDataSync.DeviceIdChangePair> ChangeedList {
      get { return changeedList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceChangeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceChangeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!changeedList_.Equals(other.changeedList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= changeedList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changeedList_.WriteTo(output, _repeated_changeedList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changeedList_.CalculateSize(_repeated_changeedList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceChangeData other) {
      if (other == null) {
        return;
      }
      changeedList_.Add(other.changeedList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            changeedList_.AddEntriesFrom(input, _repeated_changeedList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设备变更数据
  /// </summary>
  public sealed partial class ChangedDevice : pb::IMessage<ChangedDevice> {
    private static readonly pb::MessageParser<ChangedDevice> _parser = new pb::MessageParser<ChangedDevice>(() => new ChangedDevice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangedDevice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedDevice(ChangedDevice other) : this() {
      uD_ = other.uD_;
      deviceId_ = other.deviceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedDevice Clone() {
      return new ChangedDevice(this);
    }

    /// <summary>Field number for the "UD" field.</summary>
    public const int UDFieldNumber = 1;
    private string uD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UD {
      get { return uD_; }
      set {
        uD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeviceId" field.</summary>
    public const int DeviceIdFieldNumber = 2;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangedDevice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangedDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UD != other.UD) return false;
      if (DeviceId != other.DeviceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UD.Length != 0) hash ^= UD.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UD.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UD);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UD);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangedDevice other) {
      if (other == null) {
        return;
      }
      if (other.UD.Length != 0) {
        UD = other.UD;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UD = input.ReadString();
            break;
          }
          case 18: {
            DeviceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///租户变更数据对
  /// </summary>
  public sealed partial class DpIdChangePair : pb::IMessage<DpIdChangePair> {
    private static readonly pb::MessageParser<DpIdChangePair> _parser = new pb::MessageParser<DpIdChangePair>(() => new DpIdChangePair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DpIdChangePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpIdChangePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpIdChangePair(DpIdChangePair other) : this() {
      dpId_ = other.dpId_;
      uD_ = other.uD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpIdChangePair Clone() {
      return new DpIdChangePair(this);
    }

    /// <summary>Field number for the "DpId" field.</summary>
    public const int DpIdFieldNumber = 1;
    private int dpId_;
    /// <summary>
    ///租户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpId {
      get { return dpId_; }
      set {
        dpId_ = value;
      }
    }

    /// <summary>Field number for the "UD" field.</summary>
    public const int UDFieldNumber = 2;
    private string uD_ = "";
    /// <summary>
    ///操作类型（D=Delete，U及其它=Put）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UD {
      get { return uD_; }
      set {
        uD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DpIdChangePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DpIdChangePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DpId != other.DpId) return false;
      if (UD != other.UD) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DpId != 0) hash ^= DpId.GetHashCode();
      if (UD.Length != 0) hash ^= UD.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DpId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DpId);
      }
      if (UD.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UD);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpId);
      }
      if (UD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UD);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DpIdChangePair other) {
      if (other == null) {
        return;
      }
      if (other.DpId != 0) {
        DpId = other.DpId;
      }
      if (other.UD.Length != 0) {
        UD = other.UD;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DpId = input.ReadInt32();
            break;
          }
          case 18: {
            UD = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///租户变更数据集合
  /// </summary>
  public sealed partial class DpChangeData : pb::IMessage<DpChangeData> {
    private static readonly pb::MessageParser<DpChangeData> _parser = new pb::MessageParser<DpChangeData>(() => new DpChangeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DpChangeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpChangeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpChangeData(DpChangeData other) : this() {
      changeedList_ = other.changeedList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpChangeData Clone() {
      return new DpChangeData(this);
    }

    /// <summary>Field number for the "ChangeedList" field.</summary>
    public const int ChangeedListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SvcPayDataSync.DpIdChangePair> _repeated_changeedList_codec
        = pb::FieldCodec.ForMessage(10, global::SvcPayDataSync.DpIdChangePair.Parser);
    private readonly pbc::RepeatedField<global::SvcPayDataSync.DpIdChangePair> changeedList_ = new pbc::RepeatedField<global::SvcPayDataSync.DpIdChangePair>();
    /// <summary>
    ///变化的租户列表-操作对
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SvcPayDataSync.DpIdChangePair> ChangeedList {
      get { return changeedList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DpChangeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DpChangeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!changeedList_.Equals(other.changeedList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= changeedList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changeedList_.WriteTo(output, _repeated_changeedList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changeedList_.CalculateSize(_repeated_changeedList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DpChangeData other) {
      if (other == null) {
        return;
      }
      changeedList_.Add(other.changeedList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            changeedList_.AddEntriesFrom(input, _repeated_changeedList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///租户变更数据
  /// </summary>
  public sealed partial class ChangedDp : pb::IMessage<ChangedDp> {
    private static readonly pb::MessageParser<ChangedDp> _parser = new pb::MessageParser<ChangedDp>(() => new ChangedDp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangedDp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedDp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedDp(ChangedDp other) : this() {
      uD_ = other.uD_;
      dpId_ = other.dpId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedDp Clone() {
      return new ChangedDp(this);
    }

    /// <summary>Field number for the "UD" field.</summary>
    public const int UDFieldNumber = 1;
    private string uD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UD {
      get { return uD_; }
      set {
        uD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DpId" field.</summary>
    public const int DpIdFieldNumber = 2;
    private int dpId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpId {
      get { return dpId_; }
      set {
        dpId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangedDp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangedDp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UD != other.UD) return false;
      if (DpId != other.DpId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UD.Length != 0) hash ^= UD.GetHashCode();
      if (DpId != 0) hash ^= DpId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UD.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UD);
      }
      if (DpId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DpId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UD);
      }
      if (DpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangedDp other) {
      if (other == null) {
        return;
      }
      if (other.UD.Length != 0) {
        UD = other.UD;
      }
      if (other.DpId != 0) {
        DpId = other.DpId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UD = input.ReadString();
            break;
          }
          case 16: {
            DpId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户信息,Key=/Acc/Dp/%Dpid%
  /// </summary>
  public sealed partial class DpItem : pb::IMessage<DpItem> {
    private static readonly pb::MessageParser<DpItem> _parser = new pb::MessageParser<DpItem>(() => new DpItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DpItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpItem(DpItem other) : this() {
      dpId_ = other.dpId_;
      dpName_ = other.dpName_;
      groupId_ = other.groupId_;
      dbVersion_ = other.dbVersion_;
      reversion_ = other.reversion_;
      param_ = other.param_.Clone();
      deviceList_ = other.deviceList_.Clone();
      strategies_ = other.strategies_.Clone();
      dataSHA_ = other.dataSHA_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpItem Clone() {
      return new DpItem(this);
    }

    /// <summary>Field number for the "DpId" field.</summary>
    public const int DpIdFieldNumber = 1;
    private int dpId_;
    /// <summary>
    ///客户编号,多业主时使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpId {
      get { return dpId_; }
      set {
        dpId_ = value;
      }
    }

    /// <summary>Field number for the "DpName" field.</summary>
    public const int DpNameFieldNumber = 2;
    private string dpName_ = "";
    /// <summary>
    ///客户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DpName {
      get { return dpName_; }
      set {
        dpName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 3;
    private int groupId_;
    /// <summary>
    ///参数组编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "DbVersion" field.</summary>
    public const int DbVersionFieldNumber = 5;
    private long dbVersion_;
    /// <summary>
    ///SQL数据库版本（Version）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DbVersion {
      get { return dbVersion_; }
      set {
        dbVersion_ = value;
      }
    }

    /// <summary>Field number for the "Reversion" field.</summary>
    public const int ReversionFieldNumber = 6;
    private long reversion_;
    /// <summary>
    ///RDB版本（ETCD.ModReversion）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Reversion {
      get { return reversion_; }
      set {
        reversion_ = value;
      }
    }

    /// <summary>Field number for the "Param" field.</summary>
    public const int ParamFieldNumber = 12;
    private static readonly pbc::MapField<string, string>.Codec _map_param_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 98);
    private readonly pbc::MapField<string, string> param_ = new pbc::MapField<string, string>();
    /// <summary>
    ///客户参数数据，用于描述支付过程中使用的参数的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Param {
      get { return param_; }
    }

    /// <summary>Field number for the "DeviceList" field.</summary>
    public const int DeviceListFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_deviceList_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> deviceList_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///客户设备列表，保留变量，存储中保持空，
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DeviceList {
      get { return deviceList_; }
    }

    /// <summary>Field number for the "Strategies" field.</summary>
    public const int StrategiesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::SvcPayDataSync.Strategy> _repeated_strategies_codec
        = pb::FieldCodec.ForMessage(114, global::SvcPayDataSync.Strategy.Parser);
    private readonly pbc::RepeatedField<global::SvcPayDataSync.Strategy> strategies_ = new pbc::RepeatedField<global::SvcPayDataSync.Strategy>();
    /// <summary>
    ///商户策略（可插入策略）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SvcPayDataSync.Strategy> Strategies {
      get { return strategies_; }
    }

    /// <summary>Field number for the "DataSHA" field.</summary>
    public const int DataSHAFieldNumber = 15;
    private pb::ByteString dataSHA_ = pb::ByteString.Empty;
    /// <summary>
    ///客户信息的Hash,HEX字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataSHA {
      get { return dataSHA_; }
      set {
        dataSHA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DpItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DpItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DpId != other.DpId) return false;
      if (DpName != other.DpName) return false;
      if (GroupId != other.GroupId) return false;
      if (DbVersion != other.DbVersion) return false;
      if (Reversion != other.Reversion) return false;
      if (!Param.Equals(other.Param)) return false;
      if(!deviceList_.Equals(other.deviceList_)) return false;
      if(!strategies_.Equals(other.strategies_)) return false;
      if (DataSHA != other.DataSHA) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DpId != 0) hash ^= DpId.GetHashCode();
      if (DpName.Length != 0) hash ^= DpName.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (DbVersion != 0L) hash ^= DbVersion.GetHashCode();
      if (Reversion != 0L) hash ^= Reversion.GetHashCode();
      hash ^= Param.GetHashCode();
      hash ^= deviceList_.GetHashCode();
      hash ^= strategies_.GetHashCode();
      if (DataSHA.Length != 0) hash ^= DataSHA.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DpId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DpId);
      }
      if (DpName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DpName);
      }
      if (GroupId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GroupId);
      }
      if (DbVersion != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(DbVersion);
      }
      if (Reversion != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Reversion);
      }
      param_.WriteTo(output, _map_param_codec);
      deviceList_.WriteTo(output, _repeated_deviceList_codec);
      strategies_.WriteTo(output, _repeated_strategies_codec);
      if (DataSHA.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(DataSHA);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpId);
      }
      if (DpName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DpName);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (DbVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DbVersion);
      }
      if (Reversion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reversion);
      }
      size += param_.CalculateSize(_map_param_codec);
      size += deviceList_.CalculateSize(_repeated_deviceList_codec);
      size += strategies_.CalculateSize(_repeated_strategies_codec);
      if (DataSHA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataSHA);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DpItem other) {
      if (other == null) {
        return;
      }
      if (other.DpId != 0) {
        DpId = other.DpId;
      }
      if (other.DpName.Length != 0) {
        DpName = other.DpName;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.DbVersion != 0L) {
        DbVersion = other.DbVersion;
      }
      if (other.Reversion != 0L) {
        Reversion = other.Reversion;
      }
      param_.Add(other.param_);
      deviceList_.Add(other.deviceList_);
      strategies_.Add(other.strategies_);
      if (other.DataSHA.Length != 0) {
        DataSHA = other.DataSHA;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DpId = input.ReadInt32();
            break;
          }
          case 18: {
            DpName = input.ReadString();
            break;
          }
          case 24: {
            GroupId = input.ReadInt32();
            break;
          }
          case 40: {
            DbVersion = input.ReadInt64();
            break;
          }
          case 48: {
            Reversion = input.ReadInt64();
            break;
          }
          case 98: {
            param_.AddEntriesFrom(input, _map_param_codec);
            break;
          }
          case 106: {
            deviceList_.AddEntriesFrom(input, _repeated_deviceList_codec);
            break;
          }
          case 114: {
            strategies_.AddEntriesFrom(input, _repeated_strategies_codec);
            break;
          }
          case 122: {
            DataSHA = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收款商户信息,Key=/Acc/Me/%Dpid%/%MerchantId%
  /// </summary>
  public sealed partial class MerchantItem : pb::IMessage<MerchantItem> {
    private static readonly pb::MessageParser<MerchantItem> _parser = new pb::MessageParser<MerchantItem>(() => new MerchantItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MerchantItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerchantItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerchantItem(MerchantItem other) : this() {
      merchantId_ = other.merchantId_;
      merchantName_ = other.merchantName_;
      dpId_ = other.dpId_;
      dbVersion_ = other.dbVersion_;
      reversion_ = other.reversion_;
      param_ = other.param_.Clone();
      deviceList_ = other.deviceList_.Clone();
      accountList_ = other.accountList_.Clone();
      strategies_ = other.strategies_.Clone();
      dataSHA_ = other.dataSHA_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerchantItem Clone() {
      return new MerchantItem(this);
    }

    /// <summary>Field number for the "MerchantId" field.</summary>
    public const int MerchantIdFieldNumber = 1;
    private string merchantId_ = "";
    /// <summary>
    ///商户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MerchantId {
      get { return merchantId_; }
      set {
        merchantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MerchantName" field.</summary>
    public const int MerchantNameFieldNumber = 2;
    private string merchantName_ = "";
    /// <summary>
    ///商户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MerchantName {
      get { return merchantName_; }
      set {
        merchantName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DpId" field.</summary>
    public const int DpIdFieldNumber = 4;
    private int dpId_;
    /// <summary>
    ///所属客户编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpId {
      get { return dpId_; }
      set {
        dpId_ = value;
      }
    }

    /// <summary>Field number for the "DbVersion" field.</summary>
    public const int DbVersionFieldNumber = 5;
    private long dbVersion_;
    /// <summary>
    ///SQL数据库版本（Version）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DbVersion {
      get { return dbVersion_; }
      set {
        dbVersion_ = value;
      }
    }

    /// <summary>Field number for the "Reversion" field.</summary>
    public const int ReversionFieldNumber = 6;
    private long reversion_;
    /// <summary>
    ///RDB版本（ETCD.ModReversion）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Reversion {
      get { return reversion_; }
      set {
        reversion_ = value;
      }
    }

    /// <summary>Field number for the "Param" field.</summary>
    public const int ParamFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_param_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 58);
    private readonly pbc::MapField<string, string> param_ = new pbc::MapField<string, string>();
    /// <summary>
    ///客户参数数据，用于描述支付过程中使用的参数的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Param {
      get { return param_; }
    }

    /// <summary>Field number for the "DeviceList" field.</summary>
    public const int DeviceListFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_deviceList_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> deviceList_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///商户设备列表，保留变量，存储中保持空，
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DeviceList {
      get { return deviceList_; }
    }

    /// <summary>Field number for the "AccountList" field.</summary>
    public const int AccountListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::SvcPayDataSync.AccountItem> _repeated_accountList_codec
        = pb::FieldCodec.ForMessage(106, global::SvcPayDataSync.AccountItem.Parser);
    private readonly pbc::RepeatedField<global::SvcPayDataSync.AccountItem> accountList_ = new pbc::RepeatedField<global::SvcPayDataSync.AccountItem>();
    /// <summary>
    ///商户账户列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SvcPayDataSync.AccountItem> AccountList {
      get { return accountList_; }
    }

    /// <summary>Field number for the "Strategies" field.</summary>
    public const int StrategiesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::SvcPayDataSync.Strategy> _repeated_strategies_codec
        = pb::FieldCodec.ForMessage(114, global::SvcPayDataSync.Strategy.Parser);
    private readonly pbc::RepeatedField<global::SvcPayDataSync.Strategy> strategies_ = new pbc::RepeatedField<global::SvcPayDataSync.Strategy>();
    /// <summary>
    ///商户策略（可插入策略）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SvcPayDataSync.Strategy> Strategies {
      get { return strategies_; }
    }

    /// <summary>Field number for the "DataSHA" field.</summary>
    public const int DataSHAFieldNumber = 15;
    private pb::ByteString dataSHA_ = pb::ByteString.Empty;
    /// <summary>
    ///商户信息(含账户、策略列表)的Hash,HEX字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataSHA {
      get { return dataSHA_; }
      set {
        dataSHA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MerchantItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MerchantItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MerchantId != other.MerchantId) return false;
      if (MerchantName != other.MerchantName) return false;
      if (DpId != other.DpId) return false;
      if (DbVersion != other.DbVersion) return false;
      if (Reversion != other.Reversion) return false;
      if (!Param.Equals(other.Param)) return false;
      if(!deviceList_.Equals(other.deviceList_)) return false;
      if(!accountList_.Equals(other.accountList_)) return false;
      if(!strategies_.Equals(other.strategies_)) return false;
      if (DataSHA != other.DataSHA) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MerchantId.Length != 0) hash ^= MerchantId.GetHashCode();
      if (MerchantName.Length != 0) hash ^= MerchantName.GetHashCode();
      if (DpId != 0) hash ^= DpId.GetHashCode();
      if (DbVersion != 0L) hash ^= DbVersion.GetHashCode();
      if (Reversion != 0L) hash ^= Reversion.GetHashCode();
      hash ^= Param.GetHashCode();
      hash ^= deviceList_.GetHashCode();
      hash ^= accountList_.GetHashCode();
      hash ^= strategies_.GetHashCode();
      if (DataSHA.Length != 0) hash ^= DataSHA.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MerchantId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MerchantId);
      }
      if (MerchantName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MerchantName);
      }
      if (DpId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DpId);
      }
      if (DbVersion != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(DbVersion);
      }
      if (Reversion != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Reversion);
      }
      param_.WriteTo(output, _map_param_codec);
      deviceList_.WriteTo(output, _repeated_deviceList_codec);
      accountList_.WriteTo(output, _repeated_accountList_codec);
      strategies_.WriteTo(output, _repeated_strategies_codec);
      if (DataSHA.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(DataSHA);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MerchantId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MerchantId);
      }
      if (MerchantName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MerchantName);
      }
      if (DpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpId);
      }
      if (DbVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DbVersion);
      }
      if (Reversion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reversion);
      }
      size += param_.CalculateSize(_map_param_codec);
      size += deviceList_.CalculateSize(_repeated_deviceList_codec);
      size += accountList_.CalculateSize(_repeated_accountList_codec);
      size += strategies_.CalculateSize(_repeated_strategies_codec);
      if (DataSHA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataSHA);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MerchantItem other) {
      if (other == null) {
        return;
      }
      if (other.MerchantId.Length != 0) {
        MerchantId = other.MerchantId;
      }
      if (other.MerchantName.Length != 0) {
        MerchantName = other.MerchantName;
      }
      if (other.DpId != 0) {
        DpId = other.DpId;
      }
      if (other.DbVersion != 0L) {
        DbVersion = other.DbVersion;
      }
      if (other.Reversion != 0L) {
        Reversion = other.Reversion;
      }
      param_.Add(other.param_);
      deviceList_.Add(other.deviceList_);
      accountList_.Add(other.accountList_);
      strategies_.Add(other.strategies_);
      if (other.DataSHA.Length != 0) {
        DataSHA = other.DataSHA;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MerchantId = input.ReadString();
            break;
          }
          case 18: {
            MerchantName = input.ReadString();
            break;
          }
          case 32: {
            DpId = input.ReadInt32();
            break;
          }
          case 40: {
            DbVersion = input.ReadInt64();
            break;
          }
          case 48: {
            Reversion = input.ReadInt64();
            break;
          }
          case 58: {
            param_.AddEntriesFrom(input, _map_param_codec);
            break;
          }
          case 98: {
            deviceList_.AddEntriesFrom(input, _repeated_deviceList_codec);
            break;
          }
          case 106: {
            accountList_.AddEntriesFrom(input, _repeated_accountList_codec);
            break;
          }
          case 114: {
            strategies_.AddEntriesFrom(input, _repeated_strategies_codec);
            break;
          }
          case 122: {
            DataSHA = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///支付设备信息,Key=/Acc/Dev/%DeviceId%
  /// </summary>
  public sealed partial class DeviceInfoItem : pb::IMessage<DeviceInfoItem> {
    private static readonly pb::MessageParser<DeviceInfoItem> _parser = new pb::MessageParser<DeviceInfoItem>(() => new DeviceInfoItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceInfoItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfoItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfoItem(DeviceInfoItem other) : this() {
      deviceId_ = other.deviceId_;
      deviceName_ = other.deviceName_;
      dpId_ = other.dpId_;
      merchantId_ = other.merchantId_;
      groupId_ = other.groupId_;
      deviceType_ = other.deviceType_;
      dbVersion_ = other.dbVersion_;
      reversion_ = other.reversion_;
      param_ = other.param_.Clone();
      localBalance_ = other.localBalance_;
      openTime_ = other.openTime_;
      Dp = other.dp_ != null ? other.Dp.Clone() : null;
      Merchant = other.merchant_ != null ? other.Merchant.Clone() : null;
      deviceStatusKey_ = other.deviceStatusKey_;
      dataSHA_ = other.dataSHA_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfoItem Clone() {
      return new DeviceInfoItem(this);
    }

    /// <summary>Field number for the "DeviceId" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    /// <summary>
    ///DeviceID 设备标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeviceName" field.</summary>
    public const int DeviceNameFieldNumber = 2;
    private string deviceName_ = "";
    /// <summary>
    ///DeviceName 设备名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DpId" field.</summary>
    public const int DpIdFieldNumber = 3;
    private int dpId_;
    /// <summary>
    ///DpId 客户编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpId {
      get { return dpId_; }
      set {
        dpId_ = value;
      }
    }

    /// <summary>Field number for the "MerchantId" field.</summary>
    public const int MerchantIdFieldNumber = 4;
    private int merchantId_;
    /// <summary>
    ///MerchantId 收款商户编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MerchantId {
      get { return merchantId_; }
      set {
        merchantId_ = value;
      }
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 5;
    private int groupId_;
    /// <summary>
    ///GroupId 分组编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "DeviceType" field.</summary>
    public const int DeviceTypeFieldNumber = 6;
    private int deviceType_;
    /// <summary>
    ///DeviceType 设备类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = value;
      }
    }

    /// <summary>Field number for the "DbVersion" field.</summary>
    public const int DbVersionFieldNumber = 7;
    private long dbVersion_;
    /// <summary>
    ///SQL数据库版本（Version）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DbVersion {
      get { return dbVersion_; }
      set {
        dbVersion_ = value;
      }
    }

    /// <summary>Field number for the "Reversion" field.</summary>
    public const int ReversionFieldNumber = 8;
    private long reversion_;
    /// <summary>
    ///RDB版本（ETCD.ModReversion）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Reversion {
      get { return reversion_; }
      set {
        reversion_ = value;
      }
    }

    /// <summary>Field number for the "Param" field.</summary>
    public const int ParamFieldNumber = 9;
    private static readonly pbc::MapField<string, string>.Codec _map_param_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 74);
    private readonly pbc::MapField<string, string> param_ = new pbc::MapField<string, string>();
    /// <summary>
    ///客户参数数据，用于描述支付过程中使用的参数的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Param {
      get { return param_; }
    }

    /// <summary>Field number for the "LocalBalance" field.</summary>
    public const int LocalBalanceFieldNumber = 10;
    private int localBalance_;
    /// <summary>
    ///本地余额（单位RMB分），存储为空，缓存中使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocalBalance {
      get { return localBalance_; }
      set {
        localBalance_ = value;
      }
    }

    /// <summary>Field number for the "OpenTime" field.</summary>
    public const int OpenTimeFieldNumber = 11;
    private long openTime_;
    /// <summary>
    ///余额启用时间(UnixTime ms)，存储为空，缓存中使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "Dp" field.</summary>
    public const int DpFieldNumber = 12;
    private global::SvcPayDataSync.DpItem dp_;
    /// <summary>
    ///客户/租户信息，存储为空，缓存中使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SvcPayDataSync.DpItem Dp {
      get { return dp_; }
      set {
        dp_ = value;
      }
    }

    /// <summary>Field number for the "Merchant" field.</summary>
    public const int MerchantFieldNumber = 13;
    private global::SvcPayDataSync.MerchantItem merchant_;
    /// <summary>
    ///商户信息，存储为空，缓存中使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SvcPayDataSync.MerchantItem Merchant {
      get { return merchant_; }
      set {
        merchant_ = value;
      }
    }

    /// <summary>Field number for the "DeviceStatusKey" field.</summary>
    public const int DeviceStatusKeyFieldNumber = 14;
    private pb::ByteString deviceStatusKey_ = pb::ByteString.Empty;
    /// <summary>
    ///设备运行状态结构的键值（备用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeviceStatusKey {
      get { return deviceStatusKey_; }
      set {
        deviceStatusKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataSHA" field.</summary>
    public const int DataSHAFieldNumber = 15;
    private pb::ByteString dataSHA_ = pb::ByteString.Empty;
    /// <summary>
    ///设备信息的Hash,HEX字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataSHA {
      get { return dataSHA_; }
      set {
        dataSHA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceInfoItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceInfoItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (DeviceName != other.DeviceName) return false;
      if (DpId != other.DpId) return false;
      if (MerchantId != other.MerchantId) return false;
      if (GroupId != other.GroupId) return false;
      if (DeviceType != other.DeviceType) return false;
      if (DbVersion != other.DbVersion) return false;
      if (Reversion != other.Reversion) return false;
      if (!Param.Equals(other.Param)) return false;
      if (LocalBalance != other.LocalBalance) return false;
      if (OpenTime != other.OpenTime) return false;
      if (!object.Equals(Dp, other.Dp)) return false;
      if (!object.Equals(Merchant, other.Merchant)) return false;
      if (DeviceStatusKey != other.DeviceStatusKey) return false;
      if (DataSHA != other.DataSHA) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (DpId != 0) hash ^= DpId.GetHashCode();
      if (MerchantId != 0) hash ^= MerchantId.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
      if (DbVersion != 0L) hash ^= DbVersion.GetHashCode();
      if (Reversion != 0L) hash ^= Reversion.GetHashCode();
      hash ^= Param.GetHashCode();
      if (LocalBalance != 0) hash ^= LocalBalance.GetHashCode();
      if (OpenTime != 0L) hash ^= OpenTime.GetHashCode();
      if (dp_ != null) hash ^= Dp.GetHashCode();
      if (merchant_ != null) hash ^= Merchant.GetHashCode();
      if (DeviceStatusKey.Length != 0) hash ^= DeviceStatusKey.GetHashCode();
      if (DataSHA.Length != 0) hash ^= DataSHA.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceId);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceName);
      }
      if (DpId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DpId);
      }
      if (MerchantId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MerchantId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GroupId);
      }
      if (DeviceType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeviceType);
      }
      if (DbVersion != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(DbVersion);
      }
      if (Reversion != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Reversion);
      }
      param_.WriteTo(output, _map_param_codec);
      if (LocalBalance != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LocalBalance);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(OpenTime);
      }
      if (dp_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Dp);
      }
      if (merchant_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Merchant);
      }
      if (DeviceStatusKey.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(DeviceStatusKey);
      }
      if (DataSHA.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(DataSHA);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (DpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpId);
      }
      if (MerchantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MerchantId);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (DeviceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceType);
      }
      if (DbVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DbVersion);
      }
      if (Reversion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reversion);
      }
      size += param_.CalculateSize(_map_param_codec);
      if (LocalBalance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocalBalance);
      }
      if (OpenTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpenTime);
      }
      if (dp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dp);
      }
      if (merchant_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Merchant);
      }
      if (DeviceStatusKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeviceStatusKey);
      }
      if (DataSHA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataSHA);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceInfoItem other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.DpId != 0) {
        DpId = other.DpId;
      }
      if (other.MerchantId != 0) {
        MerchantId = other.MerchantId;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.DeviceType != 0) {
        DeviceType = other.DeviceType;
      }
      if (other.DbVersion != 0L) {
        DbVersion = other.DbVersion;
      }
      if (other.Reversion != 0L) {
        Reversion = other.Reversion;
      }
      param_.Add(other.param_);
      if (other.LocalBalance != 0) {
        LocalBalance = other.LocalBalance;
      }
      if (other.OpenTime != 0L) {
        OpenTime = other.OpenTime;
      }
      if (other.dp_ != null) {
        if (dp_ == null) {
          dp_ = new global::SvcPayDataSync.DpItem();
        }
        Dp.MergeFrom(other.Dp);
      }
      if (other.merchant_ != null) {
        if (merchant_ == null) {
          merchant_ = new global::SvcPayDataSync.MerchantItem();
        }
        Merchant.MergeFrom(other.Merchant);
      }
      if (other.DeviceStatusKey.Length != 0) {
        DeviceStatusKey = other.DeviceStatusKey;
      }
      if (other.DataSHA.Length != 0) {
        DataSHA = other.DataSHA;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DeviceId = input.ReadString();
            break;
          }
          case 18: {
            DeviceName = input.ReadString();
            break;
          }
          case 24: {
            DpId = input.ReadInt32();
            break;
          }
          case 32: {
            MerchantId = input.ReadInt32();
            break;
          }
          case 40: {
            GroupId = input.ReadInt32();
            break;
          }
          case 48: {
            DeviceType = input.ReadInt32();
            break;
          }
          case 56: {
            DbVersion = input.ReadInt64();
            break;
          }
          case 64: {
            Reversion = input.ReadInt64();
            break;
          }
          case 74: {
            param_.AddEntriesFrom(input, _map_param_codec);
            break;
          }
          case 80: {
            LocalBalance = input.ReadInt32();
            break;
          }
          case 88: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 98: {
            if (dp_ == null) {
              dp_ = new global::SvcPayDataSync.DpItem();
            }
            input.ReadMessage(dp_);
            break;
          }
          case 106: {
            if (merchant_ == null) {
              merchant_ = new global::SvcPayDataSync.MerchantItem();
            }
            input.ReadMessage(merchant_);
            break;
          }
          case 114: {
            DeviceStatusKey = input.ReadBytes();
            break;
          }
          case 122: {
            DataSHA = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///支付用户信息,Key=/Acc/User/%Dpid%/%UserId%
  /// </summary>
  public sealed partial class PayUserItem : pb::IMessage<PayUserItem> {
    private static readonly pb::MessageParser<PayUserItem> _parser = new pb::MessageParser<PayUserItem>(() => new PayUserItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayUserItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayUserItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayUserItem(PayUserItem other) : this() {
      userId_ = other.userId_;
      userName_ = other.userName_;
      dpId_ = other.dpId_;
      dbVersion_ = other.dbVersion_;
      reversion_ = other.reversion_;
      metaData_ = other.metaData_.Clone();
      accountList_ = other.accountList_.Clone();
      strategies_ = other.strategies_.Clone();
      dataSHA_ = other.dataSHA_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayUserItem Clone() {
      return new PayUserItem(this);
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    ///用户ID//一卡通账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DpId" field.</summary>
    public const int DpIdFieldNumber = 4;
    private int dpId_;
    /// <summary>
    ///所属客户编号,多业主时使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpId {
      get { return dpId_; }
      set {
        dpId_ = value;
      }
    }

    /// <summary>Field number for the "DbVersion" field.</summary>
    public const int DbVersionFieldNumber = 5;
    private long dbVersion_;
    /// <summary>
    ///SQL数据库版本（Version）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DbVersion {
      get { return dbVersion_; }
      set {
        dbVersion_ = value;
      }
    }

    /// <summary>Field number for the "Reversion" field.</summary>
    public const int ReversionFieldNumber = 6;
    private long reversion_;
    /// <summary>
    ///RDB版本（ETCD.ModReversion）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Reversion {
      get { return reversion_; }
      set {
        reversion_ = value;
      }
    }

    /// <summary>Field number for the "MetaData" field.</summary>
    public const int MetaDataFieldNumber = 12;
    private static readonly pbc::MapField<string, string>.Codec _map_metaData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 98);
    private readonly pbc::MapField<string, string> metaData_ = new pbc::MapField<string, string>();
    /// <summary>
    ///用户杂项元数据，用于表达与用户关联的数据项的KEY（例如：人脸验证时的用户人脸数据项结构）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> MetaData {
      get { return metaData_; }
    }

    /// <summary>Field number for the "AccountList" field.</summary>
    public const int AccountListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::SvcPayDataSync.AccountItem> _repeated_accountList_codec
        = pb::FieldCodec.ForMessage(106, global::SvcPayDataSync.AccountItem.Parser);
    private readonly pbc::RepeatedField<global::SvcPayDataSync.AccountItem> accountList_ = new pbc::RepeatedField<global::SvcPayDataSync.AccountItem>();
    /// <summary>
    ///用户账户列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SvcPayDataSync.AccountItem> AccountList {
      get { return accountList_; }
    }

    /// <summary>Field number for the "Strategies" field.</summary>
    public const int StrategiesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::SvcPayDataSync.Strategy> _repeated_strategies_codec
        = pb::FieldCodec.ForMessage(114, global::SvcPayDataSync.Strategy.Parser);
    private readonly pbc::RepeatedField<global::SvcPayDataSync.Strategy> strategies_ = new pbc::RepeatedField<global::SvcPayDataSync.Strategy>();
    /// <summary>
    ///用户策略（可插入策略）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SvcPayDataSync.Strategy> Strategies {
      get { return strategies_; }
    }

    /// <summary>Field number for the "DataSHA" field.</summary>
    public const int DataSHAFieldNumber = 15;
    private pb::ByteString dataSHA_ = pb::ByteString.Empty;
    /// <summary>
    ///用户信息(含账户、策略列表)的Hash,HEX字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataSHA {
      get { return dataSHA_; }
      set {
        dataSHA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayUserItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayUserItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (DpId != other.DpId) return false;
      if (DbVersion != other.DbVersion) return false;
      if (Reversion != other.Reversion) return false;
      if (!MetaData.Equals(other.MetaData)) return false;
      if(!accountList_.Equals(other.accountList_)) return false;
      if(!strategies_.Equals(other.strategies_)) return false;
      if (DataSHA != other.DataSHA) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (DpId != 0) hash ^= DpId.GetHashCode();
      if (DbVersion != 0L) hash ^= DbVersion.GetHashCode();
      if (Reversion != 0L) hash ^= Reversion.GetHashCode();
      hash ^= MetaData.GetHashCode();
      hash ^= accountList_.GetHashCode();
      hash ^= strategies_.GetHashCode();
      if (DataSHA.Length != 0) hash ^= DataSHA.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (DpId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DpId);
      }
      if (DbVersion != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(DbVersion);
      }
      if (Reversion != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Reversion);
      }
      metaData_.WriteTo(output, _map_metaData_codec);
      accountList_.WriteTo(output, _repeated_accountList_codec);
      strategies_.WriteTo(output, _repeated_strategies_codec);
      if (DataSHA.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(DataSHA);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (DpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpId);
      }
      if (DbVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DbVersion);
      }
      if (Reversion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reversion);
      }
      size += metaData_.CalculateSize(_map_metaData_codec);
      size += accountList_.CalculateSize(_repeated_accountList_codec);
      size += strategies_.CalculateSize(_repeated_strategies_codec);
      if (DataSHA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataSHA);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayUserItem other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.DpId != 0) {
        DpId = other.DpId;
      }
      if (other.DbVersion != 0L) {
        DbVersion = other.DbVersion;
      }
      if (other.Reversion != 0L) {
        Reversion = other.Reversion;
      }
      metaData_.Add(other.metaData_);
      accountList_.Add(other.accountList_);
      strategies_.Add(other.strategies_);
      if (other.DataSHA.Length != 0) {
        DataSHA = other.DataSHA;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 32: {
            DpId = input.ReadInt32();
            break;
          }
          case 40: {
            DbVersion = input.ReadInt64();
            break;
          }
          case 48: {
            Reversion = input.ReadInt64();
            break;
          }
          case 98: {
            metaData_.AddEntriesFrom(input, _map_metaData_codec);
            break;
          }
          case 106: {
            accountList_.AddEntriesFrom(input, _repeated_accountList_codec);
            break;
          }
          case 114: {
            strategies_.AddEntriesFrom(input, _repeated_strategies_codec);
            break;
          }
          case 122: {
            DataSHA = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户账户信息
  /// </summary>
  public sealed partial class AccountItem : pb::IMessage<AccountItem> {
    private static readonly pb::MessageParser<AccountItem> _parser = new pb::MessageParser<AccountItem>(() => new AccountItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountItem(AccountItem other) : this() {
      index_ = other.index_;
      accNo_ = other.accNo_;
      accType_ = other.accType_;
      accId_ = other.accId_;
      accStatus_ = other.accStatus_;
      balance_ = other.balance_;
      openingBalance_ = other.openingBalance_;
      localBalance_ = other.localBalance_;
      cardPWD_ = other.cardPWD_;
      accMetaData_ = other.accMetaData_.Clone();
      openTime_ = other.openTime_;
      closeTime_ = other.closeTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountItem Clone() {
      return new AccountItem(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///序号（个人信息中的账户排列序号，排序用，无实用意义）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "AccNo" field.</summary>
    public const int AccNoFieldNumber = 2;
    private string accNo_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccNo {
      get { return accNo_; }
      set {
        accNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccType" field.</summary>
    public const int AccTypeFieldNumber = 3;
    private int accType_;
    /// <summary>
    ///账户类型(根据支付业务需要，定义的与支付业务处理对应的类型编码)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccType {
      get { return accType_; }
      set {
        accType_ = value;
      }
    }

    /// <summary>Field number for the "AccId" field.</summary>
    public const int AccIdFieldNumber = 4;
    private string accId_ = "";
    /// <summary>
    ///账号寻址标识（CARDNO/APPID等）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccId {
      get { return accId_; }
      set {
        accId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccStatus" field.</summary>
    public const int AccStatusFieldNumber = 5;
    private int accStatus_;
    /// <summary>
    ///账户状态 FixMe 需要么？
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccStatus {
      get { return accStatus_; }
      set {
        accStatus_ = value;
      }
    }

    /// <summary>Field number for the "Balance" field.</summary>
    public const int BalanceFieldNumber = 6;
    private int balance_;
    /// <summary>
    ///余额（单位RMB分或其他货币最小币值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "OpeningBalance" field.</summary>
    public const int OpeningBalanceFieldNumber = 7;
    private int openingBalance_;
    /// <summary>
    ///期初余额（单位RMB分）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpeningBalance {
      get { return openingBalance_; }
      set {
        openingBalance_ = value;
      }
    }

    /// <summary>Field number for the "LocalBalance" field.</summary>
    public const int LocalBalanceFieldNumber = 8;
    private int localBalance_;
    /// <summary>
    ///本地余额（单位RMB分）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocalBalance {
      get { return localBalance_; }
      set {
        localBalance_ = value;
      }
    }

    /// <summary>Field number for the "CardPWD" field.</summary>
    public const int CardPWDFieldNumber = 9;
    private string cardPWD_ = "";
    /// <summary>
    ///卡消费密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardPWD {
      get { return cardPWD_; }
      set {
        cardPWD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccMetaData" field.</summary>
    public const int AccMetaDataFieldNumber = 12;
    private static readonly pbc::MapField<string, string>.Codec _map_accMetaData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 98);
    private readonly pbc::MapField<string, string> accMetaData_ = new pbc::MapField<string, string>();
    /// <summary>
    ///账户元数据，用于描述支付过程中使用的非标准参数的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> AccMetaData {
      get { return accMetaData_; }
    }

    /// <summary>Field number for the "OpenTime" field.</summary>
    public const int OpenTimeFieldNumber = 13;
    private long openTime_;
    /// <summary>
    ///启用时间(UnixTime ms)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "CloseTime" field.</summary>
    public const int CloseTimeFieldNumber = 14;
    private long closeTime_;
    /// <summary>
    ///终止时间(UnixTime ms)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CloseTime {
      get { return closeTime_; }
      set {
        closeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (AccNo != other.AccNo) return false;
      if (AccType != other.AccType) return false;
      if (AccId != other.AccId) return false;
      if (AccStatus != other.AccStatus) return false;
      if (Balance != other.Balance) return false;
      if (OpeningBalance != other.OpeningBalance) return false;
      if (LocalBalance != other.LocalBalance) return false;
      if (CardPWD != other.CardPWD) return false;
      if (!AccMetaData.Equals(other.AccMetaData)) return false;
      if (OpenTime != other.OpenTime) return false;
      if (CloseTime != other.CloseTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (AccNo.Length != 0) hash ^= AccNo.GetHashCode();
      if (AccType != 0) hash ^= AccType.GetHashCode();
      if (AccId.Length != 0) hash ^= AccId.GetHashCode();
      if (AccStatus != 0) hash ^= AccStatus.GetHashCode();
      if (Balance != 0) hash ^= Balance.GetHashCode();
      if (OpeningBalance != 0) hash ^= OpeningBalance.GetHashCode();
      if (LocalBalance != 0) hash ^= LocalBalance.GetHashCode();
      if (CardPWD.Length != 0) hash ^= CardPWD.GetHashCode();
      hash ^= AccMetaData.GetHashCode();
      if (OpenTime != 0L) hash ^= OpenTime.GetHashCode();
      if (CloseTime != 0L) hash ^= CloseTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (AccNo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccNo);
      }
      if (AccType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AccType);
      }
      if (AccId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AccId);
      }
      if (AccStatus != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AccStatus);
      }
      if (Balance != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Balance);
      }
      if (OpeningBalance != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OpeningBalance);
      }
      if (LocalBalance != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LocalBalance);
      }
      if (CardPWD.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CardPWD);
      }
      accMetaData_.WriteTo(output, _map_accMetaData_codec);
      if (OpenTime != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(OpenTime);
      }
      if (CloseTime != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(CloseTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (AccNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccNo);
      }
      if (AccType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccType);
      }
      if (AccId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccId);
      }
      if (AccStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccStatus);
      }
      if (Balance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Balance);
      }
      if (OpeningBalance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpeningBalance);
      }
      if (LocalBalance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocalBalance);
      }
      if (CardPWD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardPWD);
      }
      size += accMetaData_.CalculateSize(_map_accMetaData_codec);
      if (OpenTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpenTime);
      }
      if (CloseTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CloseTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountItem other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.AccNo.Length != 0) {
        AccNo = other.AccNo;
      }
      if (other.AccType != 0) {
        AccType = other.AccType;
      }
      if (other.AccId.Length != 0) {
        AccId = other.AccId;
      }
      if (other.AccStatus != 0) {
        AccStatus = other.AccStatus;
      }
      if (other.Balance != 0) {
        Balance = other.Balance;
      }
      if (other.OpeningBalance != 0) {
        OpeningBalance = other.OpeningBalance;
      }
      if (other.LocalBalance != 0) {
        LocalBalance = other.LocalBalance;
      }
      if (other.CardPWD.Length != 0) {
        CardPWD = other.CardPWD;
      }
      accMetaData_.Add(other.accMetaData_);
      if (other.OpenTime != 0L) {
        OpenTime = other.OpenTime;
      }
      if (other.CloseTime != 0L) {
        CloseTime = other.CloseTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            AccNo = input.ReadString();
            break;
          }
          case 24: {
            AccType = input.ReadInt32();
            break;
          }
          case 34: {
            AccId = input.ReadString();
            break;
          }
          case 40: {
            AccStatus = input.ReadInt32();
            break;
          }
          case 48: {
            Balance = input.ReadInt32();
            break;
          }
          case 56: {
            OpeningBalance = input.ReadInt32();
            break;
          }
          case 64: {
            LocalBalance = input.ReadInt32();
            break;
          }
          case 74: {
            CardPWD = input.ReadString();
            break;
          }
          case 98: {
            accMetaData_.AddEntriesFrom(input, _map_accMetaData_codec);
            break;
          }
          case 104: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 112: {
            CloseTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户策略
  /// </summary>
  public sealed partial class Strategy : pb::IMessage<Strategy> {
    private static readonly pb::MessageParser<Strategy> _parser = new pb::MessageParser<Strategy>(() => new Strategy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Strategy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strategy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strategy(Strategy other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strategy Clone() {
      return new Strategy(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Strategy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Strategy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Strategy other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///支付设备缓存,用于支付节点内存中缓存索引，/Cache/Device/%DeviceId%
  ///暂时没用
  /// </summary>
  public sealed partial class DeciceCache : pb::IMessage<DeciceCache> {
    private static readonly pb::MessageParser<DeciceCache> _parser = new pb::MessageParser<DeciceCache>(() => new DeciceCache());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeciceCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeciceCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeciceCache(DeciceCache other) : this() {
      deviceId_ = other.deviceId_;
      deviceName_ = other.deviceName_;
      dpId_ = other.dpId_;
      deviceType_ = other.deviceType_;
      Merchant = other.merchant_ != null ? other.Merchant.Clone() : null;
      featureVer_ = other.featureVer_;
      userIdArray_ = other.userIdArray_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeciceCache Clone() {
      return new DeciceCache(this);
    }

    /// <summary>Field number for the "DeviceId" field.</summary>
    public const int DeviceIdFieldNumber = 2;
    private string deviceId_ = "";
    /// <summary>
    ///DeviceID 设备标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeviceName" field.</summary>
    public const int DeviceNameFieldNumber = 3;
    private string deviceName_ = "";
    /// <summary>
    ///DeviceName 设备名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DpId" field.</summary>
    public const int DpIdFieldNumber = 4;
    private int dpId_;
    /// <summary>
    ///DpId 客户编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpId {
      get { return dpId_; }
      set {
        dpId_ = value;
      }
    }

    /// <summary>Field number for the "DeviceType" field.</summary>
    public const int DeviceTypeFieldNumber = 5;
    private int deviceType_;
    /// <summary>
    ///DeviceType 设备类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = value;
      }
    }

    /// <summary>Field number for the "Merchant" field.</summary>
    public const int MerchantFieldNumber = 6;
    private global::SvcPayDataSync.MerchantItem merchant_;
    /// <summary>
    ///商户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SvcPayDataSync.MerchantItem Merchant {
      get { return merchant_; }
      set {
        merchant_ = value;
      }
    }

    /// <summary>Field number for the "FeatureVer" field.</summary>
    public const int FeatureVerFieldNumber = 7;
    private string featureVer_ = "";
    /// <summary>
    ///客户/租户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureVer {
      get { return featureVer_; }
      set {
        featureVer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserIdArray" field.</summary>
    public const int UserIdArrayFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_userIdArray_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> userIdArray_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///UserInfoArray设备的用户列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIdArray {
      get { return userIdArray_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeciceCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeciceCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (DeviceName != other.DeviceName) return false;
      if (DpId != other.DpId) return false;
      if (DeviceType != other.DeviceType) return false;
      if (!object.Equals(Merchant, other.Merchant)) return false;
      if (FeatureVer != other.FeatureVer) return false;
      if(!userIdArray_.Equals(other.userIdArray_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (DpId != 0) hash ^= DpId.GetHashCode();
      if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
      if (merchant_ != null) hash ^= Merchant.GetHashCode();
      if (FeatureVer.Length != 0) hash ^= FeatureVer.GetHashCode();
      hash ^= userIdArray_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceId);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceName);
      }
      if (DpId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DpId);
      }
      if (DeviceType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DeviceType);
      }
      if (merchant_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Merchant);
      }
      if (FeatureVer.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FeatureVer);
      }
      userIdArray_.WriteTo(output, _repeated_userIdArray_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (DpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpId);
      }
      if (DeviceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceType);
      }
      if (merchant_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Merchant);
      }
      if (FeatureVer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureVer);
      }
      size += userIdArray_.CalculateSize(_repeated_userIdArray_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeciceCache other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.DpId != 0) {
        DpId = other.DpId;
      }
      if (other.DeviceType != 0) {
        DeviceType = other.DeviceType;
      }
      if (other.merchant_ != null) {
        if (merchant_ == null) {
          merchant_ = new global::SvcPayDataSync.MerchantItem();
        }
        Merchant.MergeFrom(other.Merchant);
      }
      if (other.FeatureVer.Length != 0) {
        FeatureVer = other.FeatureVer;
      }
      userIdArray_.Add(other.userIdArray_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            DeviceId = input.ReadString();
            break;
          }
          case 26: {
            DeviceName = input.ReadString();
            break;
          }
          case 32: {
            DpId = input.ReadInt32();
            break;
          }
          case 40: {
            DeviceType = input.ReadInt32();
            break;
          }
          case 50: {
            if (merchant_ == null) {
              merchant_ = new global::SvcPayDataSync.MerchantItem();
            }
            input.ReadMessage(merchant_);
            break;
          }
          case 58: {
            FeatureVer = input.ReadString();
            break;
          }
          case 66: {
            userIdArray_.AddEntriesFrom(input, _repeated_userIdArray_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///支付记录
  /// </summary>
  public sealed partial class PaymentRecordItem : pb::IMessage<PaymentRecordItem> {
    private static readonly pb::MessageParser<PaymentRecordItem> _parser = new pb::MessageParser<PaymentRecordItem>(() => new PaymentRecordItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentRecordItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentRecordItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentRecordItem(PaymentRecordItem other) : this() {
      orderId_ = other.orderId_;
      dpId_ = other.dpId_;
      deviceId_ = other.deviceId_;
      userId_ = other.userId_;
      uAccNo_ = other.uAccNo_;
      uAccType_ = other.uAccType_;
      merchantId_ = other.merchantId_;
      mAccNo_ = other.mAccNo_;
      mAccType_ = other.mAccType_;
      balance_ = other.balance_;
      payAmount_ = other.payAmount_;
      accStatus_ = other.accStatus_;
      recMetaData_ = other.recMetaData_.Clone();
      reqTime_ = other.reqTime_;
      accTime_ = other.accTime_;
      credentials_ = other.credentials_;
      payType_ = other.payType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentRecordItem Clone() {
      return new PaymentRecordItem(this);
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private string orderId_ = "";
    /// <summary>
    ///订单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DpId" field.</summary>
    public const int DpIdFieldNumber = 2;
    private int dpId_;
    /// <summary>
    ///所属客户编号,多业主时使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpId {
      get { return dpId_; }
      set {
        dpId_ = value;
      }
    }

    /// <summary>Field number for the "DeviceId" field.</summary>
    public const int DeviceIdFieldNumber = 3;
    private string deviceId_ = "";
    /// <summary>
    ///支付设备Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private string userId_ = "";
    /// <summary>
    ///用户ID//一卡通账号;无身份第三方支付:为空，支付信息在支付凭据中体现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UAccNo" field.</summary>
    public const int UAccNoFieldNumber = 5;
    private string uAccNo_ = "";
    /// <summary>
    ///用户账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UAccNo {
      get { return uAccNo_; }
      set {
        uAccNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UAccType" field.</summary>
    public const int UAccTypeFieldNumber = 6;
    private int uAccType_;
    /// <summary>
    ///账户类型(根据支付业务需要，定义的与支付业务处理对应的类型编码)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UAccType {
      get { return uAccType_; }
      set {
        uAccType_ = value;
      }
    }

    /// <summary>Field number for the "MerchantId" field.</summary>
    public const int MerchantIdFieldNumber = 7;
    private string merchantId_ = "";
    /// <summary>
    ///商户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MerchantId {
      get { return merchantId_; }
      set {
        merchantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MAccNo" field.</summary>
    public const int MAccNoFieldNumber = 8;
    private string mAccNo_ = "";
    /// <summary>
    ///商户账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MAccNo {
      get { return mAccNo_; }
      set {
        mAccNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MAccType" field.</summary>
    public const int MAccTypeFieldNumber = 9;
    private int mAccType_;
    /// <summary>
    ///商户账户类型(根据支付业务需要，定义的与支付业务处理对应的类型编码)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MAccType {
      get { return mAccType_; }
      set {
        mAccType_ = value;
      }
    }

    /// <summary>Field number for the "Balance" field.</summary>
    public const int BalanceFieldNumber = 10;
    private int balance_;
    /// <summary>
    ///用户账户余额（单位RMB分或其他货币最小币值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "PayAmount" field.</summary>
    public const int PayAmountFieldNumber = 11;
    private int payAmount_;
    /// <summary>
    ///支付额（单位RMB分）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayAmount {
      get { return payAmount_; }
      set {
        payAmount_ = value;
      }
    }

    /// <summary>Field number for the "AccStatus" field.</summary>
    public const int AccStatusFieldNumber = 12;
    private int accStatus_;
    /// <summary>
    ///订单状态(支付、记账、未决、坏账、错误...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccStatus {
      get { return accStatus_; }
      set {
        accStatus_ = value;
      }
    }

    /// <summary>Field number for the "RecMetaData" field.</summary>
    public const int RecMetaDataFieldNumber = 13;
    private static readonly pbc::MapField<string, string>.Codec _map_recMetaData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 106);
    private readonly pbc::MapField<string, string> recMetaData_ = new pbc::MapField<string, string>();
    /// <summary>
    ///账户元数据，用于描述支付过程中使用的非标准参数的数据,应用的策略集合、人脸支付时的抓拍照片等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> RecMetaData {
      get { return recMetaData_; }
    }

    /// <summary>Field number for the "ReqTime" field.</summary>
    public const int ReqTimeFieldNumber = 14;
    private string reqTime_ = "";
    /// <summary>
    ///请求时间(UnixTime ms)/暂时用字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReqTime {
      get { return reqTime_; }
      set {
        reqTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccTime" field.</summary>
    public const int AccTimeFieldNumber = 15;
    private string accTime_ = "";
    /// <summary>
    ///记账时间(UnixTime ms)/暂时用字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccTime {
      get { return accTime_; }
      set {
        accTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Credentials" field.</summary>
    public const int CredentialsFieldNumber = 16;
    private pb::ByteString credentials_ = pb::ByteString.Empty;
    /// <summary>
    ///支付凭据,JSON字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Credentials {
      get { return credentials_; }
      set {
        credentials_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PayType" field.</summary>
    public const int PayTypeFieldNumber = 17;
    private global::PaymentCredentialsType payType_ = 0;
    /// <summary>
    ///支付凭据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PaymentCredentialsType PayType {
      get { return payType_; }
      set {
        payType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentRecordItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentRecordItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (DpId != other.DpId) return false;
      if (DeviceId != other.DeviceId) return false;
      if (UserId != other.UserId) return false;
      if (UAccNo != other.UAccNo) return false;
      if (UAccType != other.UAccType) return false;
      if (MerchantId != other.MerchantId) return false;
      if (MAccNo != other.MAccNo) return false;
      if (MAccType != other.MAccType) return false;
      if (Balance != other.Balance) return false;
      if (PayAmount != other.PayAmount) return false;
      if (AccStatus != other.AccStatus) return false;
      if (!RecMetaData.Equals(other.RecMetaData)) return false;
      if (ReqTime != other.ReqTime) return false;
      if (AccTime != other.AccTime) return false;
      if (Credentials != other.Credentials) return false;
      if (PayType != other.PayType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (DpId != 0) hash ^= DpId.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (UAccNo.Length != 0) hash ^= UAccNo.GetHashCode();
      if (UAccType != 0) hash ^= UAccType.GetHashCode();
      if (MerchantId.Length != 0) hash ^= MerchantId.GetHashCode();
      if (MAccNo.Length != 0) hash ^= MAccNo.GetHashCode();
      if (MAccType != 0) hash ^= MAccType.GetHashCode();
      if (Balance != 0) hash ^= Balance.GetHashCode();
      if (PayAmount != 0) hash ^= PayAmount.GetHashCode();
      if (AccStatus != 0) hash ^= AccStatus.GetHashCode();
      hash ^= RecMetaData.GetHashCode();
      if (ReqTime.Length != 0) hash ^= ReqTime.GetHashCode();
      if (AccTime.Length != 0) hash ^= AccTime.GetHashCode();
      if (Credentials.Length != 0) hash ^= Credentials.GetHashCode();
      if (PayType != 0) hash ^= PayType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (DpId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DpId);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserId);
      }
      if (UAccNo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UAccNo);
      }
      if (UAccType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UAccType);
      }
      if (MerchantId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MerchantId);
      }
      if (MAccNo.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MAccNo);
      }
      if (MAccType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MAccType);
      }
      if (Balance != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Balance);
      }
      if (PayAmount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PayAmount);
      }
      if (AccStatus != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AccStatus);
      }
      recMetaData_.WriteTo(output, _map_recMetaData_codec);
      if (ReqTime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ReqTime);
      }
      if (AccTime.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(AccTime);
      }
      if (Credentials.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(Credentials);
      }
      if (PayType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) PayType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (DpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpId);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (UAccNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UAccNo);
      }
      if (UAccType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UAccType);
      }
      if (MerchantId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MerchantId);
      }
      if (MAccNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MAccNo);
      }
      if (MAccType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MAccType);
      }
      if (Balance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Balance);
      }
      if (PayAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayAmount);
      }
      if (AccStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccStatus);
      }
      size += recMetaData_.CalculateSize(_map_recMetaData_codec);
      if (ReqTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReqTime);
      }
      if (AccTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccTime);
      }
      if (Credentials.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Credentials);
      }
      if (PayType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PayType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentRecordItem other) {
      if (other == null) {
        return;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.DpId != 0) {
        DpId = other.DpId;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.UAccNo.Length != 0) {
        UAccNo = other.UAccNo;
      }
      if (other.UAccType != 0) {
        UAccType = other.UAccType;
      }
      if (other.MerchantId.Length != 0) {
        MerchantId = other.MerchantId;
      }
      if (other.MAccNo.Length != 0) {
        MAccNo = other.MAccNo;
      }
      if (other.MAccType != 0) {
        MAccType = other.MAccType;
      }
      if (other.Balance != 0) {
        Balance = other.Balance;
      }
      if (other.PayAmount != 0) {
        PayAmount = other.PayAmount;
      }
      if (other.AccStatus != 0) {
        AccStatus = other.AccStatus;
      }
      recMetaData_.Add(other.recMetaData_);
      if (other.ReqTime.Length != 0) {
        ReqTime = other.ReqTime;
      }
      if (other.AccTime.Length != 0) {
        AccTime = other.AccTime;
      }
      if (other.Credentials.Length != 0) {
        Credentials = other.Credentials;
      }
      if (other.PayType != 0) {
        PayType = other.PayType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            DpId = input.ReadInt32();
            break;
          }
          case 26: {
            DeviceId = input.ReadString();
            break;
          }
          case 34: {
            UserId = input.ReadString();
            break;
          }
          case 42: {
            UAccNo = input.ReadString();
            break;
          }
          case 48: {
            UAccType = input.ReadInt32();
            break;
          }
          case 58: {
            MerchantId = input.ReadString();
            break;
          }
          case 66: {
            MAccNo = input.ReadString();
            break;
          }
          case 72: {
            MAccType = input.ReadInt32();
            break;
          }
          case 80: {
            Balance = input.ReadInt32();
            break;
          }
          case 88: {
            PayAmount = input.ReadInt32();
            break;
          }
          case 96: {
            AccStatus = input.ReadInt32();
            break;
          }
          case 106: {
            recMetaData_.AddEntriesFrom(input, _map_recMetaData_codec);
            break;
          }
          case 114: {
            ReqTime = input.ReadString();
            break;
          }
          case 122: {
            AccTime = input.ReadString();
            break;
          }
          case 130: {
            Credentials = input.ReadBytes();
            break;
          }
          case 136: {
            payType_ = (global::PaymentCredentialsType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///数据的汇总信息
  /// </summary>
  public sealed partial class Summary : pb::IMessage<Summary> {
    private static readonly pb::MessageParser<Summary> _parser = new pb::MessageParser<Summary>(() => new Summary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Summary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvcPayDataSync.SvcPayDataSyncReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Summary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Summary(Summary other) : this() {
      dataNumber_ = other.dataNumber_;
      validDataNumber_ = other.validDataNumber_;
      dataSHA_ = other.dataSHA_;
      commitTag_ = other.commitTag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Summary Clone() {
      return new Summary(this);
    }

    /// <summary>Field number for the "DataNumber" field.</summary>
    public const int DataNumberFieldNumber = 1;
    private int dataNumber_;
    /// <summary>
    ///数据数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataNumber {
      get { return dataNumber_; }
      set {
        dataNumber_ = value;
      }
    }

    /// <summary>Field number for the "ValidDataNumber" field.</summary>
    public const int ValidDataNumberFieldNumber = 2;
    private int validDataNumber_;
    /// <summary>
    ///有效数据数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ValidDataNumber {
      get { return validDataNumber_; }
      set {
        validDataNumber_ = value;
      }
    }

    /// <summary>Field number for the "DataSHA" field.</summary>
    public const int DataSHAFieldNumber = 3;
    private pb::ByteString dataSHA_ = pb::ByteString.Empty;
    /// <summary>
    ///数据集合的Hash,HEX字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataSHA {
      get { return dataSHA_; }
      set {
        dataSHA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CommitTag" field.</summary>
    public const int CommitTagFieldNumber = 4;
    private string commitTag_ = "";
    /// <summary>
    ///用户集合的提交标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommitTag {
      get { return commitTag_; }
      set {
        commitTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Summary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Summary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataNumber != other.DataNumber) return false;
      if (ValidDataNumber != other.ValidDataNumber) return false;
      if (DataSHA != other.DataSHA) return false;
      if (CommitTag != other.CommitTag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataNumber != 0) hash ^= DataNumber.GetHashCode();
      if (ValidDataNumber != 0) hash ^= ValidDataNumber.GetHashCode();
      if (DataSHA.Length != 0) hash ^= DataSHA.GetHashCode();
      if (CommitTag.Length != 0) hash ^= CommitTag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataNumber);
      }
      if (ValidDataNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ValidDataNumber);
      }
      if (DataSHA.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(DataSHA);
      }
      if (CommitTag.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CommitTag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataNumber);
      }
      if (ValidDataNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValidDataNumber);
      }
      if (DataSHA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataSHA);
      }
      if (CommitTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitTag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Summary other) {
      if (other == null) {
        return;
      }
      if (other.DataNumber != 0) {
        DataNumber = other.DataNumber;
      }
      if (other.ValidDataNumber != 0) {
        ValidDataNumber = other.ValidDataNumber;
      }
      if (other.DataSHA.Length != 0) {
        DataSHA = other.DataSHA;
      }
      if (other.CommitTag.Length != 0) {
        CommitTag = other.CommitTag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DataNumber = input.ReadInt32();
            break;
          }
          case 16: {
            ValidDataNumber = input.ReadInt32();
            break;
          }
          case 26: {
            DataSHA = input.ReadBytes();
            break;
          }
          case 34: {
            CommitTag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
