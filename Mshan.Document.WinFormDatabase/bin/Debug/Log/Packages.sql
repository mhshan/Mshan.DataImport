create or replace package        pkg_alert
is
   procedure alert_statday_weberr (
      prmempid          in       number,                             --职员id
      prmcheckday       in       varchar2,           --yyyy-mm-dd日结是否成功
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      integer,
      out_msg           out      varchar2
   );

   procedure alert_createalert (
      prmtitle          in       varchar2,                         --报警标题
      prmmessage        in       varchar2,                         --报警信息
      prmtypeid         in       number,                           --报警类别
      prmempid          in       number,                       --创建消息职员
      prmtermid         in       number,                     --终端报警的终端
      prmstation        in       number,                 --工作站报警的工作站
      prmifupdate       in       number,
                                       --更新同类消息为取消 1：更新 0：不更新
      prmiflog          in       number,   --是否记报警日志 1：记录 0：不记录
      prmcustunitcode   in       varchar2,                         --客户代码
      out_msg           out      varchar2,
      out_result        out      integer
   );
end;


 
 
 
 /
create or replace package body        pkg_alert
is
   procedure alert_statday_weberr (
      prmempid          in       number,                             --职员id
      prmcheckday       in       varchar2,           --yyyy-mm-dd日结是否成功
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      integer,
      out_msg           out      varchar2
   )
   as
        /*
      ----------------------------------------------------------------------------
      --存储过程：alert_check_statday
      --功　　能：检查日结是否成功，自动服务在日结时调用web服务异常时，产生报警信息
      --作    者： 朱鹏飞
      --创建日期： 2009-03-30
      --输出参数：
      --      out_result:　100-为成功， -1异常
      --      out_msg:输出信息
      --------------------------------------------------------------------------
      --修改标示：朱鹏飞 2009-08-04
      --修改说明：日结失败，增加修改数据库日结状态为日结完毕
      --------------------------------------------------------------------------
      --修改标示：周晓娜 2012-11-09
      --修改说明：增加多客户处理
      --------------------------------------------------------------------------
      */
        --
      v_alerttitle   varchar2 (30);                            --报警信息标题
      v_alertmsg     varchar2 (500);                           --报警信息内容
      n_count        number;
   begin
      --先检查当日结是否成功，如果日结成功，则不报警
      select count (*)
        into n_count
        from st_balance_area_total a
       where a.balancedate = to_date (prmcheckday, 'yyyy-mm-dd')
         and a.customerunitcode = prmcustunitcode;

      if n_count > 0
      then
         --如果日结表有当天数据，说明已经日结成功，则不产生报警
         out_result := 100;
         out_msg := prmcheckday || '已经日结成功，无须产生报警';
         return;
      end if;

      --更新数据库为未日结状态
      update base_syspara
         set isbalance = 0;

      v_alerttitle := '系统日结失败';
      v_alertmsg :=
            '【js-sys-0001】：系统日结失败！ 日报日期['
         || to_char (prmcheckday)
         || ']，日结执行时间['
         || to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss')
         || ']，异常消息：[自动服务返回日结失败]。';
      alert_createalert (v_alerttitle,
                         v_alertmsg,
                         10,                                        --消息类别
                         0,                                     --消息创建职员
                         null,                                      --消息终端
                         null,                                    --消息工作站
                         1,                         --是否更新同类消息自动取消
                         1,                                 --是否记录报警日志
                         prmcustunitcode,
                         out_msg,
                         out_result
                        );

      if (out_result > 0)
      then
         commit;
      else
         rollback;
      end if;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := out_msg || '异常_+_' || sqlerrm;

         insert into alert_log
                     (operatorid, begintime, endtime, altertype, results,
                      description
                     )
              values (prmempid, sysdate, sysdate, 10, out_result,
                      out_msg
                     );

         commit;
   end;

   procedure alert_createalert (
      prmtitle          in       varchar2,                          --报警标题
      prmmessage        in       varchar2,                          --报警信息
      prmtypeid         in       number,                            --报警类别
      prmempid          in       number,                        --创建消息职员
      prmtermid         in       number,                      --终端报警的终端
      prmstation        in       number,                  --工作站报警的工作站
      prmifupdate       in       number,
      --更新同类消息为取消 1：更新 0：不更新
      prmiflog          in       number,    --是否记报警日志 1：记录 0：不记录
      prmcustunitcode   in       varchar2,                          --客户代码
      out_msg           out      varchar2,
      out_result        out      integer
   )
   as
      /*
      --------------------------------------------------------------------------
      --存储过程：alert_createalert
      --功　　能：产生新的报警信息
      --作    者： 朱鹏飞
      --创建日期： 2009-03-30
      --------------------------------------------------------------------------
      --修改标示：周晓娜 2012-11-09
      --修改说明：增加多客户处理
      --------------------------------------------------------------------------
      */
      i_isalert     integer;                    --是否报警 0：不报警 1 ：报警
      i_typelevel   integer;                                       --报警级别
      n_validity    number;                    --此类报警对应的级别的失败时长
      --
      i_count       integer;
   begin
      out_result := -1;
      out_msg := '未找到此类报警信息。';

      select count (*)
        into i_count
        from v_alert_typeinfo a
       where a.typeid = prmtypeid;

      if (i_count <= 0)
      then
         out_result := -2;
         out_msg := '未找到此类报警信息。';

         insert into alert_log
                     (operatorid, begintime, endtime, altertype, results,
                      description, customerunitcode
                     )
              values (prmempid, sysdate, sysdate, prmtypeid, out_result,
                      out_msg, prmcustunitcode
                     );

         return;
      end if;

      out_result := -1;
      out_msg := '更新已过期的信息';

      --更新已过期的信息
      update alert_message a
         set a.state = 0,                                     --更新为自动过期
             a.canceldate = sysdate
       where a.state = 1                                          --状态为有效
         and invaliddate <= sysdate
         and a.customerunitcode = prmcustunitcode;

      out_result := -1;
      out_msg := '更新以前同类消费状态为自动取消';

      if (prmifupdate = 1)
      then
         out_result := -2;
         out_msg := '更新以前同类消费状态为自动取消';

         --1、更新以前同类消费状态为自动取消
         if (prmtermid is not null)
         then
            update alert_message a
               set a.state = -1,
                   a.canceldate = sysdate
             where a.typeid = prmtypeid
               and a.state = 1
               and a.termid = prmtermid
               and a.customerunitcode = prmcustunitcode;
         else
            if (prmstation is not null)
            then
               update alert_message a
                  set a.state = -1,
                      a.canceldate = sysdate
                where a.typeid = prmtypeid
                  and a.state = 1
                  and a.stationid = prmstation
                  and a.customerunitcode = prmcustunitcode;
            else
               update alert_message a
                  set a.state = -1,
                      a.canceldate = sysdate
                where a.typeid = prmtypeid
                  and a.state = 1
                  and a.customerunitcode = prmcustunitcode;
            end if;
         end if;
      end if;

      out_result := -3;
      out_msg := '获取报警配置';

      select a.typelevel, a.validity, a.usingalert
        into i_typelevel, n_validity, i_isalert
        from v_alert_typeinfo a
       where a.typeid = prmtypeid;

      out_result := -4;
      out_msg := '产生报警信息';

      --2、然后再形成新的报警信息
      insert into alert_message
                  (title, message, typeid, showing, createdate,
                   empid, msglevel, state, invaliddate, messagecode,
                   termid, stationid, customerunitcode
                  )
           values (prmtitle, prmmessage, prmtypeid, i_isalert, sysdate,
                   prmempid, i_typelevel, 1, sysdate + (n_validity / 24), 0,
                   prmtermid, prmstation, prmcustunitcode
                  );

      if (prmiflog = 1)
      then
         out_result := -5;
         out_msg := '形成报警日志';

         insert into alert_log
                     (operatorid, begintime, endtime, altertype, results,
                      description, customerunitcode
                     )
              values (prmempid, sysdate, sysdate, prmtypeid, 100,
                      '产生' || prmtitle || '报警信息成功', prmcustunitcode
                     );
      end if;

      out_result := 100;
      out_msg := '产生' || prmtitle || '报警信息成功';
   exception
      when others
      then
         if out_result > 0
         then
            out_result := out_result * -1;
         else
            out_result := out_result;
         end if;

         out_msg := out_msg || '异常_+_' || sqlerrm;

         insert into alert_log
                     (operatorid, begintime, endtime, altertype, results,
                      description, customerunitcode
                     )
              values (prmempid, sysdate, sysdate, prmtypeid, out_result,
                      out_msg, prmcustunitcode
                     );
   end;
end;

/
create or replace package        pkg_appservice
is
   procedure proc_appserviceaccredit (
      prmsyscode          in       varchar2,
      prmaccreditedcode   in       varchar2,
      prmip               in       varchar2,
      prmdescription      in       varchar2,
      prmishost           in       integer,
      prmdpid             in       number,
      prmdpname           in       varchar2,
      prmdppwd            in       varchar2,
      prmregcode          in       varchar2,
      prmempid            in       integer,
      out_result          out      number,
      out_msg             out      varchar2
   );
end;                                                           -- package spec


 
 
 
 /
create or replace package body        pkg_appservice
is
   procedure proc_appserviceaccredit (
      prmsyscode          in       varchar2,
      prmaccreditedcode   in       varchar2,
      prmip               in       varchar2,
      prmdescription      in       varchar2,
      prmishost           in       integer,
      prmdpid             in       number,
      prmdpname           in       varchar2,
      prmdppwd            in       varchar2,
      prmregcode          in       varchar2,
      prmempid            in       integer,
      out_result          out      number,
      out_msg             out      varchar2
   )
    /*
      -----------------------------------------------------------------------
      --存储过程：proc_appserviceaccredit
      --作　　者：
      --时　　间：
      --说　　明：完成系统注册
      --输入参数：
      --输出参数：
      --out_result：100：成功
      --            1：系统已开通
      --              其他失败
      --返回值定义：
      ----------------------------------------------
      --修改人员：朱鹏飞
      --修改时间：2009-03-10
      --修改说明：规范代码
      -----------------------------------------------------------------------
   */
   is
      vcount   number;
   begin
      if prmishost = 1
      then                                                   --是否为系统注册
         select count (*)
           into vcount
           from base_syspara;

         if vcount > 0
         then
            out_result := 1;
            out_msg := '系统已经注册开通，不能重复开通！';
            return;
         else
            insert into base_syspara
                        (dpid, dpname, dppwd, regcode, citycode,
                         industrycode
                        )
                 values (prmdpid, prmdpname, prmdppwd, prmregcode, '0000',
                         '0001'
                        );
         end if;
      end if;

      insert into base_appservice_accredit
                  (syscode, accreditedcode, ip, description,
                   ishost, empid
                  )
           values (prmsyscode, prmaccreditedcode, prmip, prmdescription,
                   prmishost, prmempid
                  );

      out_result := 100;
      out_msg := '处理成功!';
      commit;
   exception
      when others
      then
         out_result := -1;
         out_msg := out_result || '||||' || sqlerrm;
         rollback;
   end;
end;

/
create or replace package        pkg_base_app
is
   procedure app_verify_apprequest (
      prmapptype        in       integer,                          --程序类别
      prmiplist         in       varchar2,  --ip列表 格式 127.0.0.1|127.0.0.2
      prmlocalver       in       varchar2,                   --本地程序版本号
      prmcustunitcode   in       varchar2,                         --客户代码
      out_msg           out      varchar2,
      out_result        out      number             --100通过验证，其他不通过
   );
end;


 
 
 
 /
create or replace package body        pkg_base_app
is
/*
----------------------------------------------------------------------------
--copyright (c) 1992-2007 郑州新开普电子股份有限公司 版权所有。
--
-- 存储过程名称：pkg_base_app
-- 功能描述：应用程序合法性验证
--
---------------------------------------------------------------------------
*/
   procedure app_verify_apprequest (
      prmapptype        in       integer,
      --程序类别 1 自动统计 2 校时服务......
      prmiplist         in       varchar2,  --ip列表 格式 127.0.0.1|127.0.0.2
      prmlocalver       in       varchar2,                   --本地程序版本号
      prmcustunitcode   in       varchar2,                         --客户代码
      out_msg           out      varchar2,                         --返回信息
      out_result        out      number             --100通过验证，其他不通过
   )
   as
      /*
      --------------------------------------------------------------------------
      --存储过程：app_verify_apprequest
      --作　　者：朱鹏飞
      --时　　间：2009-05-04
      --说　　明：应用程序合法性验证
      --prmiplist：ip列表，程序中组合，ip中间用“|”分隔传入过程
      --------------------------------------------------------------------------
      --作　　者：周晓娜
      --时　　间：2012-11-09
      --说　　明：增加多客户处理
      --------------------------------------------------------------------------
      */
      v_iplist     varchar2 (4000);
      v_curip      varchar2 (20);
      i_ipcounts   integer;                                          --ip数量
      i_counts     integer;
      v_lastver    varchar2 (20);                          --当前程序最新版本
      i_ifalone    integer;               --程序是否允许使用 0：禁用，>0:启用
      i_isuse      integer;                  --本地程序是否禁用 1：启用 0禁用
   begin
      out_result := -1;
      out_msg := '初始化变量';
      --
      v_iplist := prmiplist;

      if (trim (prmiplist) is null)
      then
         out_result := -2;
         out_msg := 'ip不能为空';
         return;
      end if;

      --判断传的应用程序类别是否存在
      select count (*)
        into i_counts
        from base_app_type a
       where a.apptypeid = prmapptype and customerunitcode = prmcustunitcode;

      if (i_counts <= 0)
      then
         out_result := -3;
         out_msg := '程序可能未配置' || to_char (prmapptype);
         return;
      end if;

      --获取程序最新版本
      select a.appver, a.ifalone
        into v_lastver, i_ifalone
        from base_app_type a
       where a.apptypeid = prmapptype and customerunitcode = prmcustunitcode;

      --判断程序是否被禁用
      if (i_ifalone <= 0)
      then
         out_result := -4;
         out_msg := '此程序已被禁用';
         return;
      end if;

      --获取ip数（实际ip数量 - 1）
      select lengthb (v_iplist) - lengthb (replace (v_iplist, '|', ''))
        into i_ipcounts
        from dual;

      out_result := -5;
      out_msg := '循环验证各ip';

      loop
         if (lengthb (v_iplist) - lengthb (replace (v_iplist, '|', '')) > 0)
         then
            --获取组合中的第一个ip：截取第一个逗号前的字符
            select substr (v_iplist, 0, instr (v_iplist, '|', 1, 1) - 1)
              into v_curip
              from dual;
         else
            --如果已经没有‘|’，则说明只有一个ip
            select v_iplist
              into v_curip
              from dual;
         end if;

         --移除最前面一个ip
         v_iplist := replace (v_iplist, v_curip || '|', '');

         select count (*)
           into i_counts
           from base_app_info a
          where a.apptypeid = prmapptype
            and a.ipaddess = v_curip
            and a.customerunitcode = prmcustunitcode;

         if (i_counts > 0)
         then
            out_msg := 'ip验证通过更新本地版本信息';

            --ip验证通过
            update base_app_info a
               set a.appver = prmlocalver,
                   a.lastupdatedate = sysdate
             where a.apptypeid = prmapptype
               and a.ipaddess = v_curip
               and a.customerunitcode = prmcustunitcode;

            if (trim (prmlocalver) = trim (v_lastver))
            then
               out_msg := '检查本地程序是否允许使用';

               --本地版本与服务器程序版本一致
               select nvl (a.isused, 0)
                 into i_isuse
                 from base_app_info a
                where a.apptypeid = prmapptype
                  and a.ipaddess = v_curip
                  and a.customerunitcode = prmcustunitcode;

               if (i_isuse = 1)
               then
                  --本地版本与服务器程序版本一样，并且允许使用
                  out_result := 100;
               else
                  --本地版本与服务器程序版本一样，但已禁用
                  out_result := out_result - 1000;
               end if;
            else
               --ip正确，版本号错误
               out_result := out_result - 50;
            end if;
         else
            --ip错误
            out_result := out_result - 1;
         end if;

         exit when (i_ipcounts = 0 or out_result = 100);
         i_ipcounts := i_ipcounts - 1;
      end loop;

      if (out_result = 100)
      then
         out_msg := '验证通过';
      elsif (out_result < 0 and out_result > -50)
      then
         out_msg := 'ip验证不通过';
      elsif (out_result < -50 and out_result > -1000)
      then
         out_msg :=
               'ip验证通过，本地版本['
            || prmlocalver
            || ']服务器版本：['
            || v_lastver
            || ']不一致';
      elsif (out_result < -1000)
      then
         out_msg := 'ip[' || v_curip || ']已禁止运行此程序';
      else
         out_msg := '验证不通过';
      end if;
   exception
      when others
      then
         out_result := -1;
         out_msg := out_msg || '_+_' || sqlerrm;
   end;
end;

/
create or replace package        pkg_base_busline
  is

  --删除线路
   procedure delete_busline (
      prmlineid            in       number,                         --排序号
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      integer,
      out_msg           out      varchar2
   );

  --添加线路站点关系
   procedure insert_buslinestop (
      prmstopid         in    number,                         --站点编号
      prmlineid         in    number,                         --线路号
      prmsortid         in    number,                         --排序好
      prmflag           in    number,                         --站点上下行：1 隶属上行 2 隶属下行 3 同属上下行
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      integer,
      out_msg           out      varchar2
   );
  --修改线路站点关系
  procedure update_buslinestop (
      prmid             in    number,                         --编号
      prmstopid         in    number,                         --站点编号
      prmlineid         in    number,                         --线路号
      prmsortid         in    number,                         --排序好
      prmflag           in    number,                         --站点上下行：1 隶属上行 2 隶属下行
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      integer,
      out_msg           out      varchar2
   );

end; -- package spec


 
 
 
 /
create or replace package body        pkg_base_busline
is
   procedure delete_busline (
      prmlineid         in       number,                             --排序号
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      integer,
      out_msg           out      varchar2
   )
   as
      vcount   number;
    /*
   ----------------------------------------------------------------------------
   --过程包名：delete_busline
   --作　　者：张垒
   --时　　间：2013-3-15
   --说　　明：删除线路
   ----------------------------------------------------------------------------
   */
   begin
      out_result := -1000;
      out_msg := '删除线路信息失败';

      select count (*)
        into vcount
        from base_busline
       where lineid = prmlineid
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount <> 1
      then
         out_result := -1001;
         out_msg := '没有找到该线路信息！';
         return;
      end if;

      select count (*)
        into vcount
        from base_bus
       where lineid = prmlineid
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '该线路已经和车辆绑定，请先解除绑定！';
         return;
      end if;

      select count (*)
        into vcount
        from base_busroute
       where lineid = prmlineid
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '该线路已经和站点绑定，请先解除绑定！';
         return;
      end if;

      update base_busline
         set deletedate = sysdate,
             isdelete = 1
       where lineid = prmlineid
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      out_result := 100;
      out_msg := '删除线路信息成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '删除线路异常,' || sqlerrm;
   end;

   --插入线路站点信息
   procedure insert_buslinestop (
      prmstopid         in       number,                            --站点编号
      prmlineid         in       number,                              --线路号
      prmsortid         in       number,                              --排序好
      prmflag           in       number,   --站点上下行：1 隶属上行 2 隶属下行
      prmcustunitcode   in       varchar2,                          --客户代码
      out_result        out      integer,
      out_msg           out      varchar2
   )
   as
      vcount     number;
      vflag      number;
      vstopnum   number;
    /*
   ----------------------------------------------------------------------------
   --过程包名：insert_buslinestop
   --作　　者：张垒
   --时　　间：2013-3-15
   --说　　明：插入线路站点信息
   ----------------------------------------------------------------------------
   */
   begin
      select count (*)
        into vcount
        from base_busline
       where lineid = prmlineid
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount <> 1
      then
         out_result := -1001;
         out_msg := '没有找到该线路信息！';
         return;
      end if;

      select count (*)
        into vcount
        from base_busstop
       where stopid = prmstopid
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount <> 1
      then
         out_result := -1001;
         out_msg := '没有找到该站点信息！';
         return;
      end if;

      select count (*)
        into vcount
        from base_busroute
       where stopid = prmstopid
         and lineid = prmlineid
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount > 1
      then
         out_result := -1001;
         out_msg := '该线路站点信息查询到多于一条数据，数据出现异常！';
         return;
      end if;

      select count (*)
        into vcount
        from base_busroute
       where stopid = prmstopid
         and lineid = prmlineid
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount = 0
      then
         vflag := 0;
      else
         select nvl (flag, 0)
           into vflag
           from base_busroute
          where stopid = prmstopid
            and lineid = prmlineid
            and isdelete = 0
            and customerunitcode = prmcustunitcode;

         if vflag = 3 or vflag = prmflag
         then
            out_result := -1001;
            out_msg :=
                '该线路站点关系已经添加过了,请查看已有线路站点的上下行关系。';
            return;
         end if;
      end if;

      --获取参数表中的最大站点数
      select to_number (nvl (paramvalue, '0'))
        into vstopnum
        from base_param
       where paramgroupid = 1003
         and paramname = 'linestopnum'
         and customerunitcode is null;

      --获取目前线路站点数
      select count (*)
        into vcount
        from base_busroute
       where lineid = prmlineid
         and isdelete = 0 and stopid<>prmstopid
         and customerunitcode = prmcustunitcode;

      if vcount >= vstopnum
      then
         out_result := -1001;
         out_msg :=
               '线路站点超过系统最大线路站点个数。系统最大线路站点个数为:['
            || vstopnum
            || ']';
         return;
      end if;

      if prmflag = 1
      then
         select count (*)
           into vcount
           from base_busroute
          where sortid = prmsortid
            and lineid = prmlineid
            and (flag = 1 or flag = 3)
            and isdelete = 0
            and customerunitcode = prmcustunitcode;

         if vcount > 0
         then
            update base_busroute
               set sortid = sortid + 1
             where sortid >= prmsortid
               and lineid = prmlineid
               and (flag = 1 or flag = 3)
               and isdelete = 0
               and customerunitcode = prmcustunitcode;
         end if;

         if vflag = 0
         then                                               --没有插入过该站点
            insert into base_busroute
                        (lineid, stopid, sortid, flag,
                         customerunitcode, opdt, isdelete, isshow, downsortid
                        )
                 values (prmlineid, prmstopid, prmsortid, prmflag,
                         prmcustunitcode, sysdate, 0, 1, 1
                        );
         else
            update base_busroute
               set flag = 3,
                   sortid = prmsortid
             where lineid = prmlineid
               and stopid = prmstopid
               and customerunitcode = prmcustunitcode
               and isdelete = 0;
         end if;
      else
         select count (*)
           into vcount
           from base_busroute
          where downsortid = prmsortid
            and lineid = prmlineid
            and (flag = 2 or flag = 3)
            and isdelete = 0
            and customerunitcode = prmcustunitcode;

         if vcount > 0
         then
            update base_busroute
               set downsortid = downsortid + 1
             where downsortid >= prmsortid
               and lineid = prmlineid
               and (flag = 2 or flag = 3)
               and isdelete = 0
               and customerunitcode = prmcustunitcode;
         end if;

         if vflag = 0
         then                                               --没有插入过该站点
            insert into base_busroute
                        (lineid, stopid, downsortid, flag,
                         customerunitcode
                        )
                 values (prmlineid, prmstopid, prmsortid, prmflag,
                         prmcustunitcode
                        );
         else
            update base_busroute
               set flag = 3,
                   downsortid = prmsortid
             where lineid = prmlineid
               and stopid = prmstopid
               and customerunitcode = prmcustunitcode
               and isdelete = 0;
         end if;
      end if;

      update base_busline
         set stopver = stopver + 1
       where lineid = prmlineid
         and customerunitcode = prmcustunitcode
         and isdelete = 0;

      out_result := 100;
      out_msg := '添加线路站点信息成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加线路站点信息异常,' || sqlerrm;
   end;

   procedure update_buslinestop (
      prmid             in       number,                                --编号
      prmstopid         in       number,                            --站点编号
      prmlineid         in       number,                              --线路号
      prmsortid         in       number,                              --排序好
      prmflag           in       number,   --站点上下行：1 隶属上行 2 隶属下行
      prmcustunitcode   in       varchar2,                          --客户代码
      out_result        out      integer,
      out_msg           out      varchar2
   )
   as
      vcount     number;
      vflag      number;
      vstopnum   number;
    /*
   ----------------------------------------------------------------------------
   --过程包名：update_buslinestop
   --作　　者：张垒
   --时　　间：2013-3-15
   --说　　明：修改线路站点信息
   ----------------------------------------------------------------------------
   */
   begin
      select count (*)
        into vcount
        from base_busline
       where lineid = prmlineid
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount <> 1
      then
         out_result := -1001;
         out_msg := '没有找到该线路信息！';
         return;
      end if;

      select count (*)
        into vcount
        from base_busstop
       where stopid = prmstopid
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount <> 1
      then
         out_result := -1001;
         out_msg := '没有找到该站点信息！';
         return;
      end if;

      select count (*)
        into vcount
        from base_busroute
       where lineid = prmlineid
         and isdelete = 0
         and id = prmid
         and customerunitcode = prmcustunitcode;

      if vcount <> 1
      then
         out_result := -1001;
         out_msg := '找不到该线路站点信息！';
         return;
      end if;

      select count (*)
        into vcount
        from base_busroute
       where stopid = prmstopid
         and lineid = prmlineid
         and isdelete = 0
         and id <> prmid
         and customerunitcode = prmcustunitcode;

      if vcount = 0
      then
         vflag := 0;
         vstopnum := 0;
      else
         select nvl (flag, 0), stopid
           into vflag, vstopnum
           from base_busroute
          where stopid = prmstopid
            and lineid = prmlineid
            and isdelete = 0
            and id <> prmid
            and customerunitcode = prmcustunitcode;

         if vflag = 3 or vflag = prmflag
         then
            out_result := -1001;
            out_msg :=
                  '该线路站点关系已经存在了,请查看已有线路站点的上下行关系。';
            return;
         end if;
      end if;


      if prmflag = 1
      then
         select count (*)
           into vcount
           from base_busroute
          where sortid = prmsortid
            and lineid = prmlineid
            and (flag = 1 or flag = 3)
            and isdelete = 0
            and id <> prmid
            and customerunitcode = prmcustunitcode;

         if vcount > 0
         then
            update base_busroute
               set sortid = sortid + 1
             where sortid >= prmsortid
               and lineid = prmlineid
               and (flag = 1 or flag = 3)
               and isdelete = 0
               and customerunitcode = prmcustunitcode;
         end if;

         if vflag = 0
         then                                               --没有插入过该站点
            update base_busroute
               set stopid = prmstopid,
                   flag = prmflag,
                   sortid = prmsortid
             where id = prmid
               and lineid = prmlineid
               and customerunitcode = prmcustunitcode
               and isdelete = 0;
         else
            update base_busroute
               set isdelete = 1,
                   deletedate = sysdate
             where id = prmid
               and lineid = prmlineid
               and customerunitcode = prmcustunitcode
               and isdelete = 0;

            update base_busroute
               set flag = 3,
                   sortid = prmsortid
             where lineid = prmlineid
               and stopid = prmstopid
               and customerunitcode = prmcustunitcode
               and isdelete = 0;
         end if;

         update base_busline
            set stopver = stopver + 1
          where lineid = prmlineid
            and customerunitcode = prmcustunitcode
            and isdelete = 0;
      else
         if prmflag = 2
         then
            select count (*)
              into vcount
              from base_busroute
             where downsortid = prmsortid
               and lineid = prmlineid
               and (flag = 2 or flag = 3)
               and isdelete = 0
               and id <> prmid
               and customerunitcode = prmcustunitcode;

            if vcount > 0
            then
               update base_busroute
                  set downsortid = downsortid + 1
                where downsortid >= prmsortid
                  and lineid = prmlineid
                  and (flag = 2 or flag = 3)
                  and isdelete = 0
                  and customerunitcode = prmcustunitcode;
            end if;

            if vflag = 0
            then                                            --没有插入过该站点
               update base_busroute
                  set stopid = prmstopid,
                      flag = prmflag,
                      downsortid = prmsortid
                where id = prmid
                  and lineid = prmlineid
                  and customerunitcode = prmcustunitcode
                  and isdelete = 0;
            else
               update base_busroute
                  set isdelete = 1,
                      deletedate = sysdate
                where id = prmid
                  and lineid = prmlineid
                  and customerunitcode = prmcustunitcode
                  and isdelete = 0;

               update base_busroute
                  set flag = 3,
                      downsortid = prmsortid
                where lineid = prmlineid
                  and stopid = prmstopid
                  and customerunitcode = prmcustunitcode
                  and isdelete = 0;
            end if;

            update base_busline
               set stopver = stopver + 1
             where lineid = prmlineid
               and customerunitcode = prmcustunitcode
               and isdelete = 0;
         else
            if vstopnum > 0
            then
               if vstopnum <> prmstopid
               then
                  update base_busroute
                     set stopid = prmstopid
                   where lineid = prmlineid
                     and id = prmid
                     and customerunitcode = prmcustunitcode
                     and isdelete = 0;

                  update base_busline
                     set stopver = stopver + 1
                   where lineid = prmlineid
                     and customerunitcode = prmcustunitcode
                     and isdelete = 0;
               end if;
            end if;
         end if;
      end if;

      out_result := 100;
      out_msg := '修改线路站点信息成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '修改线路站点信息异常,' || sqlerrm;
   end;
end;

/
create or replace package pkg_base_cardtype
is
/*
----------------------------------------------------------------------------
--过程包名：pkg_base_cardtype
--作　　者：周晓娜
--时　　间： 2012-09-03
--说　　明：用以处理卡类型相关的业务信息
----------------------------------------------------------------------------
*/
   type ref_cursor is ref cursor;

   --根据卡类型大类和客户代码获取卡类型信息
   procedure getcardtypebygroupid (
      prmgroupid        in       number,
      prmcustunitcode   in       varchar2,
      io_allrec         out      ref_cursor
   );

   --根据客户代码获取该客户拥有的卡类型
   procedure getcardtypebycustunitcode (
      prmcustunitcode   in       varchar2,
      io_allrec         out      ref_cursor
   );

   --插入卡类型
   procedure insertcardtype (
      detailid          in       number,
      prmcustunitcode   in       varchar2,
      detailname        in       varchar2,
      groupid           in       number,
      sortid            in       number,
      isvisible         in       number,
      out_msg           out      varchar2,
      out_result        out      number
   );

   --修改卡类型
   procedure updatecardtype (
      detailidold       in       number,
      prmcustunitcode   in       varchar2,
      detailnameold     in       varchar2,
      sortidold         in       number,
      isvisibleold      in       number,
      out_msg           out      varchar2,
      out_result        out      number
   );

   --固定卡类型插入参数或保存参数值插入自定义卡类型
   procedure insertcardtypetemp (
      detailidold       in       number,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      number
   );

   --删除自定义卡类型
   procedure deletecardtype (
      detailidold       in       number,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      number
   );

   --添加线路时，添加线路票价卡的内容
   procedure insertbuslineparam (
      prmlineid         in       number,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      number
   );

   --添加参数模板时，往相关卡类型模板或者线路票价卡模板中添加参数
   procedure insertparamlibcardtype (
      prmparamname   in       varchar2,
      prmparamtype   in       number,
      out_msg        out      varchar2,
      out_result     out      number
   );
end;                                                           -- package spec


 
 
 
 /
create or replace package body pkg_base_cardtype
is
/*
----------------------------------------------------------------------------
--过程包名：pkg_base_cardtype
--作　　者：周晓娜
--时　　间： 2012-09-03
--说　　明：用以处理卡类型相关的业务信息
----------------------------------------------------------------------------
*/

   --根据卡类型大类和客户代码获取卡类型信息
   procedure getcardtypebygroupid (
      prmgroupid        in       number,
      prmcustunitcode   in       varchar2,
      io_allrec         out      ref_cursor
   )
   as
      vcount   number;
      /*
   ----------------------------------------------------------------------------
   --过程包名：getcardtypebygroupid
   --作　　者：周晓娜
   --时　　间： 2012-09-03
   --说　　明：根据卡类型大类和客户代码获取卡类型信息
   ----------------------------------------------------------------------------
   */
   begin
      vcount := 0;

      --首先判断客户卡类型信息表中有该客户特有修改的卡类型信息没
      select count (detailid)
        into vcount
        from base_cardtype_detail_temp
       where customerunitcode = prmcustunitcode;

      if prmgroupid > -1
      then
         if vcount = 0     --如果没有特殊修改的信息则从标准卡类型信息表取信息
         then
            open io_allrec for
               select   a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
                        a.paragroupid, a.walletusetype, a.isvisible,
                        a.cashyearcheckmons, 0 as istemp
                   from base_cardtype_detail a
                  where a.groupid = prmgroupid
               order by a.detailid;
         else                                         --从两个表关联一起取数据
            open io_allrec for
               select   *
                   from (select a.detailid, a.detailname, a.groupid, a.sortid,
                                a.ver, a.paragroupid, a.walletusetype,
                                a.isvisible, a.cashyearcheckmons, 1 as istemp
                           from base_cardtype_detail_temp a
                          where customerunitcode = prmcustunitcode
                            and a.groupid = prmgroupid
                         union
                         select a.detailid, a.detailname, a.groupid, a.sortid,
                                a.ver, a.paragroupid, a.walletusetype,
                                a.isvisible, a.cashyearcheckmons, 0 as istemp
                           from base_cardtype_detail a
                          where a.groupid = prmgroupid
                            and a.detailid not in (
                                      select detailid
                                        from base_cardtype_detail_temp
                                       where customerunitcode =
                                                               prmcustunitcode)) c
               order by c.detailid;
         end if;
      else
         if vcount = 0     --如果没有特殊修改的信息则从标准卡类型信息表取信息
         then
            open io_allrec for
               select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
                      a.paragroupid, a.walletusetype, a.isvisible,
                      a.cashyearcheckmons, 0 as istemp
                 from base_cardtype_detail a;
         else                                         --从两个表关联一起取数据
            open io_allrec for
               select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
                      a.paragroupid, a.walletusetype, a.isvisible,
                      a.cashyearcheckmons, 1 as istemp
                 from base_cardtype_detail_temp a
                where customerunitcode = prmcustunitcode
               union
               select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
                      a.paragroupid, a.walletusetype, a.isvisible,
                      a.cashyearcheckmons, 0 as istemp
                 from base_cardtype_detail a
                where a.detailid not in (
                                     select detailid
                                       from base_cardtype_detail_temp
                                      where customerunitcode =
                                                              prmcustunitcode);
         end if;
      end if;
   end;

   --根据客户代码获取该客户拥有的卡类型
   procedure getcardtypebycustunitcode (
      prmcustunitcode   in       varchar2,
      io_allrec         out      ref_cursor
   )
   as
      vcount   number;
    /*
   ----------------------------------------------------------------------------
   --过程包名：getcardtypebycustunitcode
   --作　　者：周晓娜
   --时　　间： 2012-09-03
   --说　　明：根据客户代码获取该客户的卡类型信息
   ----------------------------------------------------------------------------
   */
   begin
      vcount := 0;

      --首先判断客户卡类型信息表中有该客户特有修改的卡类型信息没
      select count (detailid)
        into vcount
        from base_cardtype_detail_temp
       where customerunitcode = prmcustunitcode;

      if vcount = 0         --如果没有特殊修改的信息则从标准卡类型信息表取信息
      then
         open io_allrec for
            select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
                   a.paragroupid, a.walletusetype, a.isvisible,
                   a.cashyearcheckmons
              from base_cardtype_detail a;
      else                                            --从两个表关联一起取数据
         open io_allrec for
            select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
                   a.paragroupid, a.walletusetype, a.isvisible,
                   a.cashyearcheckmons
              from base_cardtype_detail_temp a
             where customerunitcode = prmcustunitcode
            union
            select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
                   a.paragroupid, a.walletusetype, a.isvisible,
                   a.cashyearcheckmons
              from base_cardtype_detail a
             where a.detailid not in (
                                     select detailid
                                       from base_cardtype_detail_temp
                                      where customerunitcode =
                                                              prmcustunitcode);
      end if;
   end;

   --插入卡类型
   procedure insertcardtype (
      detailid          in       number,
      prmcustunitcode   in       varchar2,
      detailname        in       varchar2,
      groupid           in       number,
      sortid            in       number,
      isvisible         in       number,
      out_msg           out      varchar2,
      out_result        out      number
   )
   as
      vcount     number;
      detcount   number;
    /*
   ----------------------------------------------------------------------------
   --过程包名：insertcardtype
   --作　　者：张垒
   --时　　间： 2012-10-26
   --说　　明：插入卡类型,看当前客户是否有添加过卡类型，如果添加过则id号为最大的
               id号+1,没添加过则是卡类型模板最大id号+1，同时将卡类型模板的所有参
               数添加到参数表中
   ----------------------------------------------------------------------------
   */
   begin
      vcount := 0;
      detcount := 0;

      if groupid = 1
      then
         --读取卡类型新增表中该客户的卡类型个数
         select nvl (max (a.detailid), 0)
           into vcount
           from base_cardtype_detail_temp a
          where a.customerunitcode = prmcustunitcode and a.groupid = 1;

         --读取卡类型正式表中的卡类型最大id号
         select nvl (max (a.detailid), 0)
           into detcount
           from base_cardtype_detail a
          where a.groupid = 1;
      else
         --读取卡类型新增表中该客户的卡类型个数
         select nvl (max (a.detailid), 0)
           into vcount
           from base_cardtype_detail_temp a
          where a.customerunitcode = prmcustunitcode and a.groupid > 1;

         --读取卡类型正式表中的卡类型最大id号
         select nvl (max (a.detailid), 0)
           into detcount
           from base_cardtype_detail a
          where a.groupid > 1;
      end if;

      --如果没有该客户的卡类型，则读取模板表中的最大值
      if vcount = 0
      then
         vcount := detcount + 1;
      else
         if vcount < detcount
         then
            vcount := detcount + 1;
         else
            vcount := vcount + 1;
         end if;
      end if;

      if groupid = 1
      then
         if vcount < 0 or vcount > 224
         then
            out_result := -1001;
            out_msg := '乘车卡卡类型编号不能小于0，大于224';
            return;
         end if;
      else
         if vcount < 225 or vcount > 1000
         then
            out_result := -1001;
            out_msg := '功能卡卡类型编号不能小于225，大于1000';
            return;
         end if;
      end if;

      --插入卡类型
      insert into base_cardtype_detail_temp
                  (detailid, detailname, groupid, sortid, paragroupid,
                   isvisible, customerunitcode
                  )
           values (vcount, detailname, groupid, sortid, vcount,
                   isvisible, prmcustunitcode
                  );

      --插入卡类型参数
      insert into base_param
                  (paramgroupid, paramname, paramvalue, ver, isuse,
                   customerunitcode, flag)
         select vcount, paramname, paramvalue, ver, isuse, prmcustunitcode,
                flag
           from base_param
          where paramgroupid = detailid and customerunitcode is null;

      if groupid = 1 or detailid = 227
      then
         for c in (select lineid
                     from base_busline
                    where customerunitcode = prmcustunitcode and isdelete = 0)
         loop
            --插入线路票价卡的参数
            insert into base_lineparam_cardtype
                        (lineid, cardtype, paramname, paramvalue, isuse, ver,
                         customerunitcode)
               select   c.lineid, vcount, paramname, paramvalue, isuse, ver,
                        prmcustunitcode
                   from base_lineparam_cardtype
                  where customerunitcode is null
                    and lineid = 0
                    and cardtype =
                             case
                                when vcount > 0 and vcount < 5
                                   then vcount
                                else 0
                             end
               order by id;
         end loop;
      end if;

--更改票价版本
update base_busline set linecardver=linecardver+1,linecardupdatetime=sysdate where customerunitcode= prmcustunitcode and isdelete=0;

      out_result := 100;
      out_msg := vcount;
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加卡类型异常：' || sqlerrm;
   end;

   --修改卡类型
   procedure updatecardtype (
      detailidold       in       number,
      prmcustunitcode   in       varchar2,
      detailnameold     in       varchar2,
      sortidold         in       number,
      isvisibleold      in       number,
      out_msg           out      varchar2,
      out_result        out      number
   )
   as
    /*
   ----------------------------------------------------------------------------
   --过程包名：updatecardtype
   --作　　者：张垒
   --时　　间： 2012-10-26
   --说　　明： 如果修改的是固定的卡类型，则将该卡类型插入到自定义卡类型表中，同
               时将参数也添加到参数表中
   ----------------------------------------------------------------------------
   */
   begin
      --添加新的卡类型
      insert into base_cardtype_detail_temp
                  (detailid, detailname, groupid, sortid, paragroupid,
                   isvisible, customerunitcode)
         select detailidold, detailnameold, groupid, sortidold, paragroupid,
                isvisibleold, prmcustunitcode
           from base_cardtype_detail
          where detailid = detailidold;

      --插入卡类型参数
      insert into base_param
                  (paramgroupid, paramname, paramvalue, ver, isuse,
                   customerunitcode, flag)
         select detailidold, paramname, paramvalue, ver, isuse,
                prmcustunitcode, flag
           from base_param
          where paramgroupid = detailidold and customerunitcode is null;

      out_result := 100;
      out_msg := '修改成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加卡类型异常：' || sqlerrm;
   end;

   --删除自定义卡类型
   procedure deletecardtype (
      detailidold       in       number,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      number
   )
   as
      vcount   number;
    /*
   ----------------------------------------------------------------------------
   --过程包名：deletecardtype
   --作　　者：张垒
   --时　　间： 2012-12-12
   --说　　明：删除自定义卡类型
   ----------------------------------------------------------------------------
   */
   begin
      select count (*)
        into vcount
        from base_cardtype_detail_temp
       where detailid = detailidold and customerunitcode = prmcustunitcode;

      if vcount = 0
      then
         out_result := -1001;
         out_msg := '没有找到可以删除的卡类型！';
         return;
      end if;

      --如果在固定卡类型里没找到该卡类型，则可以删除线路票价卡参数
      select count (*)
        into vcount
        from base_cardtype_detail
       where detailid = detailidold;

      if vcount = 0
      then
         delete from base_lineparam_cardtype
               where customerunitcode = prmcustunitcode
                 and cardtype = detailidold;
      end if;

      --删除参数
      delete from base_param
            where paramgroupid = detailidold
              and customerunitcode = prmcustunitcode;

      --删除卡类型
      delete from base_cardtype_detail_temp
            where detailid = detailidold
                  and customerunitcode = prmcustunitcode;

      out_result := 100;
      out_msg := '删除成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '删除卡类型异常：' || sqlerrm;
   end;

   --固定卡类型插入参数或保存参数值插入自定义卡类型
   procedure insertcardtypetemp (
      detailidold       in       number,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      number
   )
   as
    /*
   ----------------------------------------------------------------------------
   --过程包名：insertcardtypetemp
   --作　　者：张垒
   --时　　间： 2012-10-26
   --说　　明：固定卡类型插入参数或保存参数值插入自定义卡类型,插入卡类型,看当前客户是否有添加过卡类型，如果添加过则id号为最大的
               id号+1,没添加过则是卡类型模板最大id号+1，同时将卡类型模板的所有参
               数添加到参数表中
   ----------------------------------------------------------------------------
   */
   begin
      --插入卡类型
      insert into base_cardtype_detail_temp
                  (detailid, detailname, groupid, sortid, paragroupid,
                   isvisible, customerunitcode)
         select detailidold, detailname, groupid, sortid, detailidold,
                isvisible, prmcustunitcode
           from base_cardtype_detail
          where detailid = detailidold;

      --插入卡类型参数
      insert into base_param
                  (paramgroupid, paramname, paramvalue, ver, isuse,
                   customerunitcode, flag)
         select paramgroupid, paramname, paramvalue, ver, isuse,
                prmcustunitcode, flag
           from base_param
          where paramgroupid = detailidold and customerunitcode is null;

      out_result := 100;
      out_msg := '添加成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加卡类型异常：' || sqlerrm;
   end;

   --添加线路时，添加线路票价卡的内容
   procedure insertbuslineparam (
      prmlineid         in       number,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      number
   )
   as
       /*
      ----------------------------------------------------------------------------
      --过程包名：insertbuslineparam
      --作　　者：张垒
      --时　　间： 2013-3-13
      --说　　明： 插入线路时，插入线路票价卡参数
      ----------------------------------------------------------------------------
      */
      vid            number;
      vcount         number;
      vdisablecard   varchar2 (500);
   begin
      out_result := -1000;
      out_msg := '添加线路失败！';

      select count (*)
        into vcount
        from base_busline a
       where a.lineid = prmlineid
         and a.isdelete = 0
         and a.customerunitcode = prmcustunitcode;

      if vcount <> 1
      then
         out_result := -1002;
         out_msg := '线路信息不存在！';
         return;
      end if;

      select a.id, a.disablecardtype
        into vid, vdisablecard
        from base_busline a
       where a.lineid = prmlineid
         and a.isdelete = 0
         and a.customerunitcode = prmcustunitcode;

      --插入票价模板的单个参数
      insert into base_lineparam
                  (lineid, paramname, paramvalue, isuse, customerunitcode,
                   ver)
         select   prmlineid, paramname, paramvalue, isuse, prmcustunitcode,
                  ver
             from base_lineparam
            where customerunitcode is null and lineid = 0
         order by id;

      for c in
         (select   e.*
              from (select a.detailid
                      from base_cardtype_detail_temp a
                     where a.customerunitcode = prmcustunitcode
                       and a.isvisible = 1
                       and (a.groupid = 1 or a.detailid = 0
                            or a.detailid = 227
                           )
                    union
                    select a.detailid
                      from base_cardtype_detail a
                     where (a.groupid = 1 or a.detailid = 227)
                       and a.isvisible = 1
                       and a.detailid not in (
                                      select detailid
                                        from base_cardtype_detail_temp
                                       where customerunitcode =
                                                               prmcustunitcode)) e
             where ',' || vdisablecard || ',' not like
                                                    '%,' || e.detailid || ',%'
          order by e.detailid)
      loop
         insert into base_lineparam_cardtype
                     (lineid, cardtype, paramname, paramvalue, isuse, ver,
                      customerunitcode)
            select   prmlineid, c.detailid, paramname, paramvalue, isuse,
                     ver, prmcustunitcode
                from base_lineparam_cardtype
               where customerunitcode is null
                 and lineid = 0
                 and cardtype =
                        case
                           when c.detailid > 0 and c.detailid < 5
                              then c.detailid
                           else 0
                        end
            order by id;
      end loop;

      out_result := 100;
      out_msg := '添加成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加线路异常：' || sqlerrm;
   end;

   --添加参数模板时，往相关卡类型模板或者线路票价卡模板中添加参数
   procedure insertparamlibcardtype (
      prmparamname   in       varchar2,                             --参数名称
      prmparamtype   in       number,
      --参数模板   0：卡务参数 1：线路票价卡参数 3：参数卡模板
      out_msg        out      varchar2,
      out_result     out      number
   )
   as
       /*
      ----------------------------------------------------------------------------
      --过程包名：insertparamlibcardtype
      --作　　者：张垒
      --时　　间： 2013-8-1
      --说　　明： 添加参数模板时，往相关卡类型模板或者线路票价卡模板中添加参数
      ----------------------------------------------------------------------------
      */
      vcount   number;
   begin
      out_result := -1000;
      out_msg := '往卡类型模板中添加参数失败！';

      select count (*)
        into vcount
        from base_param_lib
       where paramname = prmparamname;

      if vcount <> 1
      then
         out_result := -1002;
         out_msg := '参数模板信息不存在！';
         return;
      end if;

      if prmparamtype = 0
      then                                                          --卡务参数
         for c in (select   detailid
                       from base_cardtype_detail
                      where detailid <> 225
                   order by detailid)
         loop
            insert into base_param
                        (paramgroupid, paramname, paramvalue, isuse,
                         customerunitcode, flag, ver)
               select c.detailid, paramname, paramvalue, 1, null, 0,
                      (select nvl (max (ver), 0) + 1
                         from base_param
                        where paramgroupid = c.detailid
                          and customerunitcode is null)
                 from base_param_lib
                where paramname = prmparamname;
         end loop;
      else
         if prmparamtype = 1
         then                                                --线路票价卡参数
            insert into base_lineparam
                        (lineid, paramname, paramvalue, isuse,
                         customerunitcode)
               select 0, paramname, paramvalue, 1, null
                 from base_param_lib
                where paramname = prmparamname;
         else                                                     --参数卡模板
            insert into base_param
                        (paramgroupid, paramname, paramvalue, isuse,
                         customerunitcode, flag, ver)
               select 225, paramname, paramvalue, 1, null, 0,
                      (select max (ver) + 1
                         from base_param
                        where paramgroupid = 225 and customerunitcode is null)
                 from base_param_lib
                where paramname = prmparamname;
         end if;
      end if;

      out_result := 100;
      out_msg := '添加成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '往卡类型模板中添加参数异常：' || sqlerrm;
   end;
end;

/
create or replace package pkg_base_customers is
  type refcursortype is ref cursor; --游标类型定义，用于返回数据集

  procedure proc_managefare(prmcustomerid       in number, --账号
                            prmoutid            in varchar2, --市民卡号
                            prmasn              in varchar2,
                            prmposcode          in number, --终端设备唯一编号,必须存在
                            prmpsamcardno       in number, --终端psam卡号
                            prmmanagefare       in number, --管理费总额
                            prmnousedate        in varchar2, --卡片有效期
                            prmempid            in number, --操作员id
                            prmtype             in number,
                            prmcustomerunitcode in varchar2,
                            --操作类型 0：续交管理费，1：更正卡有效期
                            out_result out number,
                            --返回结果，100表示成功，其它表示失败
                            out_msg out varchar2 --返回提示信息
                            );

  /*
    ---------------------------------------------------------------------------
    --修改标识: 杨英豪 2017-07-26
    --实现功能: 卡类型转换新增：是否年检，年检开始、结束时间
    ---------------------------------------------------------------------------
  */
  procedure proc_cust_cardtypechange(prmcustomerid       in number, -- 账号
                                     prmcardno           in number,
                                     prmcardsn           in number,
                                     prmempid            in number,
                                     prmopdesc           in varchar2,
                                     prmpsamcardno       in number,
                                     prmoldcardtype      in number,
                                     prmnewcardtype      in number,
                                     prmcardasn          in number,
                                     prmcustomerunitcode in varchar2,
                                     --2017-07-26 卡类型新增参数
                                     prmoldyearchecks    in number, --原卡类型 是否年检
                                     prmoldcheckbeginday in varchar2, --原年检开始时间
                                     prmoldcheckendday   in varchar2, --原年检结束时间
                                     prmnewyearchecks    in number, --新卡类型 是否年检
                                     prmnewcheckbeginday in varchar2, --新卡类型 年检开始时间
                                     prmnewcheckendday   in varchar2, --新卡类型 年检结束时间
                                     prmplanid           in out number, --id
                                     out_result          out number,
                                     out_msg             out varchar2);

  procedure proc_changecustcard(prmscardsnr         in varchar2, --卡唯一号
                                prmcardkind         in number, --卡种类（1m1卡 2cpu卡）
                                prmempid            in number, --操作职员
                                prmcustomerid       in number, --补卡的账号
                                prmposcode          in number, --终端设备唯一编号,必须存在
                                prmpsamcardno       in number, --终端psam卡号
                                prmcardfare         in number, --卡成本
                                prmcardcoverfare    in number, --卡套成本
                                prmbkmangerarerate  in number, --补卡管理费
                                prmid               in out varchar2, --流水号
                                prmcardno           in out number, --卡号
                                prmoldcardno        in number, --卡号
                                prmcustomerunitcode in varchar2, --客户代码
                                prmremakecardtype   in varchar2, --补卡类型
                                prmoutid            in varchar2,
                                prmoldscardsnr      varchar2,
                                prmoperation        in number,
                                --操作，0表示申请，1表示回滚
                                out_result out number,
                                --返回结果，100表示成功，其它表示失败
                                out_msg out varchar2 --返回提示信息
                                );

  procedure proc_getcardid(prmscardsnr    in varchar2,
                           prmcardid      in out varchar2,
                           prmcurrenttime out date,
                           out_result     out number,
                           --返回结果，100表示成功，其它表示失败
                           out_msg out varchar2
                           --返回提示信息
                           );

  procedure proc_makeempdrivercard(prmscardsnr           in varchar2, --卡唯一号
                                   prmcardkind           in number, --卡种类（1m1卡 2cpu卡）
                                   prmempid              in number, --发卡职员
                                   prmoperatorempid      in number, --发放这张卡的操作员
                                   prmcardtypedetailid   in number,
                                   prmidno               in varchar2,
                                   prmareaid             in number, --区域
                                   prmposcode            in number, --终端设备唯一编号,必须存在
                                   prmpsamcardno         in number, --终端psam卡号
                                   prmneedyearcheck      in number, --是否需要年检，0不需要，1需要
                                   prmyearcheckstartdate in varchar2, --年检开始时间
                                   prmyearcheckenddate   in varchar2, --年检结束时间
                                   prmcardfare           in number, --卡成本
                                   prmcardcoverfare      in number, --卡套成本
                                   prmid                 in out varchar2, --流水号
                                   prmcardno             in out number, --卡号
                                   prmcustomerid         in out number, --账号
                                   prmnousedate          in out varchar2, --失效期，格式：yyyy-mm-dd
                                   prmoperation          in number,
                                   --操作，0表示申请，1表示回滚
                                   prmcustomerunitcode in varchar2,
                                   prmasn              in varchar2, --用户卡片应用序列号
                                   prmcardtypeflag     in varchar2, --用户公交卡类型启用标识
                                   out_result          out number,
                                   --返回结果，100表示成功，其它表示失败
                                   out_msg out varchar2 --返回提示信息
                                   );

  procedure proc_get_emp_farecount(prmcustomerunitcode in varchar2,
                                   prmempid            in number,
                                   prmoptype           in number, --操作类型：0查询，1日结
                                   out_cursor          out refcursortype,
                                   out_result          out number,
                                   out_msg             out varchar2);

  /*
    ---------------------------------------------------------------------------
    --修改标识：张斌 2012-09-04
    --实现功能：乘车卡卡片登记入库
    ---------------------------------------------------------------------------
  */
  procedure proc_cardregist(
                            -------- ----------------卡片信息
                            prmtype             in number, --1、登记入库 2、登记回滚
                            prmcardkind         in number, --卡种类（1m1卡 2cpu卡）
                            prmcardasn          in varchar2, --卡片应用序列号
                            prmcardsnr          in varchar2, --卡唯一号
                            prmempid            in number, --操作职员
                            prmcustomerunitcode in varchar2, --客户代码
                            -------------------------基本信息
                            prmischeck    in number, --0为检查1为不检查
                            prmtermid     in number, --终端编号
                            prmposcode    in number, --终端设备唯一编号,必须存在
                            prmpsamcardno in number, --终端psam卡号
                            prmdetailid   in number,
                            out_result    out number,
                            --返回结果，100表示成功，其它表示失败
                            out_msg out varchar2 --返回提示信息
                            );

  /*
    ---------------------------------------------------------------------------
    --修改标识: 张斌 2012-09-04
    --实现功能: 乘车卡售卡
    ---------------------------------------------------------------------------
  */
  procedure proc_sellcard(
                          --------------------------乘车卡基本信息
                          prmname             in varchar2, --用户姓名
                          prmsex              in number, --用户性别
                          prmnation           in varchar2, --用户国家
                          prmcertificatetype  in number, --证件类型
                          prmidno             in varchar2, --证件号码
                          prmbirthday         in varchar2, -- 用户生日
                          prmaddress          in varchar2, --用户住址
                          prmempid            in number, --操作员
                          prmcustomerunitcode in varchar2, --客户代码
                          prmcountryid        in number, --国家代码
                          prmtelephone        in varchar2, --用户电话
                          -----------------------基本验证信息
                          prmtermid     in number, --终端编号
                          prmposcode    in number, --终端设备唯一编号,必须存在
                          prmpsamcardno in number, --终端psam卡号
                          -----------------------公交卡信息
                          prmcardtypedetailid   in number, --用户公交卡类型
                          prmcardtypeflag       in varchar2, --用户公交卡类型启用标识
                          prmneedyearcheck      in number, --是否需要年检，0不需要，1需要
                          prmyearcheckstartdate in varchar2, --年检开始时间
                          prmyearcheckenddate   in varchar2, --年检结束时间
                          prmcardfare           in number, --卡折旧费用
                          prmcardcoverfare      in number, --卡套费用
                          prmnonameflag         in number,
                          --不记名标记，0记名，1不记名
                          prmcardtype         in number, --卡类别，0为普通卡，1为手机卡
                          prmproduct          in number, --卡供应商
                          prmasn              in varchar2, --用户卡片应用序列号
                          prmoutid            in varchar2, --市民卡号
                          prmcardtypepeopleid in number, --市民用途，市民类、管理卡类
                          prmcardtypecityid   in number, --卡类型，普通卡、管理卡等
                          prmisnewcapecsys    in number,
                          --新旧系统（0第一次发卡系统是新开普系统，1第一次发卡系统是其它公司系统）
                          prmmangefare     in number, --开卡管理费
                          prmnousedate     in varchar2, --卡片有效期
                          prmfreemangefare in number, --免收管理费金额
                          prmcardsnr       in varchar2, --卡唯一号
                          prmcardkind      in number, --卡种类（1m1卡 2cpu卡）
                          prmcustomerid    in out number, --账号
                          prmid            in out varchar2, --流水号
                          prmcardno        in out number,
                          --卡号                     --卡号
                          prmelecashtype in varchar2,
                          prmoperation   in number, --操作，0表示申请，1表示回滚
                          out_result     out number, --返回结果，100成功，其它失败
                          out_msg        out varchar2 --返回提示信息
                          );

  /*
    ---------------------------------------------------------------------------
    --修改标识: 张斌 2012-12-03
    --实现功能: 乘车卡补卡
    ---------------------------------------------------------------------------
  */
  procedure proc_remakecustcard(prmscardsnr         in varchar2, --卡唯一号
                                prmcardkind         in number, --卡种类（1m1卡 2cpu卡）
                                prmempid            in number, --操作职员
                                prmcustomerid       in number, --补卡的账号
                                prmposcode          in number, --终端设备唯一编号,必须存在
                                prmpsamcardno       in number, --终端psam卡号
                                prmcardfare         in number, --卡成本
                                prmcardcoverfare    in number, --卡套成本
                                prmbkmangerarerate  in number, --补卡管理费
                                prmid               in out varchar2, --流水号
                                prmcardno           in out number, --卡号
                                prmoldcardno        in number, --卡号
                                prmcustomerunitcode in varchar2, --客户代码
                                prmremakecardtype   in varchar2, --补卡类型
                                prmoutid            in varchar2,
                                prmoldscardsnr      varchar2,
                                prmoperation        in number,
                                --操作，0表示申请，1表示回滚
                                out_result out number,
                                --返回结果，100表示成功，其它表示失败
                                out_msg out varchar2 --返回提示信息
                                );

  /*
  ----------------------------------------------------------------------------
  --修改标识：梁小凯 2009-07-23
  --实现功能：年检
  ----------------------------------------------------------------------------
  */
  procedure proc_cust_yearcheck(prmcustomerid        in number, -- 账号
                                prmcardno            in number,
                                prmcardsn            in number,
                                prmempid             in number,
                                prmstartcheckdate    in varchar2,
                                prmendcheckdate      in varchar2,
                                prmopdesc            in varchar2,
                                prmstartcheckdatepre in varchar2,
                                prmendcheckdatepre   in varchar2,
                                prmpsamcardno        in number,
                                prmcardasn           in number,
                                prmcustomerunitcode  in varchar2,
                                prmplanid            in out number, --id
                                out_result           out number,
                                out_msg              out varchar2);

  procedure proc_modifyinfo(prmcustomerunitcode in varchar2,
                            prmcustomerid       in number,
                            prmcardno           in number,
                            prmname             in varchar2,
                            prmidcardno         in varchar2,
                            prmaddress          in varchar2,
                            prmsex              in number,
                            prmnation           in varchar2,
                            prmbirthday         in varchar2, --格式yyyy-mm-dd
                            prmtelphonenum      in varchar2,
                            prmcardtypeid       in number,
                            prmproductid        in number,
                            prmelecashtype      in number,
                            out_result          out number,
                            out_msg             out varchar2);

  procedure proc_testinfo(prmcardno  in number,
                          out_result out number,
                          out_msg    out varchar2);

  procedure proc_getoutid(prmcustomerunitcode in varchar2, --客户代码
                          prmoutid            out number,
                          out_result          out number,
                          --返回结果，100表示成功，其它表示失败
                          out_msg out varchar2
                          --返回提示信息
                          );

end;

 
 
 
/
create or replace package body pkg_base_customers
is
    procedure proc_managefare (prmcustomerid         in     number, --账号
                               prmoutid              in     varchar2, --市民卡号
                               prmasn                in     varchar2,
                               prmposcode            in     number, --终端设备唯一编号,必须存在
                               prmpsamcardno         in     number, --终端psam卡号
                               prmmanagefare         in     number, --管理费总额
                               prmnousedate          in     varchar2, --卡片有效期
                               prmempid              in     number, --操作员id
                               prmtype               in     number,
                               prmcustomerunitcode   in     varchar2,
                               --操作类型 0：续交管理费，1：更正卡有效期
                               out_result               out number,
                               --返回结果，100表示成功，其它表示失败
                               out_msg                  out varchar2 --返回提示信息
                                                                    )
    is
        /*
        --------------------------------------------------------------------------
        --修改标识：周晓娜 2012-05-17
        --实现功能：续交管理费
        --返回100表示完全成功，返回101表示此卡处于登记中间状态
        --------------------------------------------------------------------------
        --修改标识：程文平20120601
        --修改说明：修改获取折旧费、卡套费、管理费科目描述
        --------------------------------------------------------------------------
        --修改标识：周晓娜20130524
        --修改说明：续交管理费增加资产负债账目处理
        --------------------------------------------------------------------------
        */
        vcount            number;
        vstatus           number;
        vcardkind         number;
        vcardtype         number;
        v_scardsnr        varchar2 (20); --卡唯一序列号\
        v_accdscrp        varchar2 (50); --折旧费科目描述
        v_ktaccdscrp      varchar2 (50); --卡套费科目描述
        v_mangescrp       varchar2 (20); --科目描述
        dt_nousedate      date; --卡片失效期
        v_empdeptcode     varchar2 (50); --职员所属部门
        i_empareaid       integer; --职员所属分区编号
        n_empaccountype   number; --出纳员账户类型
        n_cashaccfc       number; --形成充值明细的原始流水号
        n_empoddfare      number (20, 2); --出纳账户余额
        v_empname         varchar2 (30); --出纳员名称
        v_codeid          varchar2 (100);
    begin
        --先对卡片失效期t_nousedate初值，以防止传入日期格式错误造成转换导致异常
        dt_nousedate := to_date ('2999-12-30', 'yyyy-mm-dd');
        dt_nousedate := to_date (prmnousedate, 'yyyy-mm-dd');
        v_mangescrp := '续交管理费';
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        select count (*)
          into vcount
          from base_term a
         where     a.poscode = prmposcode
               and a.customerunitcode = prmcustomerunitcode;

        if vcount < 1
        then
            out_result := -1001;
            out_msg := '终端在系统中不存在！poscode：' || to_char (prmposcode);
            return;
        end if;

        select count (*)
          into vcount
          from base_samcard a
         where     a.samcardno = prmpsamcardno
               and a.customerunitcode = prmcustomerunitcode;

        if vcount < 1
        then
            out_result := -1002;
            out_msg := 'psam号不存在！samcardno：' || to_char (prmpsamcardno);
            return;
        end if;

        select state
          into vstatus
          from base_samcard
         where     samcardno = prmpsamcardno
               and customerunitcode = prmcustomerunitcode;

        if vstatus < 1
        then
            out_result := -1003;
            out_msg := 'psam卡状态异常，验证失败！';
            return;
        end if;

        --验证账户信息是否存在
        select count (*)
          into vcount
          from base_customers a
         where     a.outid = prmoutid
               and a.customerid = prmcustomerid
               and a.asn = prmasn
               and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1004;
            out_msg := '账户信息不存在！';
            return;
        end if;

        select a.cardkind, a.cardtypedetailid, a.scardsnr
          into vcardkind, vcardtype, v_scardsnr
          from base_customers a
         where     customerid = prmcustomerid
               and a.asn = prmasn
               and customerunitcode = prmcustomerunitcode;

        --获取售卡折旧费的科目描述
        select a.accdscrp
          into v_accdscrp
          from base_acc_type a
         where a.acccode = 700;

        --获取售卡卡套费的科目描述
        select a.accdscrp
          into v_ktaccdscrp
          from base_acc_type a
         where a.acccode = 701;

        --获取续交管理费的科目描述
        select a.accdscrp
          into v_mangescrp
          from base_acc_type a
         where a.acccode = 709;

        --获取记录流水号
        select seq_rec_selfmoney_acc.nextval into n_cashaccfc from dual;

        --如果是续交管理费形成缴费记录
        if prmtype = 0
        then
            --形成管理费明细记录
            insert into rec_selfmoney_acc (id,
                                           empid,
                                           customerid,
                                           cardtype,
                                           opfare,
                                           acccode,
                                           dscrp,
                                           ktfare,
                                           ktacccode,
                                           ktaccdscrp,
                                           changedate,
                                           cardkind,
                                           poscode,
                                           scardsnr,
                                           mangeacccode,
                                           mangefare,
                                           mangedscrp,
                                           customerunitcode,
                                           cardno)
                 values (n_cashaccfc,
                         prmempid,
                         prmcustomerid,
                         vcardtype,
                         0,
                         700,
                         v_accdscrp,
                         0,
                         701,
                         v_ktaccdscrp,
                         sysdate,
                         vcardkind,
                         prmposcode,
                         v_scardsnr,
                         709,
                         prmmanagefare,
                         v_mangescrp,
                         prmcustomerunitcode,
                         prmasn);
        end if;

        out_result := -1005;
        out_msg := '更新账本信息';

        --更新账本信息
        update base_customers
           set summangefare = summangefare + prmmanagefare,
               mangefarelastdate = sysdate,
               nousedate = dt_nousedate
         where     customerid = prmcustomerid
               and outid = prmoutid
               and asn = prmasn
               and customerunitcode = prmcustomerunitcode;

        select nvl (count (*), 0)
          into vcount
          from base_emp a
         where a.empid = prmempid and customerunitcode = prmcustomerunitcode;

        if vcount <> 1
        then
            --统计失败，回滚，返回错误
            rollback;
            out_result := -1007;
            out_msg := '获取职员部门及分区信息失败';
            return;
        end if;

        --获取职员部门及分区编号
        select a.dptcode, a.accounttype, a.empname
          into v_empdeptcode, n_empaccountype, v_empname
          from base_emp a
         where a.empid = prmempid and customerunitcode = prmcustomerunitcode;

        out_result := -1010;
        out_msg := '续交管理费用统计';
        --开卡管理费用统计
        pkg_st_payment.proc_custdataaccount_online (
            to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
            prmmanagefare,
            709,
            0,
            vcardkind,
            vcardtype,
            prmempid,
            prmposcode,
            prmpsamcardno,
            0,
            v_empdeptcode,
            0,
            0,
            0,
            prmcustomerunitcode,
            out_msg,
            out_result);

        if out_result <> 100
        then
            --统计失败，回滚，返回错误
            rollback;
            out_result := out_result;
            out_msg := '续交管理费统计失败，' || out_msg;
            return;
        end if;

        out_result := 100;
        out_msg := '缴费成功';
        commit;
    exception
        when others
        then
            rollback;
            out_result := out_result;
            out_msg := out_msg || '，缴费异常，' || sqlerrm;
    end;

    procedure proc_cust_cardtypechange (
        prmcustomerid         in     number, -- 账号
        prmcardno             in     number,
        prmcardsn             in     number,
        prmempid              in     number,
        prmopdesc             in     varchar2,
        prmpsamcardno         in     number,
        prmoldcardtype        in     number,
        prmnewcardtype        in     number,
        prmcardasn            in     number,
        prmcustomerunitcode   in     varchar2,
        --2017-07-26 卡类型新增参数
        prmoldyearchecks      in     number, --原卡类型 是否年检
        prmoldcheckbeginday   in     varchar2, --原年检开始时间
        prmoldcheckendday     in     varchar2, --原年检结束时间
        prmnewyearchecks      in     number, --新卡类型 是否年检
        prmnewcheckbeginday   in     varchar2, --新卡类型 年检开始时间
        prmnewcheckendday     in     varchar2, --新卡类型 年检结束时间
        prmplanid             in out number, --id
        out_result               out number,
        out_msg                  out varchar2)
    /*
      --------------------------------------------------------------------------
      --修改标识：舒洲 2009-05-29
      --实现功能：卡类型转换
      --------------------------------------------------------------------------
      --修改标示：刘东红 2012-04-16
      --修改说明：支持次钱包4类型
      --------------------------------------------------------------------------
      --修改标识: 杨英豪 2017-07-26
      --实现功能: 卡类型转换新增：是否年检，年检开始、结束时间
      ---------------------------------------------------------------------------
      */
    as
        vid                  number;
        vaccdesc             varchar2 (30);
        vcount               number;
        vacccode             number;
        vidcardno            varchar2 (20);
        vempid               number;
        v_walletusetype      varchar2 (20);
        vdetailname          varchar2 (200);
        --新增参数
        v_oldcheckbeginday   date;
        v_oldcheckendday     date;
        v_newcheckbeginday   date;
        v_newcheckendday     date;
    begin
        vacccode := 609;
        -------------------------------
        v_oldcheckbeginday := to_date (prmoldcheckbeginday, 'yyyy-mm-dd');
        v_oldcheckendday := to_date (prmoldcheckendday, 'yyyy-mm-dd');

        v_newcheckbeginday := to_date (prmnewcheckbeginday, 'yyyy-mm-dd');
        v_newcheckendday := to_date (prmnewcheckendday, 'yyyy-mm-dd');

        -------------------------------
        select count (*)
          into vcount
          from base_acc_type
         where acccode = vacccode;

        if vcount = 0
        then
            out_result := -1000;
            out_msg := '交易科目不存在';
            return;
        end if;

        out_result := -1001;
        out_msg := '校验基本信息';
        pkg_cust_cash.proc_verify_baseinfo (prmcustomerid,
                                            prmcardno,
                                            prmcardsn,
                                            prmempid,
                                            prmpsamcardno,
                                            prmpsamcardno,
                                            prmcardasn,
                                            prmcustomerunitcode,
                                            out_result,
                                            out_msg);

        if out_result <> 100
        then
            return;
        end if;

        out_result := -1002;
        out_msg := '形成卡类型转换明细记录';

        select accdscrp
          into vaccdesc
          from base_acc_type
         where acccode = vacccode;

        if prmplanid = 0
        then
            select count (*)
              into vcount
              from base_cardtype_detail_temp a
             where     a.detailid = prmnewcardtype
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount > 0
            then
                select detailname
                  into vdetailname
                  from base_cardtype_detail_temp a
                 where     a.detailid = prmnewcardtype
                       and a.customerunitcode = prmcustomerunitcode;
            else
                select detailname
                  into vdetailname
                  from base_cardtype_detail a
                 where a.detailid = prmnewcardtype;
            end if;

            select nvl (count (*), 0)
              into vcount
              from base_customers_info a
             where     customerid = prmcustomerid
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount < 1
            then
                out_result := -1005;
                out_msg := '库中无此人员信息!';
                return;
            end if;

            select a.idcardno
              into vidcardno
              from base_customers_info a
             where     customerid = prmcustomerid
                   and a.customerunitcode = prmcustomerunitcode;

            if vidcardno <> '000000000000000000'
            then
                select nvl (count (*), 0)
                  into vcount
                  from base_customers a
                 where     customerid = prmcustomerid
                       and a.customerunitcode = prmcustomerunitcode
                       and a.cardtypedetailid = prmnewcardtype;

                if vcount > 0
                then
                    out_result := -1005;
                    out_msg :=
                           '此账户已有'
                        || vdetailname
                        || '，无法进行转'
                        || vdetailname
                        || '操作!';
                    return;
                end if;
            end if;

            update base_customers
               set cardtypedetailid = prmnewcardtype,
                   --2017.07.26 新增以下更新字段
                   yearchecks = prmnewyearchecks,
                   checkbeginday = v_newcheckbeginday,
                   checkendday = v_newcheckendday
             where     customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode
                   and cardno = prmcardno;

            select seq_rec_cust_cardtype_change.nextval into vid from dual;

            insert into rec_cust_cardtype_change (id,
                                                  customerid,
                                                  cardno,
                                                  cardsn,
                                                  empid,
                                                  opdt,
                                                  opdesc,
                                                  acccode,
                                                  accdesc,
                                                  psamcardno,
                                                  oldcardtype,
                                                  newcardtype,
                                                  customerunitcode,
                                                  --2017.07.26 新增以下字段
                                                  oldyearchecks,
                                                  oldcheckbeginday,
                                                  oldcheckendday,
                                                  newyearchecks,
                                                  newcheckbeginday,
                                                  newcheckendday)
                 values (vid,
                         prmcustomerid,
                         prmcardno,
                         prmcardsn,
                         prmempid,
                         sysdate,
                         prmopdesc,
                         vacccode,
                         vaccdesc,
                         prmpsamcardno,
                         prmoldcardtype,
                         prmnewcardtype,
                         prmcustomerunitcode,
                         --2017.07.26 新增以下字段
                         prmoldyearchecks,
                         v_oldcheckbeginday,
                         v_oldcheckendday,
                         prmnewyearchecks,
                         v_newcheckbeginday,
                         v_newcheckendday);

            prmplanid := vid;
            out_result := 100;
            out_msg := '卡类型转换成功';
            commit;
            return;
        else
            update rec_cust_cardtype_change
               set opdesc = prmopdesc
             where id = prmplanid;

            update base_customers
               set cardtypedetailid = prmoldcardtype,
                   --2017.07.26 新增以下更新字段
                   yearchecks = prmoldyearchecks,
                   checkbeginday = v_oldcheckbeginday,
                   checkendday = v_oldcheckendday
             where     customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode
                   and cardno = prmcardno;

            out_result := 100;
            out_msg := '卡类型转换回滚成功';
            commit;
        end if;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '出错，入库操作异常，' || sqlerrm;
    end;

    procedure proc_getcardid (prmscardsnr      in     varchar2,
                              prmcardid        in out varchar2,
                              prmcurrenttime      out date,
                              out_result          out number,
                              --返回结果，100表示成功，其它表示失败
                              out_msg             out varchar2 --返回提示信息
                                                              )
    is
        vcount   number;
    begin
        --获得卡流水号
        select count (cardid)
          into vcount
          from base_cardid
         where scardsnr = prmscardsnr;

        if vcount = 0
        then
            insert into base_cardid (scardsnr)
                 values (prmscardsnr);
        end if;

        select lpad (cardid, 8, '0')
          into prmcardid
          from base_cardid
         where scardsnr = prmscardsnr;

        prmcurrenttime := sysdate;
        out_result := 100;
        out_msg := '操作成功';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := sqlerrm;
    end;

    procedure proc_getoutid (prmcustomerunitcode   in     varchar2, --客户代码
                             prmoutid                 out number,
                             out_result               out number,
                             --返回结果，100表示成功，其它表示失败
                             out_msg                  out varchar2 --返回提示信息
                                                                  )
    /*
      --------------------------------------------------------------------------
      --修改标识：
      --实现功能：自动生成最大市民卡号
      --------------------------------------------------------------------------
      --修改标示：
      --修改说明：
      --------------------------------------------------------------------------

      */
    is
        vcount   number;
    begin
        select count (*)
          into vcount
          from base_sequence_no a
         where a.code = 'outid' and a.customerunitcode = prmcustomerunitcode;

        if vcount > 0
        then
            select nvl (a.max_no, 0) + 1
              into prmoutid
              from base_sequence_no a
             where     a.code = 'outid'
                   and a.customerunitcode = prmcustomerunitcode;
        else
            prmoutid := 100000000000; --加大编号，为了避免与物理号生成的号冲突
        end if;

        if (prmoutid = 100000000000)
        then
            insert into base_sequence_no (code,
                                          max_no,
                                          contentmes,
                                          customerunitcode)
                 values ('outid',
                         prmoutid,
                         '市民卡号自动生成编号',
                         prmcustomerunitcode);
        else
            update base_sequence_no
               set max_no = prmoutid
             where code = 'outid' and customerunitcode = prmcustomerunitcode;
        end if;

        out_result := 100;
        out_msg := '操作成功';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := sqlerrm;
    end;

    procedure proc_makeempdrivercard (
        prmscardsnr             in     varchar2, --卡唯一号
        prmcardkind             in     number, --卡种类（1m1卡 2cpu卡）
        prmempid                in     number, --发卡职员
        prmoperatorempid        in     number, --发放这张卡的操作员
        prmcardtypedetailid     in     number,
        prmidno                 in     varchar2,
        prmareaid               in     number, --区域
        prmposcode              in     number, --终端设备唯一编号,必须存在
        prmpsamcardno           in     number, --终端psam卡号
        prmneedyearcheck        in     number, --是否需要年检，0不需要，1需要
        prmyearcheckstartdate   in     varchar2, --年检开始时间
        prmyearcheckenddate     in     varchar2, --年检结束时间
        prmcardfare             in     number, --卡成本
        prmcardcoverfare        in     number, --卡套成本
        prmid                   in out varchar2, --流水号
        prmcardno               in out number, --卡号
        prmcustomerid           in out number, --账号
        prmnousedate            in out varchar2, --失效期，格式：yyyy-mm-dd
        prmoperation            in     number,
        --操作，0表示申请，1表示回滚
        prmcustomerunitcode     in     varchar2,
        prmasn                  in     varchar2, --用户卡片应用序列号
        prmcardtypeflag         in     varchar2, --用户公交卡类型启用标识
        out_result                 out number,
        --返回结果，100表示成功，其它表示失败
        out_msg                    out varchar2 --返回提示信息
                                               )
    is
        /*
        --------------------------------------------------------------------------
        --修改标识：舒洲 2009-06-19
        --实现功能：发放普通员工卡或司机卡
        --------------------------------------------------------------------------
        --修改标示：朱鹏飞 2009-06-24
        --修改说明：完善处理流程。
        --------------------------------------------------------------------------
        --修改标示：朱鹏飞 2009-06-26
        --修改说明：修改形成折旧费为一笔记录， 增加卡套费字段
        --------------------------------------------------------------------------
        --修改标示：朱鹏飞 2009-07-24
        --修改说明：形成账本明细时增加形成折旧费和日期
        --------------------------------------------------------------------------
        --修改标示：朱鹏飞 2009-08-11
        --修改说明：增加判断卡唯一号是否已存在
        -------------------------------------------------------------------------
        --修改标示：刘东红 2012-02-08
        --修改说明：修改为用户卡可以重复发卡
        --------------------------------------------------------------------------
        --修改标示：周晓娜 2013-05-06
        --修改说明：对收取的费用增加资产负债的统计
        --------------------------------------------------------------------------
        */
        vcount            number;
        vcardtypename     varchar2 (50);
        vidcardno         varchar2 (18);
        vempname          varchar2 (20);
        vaddress          varchar2 (256);
        vsex              number;
        vnation           varchar2 (2);
        v_accdscrp        varchar2 (50); --折旧费科目描述
        v_ktaccdscrp      varchar2 (50); --卡套费科目描述
        v_empdeptcode     varchar2 (50); --职员所属部门
        i_empareaid       integer; --职员所属分区编号
        v_citycode        varchar2 (10); --城市代码
        v_asn             varchar2 (40); --m1asn
        v_industrycode    varchar2 (10); --行业代码
        n_empaccountype   number; --出纳员账户类型
        n_cashaccfc       number; --形成充值明细的原始流水号
        n_empoddfare      number (20, 2); --出纳账户余额
        v_empname         varchar2 (50); --系统账户名称
        v_codeid          varchar2 (100);
        v_mangescrp       varchar2 (100);
    begin
        out_result := -1101;
        out_msg := '获取员工信息';
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        if prmoperation = 0 --申请
        then
            select nvl (count (*), 0)
              into vcount
              from base_emp a, base_dept b
             where     a.dptcode = b.dptcode
                   and a.empid = prmempid
                   and a.customerunitcode = b.customerunitcode
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount <> 1
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := -1007;
                out_msg := '获取职员部门及分区信息失败';
                return;
            end if;

            select count (*)
              into vcount
              from rec_card_make_acc a
             where     a.cardno = prmcardno
                   and a.pty in (0, 1, 2)
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -21;
                out_msg := '卡号重复，请重新洗卡！';
                return;
            end if;

            select idcardno,
                   empname,
                   address,
                   sex,
                   nation
              into vidcardno,
                   vempname,
                   vaddress,
                   vsex,
                   vnation
              from base_emp
             where     empid = prmempid
                   and customerunitcode = prmcustomerunitcode;

            --相同类型的卡都不允许发2张
            select count (*)
              into vcount
              from base_customers a, base_customers_info b
             where     a.customerid = b.customerid
                   and (a.cardtypedetailid = 227)
                   and b.idcardno = vidcardno
                   and a.customerunitcode = b.customerunitcode
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -1106;
                out_msg := '此人已经发过司机卡了，一个人只能发一张！';
                return;
            end if;

            select count (*)
              into vcount
              from base_customers a
             where     a.scardsnr = prmscardsnr
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -1106;
                out_msg :=
                       '此卡已经在系统发放过，不能重复发放scardsnr：'
                    || to_char (prmscardsnr);
                return;
            end if;

            select count (*)
              into vcount
              from base_emp_card a
             where     a.scardsnr = prmscardsnr
                   and a.customeruintcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -1106;
                out_msg :=
                       '此卡已经在系统发放过，不能重复发放scardsnr：'
                    || to_char (prmscardsnr);
                return;
            end if;

            select count (*)
              into vcount
              from base_customers_info a
             where     a.idcardno = prmidno
                   and a.customerunitcode = prmcustomerunitcode;

            --2.3.2、如果没有则添加一条客户信息
            out_result := -23;
            out_msg := '判断客户信息';

            if (vcount <= 0)
            then
                if prmcustomerid < 1
                then
                    select count (*)
                      into vcount
                      from base_sequence_no a
                     where     a.code = 'customerid'
                           and a.customerunitcode = prmcustomerunitcode;

                    if vcount > 0
                    then
                        select nvl (a.max_no, 0) + 1
                          into prmcustomerid
                          from base_sequence_no a
                         where     a.code = 'customerid'
                               and a.customerunitcode = prmcustomerunitcode;
                    else
                        prmcustomerid := 1;
                    end if;

                    if (prmcustomerid = 1)
                    then
                        insert into base_sequence_no (code,
                                                      max_no,
                                                      contentmes,
                                                      customerunitcode)
                             values ('customerid',
                                     1,
                                     'customerid',
                                     prmcustomerunitcode);
                    else
                        update base_sequence_no
                           set max_no = prmcustomerid
                         where     code = 'customerid'
                               and customerunitcode = prmcustomerunitcode;
                    end if;
                end if;

                out_msg :=
                    '11开始添加一条客户信息prmcustomerid==' || prmcustomerid;

                insert into base_customers_info (customerid,
                                                 name,
                                                 sex,
                                                 nation,
                                                 address,
                                                 certificateid,
                                                 idcardno,
                                                 opendt,
                                                 customerunitcode,
                                                 custstatus)
                     values (prmcustomerid,
                             vempname,
                             vsex,
                             vnation,
                             vaddress,
                             3,
                             prmidno,
                             sysdate,
                             prmcustomerunitcode,
                             1);

                --2.3.3、有则读取customerid
                out_result := -23;
                out_msg := '存在则读取customerid';
            else
                out_msg := '开始查询客户基本信息中的customerid' || 'testing1';

                select a.customerid
                  into prmcustomerid
                  from base_customers_info a
                 where     a.idcardno = prmidno
                       and a.customerunitcode = prmcustomerunitcode;
            end if;

            --获得卡流水号
            select count (cardid)
              into vcount
              from base_cardid a
             where scardsnr = prmscardsnr;

            if vcount = 0
            then
                insert into base_cardid (scardsnr)
                     values (prmscardsnr);
            end if;

            select lpad (cardid, 8, '0')
              into prmid
              from base_cardid
             where scardsnr = prmscardsnr;

            prmnousedate := to_char (add_months (sysdate, 360), 'yyyy-mm-dd');

            v_asn := prmasn;
            --
            out_result := -1106;
            out_msg := '形成账本记录';
            out_msg := '开始插入账本表';

            insert into base_customers (customerid,
                                        scardsnr,
                                        cardtypedetailid,
                                        cardsn,
                                        status,
                                        querypwd,
                                        cardkind,
                                        electropcount,
                                        electrsaveopcount,
                                        monopcount,
                                        nousedate,
                                        empid,
                                        yearchecks,
                                        checkbeginday,
                                        checkendday,
                                        depreciatedate,
                                        sumelectradddummyfare,
                                        refunddumpfare,
                                        refundlimitconsumfare,
                                        nonameflag,
                                        cardtypeid,
                                        asn,
                                        outid,
                                        cardtypepeopleid,
                                        numberopcount,
                                        numbersaveopcount,
                                        numberoddfare,
                                        numberoddfareacc,
                                        summangefare,
                                        mangefarelastdate,
                                        sumfreemangefare,
                                        customerunitcode,
                                        opdt,
                                        cardno)
                 values (prmcustomerid,
                         prmscardsnr,
                         prmcardtypedetailid,
                         1,
                         1,
                         '21218cca77804d2ba1922c33e0151105',
                         prmcardkind,
                         0,
                         0,
                         0,
                         to_date (prmnousedate, 'yyyy-mm-dd'),
                         prmoperatorempid,
                         prmneedyearcheck,
                         to_date (prmyearcheckstartdate, 'yyyy-mm-dd'),
                         to_date (prmyearcheckenddate, 'yyyy-mm-dd'),
                         sysdate,
                         0,
                         0,
                         0,
                         0,
                         1,
                         v_asn,
                         0,
                         1,
                         0,
                         0,
                         0,
                         0,
                         0,
                         sysdate,
                         0,
                         prmcustomerunitcode,
                         sysdate,
                         v_asn);

            --2.5.1、如果启用月票则插入月票记录
            out_msg := '插入月票记录';

            if substr (prmcardtypeflag, 3, 1) <> '0'
            then
                insert into base_customers_monticket (customerid,
                                                      sumconsumefare,
                                                      sumrdummyfare,
                                                      sumaddfare,
                                                      sumaddfareacc,
                                                      refunddumpfare,
                                                      refundlimitconsumfare,
                                                      ver,
                                                      sumadddummyfare,
                                                      customerunitcode,
                                                      cardasn --需要添加清零日期和清零方式,vicehangdate,hangtype
                                                             )
                     values (prmcustomerid,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             prmcustomerunitcode,
                             v_asn);
            end if;

            --2.5.2、如果启用次卡则插入次卡记录
            if substr (prmcardtypeflag, 5, 1) <> '0'
            then
                insert into base_customers_vicecard (customerid,
                                                     sumconsumefare,
                                                     sumrdummyfare,
                                                     sumaddfare,
                                                     sumaddfareacc,
                                                     refunddumpfare,
                                                     refundlimitconsumfare,
                                                     ver,
                                                     sumadddummyfare,
                                                     customerunitcode,
                                                     cardasn --需要添加清零日期和清零方式,vicehangdate,hangtype
                                                            )
                     values (prmcustomerid,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             prmcustomerunitcode,
                             v_asn);
            end if;

            out_result := -1107;
            out_msg := '形成制卡记录';

            --插入发卡记录
            insert into rec_card_make_acc (customerid,
                                           scardsnr,
                                           cardno,
                                           cardtypedetailid,
                                           cardsn,
                                           cardkind,
                                           opdt,
                                           empid,
                                           pty,
                                           areaid,
                                           id,
                                           poscode,
                                           depreciatefare,
                                           depreciatedate,
                                           customerunitcode)
                 values (prmcustomerid,
                         prmscardsnr,
                         prmcardno,
                         prmcardtypedetailid,
                         1,
                         prmcardkind,
                         sysdate,
                         prmoperatorempid,
                         0,
                         prmareaid,
                         prmid,
                         prmposcode,
                         prmcardfare,
                         sysdate,
                         prmcustomerunitcode);

            out_result := -1002;
            out_msg := '形成售卡记录';

            --插入售卡记录
            insert into rec_card_sell (customerid,
                                       cardno,
                                       opdt,
                                       stag_ban,
                                       scardsnr,
                                       empid,
                                       areaid,
                                       cardtypedetailid,
                                       poscode,
                                       psamcardno,
                                       cardkind,
                                       customerunitcode)
                select customerid,
                       cardno,
                       sysdate,
                       0,
                       scardsnr,
                       prmoperatorempid,
                       prmareaid,
                       prmcardtypedetailid,
                       prmposcode,
                       prmpsamcardno,
                       prmcardkind,
                       customerunitcode
                  from base_customers
                 where customerid = prmcustomerid;

            out_result := -1003;
            out_msg := '形成折旧费明细记录';

            --获取售卡折旧费的科目描述
            select a.accdscrp
              into v_accdscrp
              from base_acc_type a
             where a.acccode = 700;

            --获取售卡卡套费的科目描述
            select a.accdscrp
              into v_ktaccdscrp
              from base_acc_type a
             where a.acccode = 701;

            --获取售卡卡套费的科目描述
            select a.accdscrp
              into v_mangescrp
              from base_acc_type a
             where a.acccode = 705;

            --获取记录流水号
            select seq_rec_selfmoney_acc.nextval into n_cashaccfc from dual;

            --形成折旧费明细记录
            insert into rec_selfmoney_acc (id,
                                           empid,
                                           customerid,
                                           cardtype,
                                           opfare,
                                           acccode,
                                           dscrp,
                                           ktfare,
                                           ktacccode,
                                           ktaccdscrp,
                                           changedate,
                                           cardkind,
                                           poscode,
                                           scardsnr,
                                           customerunitcode,
                                           cardno,
                                           mangeacccode,
                                           mangefare,
                                           mangedscrp)
                 values (n_cashaccfc,
                         prmoperatorempid,
                         prmcustomerid,
                         prmcardtypedetailid,
                         prmcardfare,
                         700,
                         v_accdscrp,
                         prmcardcoverfare,
                         701,
                         v_ktaccdscrp,
                         sysdate,
                         prmcardkind,
                         prmposcode,
                         prmscardsnr,
                         prmcustomerunitcode,
                         v_asn,
                         705,
                         0,
                         v_mangescrp);

            out_result := -1107;
            out_msg := '制卡数据统计';
            --调用职员统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                601,
                prmoperatorempid,
                prmposcode,
                prmpsamcardno,
                prmcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '制卡数据统计出错，' || out_msg;
                return;
            end if;

            out_result := -1006;
            out_msg := '职员售卡统计';
            --调用职员统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                602, --售卡
                prmoperatorempid,
                prmposcode,
                prmpsamcardno,
                prmcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '售卡统计失败，' || out_msg;
                return;
            end if;

            --获取职员部门及分区编号
            select a.dptcode, a.accounttype, a.empname
              into v_empdeptcode, n_empaccountype, v_empname
              from base_emp a, base_dept b
             where     a.dptcode = b.dptcode
                   and a.empid = prmoperatorempid
                   and a.customerunitcode = b.customerunitcode
                   and a.customerunitcode = prmcustomerunitcode;

            out_result := -1008;
            out_msg := '折旧费用统计';
            --折旧费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardfare,
                700,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                prmcardtypedetailid,
                prmoperatorempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                0,
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '折旧费用统计失败，' || out_msg;
                return;
            end if;

            -------------------------成本费收支账目处理结束------------------------
            out_result := -1009;
            out_msg := '卡套费用统计';
            --卡套费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardcoverfare,
                701,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                prmcardtypedetailid,
                prmoperatorempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                0,
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '卡套费用统计失败，' || out_msg;
                return;
            end if;

            out_result := 100;
            out_msg := '操作成功';
        else
            --回滚
            out_result := -1106;
            out_msg := '形成账本记录';

            --清卡片记录
            delete from base_customers a
                  where     customerid = prmcustomerid
                        and a.customerunitcode = prmcustomerunitcode
                        and a.cardno = prmcardno;

            delete from base_customers_vicecard a
                  where     customerid = prmcustomerid
                        and customerunitcode = prmcustomerunitcode
                        and a.cardasn = prmcardno;

            delete from base_customers_monticket
                  where     customerid = prmcustomerid
                        and customerunitcode = prmcustomerunitcode
                        and cardasn = prmcardno;

            --清发卡记录
            delete from rec_card_make_acc
                  where     customerid = prmcustomerid
                        and scardsnr = prmscardsnr
                        and customerunitcode = prmcustomerunitcode;

            --清售卡记录
            delete from rec_card_sell
                  where     customerid = prmcustomerid
                        and scardsnr = prmscardsnr
                        and customerunitcode = prmcustomerunitcode;

            out_result := -1003;
            out_msg := '形成折旧费明细记录';

            --获取售卡折旧费的科目描述
            select a.accdscrp
              into v_accdscrp
              from base_acc_type a
             where a.acccode = 700;

            --获取售卡卡套费的科目描述
            select a.accdscrp
              into v_ktaccdscrp
              from base_acc_type a
             where a.acccode = 701;

            select a.id
              into n_cashaccfc
              from rec_selfmoney_acc a
             where     empid = prmoperatorempid
                   and customerid = prmcustomerid
                   and acccode = 700
                   and scardsnr = prmscardsnr
                   and a.customerunitcode = prmcustomerunitcode;

            --清折旧费明细记录
            delete from rec_selfmoney_acc a
                  where     empid = prmoperatorempid
                        and customerid = prmcustomerid
                        and acccode = 700
                        and scardsnr = prmscardsnr
                        and a.customerunitcode = prmcustomerunitcode;

            out_result := -1107;
            out_msg := '制卡数据统计';
            --调用职员统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                601,
                prmoperatorempid,
                prmposcode,
                prmpsamcardno,
                prmcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '制卡数据统计出错，' || out_msg;
                return;
            end if;

            out_result := -1006;
            out_msg := '职员售卡统计';
            --调用职员统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                602, --售卡
                prmoperatorempid,
                prmposcode,
                prmpsamcardno,
                prmcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '售卡统计失败，' || out_msg;
                return;
            end if;

            --获取职员部门及分区编号
            select a.dptcode, a.accounttype, a.empname
              into v_empdeptcode, n_empaccountype, v_empname
              from base_emp a, base_dept b
             where     a.dptcode = b.dptcode
                   and a.empid = prmoperatorempid
                   and a.customerunitcode = b.customerunitcode
                   and a.customerunitcode = prmcustomerunitcode;

            out_result := -1008;
            out_msg := '折旧费用统计';
            --折旧费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardfare,
                700,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                prmcardtypedetailid,
                prmoperatorempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '折旧费用统计失败，' || out_msg;
                return;
            end if;

            -------------------------成本费收支账目处理结束------------------------
            out_result := -1009;
            out_msg := '卡套费用统计';
            --卡套费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardcoverfare,
                701,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                prmcardtypedetailid,
                prmoperatorempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '卡套费用统计失败，' || out_msg;
                return;
            end if;

            out_result := 100;
            out_msg := '回滚成功';
        end if;

        commit;
    exception
        when others
        then
            rollback;
            out_result := out_result;
            out_msg := out_msg || '出错，入库操作异常，' || sqlerrm;
    end;

    procedure proc_get_emp_farecount (
        prmcustomerunitcode   in     varchar2,
        prmempid              in     number,
        prmoptype             in     number, --操作类型：0查询，1日结
        out_cursor               out refcursortype,
        out_result               out number,
        out_msg                  out varchar2)
    is
        /*
        --------------------------------------------------------------------------
        --修改标识：刘东红 2009-05-29
        --实现功能：返回操作员卡务当日操作统计信息，此功能主要记录应交现金数
        --------------------------------------------------------------------------
        */
        vcount             number;
        n_sellcards        number; --售卡数
        n_sellcardcash     number; --售卡收费额
        n_electtions       number; --钱包充值数
        n_electtioncash    number; --钱包充值额
        n_montickets       number; --月票充值数
        n_monticketcash    number; --月票充值额
        n_vicecards        number; --次卡充值数
        n_vicecardcash     number; --次卡充值额
        n_writeoffs        number; --销户数
        n_writecash        number; --销户额
        n_fares            number; --其他收费数
        n_farecash         number; --其他收费额
        n_unsets           number; --未决数
        n_unsetcash        number; --未决额
        n_sumcash          number; --金额合记
        v_opdt             varchar2 (20);
        n_payments         number; --日结记录数
        custom_exception   exception; --自定义异常
        startdate          date;
    begin
        out_result := -1000;
        out_msg := '读取信息失败';
        v_opdt := to_char (sysdate, 'yyyy-mm-dd');
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            raise custom_exception;
        end if;

        select nvl (count (*), 0)
          into n_payments
          from rec_payment_day a
         where a.empid = prmempid and to_char (a.opdt, 'yyyy-mm-dd') = v_opdt;

        startdate := to_date (v_opdt, 'yyyy-mm-dd');

        if prmoptype = 1 --日结处理
        then
            if n_payments < 1
            then
                insert into rec_payment_day (empid,
                                             opdt,
                                             sellcards,
                                             sellcardcash,
                                             electtions,
                                             electtioncash,
                                             montickets,
                                             monticketcash,
                                             vicecards,
                                             vicecardcash,
                                             writeoffs,
                                             writecash,
                                             fares,
                                             farecash,
                                             unsets,
                                             unsetcash,
                                             sumcash,
                                             customerunitcode)
                     values (prmempid,
                             sysdate,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             prmcustomerunitcode);

                n_payments := 1;
            end if;
        end if;

        open out_cursor for
            select b.*, n_payments as payments
              from (select * from v_st_payment_all
                    union
                    select a.id,
                           a.statdt,
                           a.poscode,
                           a.psamcardno,
                           0 as busid,
                           0 as buslineid,
                           a.empid,
                           0 as wallettype,
                           a.cardtype,
                           a.cardkind,
                           a.accdt as accdate,
                           a.deptcode as dptcode,
                           a.acccode,
                           a.operno,
                           a.opermn,
                           0 as discountmn,
                           a.statdt as balancedate,
                           a.customerunitcode
                      from st_emp_trade a) b
             where     empid = prmempid
                   and statdate = startdate
                   and customerunitcode = prmcustomerunitcode;

        out_result := 100;
        out_msg := '成功';
        commit;
    exception
        when custom_exception
        then
            rollback;

            open out_cursor for
                select 0 as id,
                       sysdate as statdt,
                       0 as poscode,
                       0 as psamcardno,
                       0 as busid,
                       0 as buslineid,
                       0 as empid,
                       0 as wallettype,
                       0 as cardtype,
                       0 as cardkind,
                       0 as accdate,
                       '0' as dptcode,
                       0 as acccode,
                       0 as operno,
                       0 as opermn,
                       0 as discountmn,
                       sysdate as balancedate,
                       '0' as customerunitcode,
                       0 as payments
                  from dual;

            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;

            out_msg := '查询错误，详细信息：' || out_msg;
        when others
        then
            rollback;

            open out_cursor for
                select 0 as id,
                       sysdate as statdt,
                       0 as poscode,
                       0 as psamcardno,
                       0 as busid,
                       0 as buslineid,
                       0 as empid,
                       0 as wallettype,
                       0 as cardtype,
                       0 as cardkind,
                       0 as accdate,
                       '0' as dptcode,
                       0 as acccode,
                       0 as operno,
                       0 as opermn,
                       0 as discountmn,
                       sysdate as balancedate,
                       '0' as customerunitcode,
                       0 as payments
                  from dual;

            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;

            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;

    /*
      ---------------------------------------------------------------------------
      --修改标识：张斌 2012-09-04
      --实现功能：乘车卡卡片登记入库
      ---------------------------------------------------------------------------
    */
    procedure proc_cardregist ( -------- ----------------卡片信息
                               prmtype               in     number, --1登记入库 2登记回滚
                               prmcardkind           in     number, --卡种类（1m1卡 2cpu卡）
                               prmcardasn            in     varchar2, --卡片应用序列号
                               prmcardsnr            in     varchar2, --卡唯一号
                               prmempid              in     number, --操作职员
                               prmcustomerunitcode   in     varchar2, --客户代码
                               -------------------------基本信息
                               prmischeck            in     number, --0为检查1为不检查
                               prmtermid             in     number, --终端编号
                               prmposcode            in     number, --终端设备唯一编号,必须存在
                               prmpsamcardno         in     number, --终端psam卡号
                               prmdetailid           in     number,
                               out_result               out number,
                               --返回结果，100表示成功，其它表示失败
                               out_msg                  out varchar2 --返回提示信息
                                                                    )
    is
        vcount    number; --计数器
        vstatus   number; --卡状态
    begin
        --1、验证poscode、psam卡号、psam卡状态、职员
        --prmischeck=0则检查、prmischeck=1为不检查
        if prmischeck = 0
        then
            out_msg := '开始基本信息验证';
            pkg_common.check_psam_emp_term (prmempid,
                                            prmtermid,
                                            prmposcode,
                                            prmpsamcardno,
                                            prmcustomerunitcode,
                                            out_result,
                                            out_msg);

            if out_result <> 100
            then
                --验证失败，返回错误
                out_result := out_result;
                out_msg := '基本信息验证失败' || out_msg;
                return;
            end if;
        end if;

        --2.1、乘车卡登记入库
        --prmtype=1为登记入库
        if prmtype = 1
        then
            --判断是否已经登记
            out_msg := '开始判断是否登记';

            select count (*)
              into vcount
              from base_card_regist a
             where     a.customerunitcode = prmcustomerunitcode
                   and a.scardsnr = prmcardsnr
                   and a.cardkind = prmcardkind;

            --如果登记则返回值
            if (vcount >= 1)
            then
                out_result := -100; --返回记录数
                out_msg := '该卡已经登记';
                return;
            --如果未登记则开始登记
            else
                out_result := -1;
                out_msg := '开始登记入库';

                insert into base_card_regist (cardkind,
                                              scardsnr,
                                              empcode,
                                              customerunitcode,
                                              status,
                                              customerid,
                                              detailid)
                     values (prmcardkind,
                             prmcardsnr,
                             prmempid,
                             prmcustomerunitcode,
                             0,
                             0,
                             prmdetailid);

                out_result := 100;
                out_msg := '登记入库成功';
                commit;
            end if;
        --2.2、乘车卡登记回滚
        --prmtype=2为登记回滚
        elsif prmtype = 2
        then
            out_result := -2;
            out_msg := '开始登记回滚';

            delete from base_card_regist a
                  where     a.customerunitcode = prmcustomerunitcode
                        and a.scardsnr = prmcardsnr
                        and a.cardkind = prmcardkind;

            out_result := 100;
            out_msg := '登记回滚成功';
            commit;
        else
            out_result := -3;
            out_msg := '开始查询登记结果';

            select count (*)
              into out_result
              from base_card_regist a
             where     a.scardsnr = prmcardsnr
                   and a.customerunitcode = prmcustomerunitcode;
        end if;
    exception
        when others
        then
            rollback;
            out_result := out_result;
            out_msg := out_msg || '出错，卡片登记回滚入库异常，' || sqlerrm;
    end;

    /*
      ---------------------------------------------------------------------------
      --修改标识: 张斌 2012-12-03
      --实现功能: 乘车卡补卡
      ---------------------------------------------------------------------------
    */
    procedure proc_remakecustcard (prmscardsnr           in     varchar2, --卡唯一号
                                   prmcardkind           in     number, --卡种类（1m1卡 2cpu卡）
                                   prmempid              in     number, --操作职员
                                   prmcustomerid         in     number, --补卡的账号
                                   prmposcode            in     number, --终端设备唯一编号,必须存在
                                   prmpsamcardno         in     number, --终端psam卡号
                                   prmcardfare           in     number, --卡成本
                                   prmcardcoverfare      in     number, --卡套成本
                                   prmbkmangerarerate    in     number, --补卡管理费
                                   prmid                 in out varchar2, --流水号
                                   prmcardno             in out number, --卡号
                                   prmoldcardno          in     number, --卡号
                                   prmcustomerunitcode   in     varchar2, --客户代码
                                   prmremakecardtype     in     varchar2, --补卡类型
                                   prmoutid              in     varchar2,
                                   prmoldscardsnr               varchar2,
                                   prmoperation          in     number,
                                   --操作，0表示申请，1表示回滚
                                   out_result               out number,
                                   --返回结果，100表示成功，其它表示失败
                                   out_msg                  out varchar2 --返回提示信息
                                                                        )
    is
        vcount                  number;
        vcardtypedetailid       number;
        --卡类型                                          --计数器
        vstatus                 number; --卡状态
        vlossfc                 number;
        v_monthlimittimes       number; --售卡时候的充值额度
        v_monthnum              number; --充值月数
        v_monthvalidtimestart   date; --月票充值开始时间
        v_monthvalidtimeend     date; --月票充值结束时间
        n_oldsummonoddfare      number (10, 2); --老卡12个月余额汇总
        v_vice_limittimes       number; --售卡时候的充值额度
        v_vice_num              number; --充值月数
        v_vice_s_month          date; --月票充值开始时间
        v_vice_e_month          date; --月票充值结束时间
        v_vice_e_month1         date; --月票充值结束时间用来循环使用
        n_oldsumviceoddfare     number (10, 2); --老卡12个月余额汇总
        v_empdeptcode           varchar2 (50); --职员所属部门
        v_accdscrp              varchar2 (50); --折旧费科目描述
        v_ktaccdscrp            varchar2 (50); --卡套费科目描述
        v_bkmangescrp           varchar2 (50); --职员所属部门
        v_citycode              varchar2 (50);
        v_industrycode          varchar2 (50);
        v_vicelimittimes        number; --售卡时候的充值额度
        v_vicemonthnum          number; --充值月数
        v_vicevalidtimestart    date; --月票充值开始时间
        v_vicevalidtimeend      date; --月票充值结束时间
        n_empaccountype         number; --出纳员账户类型
        n_cashaccfc             number; --形成充值明细的原始流水号
        n_empoddfare            number (20, 2); --出纳账户余额
        v_empname               varchar2 (30); --出纳员名称
        v_oldscardsnr           varchar2 (50);
        v_codeid                varchar2 (100);
        n_cardsn                number;
        v_remakecardtype        varchar2 (50); --类型
    begin
        --------------------------------------------------------------------------------
        --修改标识: 李政 2014-03-19
        --实现功能: nfc手机换号补卡要更更新扩展表中的电话号码字段，借用 prmremakecardtype 作为手机号码
        ----------------------------------------------------------------------------------
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);
        v_remakecardtype := 1;

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        if prmoperation = 0
        then
            --2、判断该卡物理号是否已发过卡
            --20170524 以cardno条件为准
            select count (*)
              into vcount
              from base_customers a
             where     a.cardno = prmcardno
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -21;
                out_msg :=
                       '该卡已在系统中使用！scardsnr'
                    || prmscardsnr
                    || ',asn'
                    || prmcardno;
                return;
            end if;

            select count (*)
              into vcount
              from base_emp_card a
             where     a.scardsnr = prmscardsnr
                   and a.customeruintcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -1;
                out_msg := '该卡已发过功能卡';
                return;
            end if;

            select count (*)
              into vcount
              from rec_card_make_acc a
             where     a.cardno = prmcardno
                   and a.pty in (0, 1, 2)
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -21;
                out_msg := '卡号重复，请重新洗卡！';
                return;
            end if;

            out_result := -24;
            out_msg := '1111';

            --3、读取老卡基本信息
            select a.status, cardtypedetailid, a.cardsn
              into vcount, vcardtypedetailid, n_cardsn
              from base_customers a
             where     a.customerid = prmcustomerid
                   and a.cardno = prmoldcardno
                   and a.customerunitcode = prmcustomerunitcode;

            --4、判断老卡是否为挂失状态
            if vcount <> 3
            then
                out_result := -1;
                out_msg := '请先挂失再补卡';
                return;
            end if;

            v_remakecardtype := prmremakecardtype;

            if (length (prmremakecardtype) > 10)
            then
                update base_customers_info a
                   set a.telphonenum = prmremakecardtype
                 where     a.customerid = prmcustomerid
                       and a.customerunitcode = prmcustomerunitcode;

                v_remakecardtype := 1;
            end if;

            if vcardtypedetailid <> 227
            then
                select count (*)
                  into vcount
                  from base_customers a
                 where     a.outid = prmoutid
                       and a.customerunitcode = prmcustomerunitcode
                       and a.customerid <> prmcustomerid
                       and a.cardno <> prmoldcardno;

                if vcount > 0
                then
                    out_result := -21;
                    out_msg := '市民卡号重复！';
                    return;
                end if;
            end if;

            --5、判断老卡是否存在挂失记录
            select count (*)
              into vcount
              from rec_loss a
             where     a.customerid = prmcustomerid
                   and a.cardno = prmoldcardno
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount < 1
            then
                out_result := -1;
                out_msg := '该卡未办理挂失业务';
                return;
            end if;

            --6、获取老卡挂失流水号
            select lossfc
              into vlossfc
              from rec_loss a
             where     a.customerid = prmcustomerid
                   and a.customerunitcode = prmcustomerunitcode
                   and a.cardno = prmoldcardno
                   and optype = 0
                   and hasunloss = 0
                   and rownum < 2;

            --7、获取卡流水号
            select count (cardid)
              into vcount
              from base_cardid
             where scardsnr = prmscardsnr;

            if vcount = 0
            then
                insert into base_cardid (scardsnr)
                     values (prmscardsnr);
            end if;

            select lpad (cardid, 8, '0')
              into prmid
              from base_cardid
             where scardsnr = prmscardsnr;

            --7.1、获取m1卡asn

            --8、形成补卡记录
            insert into rec_card_make_acc (customerid,
                                           scardsnr,
                                           cardno,
                                           oldcardno,
                                           cardtypedetailid,
                                           cardsn,
                                           oldcardsn,
                                           cardkind,
                                           oldelectropcount,
                                           oldelectrsaveopcount,
                                           oldmonopcount,
                                           oldelectroddfare,
                                           opdt,
                                           lossfc,
                                           empid,
                                           stag_ban,
                                           pty,
                                           id,
                                           poscode,
                                           monsaveopcount,
                                           summonthoddfare,
                                           summonthoddfareacc,
                                           depreciatefare,
                                           depreciatedate,
                                           remakecardtype,
                                           customerunitcode,
                                           outid)
                select a.customerid,
                       prmscardsnr as scardsnr,
                       prmcardno,
                       prmoldcardno as oldcardno,
                       a.cardtypedetailid,
                       a.cardsn + 1,
                       a.cardsn,
                       prmcardkind as cardkind,
                       a.electropcount,
                       a.electrsaveopcount,
                       a.monopcount,
                       a.electroddfare,
                       sysdate as opdt,
                       vlossfc as lossfc,
                       prmempid as empid,
                       0 as stag_ban,
                       1 as pty,
                       prmid as id,
                       prmposcode as poscode,
                       a.monsaveopcount,
                       a.monoddfare,
                       a.summonaddfareacc,
                       prmcardfare as depreciatefare,
                       sysdate as depreciatedate,
                       v_remakecardtype as remakecardtype,
                       prmcustomerunitcode as customerunitcode,
                       prmoutid
                  from base_customers a
                 where     customerid = prmcustomerid
                       and a.cardno = prmoldcardno
                       and customerunitcode = prmcustomerunitcode;

            select nvl (max (a.planid), 0)
              into vcount
              from rec_vicecard_cash_plan_putout a
             where     a.cardno = prmoldcardno
                   and a.customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode
                   and a.planid not in
                           (select planid
                              from rec_vicecard_cash1
                             where     customerid = prmcustomerid
                                   and customerunitcode = prmcustomerunitcode);

            if vcount > 0
            then
                select a.limittimes,
                       a.monthnum,
                       a.validtimestart,
                       a.validtimeend
                  into v_vicelimittimes,
                       v_vicemonthnum,
                       v_vicevalidtimestart,
                       v_vicevalidtimeend
                  from rec_vicecard_cash_plan_putout a
                 where a.planid = vcount;
            else
                v_vicelimittimes := 0;
                v_vicemonthnum := 0;
                v_vicevalidtimestart := sysdate;
                v_vicevalidtimeend := sysdate;
            end if;

            select nvl (max (a.planid), 0)
              into vcount
              from rec_monticket_cash_plan_putout a
             where     a.cardno = prmoldcardno
                   and a.customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode
                   and a.planid not in
                           (select planid
                              from rec_monticket_cash1
                             where     customerid = prmcustomerid
                                   and customerunitcode = prmcustomerunitcode);

            if vcount > 0
            then
                select a.limittimes,
                       a.monthnum,
                       a.validtimestart,
                       a.validtimeend
                  into v_monthlimittimes,
                       v_monthnum,
                       v_monthvalidtimestart,
                       v_monthvalidtimeend
                  from rec_monticket_cash_plan_putout a
                 where a.planid = vcount;
            else
                v_monthlimittimes := 0;
                v_monthnum := 0;
                v_monthvalidtimestart := sysdate;
                v_monthvalidtimeend := sysdate;
            end if;

            --9、形成电子钱包冻结金额
            select count (*)
              into vcount
              from rec_freezefare_acc a
             where     a.customerid = prmcustomerid
                   and a.customerunitcode = prmcustomerunitcode
                   and a.cardno = prmoldcardno
                   and a.cardsn = n_cardsn;

            if vcount = 1
            then
                update rec_freezefare_acc a
                   set newcardno = prmcardno
                 where     a.customerid = prmcustomerid
                       and a.customerunitcode = prmcustomerunitcode
                       and a.cardno = prmoldcardno
                       and a.cardsn = n_cardsn;
            else
                insert into rec_freezefare_acc (customerid,
                                                cardno,
                                                cardtype,
                                                cardsn,
                                                cardkind,
                                                opcount,
                                                saveopcount,
                                                freezefare,
                                                empid,
                                                freezefareflag,
                                                createdate,
                                                ver,
                                                customerunitcode,
                                                wallettype,
                                                opdt,
                                                limittimes,
                                                monthnum,
                                                validtimestart,
                                                validtimeend,
                                                monthfreezefare,
                                                monthfreezefareflag,
                                                monthopcount,
                                                monthsaveopcount,
                                                vicefreezefare,
                                                vicefreezefareflag,
                                                viceopcount,
                                                vicesaveopcount,
                                                vicelimittimes,
                                                vicemonthnum,
                                                vicevalidtimestart,
                                                vicevalidtimeend,
                                                newcardno,
                                                cardid,
                                                outid,
                                                cardtypedetailid,
                                                opendt)
                    select a.customerid,
                           a.cardno,
                           a.cardtypedetailid,
                           a.cardsn,
                           a.cardkind,
                           a.electropcount,
                           a.electrsaveopcount,
                           a.electroddfare,
                           prmempid,
                           0,
                           sysdate,
                           0,
                           prmcustomerunitcode,
                           1,
                           sysdate,
                           v_monthlimittimes,
                           v_monthnum,
                           v_monthvalidtimestart,
                           v_monthvalidtimeend,
                           monoddfare,
                           0,
                           monopcount,
                           monsaveopcount,
                           numberoddfare,
                           0,
                           numberopcount,
                           numbersaveopcount,
                           v_vicelimittimes,
                           v_vicemonthnum,
                           v_vicevalidtimestart,
                           v_vicevalidtimeend,
                           prmcardno,
                           id,
                           outid,
                           cardtypedetailid,
                           opdt
                      from base_customers a
                     where     a.customerid = prmcustomerid
                           and a.cardno = prmoldcardno
                           and a.customerunitcode = prmcustomerunitcode;
            end if;

            --10、形成次卡电子钱包冻结金额

            --10.1、将base_customers_vicecard中该用户信息清零
            update base_customers_vicecard
               set sumconsumefare = 0,
                   sumrdummyfare = 0,
                   sumaddfare = 0,
                   sumaddfareacc = 0,
                   sumadddummyfare = 0,
                   refunddumpfare = 0,
                   refundlimitconsumfare = 0,
                   ver = 0,
                   cardasn = prmcardno
             where     customerid = prmcustomerid
                   and cardasn = prmoldcardno
                   and customerunitcode = prmcustomerunitcode;

            --11、形成月票电子钱包冻结金额

            --11.1、将base_customers_monthcard中该用户信息清零
            update base_customers_monticket
               set sumconsumefare = 0,
                   sumrdummyfare = 0,
                   sumaddfare = 0,
                   sumaddfareacc = 0,
                   sumadddummyfare = 0,
                   refunddumpfare = 0,
                   refundlimitconsumfare = 0,
                   ver = 0,
                   cardasn = prmcardno
             where     customerid = prmcustomerid
                   and cardasn = prmoldcardno
                   and customerunitcode = prmcustomerunitcode;

            --12、形成售卡记录
            insert into rec_card_sell (customerid,
                                       cardno,
                                       opdt,
                                       stag_ban,
                                       scardsnr,
                                       empid,
                                       cardtypedetailid,
                                       poscode,
                                       psamcardno,
                                       cardkind,
                                       customerunitcode)
                 values (prmcustomerid,
                         prmcardno,
                         sysdate,
                         0,
                         prmscardsnr,
                         prmempid,
                         vcardtypedetailid,
                         prmposcode,
                         prmpsamcardno,
                         prmcardkind,
                         prmcustomerunitcode);

            --13、获取售卡折旧费的科目描述
            select a.accdscrp
              into v_accdscrp
              from base_acc_type a
             where a.acccode = 702;

            --14、获取售卡卡套费的科目描述
            select a.accdscrp
              into v_ktaccdscrp
              from base_acc_type a
             where a.acccode = 703;

            --15、获取补卡管理费的科目描述
            select a.accdscrp
              into v_bkmangescrp
              from base_acc_type a
             where a.acccode = 706;

            --获取记录流水号
            select seq_rec_selfmoney_acc.nextval into n_cashaccfc from dual;

            --形成折旧费明细记录
            insert into rec_selfmoney_acc (id,
                                           empid,
                                           customerid,
                                           cardtype,
                                           opfare,
                                           acccode,
                                           dscrp,
                                           ktfare,
                                           ktacccode,
                                           ktaccdscrp,
                                           changedate,
                                           cardkind,
                                           poscode,
                                           scardsnr,
                                           mangeacccode,
                                           mangefare,
                                           mangedscrp,
                                           customerunitcode,
                                           cardno)
                 values (n_cashaccfc,
                         prmempid,
                         prmcustomerid,
                         vcardtypedetailid,
                         prmcardfare,
                         702,
                         v_accdscrp,
                         prmcardcoverfare,
                         703,
                         v_ktaccdscrp,
                         sysdate,
                         prmcardkind,
                         prmposcode,
                         prmscardsnr,
                         706,
                         prmbkmangerarerate,
                         v_bkmangescrp,
                         prmcustomerunitcode,
                         prmcardno);

            --16、更新账本
            update base_customers
               set cardsn = cardsn + 1,
                   cardno = prmcardno,
                   scardsnr = prmscardsnr,
                   depreciatefare = prmcardfare,
                   depreciatedate = sysdate,
                   status = 1,
                   electropcount = 0,
                   electrsaveopcount = 0,
                   monopcount = 0,
                   monsaveopcount = 0,
                   monoddfare = 0,
                   electroddfare = 0,
                   numberopcount = 0,
                   numbersaveopcount = 0,
                   numberoddfare = 0,
                   asn = prmcardno,
                   outid = prmoutid,
                   opdt = sysdate
             where     customerid = prmcustomerid
                   and cardno = prmoldcardno
                   and customerunitcode = prmcustomerunitcode;

            --17、调用职员统计
            out_result := -1105;
            out_msg := '职员统计';
            --调用职员统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                601,
                prmempid,
                prmposcode,
                prmpsamcardno,
                vcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '制卡数据统计出错，' || out_msg;
                return;
            end if;

            --18、职员补卡统计
            out_result := -1006;
            out_msg := '职员补卡统计';
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                603, --补卡
                prmempid,
                prmposcode,
                prmpsamcardno,
                vcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '补卡统计失败，' || out_msg;
                return;
            end if;

            out_result := -1025;
            out_msg := '获取职员信息失败！';

            --19、获取职员部门
            select a.dptcode, a.accounttype, a.empname
              into v_empdeptcode, n_empaccountype, v_empname
              from base_emp a
             where     a.empid = prmempid
                   and a.customerunitcode = prmcustomerunitcode;

            --20、折旧费用统计
            out_result := -1008;
            out_msg := '补卡成本费用统计';
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardfare,
                702,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '补卡成本费用统计失败，' || out_msg;
                return;
            end if;

            -------------------------成本费收支账目处理结束------------------------

            --21、补卡卡套费用统计
            out_result := -1009;
            out_msg := '补卡卡套费用统计';
            --补卡卡套费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardcoverfare,
                703,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '补卡卡套费用统计失败，' || out_msg;
                return;
            end if;

            -------------------------卡套费收支账目统计结束------------------------

            --22、补卡管理费用统计
            out_result := -1010;
            out_msg := '补卡管理费用统计';
            --补卡卡套费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmbkmangerarerate,
                706,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '补卡管理费用统计失败，' || out_msg;
                return;
            end if;
        else
            --回滚
            select a.cardtypedetailid
              into vcardtypedetailid
              from base_customers a
             where     a.customerid = prmcustomerid
                   and a.cardno = prmcardno
                   and a.customerunitcode = prmcustomerunitcode
                   and rownum < 2;

            update base_customers a
               set a.status = 3,
                   cardno = prmoldcardno,
                   asn = prmoldcardno,
                   cardsn = cardsn - 1,
                   scardsnr = prmoldscardsnr
             where     a.customerid = prmcustomerid
                   and a.cardno = prmcardno
                   and a.customerunitcode = prmcustomerunitcode;

            update rec_card_make_acc a
               set pty = 11
             where     customerid = prmcustomerid
                   and a.cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            update base_customers_vicecard
               set cardasn = prmoldcardno
             where     customerid = prmcustomerid
                   and cardasn = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            update base_customers_monticket
               set cardasn = prmoldcardno
             where     customerid = prmcustomerid
                   and cardasn = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            --13、获取售卡折旧费的科目描述
            select a.accdscrp
              into v_accdscrp
              from base_acc_type a
             where a.acccode = 702;

            --14、获取售卡卡套费的科目描述
            select a.accdscrp
              into v_ktaccdscrp
              from base_acc_type a
             where a.acccode = 703;

            --15、获取补卡管理费的科目描述
            select a.accdscrp
              into v_bkmangescrp
              from base_acc_type a
             where a.acccode = 706;

            --形成折旧费明细记录
            insert into rec_selfmoney_acc_rollback (id,
                                                    empid,
                                                    customerid,
                                                    cardtype,
                                                    opfare,
                                                    acccode,
                                                    dscrp,
                                                    ktfare,
                                                    ktacccode,
                                                    ktaccdscrp,
                                                    changedate,
                                                    cardkind,
                                                    poscode,
                                                    scardsnr,
                                                    customerunitcode)
                select id,
                       empid,
                       customerid,
                       cardtype,
                       opfare,
                       acccode,
                       dscrp,
                       ktfare,
                       ktacccode,
                       ktaccdscrp,
                       changedate,
                       cardkind,
                       poscode,
                       scardsnr,
                       customerunitcode
                  from rec_selfmoney_acc
                 where     customerunitcode = prmcustomerunitcode
                       and customerid = prmcustomerid
                       and cardno = prmcardno;

            select id
              into n_cashaccfc
              from rec_selfmoney_acc
             where     customerunitcode = prmcustomerunitcode
                   and customerid = prmcustomerid
                   and cardno = prmcardno
                   and rownum < 2;

            delete from rec_selfmoney_acc
                  where     customerunitcode = prmcustomerunitcode
                        and customerid = prmcustomerid
                        and cardno = prmcardno;

            --17、调用职员统计
            out_result := -1105;
            out_msg := '职员统计';
            --调用职员统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                601,
                prmempid,
                prmposcode,
                prmpsamcardno,
                vcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '制卡数据统计出错，' || out_msg;
                return;
            end if;

            --18、职员补卡统计
            out_result := -1006;
            out_msg := '职员补卡统计';
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                603, --补卡
                prmempid,
                prmposcode,
                prmpsamcardno,
                vcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '补卡统计失败，' || out_msg;
                return;
            end if;

            out_result := -1025;
            out_msg := '获取职员信息失败！';

            --19、获取职员部门
            select a.dptcode, a.accounttype, a.empname
              into v_empdeptcode, n_empaccountype, v_empname
              from base_emp a
             where     a.empid = prmempid
                   and a.customerunitcode = prmcustomerunitcode;

            --20、折旧费用统计
            out_result := -1008;
            out_msg := '补卡成本费用统计';
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardfare,
                702,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '补卡成本费用统计失败，' || out_msg;
                return;
            end if;

            -------------------------成本费收支账目处理结束------------------------

            --21、补卡卡套费用统计
            out_result := -1009;
            out_msg := '补卡卡套费用统计';
            --补卡卡套费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardcoverfare,
                703,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                1,
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '补卡卡套费用统计失败，' || out_msg;
                return;
            end if;

            --22、补卡管理费用统计
            out_result := -1010;
            out_msg := '补卡管理费用统计';
            --补卡卡套费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmbkmangerarerate,
                706,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                1,
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '补卡管理费用统计失败，' || out_msg;
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := '操作成功';
        commit;
    exception
        when others
        then
            rollback;
            out_result := out_result;
            out_msg := out_msg || '出错:' || sqlerrm;
            return;
    end;

    procedure proc_changecustcard (prmscardsnr           in     varchar2, --卡唯一号
                                   prmcardkind           in     number, --卡种类（1m1卡 2cpu卡）
                                   prmempid              in     number, --操作职员
                                   prmcustomerid         in     number, --补卡的账号
                                   prmposcode            in     number, --终端设备唯一编号,必须存在
                                   prmpsamcardno         in     number, --终端psam卡号
                                   prmcardfare           in     number, --卡成本
                                   prmcardcoverfare      in     number, --卡套成本
                                   prmbkmangerarerate    in     number, --补卡管理费
                                   prmid                 in out varchar2, --流水号
                                   prmcardno             in out number, --卡号
                                   prmoldcardno          in     number, --卡号
                                   prmcustomerunitcode   in     varchar2, --客户代码
                                   prmremakecardtype     in     varchar2, --补卡类型
                                   prmoutid              in     varchar2,
                                   prmoldscardsnr               varchar2,
                                   prmoperation          in     number,
                                   --操作，0表示申请，1表示回滚
                                   out_result               out number,
                                   --返回结果，100表示成功，其它表示失败
                                   out_msg                  out varchar2 --返回提示信息
                                                                        )
    is
        /*
        -------------------------------------------------------------------------------
        --存储过程： proc_changecustcard
        --作　　者：刘东红
        --时　　间：2009-07-03
        --说　　明： 换卡
        /*
        --------------------------------------------------------------------------
        --修改标识：杨英豪 2017-05-24
        --修改说明：售卡/补卡/换卡时过程中，根据cardno(asn)判断账本表记录，
                   不再判断(rec_card_make_acc)制卡表carndo
        --------------------------------------------------------------------------
        */
        vcount                  number;
        vcardtypedetailid       number;
        --卡类型                                          --计数器
        vstatus                 number; --卡状态
        vlossfc                 number;
        v_monthlimittimes       number; --售卡时候的充值额度
        v_monthnum              number; --充值月数
        v_monthvalidtimestart   date; --月票充值开始时间
        v_monthvalidtimeend     date; --月票充值结束时间
        n_oldsummonoddfare      number (10, 2); --老卡12个月余额汇总
        v_vice_limittimes       number; --售卡时候的充值额度
        v_vice_num              number; --充值月数
        v_vice_s_month          date; --月票充值开始时间
        v_vice_e_month          date; --月票充值结束时间
        v_vice_e_month1         date; --月票充值结束时间用来循环使用
        n_oldsumviceoddfare     number (10, 2); --老卡12个月余额汇总
        v_empdeptcode           varchar2 (50); --职员所属部门
        v_accdscrp              varchar2 (50); --折旧费科目描述
        v_ktaccdscrp            varchar2 (50); --卡套费科目描述
        v_bkmangescrp           varchar2 (50); --职员所属部门
        v_citycode              varchar2 (50);
        v_industrycode          varchar2 (50);
        v_vicelimittimes        number; --售卡时候的充值额度
        v_vicemonthnum          number; --充值月数
        v_vicevalidtimestart    date; --月票充值开始时间
        v_vicevalidtimeend      date; --月票充值结束时间
        n_empaccountype         number; --出纳员账户类型
        n_cashaccfc             number; --形成充值明细的原始流水号
        n_empoddfare            number (20, 2); --出纳账户余额
        v_empname               varchar2 (30); --出纳员名称
        v_oldscardsnr           varchar2 (50);
        v_codeid                varchar2 (100);
        n_cardsn                number;
    begin
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        if prmoperation = 0
        then
            --2、判断该卡物理号是否已发过卡
            --20170524 以cardno条件为准
            select count (*)
              into vcount
              from base_customers a
             where     a.cardno = prmcardno
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -21;
                out_msg :=
                       '该卡已在系统中使用！scardsnr'
                    || prmscardsnr
                    || ',asn'
                    || prmcardno;
                return;
            end if;

            select count (*)
              into vcount
              from base_emp_card a
             where     a.scardsnr = prmscardsnr
                   and a.customeruintcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -1;
                out_msg := '该卡已发过功能卡';
                return;
            end if;

            --3、读取老卡基本信息
            select a.status, cardtypedetailid, a.cardsn
              into vcount, vcardtypedetailid, n_cardsn
              from base_customers a
             where     a.customerid = prmcustomerid
                   and a.cardno = prmoldcardno
                   and a.customerunitcode = prmcustomerunitcode;

            if vcardtypedetailid <> 227
            then
                select count (*)
                  into vcount
                  from base_customers a
                 where     a.outid = prmoutid
                       and a.customerunitcode = prmcustomerunitcode
                       and a.customerid <> prmcustomerid
                       and a.cardno <> prmoldcardno;

                if vcount > 0
                then
                    out_result := -21;
                    out_msg := '市民卡号重复！';
                    return;
                end if;
            end if;

            --7、获取卡流水号
            select count (cardid)
              into vcount
              from base_cardid
             where scardsnr = prmscardsnr;

            if vcount = 0
            then
                insert into base_cardid (scardsnr)
                     values (prmscardsnr);
            end if;

            select lpad (cardid, 8, '0')
              into prmid
              from base_cardid
             where scardsnr = prmscardsnr;

            --8、形成补卡记录
            insert into rec_card_make_acc (customerid,
                                           scardsnr,
                                           cardno,
                                           oldcardno,
                                           cardtypedetailid,
                                           cardsn,
                                           oldcardsn,
                                           cardkind,
                                           oldelectropcount,
                                           oldelectrsaveopcount,
                                           oldmonopcount,
                                           oldelectroddfare,
                                           opdt,
                                           lossfc,
                                           empid,
                                           stag_ban,
                                           pty,
                                           id,
                                           poscode,
                                           monsaveopcount,
                                           summonthoddfare,
                                           summonthoddfareacc,
                                           depreciatefare,
                                           depreciatedate,
                                           remakecardtype,
                                           customerunitcode,
                                           outid)
                select a.customerid,
                       a.scardsnr,
                       prmcardno,
                       prmoldcardno as oldcardno,
                       a.cardtypedetailid,
                       a.cardsn + 1,
                       a.cardsn,
                       prmcardkind as cardkind,
                       a.electropcount,
                       a.electrsaveopcount,
                       a.monopcount,
                       a.electroddfare,
                       sysdate as opdt,
                       0 as lossfc,
                       prmempid as empid,
                       0 as stag_ban,
                       2 as pty,
                       prmid as id,
                       prmposcode as poscode,
                       a.monsaveopcount,
                       a.monoddfare,
                       a.summonaddfareacc,
                       prmcardfare as depreciatefare,
                       sysdate as depreciatedate,
                       prmremakecardtype as remakecardtype,
                       prmcustomerunitcode as customerunitcode,
                       prmoutid
                  from base_customers a
                 where     customerid = prmcustomerid
                       and a.cardno = prmoldcardno
                       and customerunitcode = prmcustomerunitcode;

            select nvl (max (a.planid), 0)
              into vcount
              from rec_vicecard_cash_plan_putout a
             where     a.cardno = prmoldcardno
                   and a.customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode
                   and a.planid not in
                           (select planid
                              from rec_vicecard_cash1
                             where     customerid = prmcustomerid
                                   and customerunitcode = prmcustomerunitcode);

            if vcount > 0
            then
                select a.limittimes,
                       a.monthnum,
                       a.validtimestart,
                       a.validtimeend
                  into v_vicelimittimes,
                       v_vicemonthnum,
                       v_vicevalidtimestart,
                       v_vicevalidtimeend
                  from rec_vicecard_cash_plan_putout a
                 where a.planid = vcount;
            else
                v_vicelimittimes := 0;
                v_vicemonthnum := 0;
                v_vicevalidtimestart := sysdate;
                v_vicevalidtimeend := sysdate;
            end if;

            select nvl (max (a.planid), 0)
              into vcount
              from rec_monticket_cash_plan_putout a
             where     a.cardno = prmoldcardno
                   and a.customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode
                   and a.planid not in
                           (select planid
                              from rec_monticket_cash1
                             where     customerid = prmcustomerid
                                   and customerunitcode = prmcustomerunitcode);

            if vcount > 0
            then
                select a.limittimes,
                       a.monthnum,
                       a.validtimestart,
                       a.validtimeend
                  into v_monthlimittimes,
                       v_monthnum,
                       v_monthvalidtimestart,
                       v_monthvalidtimeend
                  from rec_monticket_cash_plan_putout a
                 where a.planid = vcount;
            else
                v_monthlimittimes := 0;
                v_monthnum := 0;
                v_monthvalidtimestart := sysdate;
                v_monthvalidtimeend := sysdate;
            end if;

            --9、形成电子钱包冻结金额
            select count (*)
              into vcount
              from rec_freezefare_acc a
             where     a.customerid = prmcustomerid
                   and a.customerunitcode = prmcustomerunitcode
                   and a.cardno = prmoldcardno
                   and a.cardsn = n_cardsn;

            if vcount = 1
            then
                update rec_freezefare_acc a
                   set newcardno = prmcardno
                 where     a.customerid = prmcustomerid
                       and a.customerunitcode = prmcustomerunitcode
                       and a.cardno = prmoldcardno
                       and a.cardsn = n_cardsn;
            else
                insert into rec_freezefare_acc (customerid,
                                                cardno,
                                                cardtype,
                                                cardsn,
                                                cardkind,
                                                opcount,
                                                saveopcount,
                                                freezefare,
                                                empid,
                                                freezefareflag,
                                                createdate,
                                                ver,
                                                customerunitcode,
                                                wallettype,
                                                opdt,
                                                limittimes,
                                                monthnum,
                                                validtimestart,
                                                validtimeend,
                                                monthfreezefare,
                                                monthfreezefareflag,
                                                monthopcount,
                                                monthsaveopcount,
                                                vicefreezefare,
                                                vicefreezefareflag,
                                                viceopcount,
                                                vicesaveopcount,
                                                vicelimittimes,
                                                vicemonthnum,
                                                vicevalidtimestart,
                                                vicevalidtimeend,
                                                newcardno,
                                                cardid,
                                                outid,
                                                cardtypedetailid,
                                                opendt)
                    select a.customerid,
                           a.cardno,
                           a.cardtypedetailid,
                           a.cardsn,
                           a.cardkind,
                           a.electropcount,
                           a.electrsaveopcount,
                           a.electroddfare,
                           prmempid,
                           0,
                           sysdate,
                           0,
                           prmcustomerunitcode,
                           1,
                           sysdate,
                           v_monthlimittimes,
                           v_monthnum,
                           v_monthvalidtimestart,
                           v_monthvalidtimeend,
                           monoddfare,
                           0,
                           monopcount,
                           monsaveopcount,
                           numberoddfare,
                           0,
                           numberopcount,
                           numbersaveopcount,
                           v_vicelimittimes,
                           v_vicemonthnum,
                           v_vicevalidtimestart,
                           v_vicevalidtimeend,
                           prmcardno,
                           id,
                           outid,
                           cardtypedetailid,
                           opdt
                      from base_customers a
                     where     a.customerid = prmcustomerid
                           and a.cardno = prmoldcardno
                           and a.customerunitcode = prmcustomerunitcode;
            end if;

            --10、形成次卡电子钱包冻结金额

            --10.1、将base_customers_vicecard中该用户信息清零
            update base_customers_vicecard
               set sumconsumefare = 0,
                   sumrdummyfare = 0,
                   sumaddfare = 0,
                   sumaddfareacc = 0,
                   sumadddummyfare = 0,
                   refunddumpfare = 0,
                   refundlimitconsumfare = 0,
                   ver = 0,
                   cardasn = prmcardno
             where     customerid = prmcustomerid
                   and cardasn = prmoldcardno
                   and customerunitcode = prmcustomerunitcode;

            --11、形成月票电子钱包冻结金额

            --11.1、将base_customers_monthcard中该用户信息清零
            update base_customers_monticket
               set sumconsumefare = 0,
                   sumrdummyfare = 0,
                   sumaddfare = 0,
                   sumaddfareacc = 0,
                   sumadddummyfare = 0,
                   refunddumpfare = 0,
                   refundlimitconsumfare = 0,
                   ver = 0,
                   cardasn = prmcardno
             where     customerid = prmcustomerid
                   and cardasn = prmoldcardno
                   and customerunitcode = prmcustomerunitcode;

            --12、形成售卡记录
            insert into rec_card_sell (customerid,
                                       cardno,
                                       opdt,
                                       stag_ban,
                                       scardsnr,
                                       empid,
                                       cardtypedetailid,
                                       poscode,
                                       psamcardno,
                                       cardkind,
                                       customerunitcode)
                 values (prmcustomerid,
                         prmcardno,
                         sysdate,
                         0,
                         prmscardsnr,
                         prmempid,
                         vcardtypedetailid,
                         prmposcode,
                         prmpsamcardno,
                         prmcardkind,
                         prmcustomerunitcode);

            --13、获取售卡折旧费的科目描述
            select a.accdscrp
              into v_accdscrp
              from base_acc_type a
             where a.acccode = 710;

            --14、获取售卡卡套费的科目描述
            select a.accdscrp
              into v_ktaccdscrp
              from base_acc_type a
             where a.acccode = 711;

            --15、获取补卡管理费的科目描述
            select a.accdscrp
              into v_bkmangescrp
              from base_acc_type a
             where a.acccode = 712;

            --获取记录流水号
            select seq_rec_selfmoney_acc.nextval into n_cashaccfc from dual;

            --形成折旧费明细记录
            insert into rec_selfmoney_acc (id,
                                           empid,
                                           customerid,
                                           cardtype,
                                           opfare,
                                           acccode,
                                           dscrp,
                                           ktfare,
                                           ktacccode,
                                           ktaccdscrp,
                                           changedate,
                                           cardkind,
                                           poscode,
                                           scardsnr,
                                           mangeacccode,
                                           mangefare,
                                           mangedscrp,
                                           customerunitcode,
                                           cardno)
                 values (n_cashaccfc,
                         prmempid,
                         prmcustomerid,
                         vcardtypedetailid,
                         prmcardfare,
                         710,
                         v_accdscrp,
                         prmcardcoverfare,
                         711,
                         v_ktaccdscrp,
                         sysdate,
                         prmcardkind,
                         prmposcode,
                         prmscardsnr,
                         712,
                         prmbkmangerarerate,
                         v_bkmangescrp,
                         prmcustomerunitcode,
                         prmcardno);

            --16、更新账本
            update base_customers
               set cardsn = cardsn + 1,
                   cardno = prmcardno,
                   scardsnr = prmscardsnr,
                   depreciatefare = prmcardfare,
                   depreciatedate = sysdate,
                   status = 1,
                   electropcount = 0,
                   electrsaveopcount = 0,
                   monopcount = 0,
                   monsaveopcount = 0,
                   monoddfare = 0,
                   electroddfare = 0,
                   numberopcount = 0,
                   numbersaveopcount = 0,
                   numberoddfare = 0,
                   asn = prmcardno,
                   outid = prmoutid,
                   opdt = sysdate
             where     customerid = prmcustomerid
                   and cardno = prmoldcardno
                   and customerunitcode = prmcustomerunitcode;

            --17、调用职员统计
            out_result := -1105;
            out_msg := '职员统计';
            --调用职员统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                601,
                prmempid,
                prmposcode,
                prmpsamcardno,
                vcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '制卡数据统计出错，' || out_msg;
                return;
            end if;

            --18、职员补卡统计
            out_result := -1006;
            out_msg := '职员换卡统计';
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                612, --补卡
                prmempid,
                prmposcode,
                prmpsamcardno,
                vcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '换卡统计失败，' || out_msg;
                return;
            end if;

            out_result := -1025;
            out_msg := '获取职员信息失败！';

            --19、获取职员部门
            select a.dptcode, a.accounttype, a.empname
              into v_empdeptcode, n_empaccountype, v_empname
              from base_emp a
             where     a.empid = prmempid
                   and a.customerunitcode = prmcustomerunitcode;

            --20、折旧费用统计
            out_result := -1008;
            out_msg := '换卡成本费用统计';
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardfare,
                710,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '换卡成本费用统计失败，' || out_msg;
                return;
            end if;

            --21、补卡卡套费用统计
            out_result := -1009;
            out_msg := '换卡卡套费用统计';
            --补卡卡套费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardcoverfare,
                711,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '换卡卡套费用统计失败，' || out_msg;
                return;
            end if;

            --22、补卡管理费用统计
            out_result := -1010;
            out_msg := '换卡管理费用统计';
            --补卡卡套费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmbkmangerarerate,
                712,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '换卡管理费用统计失败，' || out_msg;
                return;
            end if;
        ---------------------------开卡管理费收支账目统计结束------------------
        else
            --回滚
            select a.cardtypedetailid
              into vcardtypedetailid
              from base_customers a
             where     a.customerid = prmcustomerid
                   and a.cardno = prmcardno
                   and a.customerunitcode = prmcustomerunitcode
                   and rownum < 2;

            update base_customers a
               set a.status = 1,
                   cardno = prmoldcardno,
                   asn = prmoldcardno,
                   cardsn = cardsn - 1,
                   scardsnr = prmoldscardsnr
             where     a.customerid = prmcustomerid
                   and a.cardno = prmcardno
                   and a.customerunitcode = prmcustomerunitcode;

            update rec_card_make_acc a
               set pty = 12
             where     customerid = prmcustomerid
                   and a.cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            update base_customers_vicecard
               set cardasn = prmoldcardno
             where     customerid = prmcustomerid
                   and cardasn = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            update base_customers_monticket
               set cardasn = prmoldcardno
             where     customerid = prmcustomerid
                   and cardasn = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            --13、获取售卡折旧费的科目描述
            select a.accdscrp
              into v_accdscrp
              from base_acc_type a
             where a.acccode = 710;

            --14、获取售卡卡套费的科目描述
            select a.accdscrp
              into v_ktaccdscrp
              from base_acc_type a
             where a.acccode = 711;

            --15、获取补卡管理费的科目描述
            select a.accdscrp
              into v_bkmangescrp
              from base_acc_type a
             where a.acccode = 712;

            --形成折旧费明细记录
            insert into rec_selfmoney_acc_rollback (id,
                                                    empid,
                                                    customerid,
                                                    cardtype,
                                                    opfare,
                                                    acccode,
                                                    dscrp,
                                                    ktfare,
                                                    ktacccode,
                                                    ktaccdscrp,
                                                    changedate,
                                                    cardkind,
                                                    poscode,
                                                    scardsnr,
                                                    customerunitcode)
                select id,
                       empid,
                       customerid,
                       cardtype,
                       opfare,
                       acccode,
                       dscrp,
                       ktfare,
                       ktacccode,
                       ktaccdscrp,
                       changedate,
                       cardkind,
                       poscode,
                       scardsnr,
                       customerunitcode
                  from rec_selfmoney_acc
                 where     customerunitcode = prmcustomerunitcode
                       and customerid = prmcustomerid
                       and cardno = prmcardno;

            select id
              into n_cashaccfc
              from rec_selfmoney_acc
             where     customerunitcode = prmcustomerunitcode
                   and customerid = prmcustomerid
                   and cardno = prmcardno
                   and rownum < 2;

            delete from rec_selfmoney_acc
                  where     customerunitcode = prmcustomerunitcode
                        and customerid = prmcustomerid
                        and cardno = prmcardno;

            --17、调用职员统计
            out_result := -1105;
            out_msg := '职员统计';
            --调用职员统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                601,
                prmempid,
                prmposcode,
                prmpsamcardno,
                vcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '制卡数据统计出错，' || out_msg;
                return;
            end if;

            --18、职员补卡统计
            out_result := -1006;
            out_msg := '职员换卡统计';
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                612, --补卡
                prmempid,
                prmposcode,
                prmpsamcardno,
                vcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '换卡统计失败，' || out_msg;
                return;
            end if;

            out_result := -1025;
            out_msg := '获取职员信息失败！';

            --19、获取职员部门
            select a.dptcode, a.accounttype, a.empname
              into v_empdeptcode, n_empaccountype, v_empname
              from base_emp a
             where     a.empid = prmempid
                   and a.customerunitcode = prmcustomerunitcode;

            --20、折旧费用统计
            out_result := -1008;
            out_msg := '换卡成本费用统计';
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardfare,
                710,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '换卡成本费用统计失败，' || out_msg;
                return;
            end if;

            --21、补卡卡套费用统计
            out_result := -1009;
            out_msg := '换卡卡套费用统计';
            --补卡卡套费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardcoverfare,
                711,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                1,
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '补卡卡套费用统计失败，' || out_msg;
                return;
            end if;

            --22、补卡管理费用统计
            out_result := -1010;
            out_msg := '换卡管理费用统计';
            --补卡卡套费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmbkmangerarerate,
                712,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                vcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                1,
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '换卡管理费用统计失败，' || out_msg;
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := '操作成功';
        commit;
    exception
        when others
        then
            rollback;
            out_result := out_result;
            out_msg := out_msg || '出错:' || sqlerrm;
            return;
    end;

    /*
      ---------------------------------------------------------------------------
      --修改标识: 张斌 2012-09-04
      --实现功能: 乘车卡售卡
      ---------------------------------------------------------------------------
    */
    procedure proc_sellcard ( --------------------------乘车卡基本信息
                             prmname                 in     varchar2, --用户姓名
                             prmsex                  in     number, --用户性别
                             prmnation               in     varchar2, --用户民族
                             prmcertificatetype      in     number, --证件类型
                             prmidno                 in     varchar2, --证件号码
                             prmbirthday             in     varchar2, -- 用户生日
                             prmaddress              in     varchar2, --用户住址
                             prmempid                in     number, --操作员
                             prmcustomerunitcode     in     varchar2, --客户代码
                             prmcountryid            in     number, --国家代码
                             prmtelephone            in     varchar2, --用户电话
                             -----------------------基本验证信息
                             prmtermid               in     number, --终端编号
                             prmposcode              in     number, --终端设备唯一编号,必须存在
                             prmpsamcardno           in     number, --终端psam卡号
                             -----------------------公交卡信息
                             prmcardtypedetailid     in     number, --用户公交卡类型
                             prmcardtypeflag         in     varchar2, --用户公交卡类型启用标识
                             prmneedyearcheck        in     number, --是否需要年检，0不需要，1需要
                             prmyearcheckstartdate   in     varchar2, --年检开始时间
                             prmyearcheckenddate     in     varchar2, --年检结束时间
                             prmcardfare             in     number, --卡折旧费用
                             prmcardcoverfare        in     number, --卡套费用
                             prmnonameflag           in     number,
                             --不记名标记，0记名，1不记名
                             prmcardtype             in     number, --卡类别，0为普通卡，1为手机卡
                             prmproduct              in     number, --卡供应商
                             prmasn                  in     varchar2, --用户卡片应用序列号
                             prmoutid                in     varchar2, --市民卡号
                             prmcardtypepeopleid     in     number, --市民用途，市民类、管理卡类
                             prmcardtypecityid       in     number, --卡类型，普通卡、管理卡等
                             prmisnewcapecsys        in     number,
                             --新旧系统（0第一次发卡系统是新开普系统，1第一次发卡系统是其它公司系统）
                             prmmangefare            in     number, --开卡管理费
                             prmnousedate            in     varchar2, --卡片有效期
                             prmfreemangefare        in     number, --免收管理费金额
                             prmcardsnr              in     varchar2, --卡唯一号
                             prmcardkind             in     number, --卡种类（1m1卡 2cpu卡）
                             prmcustomerid           in out number, --账号
                             prmid                   in out varchar2, --流水号
                             prmcardno               in out number, --卡号
                             prmelecashtype          in     varchar2,
                             prmoperation            in     number, --操作，1表示申请，2表示回滚
                             out_result                 out number, --返回结果，100成功，其它失败
                             out_msg                    out varchar2 --返回提示信息
                                                                    )
    is
        vcount            number; --计数器
        v_citycode        varchar2 (10); --城市代码
        v_asn             varchar2 (40); --m1asn
        v_industrycode    varchar2 (10); --行业代码
        v_accdscrp        varchar2 (100); --售卡折旧费的科目描述
        v_ktaccdscrp      varchar2 (100); --售卡卡套费的科目描述
        v_mangescrp       varchar2 (100); --售卡管理费的科目描述
        v_empdeptcode     varchar2 (100); --
        i_empareaid       number;
        n_empaccountype   number; --出纳员账户类型
        n_cashaccfc       number; --形成充值明细的原始流水号
        n_empoddfare      number (20, 2); --出纳账户余额
        v_empname         varchar2 (30); --出纳员名称
        v_codeid          varchar2 (100); --账户名称
    begin
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        --2、prmoperation=0操作类型为发卡
        if prmoperation = 1
        then
            --2.1、判断账本表中是否有该条记录
            out_result := -21;
            out_msg := '开始验证账本表1';

            select count (*)
              into vcount
              from base_customers a
             where     a.cardno = prmcardno
                   and a.customerunitcode = prmcustomerunitcode;

            out_msg := '开始验证账本表2';

            if vcount > 0
            then
                out_result := -21;
                --out_msg := '该卡已发过乘车卡';
                out_msg :=
                       '该卡已在系统中使用！scardsnr'
                    || prmcardsnr
                    || ',asn'
                    || prmcardno;
                return;
            end if;

            out_msg := '开始验证账本表31' || prmcardsnr;

            select count (*)
              into vcount
              from base_emp_card a
             where     a.scardsnr = prmcardsnr
                   and a.customeruintcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -21;
                out_msg := '该卡已在系统中使用！';
                return;
            end if;

            select count (*)
              into vcount
              from base_customers a
             where     a.outid = prmoutid
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -21;
                out_msg := '市民卡号重复！';
                return;
            end if;

            select count (*)
              into vcount
              from rec_card_make_acc a
             where     a.cardno = prmcardno
                   and a.pty in (0, 1, 2)
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount > 0
            then
                out_result := -21;
                out_msg := '卡号重复，请重新洗卡！__' || prmcardno;
                return;
            end if;

            select count (*)
              into vcount
              from base_card_regist a
             where     a.customerunitcode = prmcustomerunitcode
                   and a.scardsnr = prmcardsnr
                   and a.cardkind = prmcardkind;

            if vcount = 0
            then
                --2.2、登记信息(没有该条登记信息,没有则添加)
                out_result := -22;
                out_msg := '开始验证登记信息';
                pkg_base_customers.proc_cardregist (1,
                                                    prmcardkind,
                                                    prmasn,
                                                    prmcardsnr,
                                                    prmempid,
                                                    prmcustomerunitcode,
                                                    1,
                                                    prmtermid,
                                                    prmposcode,
                                                    prmpsamcardno,
                                                    prmcardtypedetailid,
                                                    out_result,
                                                    out_msg);

                if out_result < 0
                then
                    rollback;
                    out_result := -22;
                    return;
                end if;
            end if;

            --2.3、客户基本信息(没有该客户信息则添加,有则读取customerid)
            out_result := -23;
            --2.3.1、查询客户基本信息
            out_msg := '判断客户信息是否存在';

            select count (*)
              into vcount
              from base_customers_info a
             where     a.idcardno = prmidno
                   and a.customerunitcode = prmcustomerunitcode;

            --2.3.2、如果没有则添加一条客户信息
            out_result := -23;
            out_msg := '判断客户信息';

            if (vcount = 0 or prmnonameflag = 1)
            then
                --平台用小于500,000,000段
                if prmcustomerid < 1
                then
                    select count (*)
                      into vcount
                      from base_sequence_no a
                     where     a.code = 'customerid'
                           and a.customerunitcode = prmcustomerunitcode;

                    if vcount > 0
                    then
                        select nvl (a.max_no, 0) + 1
                          into prmcustomerid
                          from base_sequence_no a
                         where     a.code = 'customerid'
                               and a.customerunitcode = prmcustomerunitcode;
                    else
                        prmcustomerid := 1;
                    end if;

                    if (prmcustomerid = 1)
                    then
                        insert into base_sequence_no (code,
                                                      max_no,
                                                      contentmes,
                                                      customerunitcode)
                             values ('customerid',
                                     1,
                                     'customerid',
                                     prmcustomerunitcode);
                    else
                        update base_sequence_no
                           set max_no = prmcustomerid
                         where     code = 'customerid'
                               and customerunitcode = prmcustomerunitcode;
                    end if;
                end if;

                out_msg :=
                    '22开始添加一条客户信息prmcustomerid=' || prmcustomerid;

                insert into base_customers_info (customerid,
                                                 name,
                                                 sex,
                                                 nation,
                                                 telphonenum,
                                                 idcardno,
                                                 certificateid,
                                                 opendt,
                                                 address,
                                                 birthday,
                                                 customerunitcode,
                                                 custstatus)
                     values (prmcustomerid,
                             prmname,
                             prmsex,
                             prmnation,
                             prmtelephone,
                             prmidno,
                             prmcertificatetype,
                             sysdate,
                             prmaddress,
                             to_date (prmbirthday, 'yyyy-mm-dd'),
                             prmcustomerunitcode,
                             1);

                --2.3.3、有则读取customerid
                out_result := -23;
                out_msg := '存在则读取customerid';
            else
                out_msg := '开始查询客户基本信息中的customerid' || 'testing2';

                select a.customerid
                  into prmcustomerid
                  from base_customers_info a
                 where     a.idcardno = prmidno
                       and a.customerunitcode = prmcustomerunitcode;

                out_msg := '开始查询客户基本信息中的customerid' || 'testing3';

                select count (*)
                  into vcount
                  from base_customers a
                 where     a.customerid = prmcustomerid
                       and a.customerunitcode = prmcustomerunitcode
                       and a.cardtypedetailid = prmcardtypedetailid;

                if prmnonameflag = 0 and vcount > 0
                then
                    out_result := -21;
                    out_msg :=
                        '当前用户已经发过此类型的卡，同一类型卡一人只能发一张！';
                    return;
                end if;
            end if;

            select count (*)
              into vcount
              from base_writeoff a
             where     a.cardno = prmcardno
                   and a.customerunitcode = prmcustomerunitcode
                   and customerid = prmcustomerid;

            if vcount > 0
            then
                out_result := -21;
                out_msg := '卡号重复，cpu卡请重新洗卡，m1卡请改发给其他人！';
                rollback;
                return;
            end if;

            --2.4、账本信息(添加账本信息)

            --2.4.1、获取卡流水号
            out_result := -24;
            out_msg := '开始获取卡流水号';

            select count (cardid)
              into vcount
              from base_cardid a
             where a.scardsnr = prmcardsnr;

            if vcount = 0
            then
                insert into base_cardid (scardsnr)
                     values (prmcardsnr);
            end if;

            select lpad (cardid, 8, '0')
              into prmid
              from base_cardid
             where scardsnr = prmcardsnr;

            v_asn := prmasn;
            --2.4.3、添加账本表
            out_msg := '开始插入账本表';

            insert into base_customers (customerid,
                                        scardsnr,
                                        cardtypedetailid,
                                        cardsn,
                                        status,
                                        querypwd,
                                        cardkind,
                                        electropcount,
                                        electrsaveopcount,
                                        monopcount,
                                        nousedate,
                                        empid,
                                        yearchecks,
                                        checkbeginday,
                                        checkendday,
                                        depreciatefare,
                                        depreciatedate,
                                        sumelectradddummyfare,
                                        refunddumpfare,
                                        refundlimitconsumfare,
                                        nonameflag,
                                        cardtypeid,
                                        productid,
                                        asn,
                                        outid,
                                        cardtypepeopleid,
                                        numberopcount,
                                        numbersaveopcount,
                                        numberoddfare,
                                        numberoddfareacc,
                                        summangefare,
                                        mangefarelastdate,
                                        sumfreemangefare,
                                        customerunitcode,
                                        opdt,
                                        cardno,
                                        elecashtype)
                 values (prmcustomerid,
                         prmcardsnr,
                         prmcardtypedetailid,
                         1,
                         1,
                         '21218cca77804d2ba1922c33e0151105',
                         prmcardkind,
                         0,
                         0,
                         0,
                         to_date (prmnousedate, 'yyyy-mm-dd'),
                         prmempid,
                         prmneedyearcheck,
                         to_date (prmyearcheckstartdate, 'yyyy-mm-dd'),
                         to_date (prmyearcheckenddate, 'yyyy-mm-dd'),
                         prmcardfare,
                         sysdate,
                         0,
                         0,
                         0,
                         prmnonameflag,
                         prmcardtype,
                         prmproduct,
                         v_asn,
                         prmoutid,
                         prmcardtypepeopleid,
                         0,
                         0,
                         0,
                         0,
                         prmmangefare,
                         sysdate,
                         prmfreemangefare,
                         prmcustomerunitcode,
                         sysdate,
                         v_asn,
                         prmelecashtype);

            --2.5.1、如果启用月票则插入月票记录
            out_msg := '插入月票记录';

            if substr (prmcardtypeflag, 3, 1) <> '0'
            then
                insert into base_customers_monticket (customerid,
                                                      sumconsumefare,
                                                      sumrdummyfare,
                                                      sumaddfare,
                                                      sumaddfareacc,
                                                      refunddumpfare,
                                                      refundlimitconsumfare,
                                                      ver,
                                                      sumadddummyfare,
                                                      customerunitcode,
                                                      cardasn --需要添加清零日期和清零方式,vicehangdate,hangtype
                                                             )
                     values (prmcustomerid,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             prmcustomerunitcode,
                             v_asn);
            end if;

            --2.5.2、如果启用次卡则插入次卡记录
            if substr (prmcardtypeflag, 5, 1) <> '0'
            then
                insert into base_customers_vicecard (customerid,
                                                     sumconsumefare,
                                                     sumrdummyfare,
                                                     sumaddfare,
                                                     sumaddfareacc,
                                                     refunddumpfare,
                                                     refundlimitconsumfare,
                                                     ver,
                                                     sumadddummyfare,
                                                     customerunitcode,
                                                     cardasn --需要添加清零日期和清零方式,vicehangdate,hangtype
                                                            )
                     values (prmcustomerid,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             0,
                             prmcustomerunitcode,
                             v_asn);
            end if;

            --2.6、插入发卡记录
            out_result := -27;
            out_msg := '插入发卡记录';

            insert into rec_card_make_acc (customerid,
                                           scardsnr,
                                           cardno,
                                           cardtypedetailid,
                                           cardsn,
                                           cardkind,
                                           opdt,
                                           empid,
                                           pty,
                                           id,
                                           poscode,
                                           depreciatefare,
                                           depreciatedate,
                                           customerunitcode,
                                           outid)
                 values (prmcustomerid,
                         prmcardsnr,
                         v_asn,
                         prmcardtypedetailid,
                         1,
                         prmcardkind,
                         sysdate,
                         prmempid,
                         0,
                         prmid,
                         prmposcode,
                         prmcardfare,
                         sysdate,
                         prmcustomerunitcode,
                         prmoutid);

            --2.7、插入售卡记录
            out_result := -28;
            out_msg := '插入售卡记录';

            insert into rec_card_sell (customerid,
                                       cardno,
                                       opdt,
                                       stag_ban,
                                       scardsnr,
                                       empid,
                                       cardtypedetailid,
                                       poscode,
                                       psamcardno,
                                       cardkind,
                                       customerunitcode)
                select customerid,
                       cardno,
                       sysdate,
                       0,
                       scardsnr,
                       prmempid,
                       prmcardtypedetailid,
                       prmposcode,
                       prmpsamcardno,
                       prmcardkind,
                       prmcustomerunitcode
                  from base_customers a
                 where     a.customerid = prmcustomerid
                       and a.cardno = v_asn
                       and a.customerunitcode = prmcustomerunitcode;

            --2.8、插入折旧费明细
            out_result := -209;
            out_msg := '插入折旧费明细记录';

            --2.8.1、获取售卡折旧费的科目描述
            select a.accdscrp
              into v_accdscrp
              from base_acc_type a
             where a.acccode = 700;

            --2.8.2、获取售卡卡套费的科目描述
            select a.accdscrp
              into v_ktaccdscrp
              from base_acc_type a
             where a.acccode = 701;

            --2.8.3、获取售卡管理费的科目描述
            select a.accdscrp
              into v_mangescrp
              from base_acc_type a
             where a.acccode = 705;

            select seq_rec_selfmoney_acc.nextval into n_cashaccfc from dual;

            --2.8.4、形成折旧费明细记录
            insert into rec_selfmoney_acc a (id,
                                             empid,
                                             customerid,
                                             cardtype,
                                             opfare,
                                             acccode,
                                             dscrp,
                                             ktfare,
                                             ktacccode,
                                             ktaccdscrp,
                                             changedate,
                                             cardkind,
                                             poscode,
                                             scardsnr,
                                             mangeacccode,
                                             mangefare,
                                             mangedscrp,
                                             customerunitcode,
                                             cardno)
                 values (n_cashaccfc,
                         prmempid,
                         prmcustomerid,
                         prmcardtypedetailid,
                         prmcardfare,
                         700,
                         v_accdscrp,
                         prmcardcoverfare,
                         701,
                         v_ktaccdscrp,
                         sysdate,
                         prmcardkind,
                         prmposcode,
                         prmcardsnr,
                         705,
                         prmmangefare,
                         v_mangescrp,
                         prmcustomerunitcode,
                         v_asn);

            --2.9、职员发卡统计
            out_result := -210;
            out_msg := '开始职员统计';

            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                601,
                prmempid,
                prmposcode,
                prmpsamcardno,
                prmcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '制卡数据统计出错，' || out_msg;
                return;
            end if;

            --2.10、职员售卡统计
            out_result := -1006;
            out_msg := '职员操作统计';
            --调用职员统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                602, --售卡
                prmempid,
                prmposcode,
                prmpsamcardno,
                prmcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '售卡统计失败，' || out_msg;
                return;
            end if;

            --2.11、折旧费统计
            out_result := -211;
            out_msg := '开始成本费统计';

            select a.dptcode, a.accounttype, a.empname
              into v_empdeptcode, n_empaccountype, v_empname
              from base_emp a, base_dept b
             where     a.customerunitcode = b.customerunitcode
                   and a.dptcode = b.dptcode
                   and a.empid = prmempid
                   and a.customerunitcode = prmcustomerunitcode;

            --成本费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardfare,
                700,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                prmcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                0,
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '成本费用统计失败，' || out_msg;
                return;
            end if;

            --2.12、卡套费统计
            out_result := -212;
            out_msg := '开卡卡套费统计';
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardcoverfare,
                701,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                prmcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                0,
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '卡套费用统计失败，' || out_msg;
                return;
            end if;

            --2.13、开卡管理费统计
            out_result := -213;
            out_msg := '开始开卡管理费统计';
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmmangefare,
                705,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                prmcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                0,
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '开卡管理费统计失败，' || out_msg;
                return;
            end if;

            --售卡成功
            out_result := 100;
            out_msg := '操作成功';
            commit;
        --3、prmoperation=1操作类型为发卡回滚
        elsif prmoperation = 2
        then
            out_result := -1;
            out_msg := '售卡回滚开始';

            delete from base_customers a
                  where     customerid = prmcustomerid
                        and scardsnr = prmcardsnr
                        and a.customerunitcode = prmcustomerunitcode;

            delete from rec_card_make_acc
                  where     customerid = prmcustomerid
                        and cardsn = 1
                        and scardsnr = prmcardsnr
                        and customerunitcode = prmcustomerunitcode;

            delete from base_customers_vicecard
                  where     customerid = prmcustomerid
                        and cardasn = prmasn
                        and customerunitcode = prmcustomerunitcode;

            delete from base_customers_monticket
                  where     customerid = prmcustomerid
                        and cardasn = prmasn
                        and customerunitcode = prmcustomerunitcode;

            delete from rec_card_sell
                  where     customerid = prmcustomerid
                        and scardsnr = prmcardsnr
                        and customerunitcode = prmcustomerunitcode;

            --2.8.1、获取售卡折旧费的科目描述
            select a.accdscrp
              into v_accdscrp
              from base_acc_type a
             where a.acccode = 700;

            --2.8.2、获取售卡卡套费的科目描述
            select a.accdscrp
              into v_ktaccdscrp
              from base_acc_type a
             where a.acccode = 701;

            --2.8.3、获取售卡管理费的科目描述
            select a.accdscrp
              into v_mangescrp
              from base_acc_type a
             where a.acccode = 705;

            select id
              into n_cashaccfc
              from rec_selfmoney_acc
             where     customerid = prmcustomerid
                   and acccode = 700
                   and ktacccode = 701
                   and mangeacccode = 705
                   and scardsnr = prmcardsnr
                   and customerunitcode = prmcustomerunitcode
                   and rownum < 2;

            delete from rec_selfmoney_acc
                  where     customerid = prmcustomerid
                        and customerunitcode = prmcustomerunitcode
                        and acccode = 700
                        and ktacccode = 701
                        and mangeacccode = 705
                        and scardsnr = prmcardsnr;

            --2.9、职员发卡统计
            out_result := -210;
            out_msg := '开始职员统计';
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                601,
                prmempid,
                prmposcode,
                prmpsamcardno,
                prmcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '制卡数据统计出错，' || out_msg;
                return;
            end if;

            --2.10、职员售卡统计
            out_result := -1006;
            out_msg := '职员操作统计';
            --调用职员统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                602, --售卡
                prmempid,
                prmposcode,
                prmpsamcardno,
                prmcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '售卡统计失败，' || out_msg;
                return;
            end if;

            --2.11、折旧费统计
            out_result := -211;
            out_msg := '开始成本费统计';

            select a.dptcode, a.accounttype, a.empname
              into v_empdeptcode, n_empaccountype, v_empname
              from base_emp a, base_dept b
             where     a.customerunitcode = b.customerunitcode
                   and a.dptcode = b.dptcode
                   and a.empid = prmempid
                   and a.customerunitcode = prmcustomerunitcode;

            --成本费用统计
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardfare,
                700,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                prmcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '成本费用统计失败，' || out_msg;
                return;
            end if;

            --2.12、卡套费统计
            out_result := -212;
            out_msg := '开卡卡套费统计';
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmcardcoverfare,
                701,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                prmcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '卡套费用统计失败，' || out_msg;
                return;
            end if;

            --2.13、开卡管理费统计
            out_result := -213;
            out_msg := '开始开卡管理费统计';
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmmangefare,
                705,
                0, --prmdiscountfare,
                prmcardkind, --prmcardkind,
                prmcardtypedetailid,
                prmempid,
                prmposcode,
                prmpsamcardno,
                0,
                v_empdeptcode,
                0,
                0,
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '开卡管理费统计失败，' || out_msg;
                return;
            end if;

            out_result := 100;
            out_msg := '售卡回滚成功';
            commit;
        --4、操作类型错误
        else
            out_result := -1;
            out_msg := '发卡操作类型错误！';
            return;
        end if;
    exception
        when others
        then
            rollback;
            out_result := out_result;
            out_msg := out_msg || '出错:' || sqlerrm;
            return;
    end;

    /*
      ---------------------------------------------------------------------------
      --修改标识: 张斌 2012-09-04
      --实现功能: 乘车卡年检
      ---------------------------------------------------------------------------
    */
    procedure proc_cust_yearcheck (prmcustomerid          in     number, -- 账号
                                   prmcardno              in     number,
                                   prmcardsn              in     number,
                                   prmempid               in     number,
                                   prmstartcheckdate      in     varchar2,
                                   prmendcheckdate        in     varchar2,
                                   prmopdesc              in     varchar2,
                                   prmstartcheckdatepre   in     varchar2,
                                   prmendcheckdatepre     in     varchar2,
                                   prmpsamcardno          in     number,
                                   prmcardasn             in     number,
                                   prmcustomerunitcode    in     varchar2,
                                   prmplanid              in out number, --0为年检其他为回滚
                                   out_result                out number,
                                   out_msg                   out varchar2)
    as
        vyearchecks         number;
        vid                 number;
        vaccdesc            varchar2 (30);
        vcount              number;
        vacccode            number;
        vcardtypedetailid   number;
        vcardkind           number;
        vareaid             number;
    begin
        vacccode := 608;
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        select count (*)
          into vcount
          from base_acc_type
         where acccode = vacccode;

        if vcount = 0
        then
            out_result := -1000;
            out_msg := '交易科目不存在';
            return;
        end if;

        out_result := -1001;
        out_msg := '校验基本信息';
        pkg_cust_cash.proc_verify_baseinfo (prmcustomerid,
                                            prmcardno,
                                            prmcardsn,
                                            prmempid,
                                            prmpsamcardno,
                                            prmpsamcardno,
                                            prmcardasn,
                                            prmcustomerunitcode,
                                            out_result,
                                            out_msg);

        if out_result <> 100
        then
            return;
        end if;

        out_result := -1002;
        out_msg := '形成年检明细记录';

        select cardtypedetailid, cardkind
          into vcardtypedetailid, vcardkind
          from base_customers a
         where     a.customerid = prmcustomerid
               and a.customerunitcode = prmcustomerunitcode
               and cardno = prmcardno;

        select accdscrp
          into vaccdesc
          from base_acc_type a
         where a.acccode = vacccode;

        if prmplanid = 0
        then
            update base_customers
               set checkbeginday = to_date (prmstartcheckdate, 'yyyy-mm-dd'),
                   checkendday = to_date (prmendcheckdate, 'yyyy-mm-dd')
             where     customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode
                   and cardno = prmcardno;

            select seq_rec_year_check.nextval into vid from dual;

            insert into rec_cust_year_check (id,
                                             customerid,
                                             cardno,
                                             cardsn,
                                             startcheckdate,
                                             endcheckdate,
                                             empid,
                                             opdt,
                                             opdesc,
                                             acccode,
                                             accdesc,
                                             psamcardno,
                                             startcheckdatepre,
                                             endcheckdatepre,
                                             customerunitcode)
                 values (vid,
                         prmcustomerid,
                         prmcardno,
                         prmcardsn,
                         to_date (prmstartcheckdate, 'yyyy-mm-dd'),
                         to_date (prmendcheckdate, 'yyyy-mm-dd'),
                         prmempid,
                         sysdate,
                         prmopdesc,
                         vacccode,
                         vaccdesc,
                         prmpsamcardno,
                         to_date (prmstartcheckdatepre, 'yyyy-mm-dd'),
                         to_date (prmendcheckdatepre, 'yyyy-mm-dd'),
                         prmcustomerunitcode);

            out_result := -1003;
            out_msg := '形成年检统计记录';
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                vacccode,
                prmempid,
                prmpsamcardno,
                prmpsamcardno,
                vcardtypedetailid,
                vcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                rollback;
                out_result := out_result;
                out_msg := '年检及时统计出错，' || out_msg;
                return;
            end if;

            commit;
            prmplanid := vid;
            out_result := 100;
            out_msg := '年检成功';
            return;
        else
            update rec_cust_year_check
               set opdesc = prmopdesc
             where id = prmplanid and customerunitcode = prmcustomerunitcode;

            update base_customers
               set checkbeginday =
                       to_date (prmstartcheckdatepre, 'yyyy-mm-dd'),
                   checkendday = to_date (prmendcheckdatepre, 'yyyy-mm-dd')
             where     customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode
                   and cardno = prmcardno;

            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                vacccode,
                prmempid,
                prmpsamcardno,
                prmpsamcardno,
                vcardtypedetailid,
                vcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                rollback;
                out_result := out_result;
                out_msg := '年检回滚及时统计出错，' || out_msg;
                return;
            end if;

            out_result := 100;
            out_msg := '年检回滚成功';
            commit;
        end if;
    exception
        when others
        then
            rollback;
            out_result := out_result;
            out_msg := out_msg || '出错，入库操作异常，' || sqlerrm;
    end;

    procedure proc_modifyinfo (prmcustomerunitcode   in     varchar2,
                               prmcustomerid         in     number,
                               prmcardno             in     number,
                               prmname               in     varchar2,
                               prmidcardno           in     varchar2,
                               prmaddress            in     varchar2,
                               prmsex                in     number,
                               prmnation             in     varchar2,
                               prmbirthday           in     varchar2, --格式yyyy-mm-dd
                               prmtelphonenum        in     varchar2,
                               prmcardtypeid         in     number,
                               prmproductid          in     number,
                               prmelecashtype        in     number,
                               out_result               out number,
                               out_msg                  out varchar2)
    is
        /*
        --------------------------------------------------------------------------
        --修改标识：刘东红 2009-05-29
        --实现功能：修改用户信息
        --------------------------------------------------------------------------
        */
        vcount      number;
        vidcardno   varchar2 (32);
    begin
        out_result := -1000;
        out_msg := '更新用户信息失败';

        select count (*)
          into vcount
          from base_customers_info
         where     customerid = prmcustomerid
               and customerunitcode = prmcustomerunitcode;

        if vcount < 1
        then
            out_result := -1001;
            out_msg := '无此人员信息！';
            return;
        end if;

        select count (*)
          into vcount
          from base_customers
         where     customerid = prmcustomerid
               and customerunitcode = prmcustomerunitcode
               and cardtypedetailid = 227;

        --有司机卡时更新职员表
        if vcount > 0
        then
            select idcardno
              into vidcardno
              from base_customers_info
             where     customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode;

            update base_emp a
               set a.empname = prmname, a.idcardno = prmidcardno
             where     a.customerunitcode = prmcustomerunitcode
                   and a.idcardno = vidcardno;
        end if;

        update base_customers_info
           set name = prmname,
               idcardno = prmidcardno,
               address = prmaddress,
               sex = prmsex,
               nation = prmnation,
               birthday = to_date (prmbirthday, 'yyyy-mm-dd'),
               telphonenum = prmtelphonenum
         where     customerid = prmcustomerid
               and customerunitcode = prmcustomerunitcode;

        update base_customers
           set cardtypeid = prmcardtypeid,
               productid = prmproductid,
               elecashtype = prmelecashtype
         where     customerid = prmcustomerid
               and customerunitcode = prmcustomerunitcode
               and cardno = prmcardno;

        out_result := 100;
        out_msg := '成功';
        commit;
    exception
        when others
        then
            rollback;
            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;

    procedure proc_testinfo (prmcardno    in     number,
                             out_result      out number,
                             out_msg         out varchar2)
    is
        vcount      number;
        vidcardno   varchar2 (32);
    begin
        out_result := -1000;
        out_msg := '更新用户信息失败';

        delete rec_card_make_acc a
         where cardno in (prmcardno);

        delete base_customers a
         where cardno in (prmcardno);

        delete from base_customers_monticket
              where cardasn in (prmcardno);

        delete from base_customers_vicecard
              where cardasn in (prmcardno);

        out_result := 100;
        out_msg := '成功';
        commit;
    exception
        when others
        then
            rollback;
            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;
end;
/
create or replace package pkg_base_emp
is
   type ref_cursor is ref cursor;              --游标类型定义，用于返回数据集

   procedure proc_empcardwriteoff (
      prmcardid             in out   varchar2,                     --卡流水号
      prmempid              in       number,               --被发卡的职员编码
      prmoperationempid     in       number,                   --发卡的职员id
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmscardsnr           in       varchar2,
      prmpwd                in       varchar2,
      prmposcode            in       number,      --终端设备唯一编号,必须存在
      prmpsamcardno         in       number,                   --终端psam卡号
      prmcardsn             in out   number,                         --cardsn
      prmnousedate          in out   date,
      prmcardno             in out   number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_remakeempcard (
      prmcardid             in out   varchar2,                     --卡流水号
      prmempid              in       number,               --被发卡的职员编码
      prmoperationempid     in       number,                   --发卡的职员id
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmscardsnr           in       varchar2,
      prmpwd                in       varchar2,
      prmposcode            in       number,      --终端设备唯一编号,必须存在
      prmpsamcardno         in       number,                   --终端psam卡号
      prmoperation          in       number,         --操作方式，0正常，1回滚
      prmcardsn             in out   number,               --补卡后的的cardsn
      prmnousedate          in out   date,
      prmcardno             in out   number,
      prmoldcardno          in       number,
      prmcardfare           in       number,                         --卡成本
      prmcardcoverfare      in       number,                       --卡套成本
      prmlineid             in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

      /*
   ---------------------------------------------
   --创建标识：舒洲 2009-06-06
   --实现功能：功能卡发放
   ---------------------------------------------
   */
   procedure proc_makeempcard (
      prmid                 out      varchar2,                     --卡流水号
      prmempcode            in       varchar2,             --被发卡的职员编码
      prmoperationempid     in       number,                   --发卡的职员id
      prmcardtypedetail     in       number,
      prmcardkind           in       number,
      prmscardsnr           in       varchar2,
      prmpwd                in       varchar2,
      prmposcode            in       number,      --终端设备唯一编号,必须存在
      prmpsamcardno         in       number,                   --终端psam卡号
      prmoperation          in       number,         --操作方式，0正常，1回滚
      prmnousedate          in out   varchar2,
      prmcardno             in       number,
      prmlineid             in       number,
      prmcustomerunitcode   in       varchar2,                     --客户代码
      out_result            out      number,
      out_msg               out      varchar2
   );

   --充值机充值-职员登录接口
   procedure proc_empcardlogin (
      prmposcode        in       number,                           --终端编号
      prmempid          in       number,                       --发卡的职员id
      prmpwd            in       varchar2,                   --发卡的职员密码
      prmcustunitcode   in       varchar2,                         --客户代码
      prmempcardno      in       number,                       --充值员卡卡号
      prmmsgid          out      number,        --附加信息 0 正常 1有灰色记录
      prmplanid         out      number,                   --灰色记录申请编号
      merchantname      out      varchar2,               --终端对应的商户名称
      out_result        out      number,                             --返回值
      out_msg           out      varchar2
   --返回信息
   );
end;


 

 
 
 
/
create or replace package body pkg_base_emp
is
   procedure proc_remakeempcard (
      prmcardid             in out   varchar2,                     --卡流水号
      prmempid              in       number,               --被发卡的职员编码
      prmoperationempid     in       number,                   --发卡的职员id
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmscardsnr           in       varchar2,
      prmpwd                in       varchar2,
      prmposcode            in       number,      --终端设备唯一编号,必须存在
      prmpsamcardno         in       number,                   --终端psam卡号
      prmoperation          in       number,         --操作方式，0正常，1回滚
      prmcardsn             in out   number,               --补卡后的的cardsn
      prmnousedate          in out   date,
      prmcardno             in out   number,
      prmoldcardno          in       number,
      prmcardfare           in       number,                         --卡成本
      prmcardcoverfare      in       number,                       --卡套成本
      prmlineid             in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   )
   is
       /*
      --------------------------------------------------------------------------
      --创建标识：舒洲 2009-06-06
      --实现功能：补办功能卡
      --------------------------------------------------------------------------
      --修改标示：朱鹏飞 2009-08-11
      --修改说明：增加检查 emp_card表卡唯一号已存在则不允许再发卡
      --------------------------------------------------------------------------
      --创建标识：吴琰书 2011.10.12
      --实现功能：补办收费
      --------------------------------------------------------------------------
      --修改标示：刘东红 2012-02-08
      --修改说明：修改为功能卡可以重复发卡
      --------------------------------------------------------------------------
      --修改标识：周晓娜20130529
      --修改说明：增加资产负债账目处理
      --------------------------------------------------------------------------
      */
      vcount            number;
      vareaid           number;
      voldcardno        number;
      voldcardsn        number;
      voldlossfc        number;
      v_accdscrp        varchar2 (50);                       --折旧费科目描述
      v_ktaccdscrp      varchar2 (50);                       --卡套费科目描述
      v_empdeptcode     varchar2 (50);                         --职员所属部门
      i_empareaid       integer;                           --职员所属分区编号
      v_citycode        varchar2 (50);
      v_industrycode    varchar2 (50);
      v_asn             varchar2 (50);
      n_empaccountype   number;                              --出纳员账户类型
      n_cashaccfc       number;                    --形成充值明细的原始流水号
      n_empoddfare      number (20, 2);                        --出纳账户余额
      v_empname         varchar2 (30);                           --出纳员名称
      v_codeid          varchar2 (100);
   begin
      out_result := -1101;
      out_msg := '获取分区编号';
      -------检查是否正在数据结算-----------
      proc_validateisbalance (out_result, out_msg);

      if (out_result <> 0)                              --0当前系统未进行结算
      then
         out_result := -1001;
         out_msg := '判断账目结算状态异常，' || out_msg;
         return;
      end if;

      if prmoperation = 0                                               --正常
      then
         --获得新卡号
         /*
         select nvl (max (empcardno), 0) + 1
           into prmcardno
           from base_emp_card;

         if prmcardno > 65536 * 2 - 1
         then
            out_result := -1001;
            out_msg := '卡号已经达到最大使用值，不能再发卡。';
            return;
         end if;
         */
         select count (*)
           into vcount
           from base_customers a
          where a.scardsnr = prmscardsnr
            and a.customerunitcode = prmcustomerunitcode;

         if vcount > 0
         then
            out_result := -1106;
            out_msg :=
                  '此卡已经在系统发放过，不能重复发放scardsnr：'
               || to_char (prmscardsnr);
            return;
         end if;

         select count (*)
           into vcount
           from base_emp_card a
          where a.scardsnr = prmscardsnr
            and a.customeruintcode = prmcustomerunitcode;

         if vcount > 0
         then
            out_result := -1106;
            out_msg :=
                  '此卡已经在系统发放过，不能重复发放scardsnr：'
               || to_char (prmscardsnr);
            return;
         end if;

         --获得卡流水号
         select count (cardid)
           into vcount
           from base_cardid
          where scardsnr = prmscardsnr;

         if vcount = 0
         then
            insert into base_cardid
                        (scardsnr
                        )
                 values (prmscardsnr
                        );
         end if;

         select lpad (cardid, 8, '0')
           into prmcardid
           from base_cardid
          where scardsnr = prmscardsnr;

         -- 获取m1卡asn
         /*
         if (prmcardkind = 1)
         then
            select citycode, industrycode
              into v_citycode, v_industrycode
              from base_syspara;

            v_asn :=
                  lpad (v_citycode, 4, '0')
               || lpad (v_industrycode, 4, '0')
               || prmcardid;
            v_asn := to_char (to_number (v_asn, 'xxxxxxxxxxxxxxxxxxx'));
         else
            v_asn := prmcardno;
         end if;*/
         v_asn := prmcardno;
         out_result := -1102;
         out_msg := '获取职员当前卡信息';

         select empcardno, cardsn, nousedate
           into voldcardno, voldcardsn, prmnousedate
           from base_emp_card
          where empid = prmempid
            and customeruintcode = prmcustomerunitcode
            and empcardno = prmoldcardno;

         prmcardsn := voldcardsn + 1;
         out_result := -1103;
         out_msg := '获取挂失流水号';

         select max (lossfc)
           into voldlossfc
           from rec_emp_loss
          where cardno = voldcardno and customerunitcode = prmcustomerunitcode;

         out_result := -1105;
         out_msg := '生成补卡记录';

         --插入补卡记录
         insert into base_emp_card_history
                     (scardsnr, cardno, oldcardno, cardtypedetailid,
                      cardsn, oldcardsn, cardkind, opdt,
                      lossfc, empid, areaid, pty, id,
                      operationempid, customeruintcode
                     )
              values (prmscardsnr, v_asn, voldcardno, prmcardtypedetailid,
                      voldcardsn + 1, voldcardsn, prmcardkind, sysdate,
                      voldlossfc, prmempid, 0, 1, prmcardid,
                      prmoperationempid, prmcustomerunitcode
                     );

-----------------------------------------
--吴琰书 2011.10.23补卡收费
-----------------------------------------
         out_result := -1004;
         out_msg := '形成折旧费明细记录';

         --获取售卡折旧费的科目描述
         select a.accdscrp
           into v_accdscrp
           from base_acc_type a
          where a.acccode = 702;

         --获取售卡卡套费的科目描述
         select a.accdscrp
           into v_ktaccdscrp
           from base_acc_type a
          where a.acccode = 703;

         --获取流水号
         select seq_rec_emp_selfmoney_acc.nextval
           into n_cashaccfc
           from dual;

         --形成折旧费明细记录，管理卡没有customerid,这里存储empid
         insert into rec_emp_selfmoney_acc
                     (id, empid, cardempid,
                      cardtype, opfare, acccode, dscrp,
                      ktfare, ktacccode, ktaccdscrp, changedate,
                      cardkind, poscode, scardsnr,
                      customerunitcode
                     )
              values (n_cashaccfc, prmoperationempid, prmempid,
                      prmcardtypedetailid, prmcardfare, 702, v_accdscrp,
                      prmcardcoverfare, 703, v_ktaccdscrp, sysdate,
                      prmcardkind, prmposcode, prmscardsnr,
                      prmcustomerunitcode
                     );

         if prmcardtypedetailid = 230
         then
            --更新职员信息
            update base_emp
               set emppwd = prmpwd
             where empid = prmempid and customerunitcode = prmcustomerunitcode;
         end if;

         --更新当前卡记录信息
         update base_emp_card
            set empcardno = prmcardno,
                cardid = prmcardid,
                cardsn = cardsn + 1,
                scardsnr = prmscardsnr,
                pwd = prmpwd,
                cardstatus = 1,
                lineid = prmlineid
          where empid = prmempid
            and customeruintcode = prmcustomerunitcode
            and empcardno = prmoldcardno;

         out_result := -1106;
         out_msg := '补卡数量统计';
         --统计补卡数量
         pkg_st_payment.proc_emptradeaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             0,
                                             603,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             prmcardtypedetailid,
                                             prmcardkind,
                                             --交易卡类型 1：m1卡 2：cpu卡
                                             0,     --操作类型 0：正常 1：回滚
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

         if out_result <> 100
         then
            --统计失败，回滚，返回错误
            rollback;
            return;
         end if;

         out_result := -1107;
         out_msg := '售卡数量统计';
         --统计售卡数量
         pkg_st_payment.proc_emptradeaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             0,
                                             602,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             prmcardtypedetailid,
                                             prmcardkind,
                                             --交易卡类型 1：m1卡 2：cpu卡
                                             0,     --操作类型 0：正常 1：回滚
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

         if out_result <> 100
         then
            --统计失败，回滚，返回错误
            rollback;
            return;
         end if;

-----------------------------------------
--吴琰书 2011.10.23补卡收费,分区areaid为0，
-----------------------------------------
         --获取职员部门及分区编号
         --增加职员账户信息、名字信息的获取
         select a.dptcode, a.accounttype, a.empname
           into v_empdeptcode, n_empaccountype, v_empname
           from base_emp a
          where a.empid = prmoperationempid
            and customerunitcode = prmcustomerunitcode;

         out_result := -1008;
         out_msg := '成本费用统计';
         --折旧费用统计
         pkg_st_payment.proc_custdataaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             prmcardfare,
                                             702,
                                             0,             --prmdiscountfare,
                                             prmcardkind,       --prmcardkind,
                                             prmcardtypedetailid,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             0,
                                             v_empdeptcode,
                                             0,
                                             0,
                                             0,
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

         if out_result <> 100
         then
            --统计失败，回滚，返回错误
            rollback;
            out_result := out_result;
            out_msg := '成本费用统计失败，' || out_msg;
            return;
         end if;
         -------------------------成本费收支账目处理结束------------------------
         out_result := -1009;
         out_msg := '卡套费用统计';
         --卡套费用统计
         pkg_st_payment.proc_custdataaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             prmcardcoverfare,
                                             703,
                                             0,             --prmdiscountfare,
                                             prmcardkind,       --prmcardkind,
                                             prmcardtypedetailid,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             0,
                                             v_empdeptcode,
                                             0,
                                             0,
                                             0,
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

         if out_result <> 100
         then
            --统计失败，回滚，返回错误
            rollback;
            out_result := out_result;
            out_msg := '卡套费用统计失败，' || out_msg;
            return;
         end if;
      else                                                              --回滚
         out_result := -1101;
         out_msg := '补卡回滚';

         --获取售卡折旧费的科目描述
         select a.accdscrp
           into v_accdscrp
           from base_acc_type a
          where a.acccode = 702;

         --获取售卡卡套费的科目描述
         select a.accdscrp
           into v_ktaccdscrp
           from base_acc_type a
          where a.acccode = 703;

         delete from base_emp_card_history
               where empid = prmempid
                 and scardsnr = prmscardsnr
                 and cardtypedetailid = prmcardtypedetailid
                 and customeruintcode = prmcustomerunitcode
                 and pty = 1;

         select a.id
           into n_cashaccfc
           from rec_emp_selfmoney_acc a
          where scardsnr = prmscardsnr
            and customerunitcode = prmcustomerunitcode
            and cardtype = prmcardtypedetailid
            and empid = prmoperationempid
            and acccode = 702
            and ktacccode = 703;

         delete from rec_emp_selfmoney_acc
               where scardsnr = prmscardsnr
                 and customerunitcode = prmcustomerunitcode
                 and cardtype = prmcardtypedetailid
                 and empid = prmoperationempid
                 and acccode = 702
                 and ktacccode = 703;

         if prmcardtypedetailid = 230
         then
            update base_emp
               set emppwd = prmpwd
             where empid = prmempid and customerunitcode = prmcustomerunitcode;
         end if;

         update base_emp_card
            set empcardno = prmoldcardno,
                cardid = prmcardid,
                cardsn = cardsn - 1,
                scardsnr = prmscardsnr,
                pwd = prmpwd,
                cardstatus = 3
          where empid = prmempid
            and customeruintcode = prmcustomerunitcode
            and empcardno = prmcardno;

         --回滚统计发卡数量
         pkg_st_payment.proc_emptradeaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             0,
                                             603,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             prmcardtypedetailid,
                                             prmcardkind,
                                             --交易卡类型 1：m1卡 2：cpu卡
                                             1,     --操作类型 0：正常 1：回滚
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );
         --回滚统计售卡数量
         pkg_st_payment.proc_emptradeaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             0,
                                             602,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             prmcardtypedetailid,
                                             prmcardkind,
                                             --交易卡类型 1：m1卡 2：cpu卡
                                             --分区编号
                                             1,     --操作类型 0：正常 1：回滚
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

-----------------------------------------
--吴琰书 2011.10.23补卡收费,分区areaid为0，
-----------------------------------------
         --获取职员部门及分区编号
         select a.dptcode, a.accounttype, a.empname
           into v_empdeptcode, n_empaccountype, v_empname
           from base_emp a
          where a.empid = prmoperationempid
            and customerunitcode = prmcustomerunitcode;

         out_result := -1008;
         out_msg := '折旧费用统计';
         --折旧费用统计
         pkg_st_payment.proc_custdataaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             prmcardfare,
                                             702,
                                             0,             --prmdiscountfare,
                                             prmcardkind,       --prmcardkind,
                                             prmcardtypedetailid,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             0,
                                             v_empdeptcode,
                                             0,
                                             0,
                                             1,
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

         if out_result <> 100
         then
            --统计失败，回滚，返回错误
            rollback;
            out_result := out_result;
            out_msg := '成本费用统计失败，' || out_msg;
            return;
         end if;
         out_result := -1009;
         out_msg := '卡套费用统计';
         --卡套费用统计
         pkg_st_payment.proc_custdataaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             prmcardcoverfare,
                                             703,
                                             0,             --prmdiscountfare,
                                             prmcardkind,       --prmcardkind,
                                             prmcardtypedetailid,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             0,
                                             v_empdeptcode,
                                             0,
                                             0,
                                             1,
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

         if out_result <> 100
         then
            --统计失败，回滚，返回错误
            rollback;
            out_result := out_result;
            out_msg := '成本费用统计失败，' || out_msg;
            return;
         end if;
      end if;

      out_result := 100;
      out_msg := '处理成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_msg :=
            out_msg || '出错，错误代码:' || out_result || '，详细：'
            || sqlerrm;
   end;

/*
---------------------------------------------
--创建标识：舒洲 2009-06-06
--实现功能：功能卡发放
---------------------------------------------
*/
   procedure proc_makeempcard (
      prmid                 out      varchar2,                      --卡流水号
      prmempcode            in       varchar2,              --被发卡的职员编码
      prmoperationempid     in       number,                    --发卡的职员id
      prmcardtypedetail     in       number,
      prmcardkind           in       number,
      prmscardsnr           in       varchar2,
      prmpwd                in       varchar2,
      prmposcode            in       number,       --终端设备唯一编号,必须存在
      prmpsamcardno         in       number,                    --终端psam卡号
      prmoperation          in       number,          --操作方式，0正常，1回滚
      prmnousedate          in out   varchar2,
      prmcardno             in       number,
      prmlineid             in       number,
      prmcustomerunitcode   in       varchar2,                      --客户代码
      out_result            out      number,
      out_msg               out      varchar2
   )
   is
      vempid           number;
      vcount           number;
      vcardtypename    varchar2 (50);
      v_asn            varchar2 (50);
      v_citycode       varchar2 (50);
      v_industrycode   varchar2 (50);
   begin
      out_result := -1101;
      out_msg := '获取职员编号';
      -------检查是否正在数据结算-----------
      proc_validateisbalance (out_result, out_msg);

      if (out_result <> 0)                              --0当前系统未进行结算
      then
         out_result := -1001;
         out_msg := '判断账目结算状态异常，' || out_msg;
         return;
      end if;

      --1、获得职员编号
      select empid
        into vempid
        from base_emp
       where empcode = prmempcode and customerunitcode = prmcustomerunitcode;

      --2、prmoperation:0为功能卡售卡；prmoperation:1为功能卡售卡回滚
      if prmoperation = 0                                           --正常操作
      then
         --2.2、判断同一职员统一功能卡类型只能发一张
         if (prmcardtypedetail = 230)
         then
            select count (*)
              into vcount
              from base_emp_card
             where carddetailid = prmcardtypedetail
               and empid = vempid
               and customeruintcode = prmcustomerunitcode;

            if vcount > 0
            then
               out_result := -1106;
               out_msg := '此人员已经发过此功能卡了，不能再发！';
               return;
            end if;
         end if;

         --2.3、判断该卡片是否发过乘车卡
         select count (*)
           into vcount
           from base_customers a
          where a.scardsnr = prmscardsnr
            and a.customerunitcode = prmcustomerunitcode;

         if vcount > 0
         then
            out_result := -1106;
            out_msg :=
                  '此卡已经在系统发放过，不能重复发放scardsnr：'
               || to_char (prmscardsnr);
            return;
         end if;

         --2.4、判断该卡片是否发过功能卡
         select count (*)
           into vcount
           from base_emp_card a
          where a.scardsnr = prmscardsnr
            and customeruintcode = prmcustomerunitcode;

         if vcount > 0
         then
            out_result := -1106;
            out_msg :=
                  '此卡已经在系统发放过，不能重复发放scardsnr：'
               || to_char (prmscardsnr);
            return;
         end if;

         --2.5、获得卡流水号
         select count (cardid)
           into vcount
           from base_cardid
          where scardsnr = prmscardsnr;

         if vcount = 0
         then
            insert into base_cardid
                        (scardsnr
                        )
                 values (prmscardsnr
                        );
         end if;

         select lpad (cardid, 8, '0')
           into prmid
           from base_cardid
          where scardsnr = prmscardsnr;

         -- 获取m1卡asn
         if (prmcardkind = 1)
         then
            select citycode, industrycode
              into v_citycode, v_industrycode
              from base_syspara;

            v_asn :=
                  lpad (v_citycode, 4, '0')
               || lpad (v_industrycode, 4, '0')
               || prmid;
            v_asn := to_char (to_number (v_asn, 'xxxxxxxxxxxxxxxxxxx'));
         else
            v_asn := prmcardno;
         end if;

         v_asn := prmcardno;
         --2.6、非充值员卡，失效期默认20年，卡上没有失效期空间
         /*if prmcardtypedetail <> 230
         then
            prmnousedate := add_months (sysdate, 120);
         /* 发过充值员卡以后会有2个密码，不再更新职员的无卡登录密码
         else
            --更新职员信息,只有充值员卡才有密码
            update base_emp
               set emppwd = prmpwd
             where empcode = prmempcode;
             */
         --end if;*/
         --prmnousedate := add_months (sysdate, 120);

         --2.7、插入发卡记录
         out_result := -1102;
         out_msg := '生成发卡记录';

         insert into base_emp_card
                     (empid, empcardno, carddetailid, cardstatus, scardsnr,
                      cardsn, pwd, nousedate,
                      cardkind, operationempid, cardid,
                      customeruintcode, lineid
                     )
              values (vempid, v_asn, prmcardtypedetail, 1, prmscardsnr,
                      1, prmpwd, to_date (prmnousedate, 'yyyy-mm-dd'),
                      prmcardkind, prmoperationempid, prmid,
                      prmcustomerunitcode, prmlineid
                     );

         --2.8、插入发卡历史记录
         out_result := -1103;
         out_msg := '生成发卡历史';

         insert into base_emp_card_history
                     (scardsnr, cardno, oldcardno, cardtypedetailid, cardsn,
                      oldcardsn, cardkind, opdt, lossfc, empid, pty, id,
                      operationempid, customeruintcode
                     )
              values (prmscardsnr, v_asn, 0, prmcardtypedetail, 1,
                      0, prmcardkind, sysdate, 0, vempid, 0, prmid,
                      prmoperationempid, prmcustomerunitcode
                     );

         out_result := -1104;
         out_msg := '发卡数量统计';
         --统计发卡数量
         pkg_st_payment.proc_emptradeaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             0,
                                             601,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             prmcardtypedetail,
                                             prmcardkind,
                                             --交易卡类型 1：m1卡 2：cpu卡
                                             0,     --操作类型 0：正常 1：回滚
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

         if out_result <> 100
         then
            --统计失败，回滚，返回错误
            rollback;
            return;
         end if;

         out_result := -1105;
         out_msg := '售卡数量统计';
         --统计售卡数量
         pkg_st_payment.proc_emptradeaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             0,
                                             602,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             prmcardtypedetail,
                                             prmcardkind,
                                             --交易卡类型 1：m1卡 2：cpu卡
                                             0,     --操作类型 0：正常 1：回滚
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

         if out_result <> 100
         then
            --统计失败，回滚，返回错误
            rollback;
            return;
         end if;
      --3、功能卡发卡回滚
      else                                                              --回滚
         out_result := -1101;
         out_msg := '发卡回滚';

         delete from base_emp_card
               where empid = vempid
                 and scardsnr = prmscardsnr
                 and carddetailid = prmcardtypedetail
                 and cardsn = 1;

         delete from base_emp_card_history
               where empid = vempid
                 and scardsnr = prmscardsnr
                 and cardtypedetailid = prmcardtypedetail
                 and cardsn = 1
                 and pty = 0;

         if prmcardtypedetail = 230
         then
            update base_emp
               set emppwd = prmpwd
             where empid = vempid and customerunitcode = prmcustomerunitcode;
         end if;

         --回滚统计发卡数量
         pkg_st_payment.proc_emptradeaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             0,
                                             601,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             prmcardtypedetail,
                                             prmcardkind,
                                             --交易卡类型 1：m1卡 2：cpu卡
                                             1,     --操作类型 0：正常 1：回滚
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );
         --回滚统计售卡数量
         pkg_st_payment.proc_emptradeaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             0,
                                             602,
                                             prmoperationempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             prmcardtypedetail,
                                             prmcardkind,
                                             --交易卡类型 1：m1卡 2：cpu卡
                                             1,
                                             --操作类型 0：正常 1：回滚
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );
      end if;

      out_result := 100;
      out_msg := '处理成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_msg :=
            out_msg || '出错，错误代码:' || out_result || '，详细：'
            || sqlerrm;
   end;

   procedure proc_empcardwriteoff (
      prmcardid             in out   varchar2,                      --卡流水号
      prmempid              in       number,                --被发卡的职员编码
      prmoperationempid     in       number,                    --发卡的职员id
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmscardsnr           in       varchar2,
      prmpwd                in       varchar2,
      prmposcode            in       number,       --终端设备唯一编号,必须存在
      prmpsamcardno         in       number,                    --终端psam卡号
      prmcardsn             in out   number,                          --cardsn
      prmnousedate          in out   date,
      prmcardno             in out   number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   )
   is
       /*
      --------------------------------------------------------------------------
      --修改标示：刘东红 2012-02-08
      --修改说明：修改为功能卡可以重复发卡
      --------------------------------------------------------------------------
      */
      vcount          number;
      vareaid         number;
      voldcardno      number;
      voldcardsn      number;
      voldlossfc      number;
      vcardid         number;
      v_empdeptcode   varchar2 (50);                           --职员所属部门
      vscardsnr       varchar2 (50);
      i_empareaid     integer;                             --职员所属分区编号
   begin
      prmcardid := 0;
      prmcardsn := 0;
      prmnousedate := sysdate ();

      select nvl (count (*), 0)
        into vcount
        from base_emp_card
       where empid = prmempid
         and empcardno = prmcardno
         and customeruintcode = prmcustomerunitcode;

      if vcount < 1
      then
         out_result := -1000;
         out_msg := '无此卡信息！';
         return;
      end if;

      out_result := -1102;
      out_msg := '获取职员当前卡信息'||prmempid||'__'||prmcardno;
--return;
      select empcardno, cardsn, nousedate, cardid, scardsnr
        into voldcardno, voldcardsn, prmnousedate, vcardid, vscardsnr
        from base_emp_card
       where empid = prmempid
         and empcardno = prmcardno
         and customeruintcode = prmcustomerunitcode;

      out_result := -1105;
      out_msg := '生成删除记录';

      --插入补卡记录
      insert into base_emp_card_history
                  (scardsnr, cardno, oldcardno, cardtypedetailid,
                   cardsn, oldcardsn, cardkind, opdt, lossfc,
                   empid, areaid, pty, id, operationempid,
                   customeruintcode
                  )
           values (vscardsnr, prmcardno, voldcardno, prmcardtypedetailid,
                   voldcardsn + 1, voldcardsn, prmcardkind, sysdate, 0,
                   prmempid, '0', 1, vcardid, prmoperationempid,
                   prmcustomerunitcode
                  );

      --清除卡信息
      delete from base_emp_card
            where empid = prmempid
              and empcardno = prmcardno
              and customeruintcode = prmcustomerunitcode;

      out_result := 100;
      out_msg := '销户成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_msg :=
            out_msg || '出错，错误代码:' || out_result || '，详细：'
            || sqlerrm;
   end;

   --充值机充值-职员登录接口
   procedure proc_empcardlogin (
      prmposcode        in       number,
      --终端编号
      prmempid          in       number,                        --发卡的职员id
      prmpwd            in       varchar2,                    --发卡的职员密码
      prmcustunitcode   in       varchar2,                          --客户代码
      prmempcardno      in       number,                        --充值员卡卡号
      prmmsgid          out      number,         --附加信息 0 正常 1有灰色记录
      prmplanid         out      number,                    --灰色记录申请编号
      merchantname      out      varchar2,                --终端对应的商户名称
      out_result        out      number,                              --返回值
      out_msg           out      varchar2
   --返回信息
   )
   as
      /*
        -------------------------------------------------------------------------------
        --存储过程： proc_empcardlogin
        --作　　者：周晓娜
        --时　　间：2013-02-28
        --说　　明： 充值机充值-职员登录接口
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --0 ：处理成功，其他值参考过程内部处理
        --------------------------------------------------------------------------
        --修改标识：zxn 20130409
        --修改内容：增加终端对应商户名称的返回，提供充值机打印小票使用
        --------------------------------------------------------------------------
        --修改标识：zxn 20130508
        --修改内容：增加充值员卡卡号（充值员卡挂失补卡后，empid一样，充值终端
                     不支持黑名单，而且挂失的卡没有经过写卡操作没有任何标记，当补卡后 挂失的卡和新卡都可以使用）
        --------------------------------------------------------------------------
        */
      n_count          number;
      n_cardstatus     number;                             --职员卡卡状态信息
      v_emppwd         varchar2 (100);                     --职员卡对应的密码
      n_planid         number;                             --灰色记录申请编号
      v_merchantname   varchar2 (20);                    --终端对应的商户名称
      v_dptcode        varchar2 (10);                    --终端对应的部门编码
   begin
      --初始值
      prmmsgid := 0;
      prmplanid := -1;
      out_result := -1001;
      v_merchantname := '虚拟部门';
      merchantname := '虚拟部门';
      out_msg := '初始化信息失败！';

      --判断终端信息是否合法
      select count (a.id)
        into n_count
        from base_term a
       where a.customerunitcode = prmcustunitcode
         and a.poscode = prmposcode
         and a.isdelete = 0;

      if n_count = 0
      then
         out_result := 0;
         out_msg := '终端设备信息不合法！';
         return;
      end if;

      out_result := -1002;
      out_msg := '获取终端对应的部门信息失败！';

      --获取终端对应的部门编码
      select a.dptcode
        into v_dptcode
        from base_term a
       where a.customerunitcode = prmcustunitcode
         and a.poscode = prmposcode
         and a.isdelete = 0;

      --获取终端对应的部门名称
      select a.dptname
        into v_merchantname
        from base_dept a
       where a.customerunitcode = prmcustunitcode
         and a.dptcode = v_dptcode
         and a.isdelete = 0;

      merchantname := v_merchantname;

      --判断登录职员信息是否合法
      select count (empid)
        into n_count
        from base_emp_card a
       where a.empid = prmempid
         and a.carddetailid = 230
         and a.empcardno = prmempcardno
         and a.customeruintcode = prmcustunitcode;

      if n_count = 0
      then
         out_result := 1;
         out_msg := '职员编号：' || to_char (prmempid) || '的信息不合法！';
         return;
      end if;

      --判断该职员卡状态是否异常
      select a.cardstatus
        into n_cardstatus
        from base_emp_card a
       where a.empid = prmempid
         and a.carddetailid = 230
         and a.empcardno = prmempcardno
         and a.customeruintcode = prmcustunitcode;

      if n_cardstatus != 1
      then
         out_result := 3;
         out_msg := '职员编号：' || to_char (prmempid) || '的卡状态异常！';
         return;
      end if;

      --判断该职员卡状态是否异常
      select a.pwd
        into v_emppwd
        from base_emp_card a
       where a.empid = prmempid
         and a.carddetailid = 230
         and a.empcardno = prmempcardno
         and a.customeruintcode = prmcustunitcode;

      if v_emppwd != prmpwd
      then
         out_result := 2;
         out_msg := '职员编号：' || to_char (prmempid) || '的密码错误！';
         return;
      end if;

      --判断终端是否有灰记录
      select count (a.planid)
        into n_count
        from rec_electtron_cash_plan a
       where a.customerunitcode = prmcustunitcode
         and a.poscode = prmposcode
         and a.status = 1;

      if n_count = 0                                          --不存在灰色记录
      then
         prmmsgid := 0;
         out_result := 100;
         out_msg := '登录成功！';
      elsif n_count = 1                               --存在一条合法的灰色记录
      then
         select a.planid
           into n_planid
           from rec_electtron_cash_plan a
          where a.customerunitcode = prmcustunitcode
            and a.poscode = prmposcode
            and a.status = 1;

         prmmsgid := 1;
         prmplanid := n_planid;
         out_result := 100;
         out_msg := '终端存在灰色记录！';
      else
         out_result := 101;
         out_msg := '终端充值申请记录存在异常！';
      end if;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := out_msg || '，具体原因为：' || sqlerrm;
   end;
end;

/
create or replace package pkg_base_legalperson
is
     /*
   ----------------------------------------------------------------------------
   --过程包名：pkg_base_legalperson
   --作　　者：张垒
   --时　　间： 2013-2-1
   --说　　明：用以处理客户法人相关的业务信息
   ----------------------------------------------------------------------------
   */
   procedure insert_legalperson (
      prmcodeid           in       varchar2,     --base_system_account codeid
      prmstatus           in       number,                             --状态
      prmrremark          in       varchar2,                           --备注
      prmbankcardno       in       varchar2,                       --银行卡号
      prmbankcode         in       number,                         --所属银行
      prmemail            in       varchar2,                           --有效
      prmaddress          in       varchar2,                           --地址
      prmtel              in       varchar2,                       --联系电话
      prmlinkman          in       varchar2,                         --联系人
      prmcustomernamejp   in       varchar2,                       --客户简称
      prmcustomername     in       varchar2,                       --客户名称
      prmcustunitcode     in       varchar2,                       --客户代码
      prmcitycode         in       varchar2,                       --城市代码
      out_result          out      integer,
      out_msg             out      varchar2
   );

   procedure insert_dept (
      prmdptcode               in       varchar2,                  --部门编号
      prmdptname               in       varchar2,                  --部门名称
      prmdptcode_p             in       varchar2,              --上级部门编号
      prmsortid                in       number,                      --排序号
      prmissubcompany          in       number,                  --是否分公司
      prmdepttype              in       number,                    --部门类型
      prmaccounttype           in       number,                    --账户类型
      prmcustunitcode          in       varchar2,                  --客户代码
      prmdptbankcardno         in       varchar2,            --商户开户行账号
      prmdptbankcardowner      in       varchar2,          --商户转账卡所属人
      prmdptbankcardaddress    in       varchar2,            --商户开户行地址
      prmdpttelephone          in       varchar2,              --商户联系电话
      prmdptbankcode           in       number,              --商户开户行银行
      prmtransaccoutbankcode   in       number,    --运营商转账账户开户行银行
      prmtransaccountno        in       varchar2,            --运营商转账账号
      out_result               out      integer,
      out_msg                  out      varchar2
   );

   procedure update_dept (
      prmdptcode               in       varchar2,                  --部门编号
      prmdptname               in       varchar2,                  --部门名称
      prmischargeorclera       in       varchar2,
                     --添加充值额度或者消费额度 ch:充值额度 cl;消费 em:不添加
      prmsortid                in       number,                      --排序号
      prmissubcompany          in       number,                  --是否分公司
      prmdepttype              in       number,                    --部门类型
      prmaccounttype           in       number,                    --账户类型
      prmcustunitcode          in       varchar2,                  --客户代码
      prmdptbankcardno         in       varchar2,            --商户开户行账号
      prmdptbankcardowner      in       varchar2,          --商户转账卡所属人
      prmdptbankcardaddress    in       varchar2,            --商户开户行地址
      prmdpttelephone          in       varchar2,              --商户联系电话
      prmdptbankcode           in       number,              --商户开户行银行
      prmtransaccoutbankcode   in       number,    --运营商转账账户开户行银行
      prmtransaccountno        in       varchar2,            --运营商转账账号
      out_result               out      integer,
      out_msg                  out      varchar2
   );

   --删除部门
   procedure delete_dept (
      prmdptcode        in       varchar2,                           --排序号
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      integer,
      out_msg           out      varchar2
   );
end;                                                           -- package spec


 

 
 
 
/
create or replace package body pkg_base_legalperson
is
   procedure insert_legalperson (
      prmcodeid           in       varchar2,     --base_system_account codeid
      prmstatus           in       number,                             --状态
      prmrremark          in       varchar2,                           --备注
      prmbankcardno       in       varchar2,                       --银行卡号
      prmbankcode         in       number,                         --所属银行
      prmemail            in       varchar2,                           --邮箱
      prmaddress          in       varchar2,                           --地址
      prmtel              in       varchar2,                       --联系电话
      prmlinkman          in       varchar2,                         --联系人
      prmcustomernamejp   in       varchar2,                       --客户简称
      prmcustomername     in       varchar2,                       --客户名称
      prmcustunitcode     in       varchar2,                       --客户代码
      prmcitycode         in       varchar2,                       --城市代码
      out_result          out      integer,
      out_msg             out      varchar2
   )
   as
      vcount             number;
      custom_exception   exception;                              --自定义错误
    /*
   ----------------------------------------------------------------------------
   --过程包名：insert_legalperson
   --作　　者：张垒
   --时　　间： 2013-2-1
   --说　　明：添加客户法人
   ----------------------------------------------------------------------------
   */
   begin
      -- 添加客户法人
      insert into base_legal_person
                  (customerunitcode, customername, customernamejp,
                   linkman, telephone, address, email, bankcode,
                   bankcardno, rremark, status,citycode
                  )
           values (prmcustunitcode, prmcustomername, prmcustomernamejp,
                   prmlinkman, prmtel, prmaddress, prmemail, prmbankcode,
                   prmbankcardno, prmrremark, prmstatus,prmcitycode
                  );

      --添加岗位信息
      insert into base_positions
                  (postid, postname, customerunitcode)
         select postid, postname, prmcustunitcode
           from base_positions
          where customerunitcode is null;

      --添加部门
      insert into base_dept
                  (dptcode, dptname, dptcode_p, isvisible, customerunitcode,
                   depttype
                  )
           values ('001', '部门', 'root', 1, prmcustunitcode,
                   0
                  );

      --添加充值额度信息
      insert into base_chargeauth
                  (businesspoint, isuse, customerunitcode
                  )
           values ('001', 1, prmcustunitcode
                  );

      --添加消费额度信息
      insert into base_clearingrates
                  (merchantcode, customerunitcode
                  )
           values ('001', prmcustunitcode
                  );

      --查找员工编号
      select count (*)
        into vcount
        from base_sequence_no
       where customerunitcode = prmcustunitcode and code = 'empid';

      if vcount = 0
      then
         vcount := 1;

         insert into base_sequence_no
                     (code, max_no, contentmes, customerunitcode
                     )
              values ('empid', 1, 'base_emp员工表empid字段', prmcustunitcode
                     );
      else
         select max_no + 1
           into vcount
           from base_sequence_no
          where customerunitcode = prmcustunitcode and code = 'empid';

         update base_sequence_no
            set max_no = vcount
          where customerunitcode = prmcustunitcode and code = 'empid';
      end if;

      --添加员工
      insert into base_emp
                  (empid, empcode, empname, emppos, empemail, dptcode,
                   idcardno, certificateid, telphonenum, sex, postid,
                   address, nation,
                   incomedate,
                   userid, loginst, rolecode, issystemuser, cashcardtype,
                   salecardtype, privilegelogon, status, exceptiveemp,
                   customerunitcode, bankcardno
                  )
           values (vcount, 'admin', '超级管理员', '1', ' ', '001',
                   '000000000000000000', 3, ' ', 1, 0,
                   ' ', '01',
                   to_date (to_char (sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd'),
                   '000000000', 0, '1', 1, '0',
                   '0', 1, 1, 1,
                   prmcustunitcode, ' '
                  );

      --添加虚拟员工
      insert into base_emp
                  (empid, empcode, empname, emppos, empemail, dptcode,
                   idcardno, certificateid, telphonenum, sex, postid,
                   address, nation,
                   incomedate,
                   userid, loginst, rolecode, issystemuser, cashcardtype,
                   salecardtype, privilegelogon, status, exceptiveemp,
                   customerunitcode, bankcardno
                  )
           values (0, '00000000', '虚拟职员', '0', ' ', '001',
                   '000000000000000001', 3, ' ', 1, 0,
                   ' ', '01',
                   to_date (to_char (sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd'),
                   '00000000', 0, '0', 1, '0',
                   '0', 1, 1, 1,
                   prmcustunitcode, ' '
                  );

      --添加应用类型
      insert into base_app_type
                  (apptypeid, apptypename, ifalone, appver, lastupdatedate,
                   remarks, isvisible, customerunitcode)
         select apptypeid, apptypename, ifalone, appver, lastupdatedate,
                remarks, isvisible, prmcustunitcode
           from base_app_type
          where customerunitcode is null;

      --添加角色
      insert into base_role
                  (roleid, rolenmae, customerunitcode, isvisible)
         select roleid, rolenmae, prmcustunitcode, isvisible
           from base_role
          where customerunitcode is null;

      --添加base_param表中flag=2的数据
      insert into base_param
                  (paramgroupid, paramname, paramvalue, isuse,
                   customerunitcode, flag)
         select paramgroupid, paramname, paramvalue, isuse, prmcustunitcode,
                flag
           from base_param
          where flag = 2 and customerunitcode is null and isuse = 1;


      --添加base_param表中  密钥 前置信息  20161028 zdh 更改
      insert into base_param
                  (paramgroupid, paramname, paramvalue, isuse,
                   customerunitcode, flag)
         select paramgroupid, paramname, paramvalue, isuse, prmcustunitcode,
                2
           from base_param
          where flag=1 and customerunitcode is null and paramgroupid='1001';

      --添加电子现金卡类型
      insert into base_cardtype_detail_temp
                  (detailid, detailname, groupid, sortid, ver, paragroupid,
                   walletusetype, isvisible, cashyearcheckmons,
                   customerunitcode
                  )
           values (0, '电子现金卡', 4, 14, 0, 0,
                   '10', '1', 0,
                   prmcustunitcode
                  );

        --if func_version = '10g'
        -- then
         --创建分区
         pkg_partition.add_parttenbycustunitcode (prmcustunitcode,
                                                  to_char (sysdate,
                                                           'yyyymmdd'),
                                                  out_result,
                                                  out_msg
                                                 );
     -- end if;

      /*if func_version = '11g'
      then
         pkg_partition.add_partelevenbycustunitcode (prmcustunitcode,
                                                     to_char (sysdate,
                                                              'yyyymmdd'
                                                             ),
                                                     out_result,
                                                     out_msg
                                                    );
      end if;
       */

      if out_result <> 100
      then
         out_result := -1002;
         out_msg := out_msg;
         raise custom_exception;
      end if;

      out_result := 100;
      out_msg := '添加客户法人成功!';
      commit;
   exception
      when custom_exception                              -----先处理自定义异常
      then
         rollback;
         out_result := out_result;
         out_msg := out_msg;
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加客户法人异常：' || sqlerrm;
   end;

   procedure insert_dept (
      prmdptcode               in       varchar2,                   --部门编号
      prmdptname               in       varchar2,                   --部门名称
      prmdptcode_p             in       varchar2,               --上级部门编号
      prmsortid                in       number,                       --排序号
      prmissubcompany          in       number,                   --是否分公司
      prmdepttype              in       number,                     --部门类型
      prmaccounttype           in       number,                     --账户类型
      prmcustunitcode          in       varchar2,                   --客户代码
      prmdptbankcardno         in       varchar2,             --商户开户行账号
      prmdptbankcardowner      in       varchar2,           --商户转账卡所属人
      prmdptbankcardaddress    in       varchar2,             --商户开户行地址
      prmdpttelephone          in       varchar2,               --商户联系电话
      prmdptbankcode           in       number,               --商户开户行银行
      prmtransaccoutbankcode   in       number,     --运营商转账账户开户行银行
      prmtransaccountno        in       varchar2,             --运营商转账账号
      out_result               out      integer,
      out_msg                  out      varchar2
   )
   as
      vcount   number;
    /*
   ----------------------------------------------------------------------------
   --过程包名：insert_dept
   --作　　者：张垒
   --时　　间： 2013-2-1
   --说　　明：添加部门
   ----------------------------------------------------------------------------
   */
   begin
      select count (*)
        into vcount
        from base_dept
       where dptname = prmdptname
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '部门名称不能重复！';
         return;
      end if;

      --添加部门
      insert into base_dept
                  (dptcode, dptname, dptcode_p, sortid,
                   issubcompany, isvisible, customerunitcode, depttype,
                   accounttype, dptbankcardno, dptbankcardowner,
                   dptbankcardaddress, dpttelephone, dptbankcode,
                   transaccoutbankcode, transaccountno
                  )
           values (prmdptcode, prmdptname, prmdptcode_p, prmsortid,
                   prmissubcompany, 1, prmcustunitcode, prmdepttype,
                   prmaccounttype, prmdptbankcardno, prmdptbankcardowner,
                   prmdptbankcardaddress, prmdpttelephone, prmdptbankcode,
                   prmtransaccoutbankcode, prmtransaccountno
                  );

      if prmdepttype <> 2
      then
         --添加充值额度信息   默认不启用额度
         insert into base_chargeauth
                     (businesspoint, isuse, customerunitcode
                     )
              values (prmdptcode, 0, prmcustunitcode
                     );
      end if;

      if prmdepttype <> 1
      then
         --添加消费额度信息
         insert into base_clearingrates
                     (merchantcode, customerunitcode
                     )
              values (prmdptcode, prmcustunitcode
                     );
      end if;

      out_result := 100;
      out_msg := '添加成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加部门异常：' || sqlerrm;
   end;

   procedure update_dept (
      prmdptcode               in       varchar2,                   --部门编号
      prmdptname               in       varchar2,                   --部门名称
      prmischargeorclera       in       varchar2,
      --添加充值额度或者消费额度 ch:充值额度 cl;消费 em:不添加
      prmsortid                in       number,                       --排序号
      prmissubcompany          in       number,                   --是否分公司
      prmdepttype              in       number,                     --部门类型
      prmaccounttype           in       number,                     --账户类型
      prmcustunitcode          in       varchar2,                   --客户代码
      prmdptbankcardno         in       varchar2,             --商户开户行账号
      prmdptbankcardowner      in       varchar2,           --商户转账卡所属人
      prmdptbankcardaddress    in       varchar2,             --商户开户行地址
      prmdpttelephone          in       varchar2,               --商户联系电话
      prmdptbankcode           in       number,               --商户开户行银行
      prmtransaccoutbankcode   in       number,     --运营商转账账户开户行银行
      prmtransaccountno        in       varchar2,             --运营商转账账号
      out_result               out      integer,
      out_msg                  out      varchar2
   )
   as
      vcount   number;
    /*
   ----------------------------------------------------------------------------
   --过程包名：update_dept
   --作　　者：张垒
   --时　　间： 2013-2-1
   --说　　明：修改部门
   ----------------------------------------------------------------------------
   */
   begin
      select count (*)
        into vcount
        from base_dept
       where dptname = prmdptname
         and isdelete = 0
         and dptcode <> prmdptcode
         and customerunitcode = prmcustunitcode;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '部门名称不能重复！';
         return;
      end if;

      --修改部门
      update base_dept
         set dptname = prmdptname,
             sortid = prmsortid,
             depttype = prmdepttype,
             accounttype = prmaccounttype,
             dptbankcardno = prmdptbankcardno,
             dptbankcardowner = prmdptbankcardowner,
             dptbankcardaddress = prmdptbankcardaddress,
             dpttelephone = prmdpttelephone,
             dptbankcode = prmdptbankcode,
             issubcompany = prmissubcompany,
             transaccoutbankcode = prmtransaccoutbankcode,
             transaccountno = prmtransaccountno
       where dptcode = prmdptcode and customerunitcode = prmcustunitcode;

      if prmischargeorclera = 'ch'
      then
         --添加充值额度信息
         insert into base_chargeauth
                     (businesspoint, isuse, customerunitcode
                     )
              values (prmdptcode, 1, prmcustunitcode
                     );
      end if;

      if prmischargeorclera = 'cl'
      then
         --添加消费额度信息
         insert into base_clearingrates
                     (merchantcode, customerunitcode
                     )
              values (prmdptcode, prmcustunitcode
                     );
      end if;

      out_result := 100;
      out_msg := '修改成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '修改部门异常：' || sqlerrm;
   end;

   --删除部门
   procedure delete_dept (
      prmdptcode        in       varchar2,                            --排序号
      prmcustunitcode   in       varchar2,                          --客户代码
      out_result        out      integer,
      out_msg           out      varchar2
   )
   as
      vcount   number;
    /*
   ----------------------------------------------------------------------------
   --过程包名：delete_busline
   --作　　者：张垒
   --时　　间：2013-3-15
   --说　　明：删除部门
   ----------------------------------------------------------------------------
   */
   begin
      out_result := 100;
      out_msg := '删除部门信息成功';

      select count (*)
        into vcount
        from base_dept
       where dptcode = prmdptcode
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount <> 1
      then
         out_result := -1001;
         out_msg := '没有找到该部门信息！';
         return;
      end if;

      select count (*)
        into vcount
        from base_dept
       where dptcode_p = prmdptcode
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '该部门含有下级部门不能删除！';
         return;
      end if;

      select count (*)
        into vcount
        from base_emp
       where dptcode = prmdptcode
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '该部门含有员工不能删除！';
         return;
      end if;

      select count (*)
        into vcount
        from base_term
       where dptcode = prmdptcode
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '该部门含有终端不能删除！';
         return;
      end if;

      select count (*)
        into vcount
        from base_busline
       where dptcode = prmdptcode
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '该部门含有线路不能删除！';
         return;
      end if;

      select count (*)
        into vcount
        from base_bus
       where dptcode = prmdptcode
         and isdelete = 0
         and customerunitcode = prmcustunitcode;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '该部门含有车辆不能删除！';
         return;
      end if;

      --删除部门
      update base_dept
         set deletedate = sysdate,
             isdelete = 1
       where dptcode = prmdptcode and customerunitcode = prmcustunitcode;

      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '删除部门异常,' || sqlerrm;
   end;
end;

/
create or replace package pkg_base_maincardtype is
  type ref_cursor is ref cursor;

  --根据客户代码获取该客户拥有的卡类型
  procedure getmaincardtypebycustunitcode(prmcustunitcode in varchar2,
                                          io_allrec       out ref_cursor);

  procedure insertmaincardtypesp(prmcustunitcode in varchar2,
                                 prmmaincardtype in varchar2,
                                 prmmaincardname in varchar2,
                                 out_result      out number,
                                 out_msg         out varchar2);

  procedure delmaincardtypesp(prmcustunitcode in varchar2,
                              prmid           in varchar2,
                              out_result      out number,
                              out_msg         out varchar2);

  procedure updatemaincardtypesp(prmcustunitcode in varchar2,
                                 prmid           in varchar2,
                                 prmmaincardtype in varchar2,
                                 prmmaincardname in varchar2,
                                 out_result      out number,
                                 out_msg         out varchar2);

end;
/
create or replace package body pkg_base_maincardtype is
  --根据客户代码获取该客户拥有的卡类型
  procedure getmaincardtypebycustunitcode(prmcustunitcode in varchar2,
                                          io_allrec       out ref_cursor) as
    --vcount number;
    /*
    ----------------------------------------------------------------------------
    --过程包名：getmaincardtypebycustunitcode
    --作　　者：闫丽平
    --时　　间： 2018-03-29
    --说　　明：根据客户代码获取该客户的卡类型信息
    ----------------------------------------------------------------------------
    */
  begin
    open io_allrec for
      select id, maincardtype, name, createdate, isuse
        from base_maincardtype
       where customerunitcode = prmcustunitcode
         and isuse = 1
       order by createdate desc;
  end;

  procedure insertmaincardtypesp(prmcustunitcode in varchar2,
                                 prmmaincardtype in varchar2,
                                 prmmaincardname in varchar2,
                                 out_result      out number,
                                 out_msg         out varchar2) as
    p_count number;
    /*
    ----------------------------------------------------------------------------
    --过程包名：insertmaincardtypesp
    --作　　者：林成行
    --时　　间： 2018-04-17
    --说　　明：添加该客户的主卡类型信息
    ----------------------------------------------------------------------------
    */
  begin

    out_result := 103;
    out_msg    := '添加失败！';

    select count(1)
      into p_count
      from base_maincardtype
     where maincardtype = to_number(prmmaincardtype)
       and customerunitcode = prmcustunitcode
       and isuse = 1;

    if p_count = 1 then
      out_result := 101;
      out_msg    := '添加失败,失败原因:系统已经存在类型值为' || prmmaincardtype || '的数据';
      return;
    else
      --卡类型值和卡类型名称都不存在
      insert into base_maincardtype
        (id, maincardtype, name, isuse, customerunitcode, createdate)
      values
        (seq_base_maincardtype.nextval,
         to_number(prmmaincardtype),
         prmmaincardname,
         1,
         prmcustunitcode,
         sysdate);

      out_result := 100;
      out_msg    := '添加成功';
    end if;

  exception
    when others then
      out_result := 103;
      out_msg    := '添加失败，[' || out_msg || ']异常，具体原因为：' || sqlerrm;

  end;

  procedure delmaincardtypesp(prmcustunitcode in varchar2,
                              prmid           in varchar2,
                              out_result      out number,
                              out_msg         out varchar2) as
    /*
    ----------------------------------------------------------------------------
    --过程包名：delmaincardtypesp
    --作　　者：林成行
    --时　　间： 2018-04-17
    --说　　明：删除该客户的主卡类型信息 其实把 isuse 从 1 更改为 0
    ----------------------------------------------------------------------------
    */
  begin

    out_result := 103;
    out_msg    := '删除失败！';

    delete from base_maincardtype
     where id = to_number(prmid)
       and isuse = 1
       and customerunitcode = prmcustunitcode;

    /*update base_maincardtype
      set isuse = 0, createdate = sysdate
    where id = to_number(prmid)
      and isuse = 1
      and customerunitcode = prmcustunitcode;*/

    out_result := 100;
    out_msg    := '删除成功！';

  exception
    when others then
      out_result := 101;
      out_msg    := '删除失败，[' || out_msg || ']异常，具体原因为：' || sqlerrm;

  end;

  procedure updatemaincardtypesp(prmcustunitcode in varchar2,
                                 prmid           in varchar2,
                                 prmmaincardtype in varchar2,
                                 prmmaincardname in varchar2,
                                 out_result      out number,
                                 out_msg         out varchar2) as
    p_count        number;
    p_maincardtype number;
    /*
    ----------------------------------------------------------------------------
    --过程包名：updatemaincardtypesp
    --作　　者：林成行
    --时　　间： 2018-04-17
    --说　　明：更新该客户的主卡类型信息 先判断是否有此主卡类型
    ----------------------------------------------------------------------------
    */
  begin

    out_result := 103;
    out_msg    := '更新失败！';

    select count(1)
      into p_count
      from base_maincardtype
     where maincardtype = to_number(prmmaincardtype)
       and customerunitcode = prmcustunitcode
       and isuse = 1;

    if p_count = 1 then

      select maincardtype
        into p_maincardtype
        from base_maincardtype
       where id = prmid;

      if p_maincardtype <> prmmaincardtype then

        out_result := 104;
        out_msg    := '不能更新和' || prmmaincardtype || '相同的主卡类型值！';
      else
        update base_maincardtype
           set name = prmmaincardname, createdate = sysdate
         where id = prmid
           and customerunitcode = prmcustunitcode
           and isuse = 1;

        out_result := 100;
        out_msg    := '更新成功！';
      end if;
      return;
    else
      update base_maincardtype
         set name         = prmmaincardname,
             maincardtype = to_number(prmmaincardtype),
             createdate   = sysdate
       where id = to_number(prmid)
         and customerunitcode = prmcustunitcode
         and isuse = 1;

      out_result := 100;
      out_msg    := '更新成功！';

      return;

    end if;

  exception
    when others then
      out_result := 101;
      out_msg    := '更新失败，[' || out_msg || ']异常，具体原因为：' || sqlerrm;
  end;

end;/
create or replace package        pkg_base_menu
as
   type ref_cursor is ref cursor;

   procedure get_authorization_by_empcode (
      prmcustomerunitcode   in       varchar,
      prmempcode            in       varchar,
      io_allrec             out      ref_cursor
   );
end pkg_base_menu;


 
 
 
 /
create or replace package body        pkg_base_menu
as
   procedure get_authorization_by_empcode (
      prmcustomerunitcode   in       varchar,
      prmempcode            in       varchar,
      io_allrec             out      ref_cursor
   )
   as
       /*
      ----------------------------------------------------------------------------
      --存储过程：get_authorization_by_empcode
      --作　　者：朱鹏飞
      --时　　间：2009-05-26
      --说　　明：根据职员编码获得该职员所拥有的权限（菜单页面)
      --输入参数：
      --  prmempcode    职员编号
      --输出参数：
      --  io_allrec     所获得的数据集
      ----------------------------------------------------------------------------
      */
      allrec       ref_cursor;
      v_rolecode   varchar2 (100);
   begin
      select a.rolecode
        into v_rolecode
        from base_emp a
       where a.empcode = prmempcode
         and a.customerunitcode = prmcustomerunitcode;

      open allrec for
         select menuid, menuname, smallicon, navlink, description, largeicon,
                parentmenuid, subsystemid, v_rolecode as rolecode
           from base_menu t1
          where (    t1.isvisible = 1
                 and menuid in (
                        select menuid
                          from base_emp_menu t2, base_emp t3
                         where t3.empcode = prmempcode
                           and t2.customerunitcode = t3.customerunitcode
                           and t2.customerunitcode = prmcustomerunitcode
                           and (   t3.rolecode like t2.roleid
                                or t3.rolecode like t2.roleid || ',%'
                                or t3.rolecode like '%,' || t2.roleid || ',%'
                                or t3.rolecode like '%,' || t2.roleid
                               ))
                )
             or t1.parentmenuid = 'root';

      io_allrec := allrec;
   end;
end pkg_base_menu;

/
create or replace package        pkg_base_role
is
     /*
   ----------------------------------------------------------------------------
   --过程包名：pkg_base_cardtype
   --作　　者：周晓娜
   --时　　间： 2012-09-03
   --说　　明：用以处理卡类型相关的业务信息
   ----------------------------------------------------------------------------
   */
   type ref_cursor is ref cursor;

   --根据卡类型大类和客户代码获取卡类型信息
   procedure getrolebyunitcode (
      prmcustunitcode   in       varchar2,
      io_allrec         out      ref_cursor
   );

   --插入自定义角色
   procedure insertroletemp (
      roleidold         in       number,
      rolenameold       in       varchar2,
      isvisibleold      in       varchar2,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      number
   );

   --删除角色
   procedure deleteroletemp (
      roleidold         in       number,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      number
   );
end;                                                           -- package spec


 
 
 
 /
create or replace package body        pkg_base_role
is
/*
----------------------------------------------------------------------------
--过程包名：pkg_base_role
--作　　者：张垒
--时　　间： 2012-11-06
--说　　明：用以处理角色权限相关的业务信息
----------------------------------------------------------------------------
*/

   --根据客户代码获取相应的角色
   procedure getrolebyunitcode (
      prmcustunitcode   in       varchar2,
      io_allrec         out      ref_cursor
   )
   as
      vcount   number;
      /*
   ----------------------------------------------------------------------------
   --过程包名：getrolebyunitcode
   --作　　者：张垒
   --时　　间：2012-11-06
   --说　　明：根据客户代码获取相应的角色
   ----------------------------------------------------------------------------
   */
   begin
      --从两个表关联一起取数据
      open io_allrec for
         select a.roleid, a.rolenmae, a.isvisible, a.customerunitcode,
                0 as istemp
           from base_role a
          where a.customerunitcode = prmcustunitcode;
   end;

   --插入自定义角色
   procedure insertroletemp (
      roleidold         in       number,
      rolenameold       in       varchar2,
      isvisibleold      in       varchar2,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      number
   )
   as
    /*
   ----------------------------------------------------------------------------
   --过程包名：insertroletemp
   --作　　者：张垒
   --时　　间： 2012-11-6
   --说　　明：根据固定角色插入自定义角色
   ----------------------------------------------------------------------------
   */
   begin
      --插入角色
      insert into base_role
                  (roleid, rolenmae, customerunitcode, isvisible
                  )
           values (roleidold, rolenameold, prmcustunitcode, isvisibleold
                  );

      --插入角色权限
      insert into base_emp_menu
                  (roleid, menuid, emp_prm, customerunitcode, modelid)
         select roleid, menuid, emp_prm, prmcustunitcode, modelid
           from base_emp_menu
          where roleid = roleidold and customerunitcode is null;

      out_result := 100;
      out_msg := '添加成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加卡类型异常：' || sqlerrm;
   end;

   --删除角色
   procedure deleteroletemp (
      roleidold         in       number,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      number
   )
   as
    /*
   ----------------------------------------------------------------------------
   --过程包名：deleteroletemp
   --作　　者：张垒
   --时　　间： 2012-11-12
   --说　　明：删除角色
   ----------------------------------------------------------------------------
   */
   begin
      --删除员工的角色
      update base_emp
         set rolecode =
                nvl (rtrim (ltrim (replace (',' || rolecode || ',',
                                            ',' || to_char (roleidold) || ',',
                                            ','
                                           ),
                                   ','
                                  ),
                            ','
                           ),
                     '0'
                    )
       where ',' || rolecode || ',' like ('%,' || to_char (roleidold) || ',%')
         and customerunitcode = prmcustunitcode;

      --删除角色的权限
      delete from base_emp_menu
            where roleid = roleidold and customerunitcode = prmcustunitcode;

      --删除角色
      delete from base_role
            where roleid = roleidold and customerunitcode = prmcustunitcode;

      --插入角色权限
      out_result := 100;
      out_msg := '删除成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '删除角色异常：' || sqlerrm;
   end;
end;

/
create or replace package pkg_base_term
is
   type ref_cursor is ref cursor;

   --更新升级结果
   procedure updatetermupgradeinfo (
      prmposcode          in       varchar2,
      prmaction           in       number,
      prmadditionaldata   in       varchar2,
      prmappversion       in       varchar2,
      prmcustunitcode     in       varchar2,
      out_result          out      number,
      out_msg             out      varchar2
   );

   procedure updatemakecardupgradeinfo (
      prmposcode            in       varchar2,
      prmfileid             in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   --更新终端语音包升级结果
   procedure updatevoiceactioninfo (
      prmposcode          in       varchar2,
      prmaction           in       number,
      prmadditionaldata   in       varchar2,
      prmappversion       in       varchar2,
      prmcustunitcode     in       varchar2,
      out_result          out      number,
      out_msg             out      varchar2
   );

   --卡务升级维护
   procedure poraddcardupgradeinfo (
      prmfilename       in       varchar2,
      prmfileurl        in       varchar2,
      prmfilever        in       varchar2,
      prmcustunitcode   in       varchar2,
      out_result        out      number,
      out_msg           out      varchar2
   );

   --删除升级文件
   procedure deltetermupgradeimport (
      prmid             in       number,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      integer
   );

   procedure proupdatecardbindinfo (
      prmappid          in       number,
      prmfileid         in       number,
      prmcustunitcode   in       varchar2,
      out_msg           out      varchar2,
      out_result        out      integer
   );

   procedure proaddcupgradeterm (
      prmposcode          in       varchar2,
      prmfileid           in       number,
      prmiserasureflash   in       number,
      prmopdt             in       date,
      prmcustunitcode     in       varchar2,
      prmsystype          in       number,
      out_msg             out      varchar2,
      out_result          out      integer
   );

   procedure proc_insert_into_term (
      prmtermname                    varchar2,
      prmdptcode                     varchar2,
      prmisuse                       number,
      prmposcode                     number,
      prmparamgroupid                number,
      prmtypeid                      number,
      prmpsamcardno                  number,
      prmsortid                      number,
      prmlastupdatedate              date,
      prmswitchkey                   number,                       --开通密钥
      prmisswitch                    number,                   --终端是否接入
      prmprimaykey                   number,                         --主密钥
      prmissecuritytransport         number,               --是否加密数据传输
      prmcustomerunitcode            varchar2,
      prmisflag                      number,
      prmpsamcodestr                 varchar2,
      prmpsamcodestrnum              number,   --绑定多张psam卡时psam卡的个数
      out_result               out   number,
      out_msg                  out   varchar2
   );

   procedure proc_update_term (
      prmid                          number,
      prmtermname                    varchar2,
      prmdptcode                     varchar2,
      prmisuse                       number,
      prmposcode                     number,
      prmparamgroupid                number,
      prmtypeid                      number,
      prmpsamcardno                  number,
      prmsortid                      number,
      prmlastupdatedate              date,
      prmswitchkey                   number,                       --开通密钥
      prmisswitch                    number,                   --终端是否接入
      prmprimaykey                   number,                         --主密钥
      prmissecuritytransport         number,               --是否加密数据传输
      prmcustomerunitcode            varchar2,
      prmisflag                      number,
      prmpsamcodestr                 varchar2,
      prmpsamcodestrnum              number,   --绑定多张psam卡时psam卡的个数
      prmisupdatepsam                number,
      --是否修改绑定关系 0:没修改 1：修改
      prmupdateempcode               varchar2,             --修改用户的登录名
      out_result               out   number,
      out_msg                  out   varchar2
   );

   procedure getallapptermbyappid (
      prmappid         in       number,
      out_result       out      number,
      prmcusunitcode   in       varchar2,
      prmdptcode       in       varchar2,
      out_msg          out      varchar2,
      io_allrec        out      ref_cursor
   );

   procedure getapptermbyappid (
      prmappid          in       number,
      out_result        out      number,
      prmcustunitcode   in       varchar2,
      prmstartsortid    in       number,                       --分页开始位置
      prmendsortid      in       number,                       --分页结束位置
      prmapptypeid      in       number,                           --应用类型
      prmtermcount      out      number,
      out_msg           out      varchar2,
      io_allrec         out      ref_cursor
   );

   --终端维修登记
   procedure proc_termmaintain (
      prmposcode         in       number,
      prmempcode         in       varchar2,
      prmcustunitcode    in       varchar2,
      prmupdateempcode   in       varchar2,                --修改用户的登录名
      out_result         out      number,
      out_msg            out      varchar2
   );

   --根据终端上传信息，获取参数
   procedure proc_getnewparamforback (
      prmposcode            in       number,
      prmversion            in       number,
      prmispos              in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2,
      maxversion            out      varchar2,
      maxverdate            out      date,
      hexadecimal           out      number,
      io_allrec             out      ref_cursor
   );

   --根据终端上传信息，获取线路票价卡信息并下发
   procedure proc_getlineparamback (
      prmposcode            in       number,
      prmversion            in       number,
      prmcustomerunitcode   in       varchar2,
      prmlineno             in       number,
      prmispos              in       number,
      out_result            out      number,
      out_msg               out      varchar2,
      maxversion            out      varchar2,
      maxverdate            out      date,
      disablecardtype       out      varchar2,
      dptcode               out      varchar2,
      chargeprice           out      number,
      lineprice             out      number,
      fleeprice             out      number,
      io_allrec             out      ref_cursor,
      io_allrec1            out      ref_cursor
   );

   --删除终端
   procedure proc_delete_term (
      prmid                 in       number,
      deleteempcode         in       varchar2,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   --保存应用终端绑定关系
   procedure saveappterm (
      prmappid              in       number,
      prmcustomerunitcode   in       varchar2,
      prmtermstr            in       varchar2,
      prmtermstr1           in       varchar2,
      prmtermstr2           in       varchar2,
      prmtermstr3           in       varchar2,
            --varchar2的最大长度是4000，最大1000的终端poscde需要4个变量来存储
      out_result            out      number,
      out_msg               out      varchar2
   );
end;


 
 
 
 
/
create or replace package body pkg_base_term
is
    --更新升级结果
    procedure updatetermupgradeinfo (prmposcode          in     varchar2,
                                     prmaction           in     number,
                                     prmadditionaldata   in     varchar2,
                                     prmappversion       in     varchar2,
                                     prmcustunitcode     in     varchar2,
                                     out_result             out number,
                                     out_msg                out varchar2)
    as
        /*
        ----------------------------------------------------------------------------
        --存储过程：proupdatecupgradeterm
        --功　　能：更新终端升级状态
        --修 改 人： 周晓娜
        --修改日期： 2011-06-02
        --输出参数：
        --      out_result:　100为成功，-1异常
        --      out_msg:输出信息
        ----------------------------------------------------------------------------
        --修改人：周晓娜
        --修改时间：20120828
        --修改说明： 增加客户代码
        ----------------------------------------------------------------------------
        */
        vcount   number;
        n_ver    number; --升级表中的版本号
    begin
        select count (*)
          into vcount
          from base_term_upgrade
         where     poscode = prmposcode
               and systype = 0
               and customerunitcode = prmcustunitcode;

        if vcount = 0
        then
            out_result := -2;
            out_msg :=
                   '设备唯一编号为'
                || to_char (prmposcode)
                || '的终端不存在升级信息！';
            return;
        end if;

        --获取该终端对应的版本号信息
        select a.ver
          into n_ver
          from base_term_upgrade a
         where     a.poscode = prmposcode
               and a.systype = 0
               and a.customerunitcode = prmcustunitcode;

        if prmaction = 2 --升级完成之后更新表中升级结束时间
        then
            update base_term_upgrade
               set upgradeendtime = sysdate, status = 2
             where     poscode = prmposcode
                   and systype = 0
                   and customerunitcode = prmcustunitcode;

            if (sql%rowcount != 1) --判断执行更新是否成功
            then
                out_result := -3;
                out_msg := '更新终端升级结束时间失败！';
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := '更新' || to_char (prmposcode) || '升级状态成功!';

        if prmaction = 2
        then
            --更新终端升级日志表中状态
            update base_term_upgrade_log
               set status = prmaction,
                   upgradeendtime = sysdate,
                   progress = prmadditionaldata,
                   createdate = sysdate
             where     poscode = prmposcode
                   and filever = prmappversion
                   and systype = 0
                   and ver = n_ver
                   and customerunitcode = prmcustunitcode;
        else
            --更新终端升级日志表中状态
            update base_term_upgrade_log
               set status = prmaction,
                   progress = prmadditionaldata,
                   createdate = sysdate
             where     poscode = prmposcode
                   and filever = prmappversion
                   and systype = 0
                   and ver = n_ver
                   and customerunitcode = prmcustunitcode;
        end if;

        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '异常_+_' || sqlerrm;
    end;

    procedure updatemakecardupgradeinfo (
        prmposcode            in     varchar2,
        prmfileid             in     number,
        prmcustomerunitcode   in     varchar2,
        out_result               out number,
        out_msg                  out varchar2)
    as
        /*
        --------------------------------------------------------------------------
        --作　　者：刘东红
        --时　　间：2011-07-06
        --说　　明：更新卡务升级状态
        --输入参数：
        --输出参数：
        --out_result：100 ：成功，其他失败
        --------------------------------------------------------------------------
        */
        vcount   number;
    begin
        select count (*)
          into vcount
          from base_term_upgrade a
         where     systype = 1
               and poscode = prmposcode
               and fileid = prmfileid
               and a.customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -2;
            out_msg :=
                   '设备唯一编号为'
                || to_char (prmposcode)
                || '的终端不存在'
                || prmfileid;
            return;
        end if;

        update base_term_upgrade
           set upgradeendtime = sysdate, status = 2
         where     systype = 1
               and poscode = prmposcode
               and fileid = prmfileid
               and customerunitcode = prmcustomerunitcode;

        if (sql%rowcount != 1) --判断执行更新是否成功
        then
            out_result := -3;
            out_msg := '更新终端升级结束时间失败！';
            return;
        end if;

        --更新终端升级日志表中状态
        update base_term_upgrade_log
           set status = 2, upgradeendtime = sysdate, progress = 100
         where     systype = 1
               and poscode = prmposcode
               and fileid = prmfileid
               and customerunitcode = prmcustomerunitcode;

        out_result := 100;
        out_msg := '更新成功！';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '异常_+_' || sqlerrm;
    end;

    --更新终端语音包升级结果
    procedure updatevoiceactioninfo (prmposcode          in     varchar2,
                                     prmaction           in     number,
                                     prmadditionaldata   in     varchar2,
                                     prmappversion       in     varchar2,
                                     prmcustunitcode     in     varchar2,
                                     out_result             out number,
                                     out_msg                out varchar2)
    as
        /*
        ----------------------------------------------------------------------------
        --存储过程：updatevoiceactioninfo
        --功　　能：更新终端语音包升级状态
        --修 改 人： 周晓娜
        --修改日期： 2013-03-07
        --输出参数：
        --      out_result:　100为成功，-1异常
        --      out_msg:输出信息
        ----------------------------------------------------------------------------
        --修改人：周晓娜
        --修改时间：20120828
        --修改说明： 增加客户代码
        ----------------------------------------------------------------------------
        */
        vcount   number;
        n_ver    number; --升级表中的版本号
    begin
        select count (*)
          into vcount
          from base_term_upgrade
         where     poscode = prmposcode
               and customerunitcode = prmcustunitcode
               and systype = 2;

        if vcount = 0
        then
            out_result := -2;
            out_msg :=
                   '设备唯一编号为'
                || to_char (prmposcode)
                || '的终端不存在语音包升级信息！';
            return;
        end if;

        --获取该终端对应的版本号信息
        select a.ver
          into n_ver
          from base_term_upgrade a
         where     a.poscode = prmposcode
               and a.systype = 2
               and a.customerunitcode = prmcustunitcode;

        if prmaction = 2 --升级完成之后更新表中升级结束时间
        then
            update base_term_upgrade
               set upgradeendtime = sysdate, status = 2
             where     poscode = prmposcode
                   and systype = 2
                   and customerunitcode = prmcustunitcode;

            if (sql%rowcount != 1) --判断执行更新是否成功
            then
                out_result := -3;
                out_msg := '更新终端升级结束时间失败！';
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := '更新' || to_char (prmposcode) || '升级状态成功!';

        if prmaction = 2
        then
            --更新终端升级日志表中状态
            update base_term_upgrade_log
               set status = prmaction,
                   upgradeendtime = sysdate,
                   progress = prmadditionaldata,
                   createdate = sysdate
             where     poscode = prmposcode
                   and filever = prmappversion
                   and systype = 2
                   and ver = n_ver
                   and customerunitcode = prmcustunitcode;
        else
            --更新终端升级日志表中状态
            update base_term_upgrade_log
               set status = prmaction,
                   progress = prmadditionaldata,
                   createdate = sysdate
             where     poscode = prmposcode
                   and filever = prmappversion
                   and systype = 2
                   and ver = n_ver
                   and customerunitcode = prmcustunitcode;
        end if;

        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '异常_+_' || sqlerrm;
    end;

    --终端维修登记
    --终端维修登记
    procedure proc_termmaintain (prmposcode         in     number,
                                 prmempcode         in     varchar2,
                                 prmcustunitcode    in     varchar2,
                                 prmupdateempcode   in     varchar2, --修改用户的登录名
                                 out_result            out number,
                                 out_msg               out varchar2)
    as
        vcount        number;
        vstatus       number;
        psarmnoold    number;
        psarmnoolds   varchar2 (500);
    /*
     ----------------------------------------------------------------------------
     --存储过程：proc_termmaintain
     --功　　能：终端维修登记
     --修 改 人： 周晓娜
     --修改日期： 2012-08-27
     --输出参数：
     --      out_result:　100为成功，-1异常
     --      out_msg:输出信息
     ----------------------------------------------------------------------------
     */
    begin
        --首先判断登记的终端是否存在
        select count (id)
          into vcount
          from base_term
         where poscode = prmposcode and customerunitcode = prmcustunitcode;

        if vcount = 0
        then
            out_result := 1001;
            out_msg := '终端信息不存在！';
            return;
        end if;

        select psamcardno, psamcardstr
          into psarmnoold, psarmnoolds
          from base_term
         where poscode = prmposcode and customerunitcode = prmcustunitcode;

        if prmposcode <> 0
        then
            --判断是否已经绑定
            select count (*)
              into vcount
              from base_app_term a
             where     a.poscode = prmposcode
                   and a.customerunitcode = prmcustunitcode;

            if vcount > 0
            then
                out_result := -1003;
                out_msg := '该终端已经和应用绑定，请先解除绑定关系！';
                return;
            end if;

            select count (id)
              into vcount
              from base_bus
             where     isdelete = 0
                   and (   poscode = prmposcode
                        or '|' || poscodelist || '|' like
                               ('%|' || prmposcode || '|%'))
                   and customerunitcode = prmcustunitcode;

            if vcount > 0
            then
                out_result := 1003;
                out_msg := '该终端已经绑定了车辆,请先解除绑定关系！';
                return;
            end if;

            --判断登记的psam卡号是否在数据库中是否存在
            if psarmnoolds is null
            then
                select count (id)
                  into vcount
                  from base_samcard a
                 where     a.samcardno = psarmnoold
                       and a.customerunitcode = prmcustunitcode;
            else
                if length (psarmnoolds) = 0
                then
                    select count (id)
                      into vcount
                      from base_samcard a
                     where     a.samcardno = psarmnoold
                           and a.customerunitcode = prmcustunitcode;
                else
                    select count (id)
                      into vcount
                      from base_samcard a
                     where     ',' || psarmnoolds || ',' like
                                   '%,' || to_char (a.samcardno) || ',%'
                           and a.customerunitcode = prmcustunitcode;
                end if;
            end if;

            if vcount = 0
            then
                out_result := 1002;
                out_msg := 'psam卡号不存在！';
                return;
            end if;

            --判断此时终端的状态
            select a.isuse
              into vstatus
              from base_term a
             where     a.poscode = prmposcode
                   and a.customerunitcode = prmcustunitcode;

            if vstatus = 2
            then
                out_result := 1003;
                out_msg := '终端状态已经是维修登记，不能重复登记！';
                return;
            end if;
        end if;

        insert into base_term_maintainlog (termname,
                                           dptcode,
                                           poscode,
                                           isflag,
                                           psamcardno,
                                           psamcardstr,
                                           maintaindate,
                                           maintainempcode,
                                           maintainname,
                                           customerunitcode,
                                           state)
            select termname,
                   dptcode,
                   poscode,
                   isflag,
                   psamcardno,
                   psamcardstr,
                   sysdate,
                   prmempcode,
                   prmupdateempcode,
                   prmcustunitcode,
                   1
              from base_term
             where     poscode = prmposcode
                   and customerunitcode = prmcustunitcode;

        --插入终端已删除表
        insert into base_term_delete (termname,
                                      dptcode,
                                      isuse,
                                      poscode,
                                      isauth,
                                      paramgroupid,
                                      typeid,
                                      status,
                                      lastcollectdate,
                                      psamcardno,
                                      cputype,
                                      lastupdatedate,
                                      isdelete,
                                      deletedate,
                                      sortid,
                                      defaultacccode,
                                      ver,
                                      switchkey,
                                      primarykey,
                                      isswitch,
                                      issecuritytransport,
                                      merchantcode,
                                      customerunitcode,
                                      isflag,
                                      psamcardstr,
                                      uniontermid,
                                      deleteempcode)
            select termname,
                   dptcode,
                   isuse,
                   poscode,
                   isauth,
                   paramgroupid,
                   typeid,
                   status,
                   lastcollectdate,
                   psamcardno,
                   cputype,
                   lastupdatedate,
                   1,
                   sysdate,
                   sortid,
                   defaultacccode,
                   ver,
                   switchkey,
                   primarykey,
                   isswitch,
                   issecuritytransport,
                   merchantcode,
                   customerunitcode,
                   isflag,
                   psamcardstr,
                   uniontermid,
                   prmempcode
              from base_term
             where     poscode = prmposcode
                   and customerunitcode = prmcustunitcode;

        --更新终端记录表终端的状态
        update base_term
           set isuse = 2,
               isdelete = 2,
               isswitch = 0,
               maintaindate = sysdate,
               maintainempcode = prmempcode,
               psamcardno = -1,
               psamcardstr = '-1',
               poscode = 0
         where poscode = prmposcode and customerunitcode = prmcustunitcode;

        --更新该psam卡的状态为初始
        if psarmnoolds is null
        then
            update base_samcard
               set state = 0
             where     samcardno = psarmnoold
                   and customerunitcode = prmcustunitcode;
        else
            if length (psarmnoolds) = 0
            then
                update base_samcard
                   set state = 0
                 where     samcardno = psarmnoold
                       and customerunitcode = prmcustunitcode;
            else
                update base_samcard
                   set state = 0
                 where     ',' || psarmnoolds || ',' like
                               '%,' || to_char (samcardno) || ',%'
                       and customerunitcode = prmcustunitcode;
            end if;
        end if;

        out_result := 100;
        out_msg := '终端维修登记成功！';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，出现异常：' || sqlerrm;
    end;

    --删除终端
    procedure proc_delete_term (prmid                 in     number,
                                deleteempcode         in     varchar2,
                                prmcustomerunitcode   in     varchar2,
                                out_result               out number,
                                out_msg                  out varchar2)
    as
        vcount         number;
        vflag          number;
        vpsamcard      number;
        vposcode       number;
        visuse         number;
        vpsamcardstr   varchar2 (500);
    /*
     ----------------------------------------------------------------------------
     --存储过程：proc_delete_term
     --功　　能：删除终端
     --修 改 人： 张垒
     --修改日期： 2012-11-14
     --输出参数：
     --      out_result:　100为成功，-1异常
     --      out_msg:输出信息
     ----------------------------------------------------------------------------
     */
    begin
        vcount := 0;

        select count (*)
          into vcount
          from base_term a
         where a.id = prmid and a.customerunitcode = prmcustomerunitcode;

        if vcount = 1
        then
            select isuse,
                   isflag,
                   psamcardno,
                   psamcardstr,
                   poscode
              into visuse,
                   vflag,
                   vpsamcard,
                   vpsamcardstr,
                   vposcode
              from base_term
             where id = prmid and customerunitcode = prmcustomerunitcode;

            if visuse <> 2
            then
                --判断是否已经绑定
                select count (*)
                  into vcount
                  from base_app_term a
                 where     a.poscode = vposcode
                       and a.customerunitcode = prmcustomerunitcode;

                if vcount > 0
                then
                    out_result := -1003;
                    out_msg := '该终端已经和应用绑定，请先解除绑定关系！';
                    return;
                end if;

                select count (id)
                  into vcount
                  from base_bus
                 where     isdelete = 0
                       and (   poscode = vposcode
                            or '|' || poscodelist || '|' like
                                   ('%|' || vposcode || '|%'))
                       and customerunitcode = prmcustomerunitcode;

                if vcount > 0
                then
                    out_result := 1003;
                    out_msg := '该终端已经绑定了车辆！';
                    return;
                end if;

                --修改psam卡的状态
                if vflag = 0
                then
                    update base_samcard
                       set state = 0
                     where     samcardno = vpsamcard
                           and state = 1
                           and customerunitcode = prmcustomerunitcode;
                else
                    update base_samcard
                       set state = 0
                     where     ',' || vpsamcardstr || ',' like
                                   ('%,' || samcardno || ',%')
                           and state = 1
                           and customerunitcode = prmcustomerunitcode;
                end if;

                --插入终端已删除表
                insert into base_term_delete (termname,
                                              dptcode,
                                              isuse,
                                              poscode,
                                              isauth,
                                              paramgroupid,
                                              typeid,
                                              status,
                                              lastcollectdate,
                                              psamcardno,
                                              cputype,
                                              lastupdatedate,
                                              isdelete,
                                              deletedate,
                                              sortid,
                                              defaultacccode,
                                              ver,
                                              switchkey,
                                              primarykey,
                                              isswitch,
                                              issecuritytransport,
                                              merchantcode,
                                              customerunitcode,
                                              isflag,
                                              psamcardstr,
                                              uniontermid,
                                              deleteempcode)
                    select termname,
                           dptcode,
                           isuse,
                           poscode,
                           isauth,
                           paramgroupid,
                           typeid,
                           status,
                           lastcollectdate,
                           psamcardno,
                           cputype,
                           lastupdatedate,
                           1,
                           sysdate,
                           sortid,
                           defaultacccode,
                           ver,
                           switchkey,
                           primarykey,
                           isswitch,
                           issecuritytransport,
                           merchantcode,
                           customerunitcode,
                           isflag,
                           psamcardstr,
                           uniontermid,
                           deleteempcode
                      from base_term
                     where     id = prmid
                           and customerunitcode = prmcustomerunitcode;
            end if;

            --更新终端记录表终端的状态
            delete base_term
             where id = prmid and customerunitcode = prmcustomerunitcode;
        else
            out_result := -1003;
            out_msg := 'id在数据库中不存在，不能删除！';
            return;
        end if;

        out_result := 100;
        out_msg := '删除终端成功！';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，出现异常：' || sqlerrm;
    end;

    --卡务升级维护
    procedure poraddcardupgradeinfo (prmfilename       in     varchar2,
                                     prmfileurl        in     varchar2,
                                     prmfilever        in     varchar2,
                                     prmcustunitcode   in     varchar2,
                                     out_result           out number,
                                     out_msg              out varchar2)
    /*
     ----------------------------------------------------------------------------
     --存储过程：poraddcardupgradeinfo
     --功　　能：卡务升级维护
     --修 改 人： 周晓娜
     --修改日期： 2011-06-02
     --输出参数：
     --      out_result:　100为成功，-1异常
     --      out_msg:输出信息
     ----------------------------------------------------------------------------
     --修改人：周晓娜
       --修改时间：20120828
       --修改说明： 增加客户代码
       ----------------------------------------------------------------------------
     */
    as
        vcount    number;
        vappid    number;
        vfileid   number;
        vver      number;
    begin
        --首先导入升级文件
        insert into base_term_upgrade_import (filename,
                                              opdt,
                                              fileurl,
                                              filever,
                                              systype,
                                              customerunitcode)
             values (prmfilename,
                     sysdate,
                     prmfileurl,
                     prmfilever,
                     1,
                     prmcustunitcode);

        if (sql%rowcount != 1) --判断更新是否成功
        then
            out_result := -2;
            out_msg := '导入升级文件失败！';
            return;
        end if;

        --从升级文件信息表中获取升级文件id和文件名称
        select id
          into vfileid
          from base_term_upgrade_import
         where     systype = 1
               and filename = prmfilename
               and customerunitcode = prmcustunitcode;

        --执行升级文件与卡务应用的绑定
        declare
            cursor appservice
            is
                --获取所有卡务点的信息
                select a.id
                  from base_app_info a
                 where a.apptypeid = 6 and customerunitcode = prmcustunitcode;
        begin
            open appservice;

            loop
                fetch appservice into vappid;

                exit when appservice%notfound;

                --判断是否有绑定
                select nvl (count (*), 0)
                  into vcount
                  from base_term_upgrade a
                 where     a.poscode = vappid
                       and systype = 1
                       and customerunitcode = prmcustunitcode;

                if vcount = 1 --更新绑定版本
                then
                    update base_term_upgrade
                       set fileid = vfileid,
                           opdt = sysdate,
                           upgradeendtime = '',
                           status = 1,
                           applicationver = prmfilever
                     where     poscode = vappid
                           and systype = 1
                           and customerunitcode = prmcustunitcode;
                else ----插入绑定关系表
                    insert into base_term_upgrade (poscode,
                                                   fileid,
                                                   opdt,
                                                   iserasureflash,
                                                   systype,
                                                   applicationver,
                                                   status,
                                                   customerunitcode)
                         values (vappid,
                                 vfileid,
                                 sysdate,
                                 0,
                                 1,
                                 prmfilever,
                                 1,
                                 prmcustunitcode);
                end if;

                --获取绑定关系表中的版本号
                select ver
                  into vver
                  from base_term_upgrade
                 where     poscode = vappid
                       and systype = 1
                       and customerunitcode = prmcustunitcode;

                --插入日志表
                insert into base_term_upgrade_log (poscode,
                                                   fileid,
                                                   ver,
                                                   createdate,
                                                   iserasureflash,
                                                   filever,
                                                   progress,
                                                   systype,
                                                   customerunitcode)
                     values (vappid,
                             vfileid,
                             vver,
                             sysdate,
                             0,
                             prmfilever,
                             0,
                             1,
                             prmcustunitcode);
            end loop;

            close appservice;
        end;

        out_result := 100;
        out_msg := '绑定升级文件' || prmfilename || '成功!';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg :=
                   '绑定'
                || '升级文件['
                || prmfilename
                || ']异常'
                || '_+_'
                || sqlerrm;
    end;

    procedure deltetermupgradeimport (prmid             in     number,
                                      prmcustunitcode   in     varchar2,
                                      out_msg              out varchar2,
                                      out_result           out integer)
    as
        vcount   number;
    begin
        /*
         ----------------------------------------------------------------------------
         --存储过程：deltetermupgradeimport
         --功　　能：删除已失效的文件清单
         --修 改 人： 周晓娜
         --修改日期： 2011-06-02
         --输出参数：
         --      out_result:　100为成功，-1异常
         --      out_msg:输出信息
         ----------------------------------------------------------------------------
         */
        out_result := -1000;
        out_msg := '删除导入文件信息失败';

        select nvl (count (*), 0)
          into vcount
          from base_term_upgrade
         where     fileid = prmid
               and status <> 4
               and customerunitcode = prmcustunitcode; --取消升级的可以删除掉

        if vcount <> 0
        then
            out_result := -1001;
            out_msg := '此升级文件正在使用，不允许进行删除操作！';
            return;
        end if;

        --将信息转储到备份表
        insert into base_term_upgrade_bak (id,
                                           filename,
                                           opdt,
                                           fileurl,
                                           filever,
                                           systype,
                                           customerunitcode)
            (select id,
                    filename,
                    opdt,
                    fileurl,
                    filever,
                    systype,
                    customerunitcode
               from base_term_upgrade_import
              where id = prmid and customerunitcode = prmcustunitcode);

        --删除此数据
        delete from base_term_upgrade_import
              where id = prmid and customerunitcode = prmcustunitcode;

        out_result := 100;
        out_msg := '删除导入文件信息成功！';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '异常_+_' || sqlerrm;
    end;

    --卡务升级更新维护
    procedure proupdatecardbindinfo (prmappid          in     number,
                                     prmfileid         in     number,
                                     prmcustunitcode   in     varchar2,
                                     out_msg              out varchar2,
                                     out_result           out integer)
    /*
     ----------------------------------------------------------------------------
     --存储过程：proupdatecardbindinfo
     --功　　能：更新卡务与升级文件的绑定关系
     --修 改 人： 周晓娜
     --修改日期： 2011-06-02
     --输出参数：
     --      out_result:　100为成功，-1异常
     --      out_msg:输出信息
     ----------------------------------------------------------------------------
     */
    as
        vcount      number;
        vver        number;
        vfilename   varchar2 (100);
        vfilever    varchar (50);
    begin
        --获取升级文件名称
        select filename, filever
          into vfilename, vfilever
          from base_term_upgrade_import
         where     id = prmfileid
               and systype = 1
               and customerunitcode = prmcustunitcode;

        --根据poscode和升级文件版本号判断是否执行过绑定
        select nvl (count (*), 0)
          into vcount
          from base_term_upgrade a
         where     a.poscode = prmappid
               and a.fileid = prmfileid
               and systype = 1
               and customerunitcode = prmcustunitcode;

        if vcount = 1
        then
            out_result := -2;
            out_msg :=
                   '应用编号：'
                || prmappid
                || '已经执行过升级文件【'
                || vfilename
                || '】的绑定';
            return;
        end if;

        --更新升级信息
        update base_term_upgrade
           set fileid = prmfileid,
               opdt = sysdate,
               upgradeendtime = '',
               status = 1,
               applicationver = vfilever
         where     poscode = prmappid
               and systype = 1
               and customerunitcode = prmcustunitcode;

        if (sql%rowcount != 1) --判断更新是否成功
        then
            out_result := -3;
            out_msg := '更新升级关系失败！';
            return;
        end if;

        out_result := 100;
        out_msg := '绑定升级文件' || vfilename || '成功!';

        --更新日志表中的数据
        update base_term_upgrade_log
           set fileid = prmfileid, filever = vfilever
         where     poscode = prmappid
               and systype = 1
               and customerunitcode = prmcustunitcode;

        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg :=
                   '更新应用['
                || prmappid
                || ']升级文件['
                || vfilename
                || ']异常'
                || '_+_'
                || sqlerrm;
    end;

    procedure proaddcupgradeterm (prmposcode          in     varchar2,
                                  prmfileid           in     number,
                                  prmiserasureflash   in     number,
                                  prmopdt             in     date,
                                  prmcustunitcode     in     varchar2,
                                  prmsystype          in     number,
                                  out_msg                out varchar2,
                                  out_result             out integer)
    /*
     ----------------------------------------------------------------------------
     --存储过程：procupgradeterm
     --功　　能：终端与升级文件,语音包关系的绑定
     --修 改 人： 周晓娜
     --修改日期： 2011-06-02
     --输出参数：
     --      out_result:　100为成功，-1异常
     --      out_msg:输出信息
     ----------------------------------------------------------------------------
     */
    as
        vcount      number;
        vver        number;
        vfilename   varchar2 (100);
        vfilever    varchar (50);
        vstrname    varchar2 (50);
    begin
        if prmsystype = 0
        then
            vstrname := '升级文件';
        else
            vstrname := '语音包文件';
        end if;

        --获取升级文件名称
        select filename, filever
          into vfilename, vfilever
          from base_term_upgrade_import
         where     id = prmfileid
               and systype = prmsystype
               and customerunitcode = prmcustunitcode;

        --根据poscode和升级文件版本号判断是否执行过绑定
        select nvl (count (*), 0)
          into vcount
          from base_term_upgrade a
         where     a.poscode = prmposcode
               and a.fileid = prmfileid
               and systype = prmsystype
               and status <> 4
               and customerunitcode = prmcustunitcode;

        --取消升级的终端可以再次执行绑定关系
        if vcount = 1
        then
            out_result := -2;
            out_msg :=
                   '设备唯一编号为'
                || prmposcode
                || '的终端已经执行过'
                || vstrname
                || vfilename
                || '的绑定';
            return;
        end if;

        --只根据poscode判断
        select nvl (count (*), 0)
          into vcount
          from base_term_upgrade a
         where     a.poscode = prmposcode
               and systype = prmsystype
               and customerunitcode = prmcustunitcode;

        if vcount = 1 --更新绑定版本
        then
            update base_term_upgrade
               set fileid = prmfileid,
                   opdt = sysdate,
                   upgradeendtime = '',
                   status = 1,
                   iserasureflash = prmiserasureflash,
                   applicationver = vfilever
             where     poscode = prmposcode
                   and systype = prmsystype
                   and customerunitcode = prmcustunitcode;

            if (sql%rowcount != 1) --判断更新是否成功
            then
                out_result := -3;
                out_msg := '更新绑定关系失败！';
                return;
            end if;
        else ----插入绑定关系表
            insert into base_term_upgrade (poscode,
                                           fileid,
                                           opdt,
                                           iserasureflash,
                                           systype,
                                           applicationver,
                                           status,
                                           customerunitcode)
                 values (prmposcode,
                         prmfileid,
                         sysdate,
                         prmiserasureflash,
                         prmsystype,
                         vfilever,
                         1,
                         prmcustunitcode);

            if (sql%rowcount != 1) --判断执行插入是否成功
            then
                out_result := -3;
                out_msg := '插入绑定关系表失败！';
                return;
            end if;
        end if;

        out_result := 100;
        out_msg :=
               '设备唯一编号'
            || prmposcode
            || '绑定'
            || vstrname
            || vfilename
            || '成功!';

        --获取绑定关系表中的版本号
        select ver
          into vver
          from base_term_upgrade
         where     poscode = prmposcode
               and systype = prmsystype
               and customerunitcode = prmcustunitcode;

        --插入日志表
        insert into base_term_upgrade_log (poscode,
                                           fileid,
                                           ver,
                                           createdate,
                                           iserasureflash,
                                           filever,
                                           progress,
                                           systype,
                                           customerunitcode)
             values (prmposcode,
                     prmfileid,
                     vver,
                     sysdate,
                     prmiserasureflash,
                     vfilever,
                     0,
                     prmsystype,
                     prmcustunitcode);

        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg :=
                   '绑定终端唯一编号['
                || prmposcode
                || ']'
                || vstrname
                || '['
                || vfilename
                || ']异常'
                || '_+_'
                || sqlerrm;
    end;

    procedure proc_insert_into_term (prmtermname                  varchar2,
                                     prmdptcode                   varchar2,
                                     prmisuse                     number,
                                     prmposcode                   number,
                                     prmparamgroupid              number,
                                     prmtypeid                    number,
                                     prmpsamcardno                number,
                                     prmsortid                    number,
                                     prmlastupdatedate            date,
                                     prmswitchkey                 number, --开通密钥
                                     prmisswitch                  number, --终端是否接入
                                     prmprimaykey                 number, --主密钥
                                     prmissecuritytransport       number, --是否加密数据传输
                                     prmcustomerunitcode          varchar2,
                                     prmisflag                    number,
                                     prmpsamcodestr               varchar2,
                                     prmpsamcodestrnum            number, --绑定多张psam卡时psam卡的个数
                                     out_result               out number,
                                     out_msg                  out varchar2)
    as
        /*
        -------------------------------------------------------------------------------
        --存储过程： proc_insert_into_term
        --作　　者： 张垒
        --时　　间： 2013-3-12
        --说　　明：
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --------------------------------------------------------------------------
        */
        vcount      number;
        vdelcount   number;
        vdeptcode   number;
    begin
        out_result := -1000;
        out_msg := '添加终端失败！';

        select count (*)
          into vcount
          from base_term a
         where     a.poscode = prmposcode
               and a.customerunitcode = prmcustomerunitcode;

        if vcount = 1
        then
            out_result := -1002;
            out_msg := '添加终端的设备运营唯一编号不能重复！';
            return;
        end if;

        /*
         select count (*)
           into vdelcount
           from base_term_delete a
          where a.poscode = prmposcode
            and a.customerunitcode = prmcustomerunitcode;

         if vdelcount > 0
         then
            select dptcode
              into vdeptcode
              from (select   *
                        from base_term_delete a
                       where a.poscode = poscode
                         and a.customerunitcode = prmcustomerunitcode
                    order by deletedate desc)
             where rownum = 1;

            if vdeptcode <> prmdptcode
            then
               out_result := -1003;
               out_msg := '添加终端的部门必须为原来终端的部门！';
               return;
            end if;
         end if;
      */
        out_result := -1002;
        out_msg := '插入终端记录表';

        if prmisflag = 0
        then
            select count (*)
              into vdelcount
              from base_samcard
             where     samcardno = prmpsamcardno
                   and state = 0
                   and customerunitcode = prmcustomerunitcode;

            if vdelcount = 0
            then
                out_result := -1004;
                out_msg := '该psam卡不存在或者不可用！';
                return;
            end if;
        else
            select count (*)
              into vdelcount
              from base_samcard
             where     ',' || prmpsamcodestr || ',' like
                           ('%,' || samcardno || ',%')
                   and state = 0
                   and customerunitcode = prmcustomerunitcode;

            if vdelcount <> prmpsamcodestrnum
            then
                out_result := -1004;
                out_msg := '绑定的多张psam卡其中有不存在或者不可用的！';
                return;
            end if;
        end if;

        insert into base_term (termname,
                               dptcode,
                               isuse,
                               poscode,
                               paramgroupid,
                               typeid,
                               psamcardno,
                               sortid,
                               lastupdatedate,
                               switchkey,
                               primarykey,
                               isswitch,
                               issecuritytransport,
                               isflag,
                               psamcardstr,
                               customerunitcode)
             values (prmtermname,
                     prmdptcode,
                     prmisuse,
                     prmposcode,
                     prmparamgroupid,
                     prmtypeid,
                     prmpsamcardno,
                     prmsortid,
                     prmlastupdatedate,
                     prmswitchkey,
                     prmprimaykey,
                     prmisswitch,
                     prmissecuritytransport,
                     prmisflag,
                     prmpsamcodestr,
                     prmcustomerunitcode);

        if prmisflag = 0
        then
            update base_samcard
               set state = 1
             where     samcardno = prmpsamcardno
                   and state = 0
                   and customerunitcode = prmcustomerunitcode;
        else
            update base_samcard
               set state = 1
             where     ',' || prmpsamcodestr || ',' like
                           ('%,' || samcardno || ',%')
                   and state = 0
                   and customerunitcode = prmcustomerunitcode;
        end if;

        out_result := 100;
        out_msg := '添加终端成功！';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，出现异常：' || sqlerrm;
    end;

    procedure proc_update_term (prmid                        number,
                                prmtermname                  varchar2,
                                prmdptcode                   varchar2,
                                prmisuse                     number,
                                prmposcode                   number,
                                prmparamgroupid              number,
                                prmtypeid                    number,
                                prmpsamcardno                number,
                                prmsortid                    number,
                                prmlastupdatedate            date,
                                prmswitchkey                 number, --开通密钥
                                prmisswitch                  number, --终端是否接入
                                prmprimaykey                 number, --主密钥
                                prmissecuritytransport       number, --是否加密数据传输
                                prmcustomerunitcode          varchar2,
                                prmisflag                    number,
                                prmpsamcodestr               varchar2,
                                prmpsamcodestrnum            number, --绑定多张psam卡时psam卡的个数
                                prmisupdatepsam              number,
                                --是否修改绑定关系 0:没修改 1：修改
                                prmupdateempcode             varchar2, --修改用户的登录名
                                out_result               out number,
                                out_msg                  out varchar2)
    as
        vcount         number;
        vposcode       number;
        vpsamcard      number;
        vpsamcardstr   varchar2 (500);
        v_execsql      varchar2 (1000);
        vdeptcode      number;
        visswitch      number;
    begin
        out_result := -1000;
        out_msg := '修改终端失败！';

        select count (*)
          into vcount
          from base_term a
         where a.id = prmid and a.customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1003;
            out_msg := 'id在数据库中不存在，不能修改！';
            return;
        end if;

        /*
        select count (*)
          into vcount
          from base_term_delete a
         where a.poscode = prmposcode
           and a.customerunitcode = prmcustomerunitcode;

        if vcount > 0
        then
           select dptcode
             into vdeptcode
             from (select   *
                       from base_term_delete a
                      where a.poscode = poscode
                        and a.customerunitcode = prmcustomerunitcode
                   order by deletedate desc)
            where rownum = 1;

           if vdeptcode <> prmdptcode
           then
              out_result := -1003;
              out_msg := '修改终端的部门必须为原来终端的部门！';
              return;
           end if;
        end if;
  */
        if prmisuse = 0
        then
            update base_term
               set isuse = prmisuse, isdelete = 0
             where id = prmid and customerunitcode = prmcustomerunitcode;
        else
            if prmisupdatepsam = 1
            then
                select poscode, psamcardno, psamcardstr
                  into vposcode, vpsamcard, vpsamcardstr
                  from base_term a
                 where     a.id = prmid
                       and a.customerunitcode = prmcustomerunitcode;

                if vposcode <> prmposcode
                then
                    select count (*)
                      into vcount
                      from base_app_term a
                     where     a.poscode = vposcode
                           and a.customerunitcode = prmcustomerunitcode;

                    if vcount > 0
                    then
                        out_result := -1001;
                        out_msg := '修改终端和应用对应关系';

                        update base_app_term a
                           set a.poscode = prmposcode, a.createdate = sysdate
                         where     a.poscode = vposcode
                               and a.customerunitcode = prmcustomerunitcode;
                    end if;

                    --修改终端和车辆的绑定关系
                    select count (id)
                      into vcount
                      from base_bus
                     where     poscode = vposcode
                           and isdelete = 0
                           and customerunitcode = prmcustomerunitcode;

                    if vcount > 0
                    then
                        update base_bus
                           set poscode = prmposcode
                         where     poscode = vposcode
                               and isdelete = 0
                               and isflag = 0
                               and customerunitcode = prmcustomerunitcode;
                    end if;

                    select count (id)
                      into vcount
                      from base_bus
                     where     isdelete = 0
                           and isflag = 1
                           and '|' || poscodelist || '|' like
                                   ('%|' || vposcode || '|%')
                           and customerunitcode = prmcustomerunitcode;

                    if vcount > 0
                    then
                        update base_bus
                           set poscodelist =
                                   replace ('|' || poscodelist || '|',
                                            '|' || vposcode || '|',
                                            '|' || prmposcode || '|')
                         where     isdelete = 0
                               and isflag = 1
                               and '|' || poscodelist || '|' like
                                       ('%|' || vposcode || '|%')
                               and customerunitcode = prmcustomerunitcode;

                        update base_bus
                           set poscodelist =
                                   substr (poscodelist,
                                           2,
                                           length (poscodelist) - 2)
                         where     isdelete = 0
                               and isflag = 1
                               and poscodelist like
                                       ('%|' || prmposcode || '|%')
                               and customerunitcode = prmcustomerunitcode;
                    end if;
                end if;

                --插入psam卡绑定关系改变的日志
                insert into base_term_maintainlog (termname,
                                                   dptcode,
                                                   poscode,
                                                   isflag,
                                                   psamcardno,
                                                   psamcardstr,
                                                   maintaindate,
                                                   maintainempcode,
                                                   customerunitcode,
                                                   state)
                    select termname,
                           dptcode,
                           poscode,
                           isflag,
                           psamcardno,
                           psamcardstr,
                           sysdate,
                           prmupdateempcode,
                           prmcustomerunitcode,
                           0
                      from base_term
                     where     id = prmid
                           and customerunitcode = prmcustomerunitcode;

                --插入终端已删除表
                insert into base_term_delete (termname,
                                              dptcode,
                                              isuse,
                                              poscode,
                                              isauth,
                                              paramgroupid,
                                              typeid,
                                              status,
                                              lastcollectdate,
                                              psamcardno,
                                              cputype,
                                              lastupdatedate,
                                              isdelete,
                                              deletedate,
                                              sortid,
                                              defaultacccode,
                                              ver,
                                              switchkey,
                                              primarykey,
                                              isswitch,
                                              issecuritytransport,
                                              merchantcode,
                                              customerunitcode,
                                              isflag,
                                              psamcardstr,
                                              uniontermid,
                                              deleteempcode)
                    select termname,
                           dptcode,
                           isuse,
                           poscode,
                           isauth,
                           paramgroupid,
                           typeid,
                           status,
                           lastcollectdate,
                           psamcardno,
                           cputype,
                           lastupdatedate,
                           1,
                           sysdate,
                           sortid,
                           defaultacccode,
                           ver,
                           switchkey,
                           primarykey,
                           isswitch,
                           issecuritytransport,
                           merchantcode,
                           customerunitcode,
                           isflag,
                           psamcardstr,
                           uniontermid,
                           prmupdateempcode
                      from base_term
                     where     id = prmid
                           and customerunitcode = prmcustomerunitcode
                           and poscode <> prmposcode;

                --修改psam卡表的状态
                if prmisflag = 0
                then
                    if vpsamcardstr is not null and vpsamcardstr <> '-1'
                    then
                        update base_samcard
                           set state = 0
                         where     ',' || vpsamcardstr || ',' like
                                       ('%,' || samcardno || ',%')
                               and samcardno <> vpsamcard
                               and state = 1
                               and customerunitcode = prmcustomerunitcode;
                    else
                        select count (*)
                          into vcount
                          from base_samcard
                         where     samcardno = prmpsamcardno
                               and customerunitcode = prmcustomerunitcode;

                        if vcount = 0
                        then
                            out_result := -1004;
                            out_msg := '该psam卡不存在或者不可用！';
                            return;
                        end if;

                        update base_samcard
                           set state = 0
                         where     samcardno = vpsamcard
                               and state = 1
                               and customerunitcode = prmcustomerunitcode;

                        update base_samcard
                           set state = 1
                         where     samcardno = prmpsamcardno
                               and state = 0
                               and customerunitcode = prmcustomerunitcode;
                    end if;
                else
                    select count (*)
                      into vcount
                      from base_samcard
                     where     ',' || prmpsamcodestr || ',' like
                                   ('%,' || samcardno || ',%')
                           and customerunitcode = prmcustomerunitcode;

                    if vcount <> prmpsamcodestrnum
                    then
                        out_result := -1004;
                        out_msg :=
                            '绑定的多张psam卡其中有不存在或者不可用的！';
                        return;
                    end if;

                    update base_samcard
                       set state = 0
                     where     ',' || vpsamcardstr || ',' like
                                   ('%,' || samcardno || ',%')
                           and state = 1
                           and customerunitcode = prmcustomerunitcode;

                    update base_samcard
                       set state = 1
                     where     ',' || prmpsamcodestr || ',' like
                                   ('%,' || samcardno || ',%')
                           and state = 0
                           and customerunitcode = prmcustomerunitcode;
                end if;
            end if;

            select isswitch
              into visswitch
              from base_term a
             where a.id = prmid and a.customerunitcode = prmcustomerunitcode;

            if visswitch <> prmisswitch
            then
                --如果从已接入改成未接入，则需要更新应用和终端的版本号，版本号是触发器更新的。
                update base_app_term
                   set poscode = prmposcode
                 where     poscode = prmposcode
                       and customerunitcode = prmcustomerunitcode;
            end if;

            update base_term
               set termname = prmtermname,
                   dptcode = prmdptcode,
                   isuse = prmisuse,
                   poscode = prmposcode,
                   paramgroupid = prmparamgroupid,
                   typeid = prmtypeid,
                   psamcardno = prmpsamcardno,
                   lastupdatedate = prmlastupdatedate,
                   sortid = prmsortid,
                   switchkey = prmswitchkey,
                   isswitch = prmisswitch,
                   primarykey = prmprimaykey,
                   issecuritytransport = prmissecuritytransport,
                   isflag = prmisflag,
                   isdelete = 0,
                   psamcardstr = prmpsamcodestr
             where id = prmid and customerunitcode = prmcustomerunitcode;
        end if;

        out_result := 100;
        out_msg := '修改终端成功！';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1008;
            out_msg := '修改终端出现异常：' || sqlerrm;
    end;

    --根据终端上传信息，获取线路票价卡信息并下发
    procedure proc_getlineparamback (prmposcode            in     number,
                                     prmversion            in     number,
                                     prmcustomerunitcode   in     varchar2,
                                     prmlineno             in     number,
                                     prmispos              in     number, --0为终端获取,1为制卡中获取
                                     out_result               out number,
                                     out_msg                  out varchar2,
                                     maxversion               out varchar2,
                                     maxverdate               out date,
                                     disablecardtype          out varchar2, --线路上禁用的卡类型
                                     dptcode                  out varchar2,
                                     chargeprice              out number,
                                     lineprice                out number,
                                     fleeprice                out number,
                                     io_allrec                out ref_cursor,
                                     io_allrec1               out ref_cursor)
    /*
        ----------------------------------------------------------------------------
        --修 改 人： 周晓娜
        --修改日期： 2012-12-10
        --修改内容： 修改获取线路票价卡数据源内容
        ----------------------------------------------------------------------------
        */
    as
        vcount            number;
        versiontime       date;
        vflag             varchar (16); --更新标识
        visuse            number; --禁用标识        0禁用，1启用
        vblltflag         number; --黑名单查询状态  0禁用，1启用
        vvicewalletype    varchar2 (3);
        --次卡优先级  3位的组合，取值为0-7，0:禁用，数值越大优先级越高
        vmonwalletype     varchar2 (3);
        --月票优先级  3位的组合，取值为0-7，0:禁用，数值越大优先级越高
        velectwalletype   varchar2 (3);
        --钱包优先级 3位的组合，取值为0-7，0:禁用，数值越大优先级越高 (第二字节的b0-b7)
        vpeakflag         number; --高峰票价启用标识
        vseasonflag       number; --季节票价启用标识
        i_factor          number; --最小货币单位和通用货币单位之间的转换因子
        chargemodestr     varchar2 (2000); --票价编号组合
    begin
        out_result := -1000;
        out_msg := '获取信息失败！';
        i_factor := 100;

        --初始化游标赋值
        open io_allrec for select null from dual;

        --初始化游标赋值
        open io_allrec1 for select null from dual;

        if prmispos = 0
        then
            select count (a.ver)
              into vcount
              from base_term a
             where     a.poscode = prmposcode
                   and customerunitcode = prmcustomerunitcode;

            if vcount = 0
            then
                out_result := -1001;
                out_msg := '终端不存在！';
                return;
            end if;
        end if;

        select count (a.lineid)
          into vcount
          from base_busline a
         where     a.lineid = prmlineno
               and a.customerunitcode = prmcustomerunitcode
               and a.isvisible = 1;

        if vcount = 0
        then
            out_result := -1002;
            out_msg := '线路被禁用！';
            return;
        end if;

        --获取最小货币单位和通用货币单位间的转换因子
        out_result := -1004;
        out_msg := '获取货币转换因子失败！';

        select a.paramvalue
          into i_factor
          from base_param a
         where a.paramname = 'hexadecimal' and a.paramgroupid = 1002;

        select a.disablecardtype,
               a.chargetypeid,
               a.price * i_factor,
               a.dptcode,
               a.fleeprice * i_factor,
               a.chargemodestr
          into disablecardtype,
               chargeprice,
               lineprice,
               dptcode,
               fleeprice,
               chargemodestr
          from base_busline a
         where     a.lineid = prmlineno
               and a.customerunitcode = prmcustomerunitcode
               and a.isvisible = 1;

        --如果票价计费模式是按站计费和里程收费的话，此时通票的价格从使用的票价模板中取
        if chargeprice = 1 or chargeprice = 4
        then
            select a.price * i_factor
              into lineprice
              from base_ticket_price a
             where     a.id = chargemodestr
                   and a.customerunitcode = prmcustomerunitcode;
        end if;

        select a.linecardver, a.linecardupdatetime
          into maxversion, maxverdate
          from base_busline a
         where     a.lineid = prmlineno
               and a.customerunitcode = prmcustomerunitcode
               and a.isvisible = 1;

        --如果库中版本 高于申请对比的版本
        --不管什么情况下都需要返回信息 所以不在判断版本号信息
        open io_allrec for
            select a.paramname, a.paramvalue
              from base_lineparam a
             where     a.lineid = prmlineno
                   and a.customerunitcode = prmcustomerunitcode
                   and a.isuse = 1;

        open io_allrec1 for
              select a.cardtype as paramgroupid, a.paramname, a.paramvalue
                from base_lineparam_cardtype a
               where     a.customerunitcode = prmcustomerunitcode
                     and a.lineid = prmlineno
            order by a.cardtype;

        out_result := 100;
        out_msg := '获取线路票价卡参数成功！';
    end;

    --根据终端上传信息，获取参数
    procedure proc_getnewparamforback (
        prmposcode            in     number,
        prmversion            in     number,
        prmispos              in     number,
        prmcustomerunitcode   in     varchar2,
        out_result               out number,
        out_msg                  out varchar2,
        maxversion               out varchar2,
        maxverdate               out date,
        hexadecimal              out number,
        io_allrec                out ref_cursor)
    as
        --customerunitcode varchar2;
        countnum      number;
        version       number;
        vcount        number;
        versiontime   date;
    begin
        countnum := 0;
        out_result := -1000;
        out_msg := '获取信息失败！';
        version := 0;
        maxversion := 0;
        maxverdate := to_date ('1800-01-01', 'yyyy-mm-dd');

        --customerunitcode:=prmcustomerunitcode;
        --初始化游标赋值
        open io_allrec for select null from dual;

        if (prmispos <> 1)
        then
            select count (a.ver)
              into vcount
              from base_term a
             where     a.poscode = prmposcode
                   and customerunitcode = prmcustomerunitcode;

            if vcount = 0
            then
                out_result := -1001;
                out_msg := '终端不存在！';
                return;
            end if;
        end if;

        select count (*)
          into countnum
          from base_param a
         where     a.isuse = 1
               and a.paramgroupid = 225
               and a.customerunitcode = prmcustomerunitcode
               and a.flag = 0;

        if countnum > 0
        then
            select max (a.ver), max (a.updatevertime)
              into version, maxverdate
              from base_param a
             where     a.isuse = 1
                   and a.paramgroupid = 225
                   and a.customerunitcode = prmcustomerunitcode
                   and a.flag = 0;
        end if;

        --获取转换因子
        select a.paramvalue
          into hexadecimal
          from base_param a
         where a.paramname = 'hexadecimal' and a.paramgroupid = 1002;

        if version > 0
        then
            maxversion := version;
        else
            maxversion := prmversion;
        end if;

        --不管什么情况下都需要返回信息 所以不在判断版本号信息
        if countnum > 0
        then
            open io_allrec for
                  select a.paramname, a.paramvalue
                    from base_param a
                   where     a.isuse = 1
                         and a.paramgroupid = 225
                         and a.customerunitcode = prmcustomerunitcode
                         and a.flag = 0
                order by a.paramgroupid;
        else
            open io_allrec for
                  select a.paramname, a.paramvalue
                    from base_param a
                   where     a.isuse = 1
                         and a.paramgroupid = 225
                         and a.customerunitcode is null
                         and a.flag = 0
                order by a.paramgroupid;
        end if;

        out_result := 100;
        out_msg := '获取终端参数成功！';
    end;

    procedure getapptermbyappid (prmappid          in     number,
                                 out_result           out number,
                                 prmcustunitcode   in     varchar2,
                                 prmstartsortid    in     number,
                                 prmendsortid      in     number,
                                 prmapptypeid      in     number,
                                 prmtermcount         out number,
                                 out_msg              out varchar2,
                                 io_allrec            out ref_cursor)
    as
        prmapptermcount      number; --该应用已经绑定的个数
        prmtemptermcount     number; --未绑定的终端个数
        prmmaxapptermcount   number; --一个采集能绑定的最大终端数
        vcount               number;
    begin
        out_result := -1000;
        out_msg := '获取终端失败！';
        prmtermcount := 0;
        prmapptermcount := 0;
        prmtemptermcount := 0;
        vcount := 0;
        prmmaxapptermcount := 1050; --默认最大绑定500个

        select count (*)
          into vcount
          from base_app_info
         where     id = prmappid
               and apptypeid = prmapptypeid
               and customerunitcode = prmcustunitcode;

        if vcount = 0
        then
            out_result := -1;
            out_msg := '该应用不存在！';
            return;
        end if;

        if vcount > 1
        then
            out_result := -1;
            out_msg := '该应用在系统中存在多个！';
            return;
        end if;

        --读取该应用已绑定的个数
        select count (*)
          into prmapptermcount
          from     base_term a
               inner join
                   base_app_term b
               on     a.poscode = b.poscode
                  and a.customerunitcode = b.customerunitcode
         where     a.isuse = 1
               and a.isdelete = 0
               and b.appid = prmappid
               and a.customerunitcode = prmcustunitcode;

        --读取未绑定应用的终端
        if prmapptypeid = 5
        then
            select count (*)
              into prmtemptermcount
              from base_term a
             where     a.customerunitcode = prmcustunitcode
                   and a.isuse = 1
                   and a.isdelete = 0
                   and (a.typeid = 2 or a.typeid = 3)
                   and not exists
                               (select 1
                                  from base_app_term b
                                 where     a.poscode = b.poscode
                                       and b.customerunitcode =
                                               a.customerunitcode);
        else
            select count (*)
              into prmtemptermcount
              from base_term a
             where     a.customerunitcode = prmcustunitcode
                   and a.isuse = 1
                   and a.isdelete = 0
                   and a.typeid = 1
                   and not exists
                               (select 1
                                  from base_app_term b
                                 where     a.poscode = b.poscode
                                       and b.customerunitcode =
                                               a.customerunitcode);
        end if;

        --如果已绑定和未绑定的终端数据大于最大数量则实际显示数据等于最大数量 ，如果小于则等于实际数量
        if prmapptermcount + prmtemptermcount > prmmaxapptermcount
        then
            prmtermcount := prmmaxapptermcount;
        else
            prmtermcount := prmapptermcount + prmtemptermcount;
        end if;

        if prmapptypeid = 5
        then
            open io_allrec for
                select *
                  from (select rownum as sortid,
                               c.*,
                               prmtermcount as prmtermcount
                          from (select a.id,
                                       a.poscode,
                                       a.termname,
                                       1 as ischecked
                                  from     base_term a
                                       inner join
                                           base_app_term b
                                       on     a.poscode = b.poscode
                                          and a.customerunitcode =
                                                  b.customerunitcode
                                 where     a.isuse = 1
                                       and a.isdelete = 0
                                       and b.appid = prmappid
                                       and a.customerunitcode =
                                               prmcustunitcode
                                union
                                select a.id,
                                       a.poscode,
                                       a.termname,
                                       0 as ischecked
                                  from base_term a
                                 where     a.customerunitcode =
                                               prmcustunitcode
                                       and a.isuse = 1
                                       and a.isdelete = 0
                                       and (a.typeid = 2 or a.typeid = 3)
                                       and not exists
                                                   (select 1
                                                      from base_app_term b
                                                     where     a.poscode =
                                                                   b.poscode
                                                           and b.customerunitcode =
                                                                   a.customerunitcode)
                                order by ischecked desc, id asc) c) d
                 where sortid > prmstartsortid and sortid <= prmendsortid;
        else
            open io_allrec for
                select *
                  from (select rownum as sortid,
                               c.*,
                               prmtermcount as prmtermcount
                          from (select a.id,
                                       a.poscode,
                                       a.termname,
                                       1 as ischecked
                                  from     base_term a
                                       inner join
                                           base_app_term b
                                       on     a.poscode = b.poscode
                                          and a.customerunitcode =
                                                  b.customerunitcode
                                 where     a.isuse = 1
                                       and a.isdelete = 0
                                       and b.appid = prmappid
                                       and a.customerunitcode =
                                               prmcustunitcode
                                union
                                select a.id,
                                       a.poscode,
                                       a.termname,
                                       0 as ischecked
                                  from base_term a
                                 where     a.customerunitcode =
                                               prmcustunitcode
                                       and a.isuse = 1
                                       and a.isdelete = 0
                                       and a.typeid = 1
                                       and not exists
                                                   (select 1
                                                      from base_app_term b
                                                     where     a.poscode =
                                                                   b.poscode
                                                           and b.customerunitcode =
                                                                   a.customerunitcode)
                                order by ischecked desc, id asc) c) d
                 where sortid > prmstartsortid and sortid <= prmendsortid;
        end if;

        out_result := 100;
        out_msg := '获取终端成功！';
    exception
        when others
        then
            out_result := -1;
            out_msg := '获取终端异常：' || sqlerrm;
    end;

    procedure getallapptermbyappid (prmappid         in     number,
                                    out_result          out number,
                                    prmcusunitcode   in     varchar2,
                                    prmdptcode       in     varchar2,
                                    out_msg             out varchar2,
                                    io_allrec           out ref_cursor)
    as
        vapptypeid   number;
        vcount       number;
    begin
        vapptypeid := 0;
        out_result := -1000;
        out_msg := '开始查询终端信息';

        if prmappid = 0
        then
            if prmdptcode = 'root'
            then
                open io_allrec for
                      select a.termname, a.poscode
                        from base_term a
                       where     a.isuse = 1
                             and a.isdelete = 0
                             and a.customerunitcode = prmcusunitcode
                    order by a.dptcode;
            else
                open io_allrec for
                      select a.termname, a.poscode
                        from base_term a
                       where     a.isuse = 1
                             and a.isdelete = 0
                             and a.customerunitcode = prmcusunitcode
                             and exists
                                     (    select 1
                                            from base_dept t1
                                           where     t1.dptcode = a.dptcode
                                                 and a.customerunitcode =
                                                         t1.customerunitcode
                                                 and t1.isdelete = 0
                                                 and t1.isvisible = 1
                                                 and t1.customerunitcode =
                                                         prmcusunitcode
                                      connect by t1.dptcode_p =
                                                     prior t1.dptcode
                                      start with     t1.dptcode = prmdptcode
                                                 and t1.customerunitcode =
                                                         prmcusunitcode)
                    order by a.dptcode;
            end if;

            out_result := 100;
            out_msg := '查询终端信息成功！';
            return;
        end if;

        select count (*)
          into vcount
          from base_app_info
         where id = prmappid and customerunitcode = prmcusunitcode;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := -'此应用不存在';
            return;
        end if;

        select apptypeid
          into vapptypeid
          from base_app_info
         where id = prmappid and customerunitcode = prmcusunitcode;

        --采集工作站
        if vapptypeid = 5
        then
            if prmdptcode = 'root'
            then
                open io_allrec for
                      select a.termname, a.poscode
                        from base_term a
                       where     a.isuse = 1
                             and a.isdelete = 0
                             and (a.typeid = 2 or a.typeid = 3)
                             and customerunitcode = prmcusunitcode
                    order by a.dptcode;
            else
                open io_allrec for
                      select a.termname, a.poscode
                        from base_term a
                       where     a.isuse = 1
                             and a.isdelete = 0
                             and (a.typeid = 2 or a.typeid = 3)
                             and customerunitcode = prmcusunitcode
                             and exists
                                     (    select 1
                                            from base_dept t1
                                           where     t1.dptcode = a.dptcode
                                                 and a.customerunitcode =
                                                         t1.customerunitcode
                                                 and t1.isdelete = 0
                                                 and t1.isvisible = 1
                                                 and t1.customerunitcode =
                                                         prmcusunitcode
                                      connect by t1.dptcode_p =
                                                     prior t1.dptcode
                                      start with     t1.dptcode = prmdptcode
                                                 and t1.customerunitcode =
                                                         prmcusunitcode)
                    order by a.dptcode;
            end if;
        elsif vapptypeid = 6
        then
            if prmdptcode = 'root'
            then
                open io_allrec for
                      select a.termname, a.poscode
                        from base_term a
                       where     a.isuse = 1
                             and a.isdelete = 0
                             and a.typeid = 1
                             and a.customerunitcode = prmcusunitcode
                    order by a.dptcode;
            else
                open io_allrec for
                      select a.termname, a.poscode
                        from base_term a
                       where     a.isuse = 1
                             and a.isdelete = 0
                             and a.typeid = 1
                             and a.customerunitcode = prmcusunitcode
                             and exists
                                     (    select 1
                                            from base_dept t1
                                           where     t1.dptcode = a.dptcode
                                                 and a.customerunitcode =
                                                         t1.customerunitcode
                                                 and t1.isdelete = 0
                                                 and t1.isvisible = 1
                                                 and t1.customerunitcode =
                                                         prmcusunitcode
                                      connect by t1.dptcode_p =
                                                     prior t1.dptcode
                                      start with     t1.dptcode = prmdptcode
                                                 and t1.customerunitcode =
                                                         prmcusunitcode)
                    order by a.dptcode;
            end if;
        else
            out_result := -1002;
            out_msg := '应用类型设置错误';
            return;
        end if;

        out_result := 100;
        out_msg := '获取终端信息成功';
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := '获取终端信息异常：' || sqlerrm;
    end;

    --保存应用终端绑定关系
    procedure saveappterm (prmappid              in     number,
                           prmcustomerunitcode   in     varchar2,
                           prmtermstr            in     varchar2,
                           prmtermstr1           in     varchar2,
                           prmtermstr2           in     varchar2,
                           prmtermstr3           in     varchar2,
                           --varchar2的最大长度是4000，最大1000的终端poscde需要4个变量来存储
                           out_result               out number,
                           out_msg                  out varchar2)
    as
        vcount   number;
    begin
        vcount := 0;

        select count (*)
          into vcount
          from base_app_info
         where id = prmappid and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := -'此应用不存在';
            return;
        end if;

        /*
        --删除应用终端绑定
        delete from base_app_term
              where     appid = prmappid
                    and customerunitcode = prmcustomerunitcode;
         */

        --split函数的传入最大字符数为4000，最大1000的终端poscde需要4个变量来存储
        if length (prmtermstr) > 0
        then
            insert into base_app_term (appid,
                                       poscode,
                                       createdate,
                                       customerunitcode)
                select prmappid,
                       column_value,
                       sysdate,
                       prmcustomerunitcode
                  from table (split (prmtermstr));
        end if;

        if length (prmtermstr1) > 0
        then
            insert into base_app_term (appid,
                                       poscode,
                                       createdate,
                                       customerunitcode)
                select prmappid,
                       column_value,
                       sysdate,
                       prmcustomerunitcode
                  from table (split (prmtermstr1));
        end if;

        if length (prmtermstr2) > 0
        then
            insert into base_app_term (appid,
                                       poscode,
                                       createdate,
                                       customerunitcode)
                select prmappid,
                       column_value,
                       sysdate,
                       prmcustomerunitcode
                  from table (split (prmtermstr2));
        end if;

        if length (prmtermstr3) > 0
        then
            insert into base_app_term (appid,
                                       poscode,
                                       createdate,
                                       customerunitcode)
                select prmappid,
                       column_value,
                       sysdate,
                       prmcustomerunitcode
                  from table (split (prmtermstr3));
        end if;

        out_result := 100;
        out_msg := '保存应用终端配置信息成功';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := '保存应用终端配置信息异常：' || sqlerrm;
    end;
end;
/
create or replace package        pkg_base_terminfo
is
   procedure proc_synchro_term (
      prmtermname                       varchar2,
      prmdptcode               in out   varchar2,
      prmisuse                          number,
      prmposcode                        number,
      prmparamgroupid                   number,
      prmtypeid                         number,
      prmpsamcardno                     number,                     --0标示无
      prmsortid                         number,
      prmlastupdatedate                 date,
      prmswitchkey                      number,                    --开通密钥
      prmisswitch                       number,                --终端是否接入
      prmprimaykey                      number,                      --主密钥
      prmissecuritytransport            number,            --是否加密数据传输
      out_result               out      number,
      out_msg                  out      varchar2
   );
end;                                                           -- package spec


 
 
 
 /
create or replace package body        pkg_base_terminfo
is
   procedure proc_synchro_term (
      prmtermname                       varchar2,
      prmdptcode               in out   varchar2,
      prmisuse                          number,
      prmposcode                        number,
      prmparamgroupid                   number,
      prmtypeid                         number,
      prmpsamcardno                     number,                     --0标示无
      prmsortid                         number,
      prmlastupdatedate                 date,
      prmswitchkey                      number,                    --开通密钥
      prmisswitch                       number,                --终端是否接入
      prmprimaykey                      number,                      --主密钥
      prmissecuritytransport            number,            --是否加密数据传输
      out_result               out      number,
      out_msg                  out      varchar2
   )
   as
      /*
      -------------------------------------------------------------------------------
      --存储过程： proc_synchro_term
      --作　　者：刘东红
      --时　　间：2011-8-3
      --说　　明：同步第三方设备信息
      --输入参数：
      --输出参数：
      --返回值和返回信息定义：
      --------------------------------------------------------------------------
      */
      vcount       number;
      vsamcardno   number;
   begin
      out_result := -1000;
      out_msg := '添加终端失败！';
      vsamcardno := prmpsamcardno;

      select count (*)
        into vcount
        from base_dept a
       where dptcode = prmdptcode;

      if vcount < 1
      then
         select count (*)
           into vcount
           from base_dept a;

         if vcount < 1
         then
            out_result := -1001;
            out_msg := '结算部门不能为空！';
            return;
         end if;

         --有的，取第一个
         select   dptcode
             into prmdptcode
             from base_dept a
            where rownum = 1
         order by dptcode;
      end if;

      select count (*)
        into vcount
        from base_term a
       where a.poscode = prmposcode;

      if vcount = 1
      then
         update base_term
            set termname = prmtermname,
                dptcode = prmdptcode,
                isuse = prmisuse,
                paramgroupid = prmparamgroupid,
                typeid = prmtypeid,
                sortid = prmsortid,
                lastupdatedate = prmlastupdatedate,
                switchkey = prmswitchkey,
                primarykey = prmprimaykey,
                isswitch = prmisswitch,
                issecuritytransport = prmissecuritytransport
          where poscode = prmposcode;
      else
         out_result := -1002;
         out_msg := '插入终端记录表';

         if vsamcardno = 0
         then
            insert into base_term
                        (termname, dptcode, isuse, poscode,
                         paramgroupid, typeid, sortid,
                         lastupdatedate, switchkey, primarykey,
                         isswitch, issecuritytransport
                        )
                 values (prmtermname, prmdptcode, prmisuse, prmposcode,
                         prmparamgroupid, prmtypeid, prmsortid,
                         prmlastupdatedate, prmswitchkey, prmprimaykey,
                         prmisswitch, prmissecuritytransport
                        );
         else
            insert into base_term
                        (termname, dptcode, isuse, poscode,
                         paramgroupid, typeid, psamcardno,
                         sortid, lastupdatedate, switchkey,
                         primarykey, isswitch, issecuritytransport
                        )
                 values (prmtermname, prmdptcode, prmisuse, prmposcode,
                         prmparamgroupid, prmtypeid, prmpsamcardno,
                         prmsortid, prmlastupdatedate, prmswitchkey,
                         prmprimaykey, prmisswitch, prmissecuritytransport
                        );

            out_result := -1002;
            out_msg := '更新psam卡已启用';

            update base_samcard
               set state = 1
             where samcardno = prmpsamcardno;
         end if;
      end if;

      out_result := 100;
      out_msg := '添加终端成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := out_msg || '，出现异常：' || sqlerrm;
   end;
end;

/
create or replace package pkg_base_writeoff
is
/*
----------------------------------------------------------------------------
--copyright (c) 1992-2007 郑州新开普电子股份有限公司 版权所有。
--
-- 存储过程名称：pkg_base_writeoff
-- 功能描述：注销客户信息
---------------------------------------------------------------------------
*/
   type refcursortype is ref cursor;           --游标类型定义，用于返回数据集

   procedure proc_writeoffcustomers (
      prmcustomerid         in       number,                       --客户编号
      prmcardsn             in       number,                       --持卡序号
      prmcardno             in       number,                           --卡号
      --
      prmempid              in       number,                       --操作职员
      prmhascard            in       number,        --0：无卡注销 1：有卡注销
      prmposcode            in       number,                   --终端唯一编号
      prmpsamcardno         in       number,                       --psam卡号
      prmmanagefare         in       number,                 --管理费退费金额
      prmotherfare          in       number,                   --其他扣费金额
      prmoptype             in       number,         --操作类型：0查询，1销户
      prmvicefare           in       number,
      prmmonfare            in       number,
      prmvicefare_reset     in       number,                       --充零次数
      prmmonfare_reset      in       number,                       --充零金额
      prmvicefare_times     in       number,                       --退还次数
      prmcustomerunitcode   in       varchar2,
      out_cursor            out      refcursortype,            --返回退款信息
      out_result            out      number,   --返回值 100销户成功，其他失败
      out_msg               out      varchar2                      --返回信息
   );

   procedure proc_mon_addfreezefare (
      prmcustomerid         in       number,
      prmcardid             in       number,
      prmcardsn             in       number,
      prmcardno             in       number,
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmviceopcount        in       number,
      prmvicesaveopcount    in       number,
      prmviceoddfare        in       number,
      prmsumviceaddfare     in       number,
      prmposcode            in       number,
      prmpsamcardno         in       number,
      prmempid              in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_vice_addfreezefare (
      prmcustomerid         in       number,
      prmcardid             in       number,
      prmcardsn             in       number,
      prmcardno             in       number,
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmviceopcount        in       number,
      prmvicesaveopcount    in       number,
      prmviceoddfare        in       number,
      prmsumviceaddfare     in       number,
      prmposcode            in       number,
      prmpsamcardno         in       number,
      prmempid              in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_elec_addfreezefare (
      prmcustomerid         in       number,
      prmcardid             in       number,
      prmcardsn             in       number,
      prmcardno             in       number,
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmelecopcount        in       number,
      prmelecsaveopcount    in       number,
      prmelecoddfare        in       number,
      prmsumelecaddfare     in       number,
      prmcustareaid         in       number,
      prmposcode            in       number,
      prmpsamcardno         in       number,
      prmempid              in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_mon_rushoddfare (
      prmcustomerid         in       number,
      prmcardsn             in       number,
      prmcardno             in       number,
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmmonopcount         in       number,
      prmmonsaveopcount     in       number,
      prmcustareaid         in       number,
      prmposcode            in       number,
      prmpsamcardno         in       number,
      prmempid              in       number,
      prmdeptcode           in       number,
      prmdeptareaid         in       number,
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_stat_refundment (
      prmcustomerid          in       number,
      prmcardid              in       number,
      prmcardno              in       number,
      prmcardkind            in       number,
      prmcardtype            in       number,
      prmempid               in       number,
      prmposcode             in       number,
      prmpsamcardno          in       number,
      prmcardareaid          in       number,
      prmdeptcode            in       varchar2,
      prmdeptareaid          in       number,
      prmhascard             in       number,
      n_out_elecoddfare      in       number,
      n_out_depreciatefare   in       number,
      n_out_viceoddfare      in       number,                          --次卡
      n_out_monoddfare       in       number,
      n_otherfare            in       number,
      prmcustomerunitcode    in       varchar2,
      out_result             out      number,
      out_msg                out      varchar2
   );

   --管理费退费统计
   procedure proc_stat_refundmanagefare (
      prmcustomerid         in       number,                           --账号
      prmcardsn             in       number,                       --持卡序号
      prmcardno             in       number,
      prmposcode            in       number,      --终端设备唯一编号,必须存在
      prmpsamcardno         in       number,                   --终端psam卡号
      prmmanagefare         in       number,                     --管理费总额
      prmempid              in       number,                       --操作员id
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      --返回结果，100表示成功，其它表示失败
      out_msg               out      varchar2                  --返回提示信息
   );
end;


 

 
 
 /
create or replace package body pkg_base_writeoff
is
/*
----------------------------------------------------------------------------
--copyright (c) 1992-2007 郑州新开普电子股份有限公司 版权所有。
--
-- 存储过程名称：pkg_base_writeoff
-- 功能描述：注销客户信息
-------------------------------------------------------
-- 销户处理过程：
-- 1、有卡销户前先调用一次未决处理，处理一次未决。
        无卡注销制卡中心判断挂失时间，不足4天（取配置参数）不允许销户。
-- 2、有卡注销如果有黑名单，则形成安全黑名单。无卡注销形成黑名单。
-- 3、库内处理未领冻结金额，更新账本余额。
-- 4、检查是否还存在未决记录，如果有提示手工处理。
-- 5、库内对过期月票冲零，更新账本余额为零。
-- 6、判断收费时间，计算剩余折旧费。
-- 7、判断虚充金额，不退电子钱包剩余卡余额。
-- 8、获取退款（已经用卡上更新账本，并更新账本，所以账本余额为准，
        包含电子钱包余额、12个月票余额及12个月票余额的年月）
-- 9、更新系统余额，统计销户退款
-- 10、将账本记录转移到注销表
-- 11、形成销户退款明细记录，返回退款金额。

---------------------------------------------------------------------------
*/
   procedure proc_writeoffcustomers (
      prmcustomerid         in       number,                       --客户编号
      prmcardsn             in       number,                       --持卡序号
      prmcardno             in       number,                           --卡号
      --
      prmempid              in       number,                       --操作职员
      prmhascard            in       number,        --0：无卡注销 1：有卡注销
      prmposcode            in       number,                   --终端唯一编号
      prmpsamcardno         in       number,                       --psam卡号
      prmmanagefare         in       number,                 --管理费退费金额
      prmotherfare          in       number,                   --其他扣费金额
      prmoptype             in       number,         --操作类型：0查询，1销户
      prmvicefare           in       number,
      prmmonfare            in       number,
      prmvicefare_reset     in       number,                       --充零次数
      prmmonfare_reset      in       number,                       --充零金额
      prmvicefare_times     in       number,                       --退还次数
      prmcustomerunitcode   in       varchar2,
      out_cursor            out      refcursortype,            --返回退款信息
      out_result            out      number,   --返回值 100销户成功，其他失败
      out_msg               out      varchar2                      --返回信息
   )
   as
       /*
      --------------------------------------------------------------------------
      --存储过程：modual_writeoffcustomers
      --作　　者：朱鹏飞
      --时　　间：2009-07-25
      --说　　明：销户退款
      --输入参数：
      --输出参数：
      --out_result：
      --    100 ：销户成功
      --------------------------------------------------------------------------
      --修改标示：朱鹏飞 2009-08-10
      --修改说明：修改电子钱包虚充退款
      --------------------------------------------------------------------------
      --修改标示：朱鹏飞 2009-08-13
      --修改说明：增加不记名卡不允许销户
      --------------------------------------------------------------------------
      --修改标示：朱鹏飞 2009-08-25
      --修改说明：解决月票冲零部门为空的bug
      --------------------------------------------------------------------------
      --修改标示：吴琰书 2011-08-08
      --修改说明：添加次卡钱包的处理
      --------------------------------------------------------------------------
      --修改标示：吴琰书 2012-04-09
      --修改说明：增加分卡类型退折旧费
      --------------------------------------------------------------------------
       --修改标示：刘东红 2012-04-11
       --修改说明：退卡折旧费按不同卡计算，次钱包不再退款
       -------------------------------------------------------------------------
       --修改标示：周晓娜 2012-05-18
       --修改说明：增加管理费退费统计
       -------------------------------------------------------------------------
       --修改标示：周晓娜 2012-05-22
       --修改说明：注销表增加outid市民卡号字段
       -------------------------------------------------------------------------
       --修改标识：程文平 2012-06-01
       --修改说明：退卡明细表增加管理费数据
       -------------------------------------------------------------------------
       --修改标识：周晓娜 2013-05-03
       --修改说明：增加资产负债账目的统计
       -------------------------------------------------------------------------
      */
      i_count                        integer;
      i_count2                       integer;
      i_count3                       integer;
      v_empdept                      varchar2 (10);
      i_empareaid                    integer;
      i_curcardtype                  integer;
      i_curcardkind                  integer;
      n_curelecopcount               number;
      n_curelecsaveopcount           number;
      n_curelecoddfare               number (10, 2);
      n_curelecsumaddfare            number (10, 2);
      n_curviceopcount               number;                           --次卡
      n_curvicesaveopcount           number;
      n_curviceoddfare               number (10, 2);
      n_curvicesumaddfare            number (10, 2);
      n_curmonopcount                number;
      n_curmonsaveopcount            number;
      n_curmonoddfare                number (10, 2);
      n_curmonsumaddfare             number (10, 2);
      n_curdepreciatefare            number (10, 2);                 --折旧费
      dt_curdepreciatedate           date;
      n_cursumelectrdummyfare        number (10, 2);
      i_custareaid                   integer;
      n_sumfreezefare                number (10, 2);
      n_sumfreezefare_mon            number (10, 2);
      n_sumfreezefare_vice           number (10, 2);
      i_opmonth                      integer;
      v_execsql                      varchar2 (1000);
      dt_maxlossdt                   date;
      n_baselineallowwriteoff        number;
      custom_exception               exception;                  --自定义异常
      ----
      --返回信息
      n_out_elecoddfare              number (10, 2);           --电子钱包余额
      n_out_viceoddfare              number (10, 2);           --次卡钱包余额
      n_out_monoddfare               number (10, 2);           --次卡钱包余额
      n_out_depreciatefare           number (10, 2);             --退还折旧费
      n_out_summonoddfare            number (10, 2);
      n_out_sumrefundmentfare        number (10, 2);
      --
      n_totalconsumfare              number (20, 2);   --电子钱包累计消费金额
      n_refunddumpfare               number (10, 2);     --退款时有效虚充金额
      n_refundlimitconsumfare        number (10, 2);           --最低消费限额
      --
      n_totalconsumfare_vice         number (20, 2);   --次卡钱包累计消费金额
      n_totalconsumfare_mon          number (20, 2);   --次卡钱包累计消费金额
      n_refunddumpfare_vice          number (10, 2);   --退款时有次卡虚充金额
      n_refundlimitconsumfare_vice   number (10, 2);       --次卡最低消费限额
      n_refunddumpfare_mon           number (10, 2);   --退款时有次卡虚充金额
      n_refundlimitconsumfare_mon    number (10, 2);       --次卡最低消费限额
      --
      n_nonameflag                   number;
      --不记名标记（0：记名；1：不记名）
      n_cardtype                     number;
      n_cardfarerates                number;
      vbllttype                      number;
      vscardsnr                      varchar2 (80);
      vcardno                        number;
      vcardfareratesparaname         varchar2 (30);
      n_cardtypeid                   number;                 --手机卡或普通卡
      n_vice_tag                     number;                 --次钱包启用标识
      n_vice_type                    number;                 --次钱包启用类型
      n_paramgroupid                 number;
      n_mintopupfarebypermonth       number;
      n_limittimes                   number;
      v_validtimestart               date;
      v_validtimeend                 date;
      v_sysdate                      date;
      v_datetmp                      date;
      v_monthrefundday               number;
      v_sendcardmonths               number;
      v_sendcarddays                 number;
      v_cardfareratesday             number;
      v_cardid                       number;
      v_monoddfare                   number;
      v_out_monoddfare               number;
      v_monvalidtimeend              date;
      v_cardkind                     number;
      n_isuse                        number;               --启用授权额度标识
      v_netside                      varchar2 (9);                 --网点编号
      n_cashaccfc                    number;       --形成退款明细的原始流水号
      n_empoddfare                   number;
      v_empname                      varchar2 (50);
      n_empaccountype                number;
      v_codeid                       varchar2 (100);
      voldcardno                     number;
   begin
      out_result := -1001;
      out_msg := '初始化相关变量';
      v_sysdate := to_date (to_char (sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd');
      --
      n_out_elecoddfare := 0;
      n_out_viceoddfare := 0;                                          --次卡
      n_out_depreciatefare := 0;
      n_out_summonoddfare := 0;
      n_out_sumrefundmentfare := 0;
      v_out_monoddfare := 0;
--------------------------------------------------------------------------
      n_curvicesumaddfare := 0;
      n_refundlimitconsumfare_vice := 0;
      n_refunddumpfare_vice := 0;
      n_curmonsumaddfare := 0;
      n_refundlimitconsumfare_mon := 0;
      n_sumfreezefare := 0;
      n_sumfreezefare_mon := 0;
      n_sumfreezefare_vice := 0;
      n_refunddumpfare_mon := 0;
      v_validtimeend := sysdate;
      v_monvalidtimeend := sysdate;
      -------检查是否正在数据结算-----------
      proc_validateisbalance (out_result, out_msg);

      if (out_result <> 0)                              --0当前系统未进行结算
      then
         out_result := -1001;
         out_msg := '判断账目结算状态异常，' || out_msg;
         raise custom_exception;
      end if;

--------------------------------------------------------------------------------
--验证系统参数表
      select nvl (count (*), 0)
        into i_count
        from base_syspara a;

      if i_count = 0
      then
         out_result := -1001;
         out_msg := '系统参数表不能为空！';
         return;
      end if;

      --获取黑名单类型
      select a.bllttype
        into vbllttype
        from base_syspara a;

--------------------------------------------------------------------------------

      --获取挂失后允许注销和换卡后允许领取冻结金额时间基线
      --在判断当前是否正在结算是已经判断系统是否开退
      select a.freezefarelimit
        into n_baselineallowwriteoff
        from base_syspara a;

      -------检查账户是否存在-----------
      select nvl (count (*), 0)
        into i_count
        from base_customers
       where customerid = prmcustomerid
         and cardno = prmcardno
         and customerunitcode = prmcustomerunitcode;

      --验证客户账号
      if i_count = 0
      then
         out_result := -1002;
         out_msg := '卡库信息不匹配';
         raise custom_exception;
      end if;

      select id
        into v_cardid
        from base_customers
       where customerid = prmcustomerid
         and cardno = prmcardno
         and customerunitcode = prmcustomerunitcode;

      --检查操作职员及状态是否正常
      select count (*)
        into i_count
        from base_param a
       where a.paramname = 'cardfareratesday'
         and a.paramgroupid = 1003
         and a.customerunitcode = prmcustomerunitcode;

      if i_count = 0
      then
         select count (*)
           into i_count
           from base_param a
          where a.paramname = 'cardfareratesday'
            and a.paramgroupid = 1003
            and a.customerunitcode is null;

         if i_count = 0
         then
            out_result := -1002;
            out_msg := '系统中没有找到 -折旧费当月扣款天数- 参数';
            raise custom_exception;
         else
            select to_number (a.paramvalue)
              into v_cardfareratesday
              from base_param a
             where a.paramname = 'cardfareratesday'
               and a.paramgroupid = 1003
               and a.customerunitcode is null;
         end if;
      else
         select to_number (a.paramvalue)
           into v_cardfareratesday
           from base_param a
          where a.paramname = 'cardfareratesday'
            and a.paramgroupid = 1003
            and a.customerunitcode = prmcustomerunitcode;
      end if;

      --检查操作职员及状态是否正常
      select count (*)
        into i_count
        from base_emp a
       where a.empid = prmempid
         and a.status = 1
         and customerunitcode = prmcustomerunitcode;

      if i_count = 0
      then
         out_result := -1002;
         out_msg := '职员信息异常empid:' || to_char (prmempid);
         raise custom_exception;
      end if;

      select a.dptcode, a.areaid, a.accounttype, a.empname
        into v_empdept, i_empareaid, n_empaccountype, v_empname
        from base_emp a
       where a.empid = prmempid and customerunitcode = prmcustomerunitcode;

      --获取账户相关信息
      select a.cardtypedetailid, a.cardkind, a.electropcount,
             a.electrsaveopcount, a.electroddfare, a.sumelectraddfare,
             a.monopcount, a.monsaveopcount, a.depreciatefare,
             a.depreciatedate, a.sumelectrdummyfare, a.nonameflag,
             cardtypedetailid, a.scardsnr, a.numberoddfare, a.cardtypeid,
             a.monoddfare, a.numberopcount, a.numbersaveopcount,
             a.vicevalidtimestart, a.videvalidtimeend, a.monvalidtimeend
        into i_curcardtype, i_curcardkind, n_curelecopcount,
             n_curelecsaveopcount, n_curelecoddfare, n_curelecsumaddfare,
             n_curmonopcount, n_curmonsaveopcount, n_curdepreciatefare,
             dt_curdepreciatedate, n_cursumelectrdummyfare, n_nonameflag,
             n_cardtype, vscardsnr, n_curviceoddfare, n_cardtypeid,
             n_curmonoddfare, n_curviceopcount, n_curvicesaveopcount,
             v_validtimestart, v_validtimeend, v_monvalidtimeend
        from base_customers a
       where customerid = prmcustomerid
         and cardno = prmcardno
         and customerunitcode = prmcustomerunitcode;

      /*if n_nonameflag = 1
      then
         out_result := -1002;
         out_msg := '不记名卡不能销户';
         raise custom_exception;
      end if;
      */
      out_result := -1003;
      out_msg := '判断形成黑名单';

      --黑名单模式
      if vbllttype = 0
      then
         out_result := -1004;
         out_msg := '黑名单模式';

         select nvl (count (*), 0)
           into i_count
           from rec_bllt a
          where cardno = prmcardno and a.state = 0;

         if prmhascard = 1                                          --有卡注销
         then
            --判断是否在黑名单中，如果在黑名单中，则形成安全黑名单
            if i_count > 0 and prmoptype = 1
            then
               select nvl (count (*), 0)
                 into i_count
                 from rec_bllt_safe
                where cardno = prmcardno;

               if i_count > 0
               then
                  insert into rec_bllt_safe
                              (cardno, lossdt, finddt, oppsn, suorcetype,
                               suorceip, systemid, nousedate, blltver,
                               poscode)
                     (select prmcardno, nvl (lossdt, sysdate), sysdate,
                             nvl (a.id, 0), nvl (suorcetype, 0),
                             nvl (suorceip, '127.0.0.1'), 2,
                             nvl (a.nousedate, sysdate), nvl (a.id, 0),
                             prmposcode
                        from rec_bllt a
                       where cardno = prmcardno);
               end if;

               --删除黑名单
               delete from rec_bllt
                     where cardno = prmcardno;
            end if;
         else                             --无卡注销时，没有黑名单时添加黑名单
            if i_count > 0
            then
               --获取最后挂失时间
               select nvl (max (a.opdt), sysdate)
                 into dt_maxlossdt
                 from rec_loss a
                where a.customerunitcode = prmcustomerunitcode
                  and a.customerid = prmcustomerid
                  and a.cardsn = prmcardsn
                  and a.cardno = prmcardno;

               --比较挂失时间是否允许注销,把<=修改成<，解决设置为0天，当天可以销户
               if     n_baselineallowwriteoff > 0
                  and trunc (sysdate - dt_maxlossdt) < n_baselineallowwriteoff
               then
                  out_result := -9003;
                  out_msg :=
                        '无卡销户挂失['
                     || to_char (n_baselineallowwriteoff)
                     || ']天以后才能销户';
                  raise custom_exception;
               end if;
            else
               out_result := -1003;
               out_msg :=
                     '无卡销户请先挂失，且挂失['
                  || to_char (n_baselineallowwriteoff)
                  || ']天后才能销户';
               raise custom_exception;
            end if;
         end if;
      --白名单模式
      else
         out_result := -1005;
         out_msg := '白名单模式';
         --用十进制的卡唯一号作为卡号
         vcardno := to_number (vscardsnr, 'xxxxxxxx');

         select nvl (count (*), 0)
           into i_count
           from rec_bllt a
          where a.cardno = vcardno and state = 0;

         if prmhascard = 1
         then
            if i_count = 1
            then
               insert into rec_bllt_safe
                           (cardno, lossdt, finddt, oppsn, suorcetype,
                            suorceip, systemid, nousedate, blltver, poscode)
                  (select a.cardno, nvl (lossdt, sysdate), sysdate,
                          nvl (a.id, 0), nvl (suorcetype, 0),
                          nvl (suorceip, '127.0.0.1'), 2,
                          nvl (a.nousedate, sysdate), nvl (a.id, 0),
                          prmposcode
                     from rec_bllt a
                    where cardno = vcardno);

               delete from rec_bllt
                     where cardno = vcardno;
            end if;
         --无卡注销
         else
            if i_count = 0
            then
               out_result := -1006;
               out_msg :=
                     '无卡销户请先挂失，且挂失['
                  || to_char (n_baselineallowwriteoff)
                  || ']天后才能销户';
               raise custom_exception;
            end if;
         end if;
      end if;

      if prmcardsn > 1
      then
         select count (*)
           into i_count
           from rec_freezefare_acc a
          where a.customerid = prmcustomerid
            and a.newcardno = prmcardno
            and customerunitcode = prmcustomerunitcode;

         if i_count < 1
         then
            out_result := -1006;
            out_msg := '找不到当前卡的冻结记录，数据异常！';
            raise custom_exception;
         end if;

         select a.cardno
           into voldcardno
           from rec_freezefare_acc a
          where a.customerid = prmcustomerid
            and a.newcardno = prmcardno
            and customerunitcode = prmcustomerunitcode;

         out_msg := '获取账户电子钱包冻结金额';
         out_result := -1002;

         select count (*)
           into i_count
           from rec_freezefare_acc a
          where a.customerid = prmcustomerid
            and a.freezefareflag = 0
            and cardid = v_cardid
            and customerunitcode = prmcustomerunitcode;

         if i_count > 0
         then
            select nvl (sum (a.freezefare), 0)
              into n_sumfreezefare
              from rec_freezefare_acc a
             where customerunitcode = prmcustomerunitcode
               and cardid = v_cardid
               and a.freezefareflag = 0;

            --如果冻结金额为零，则直接更新为已领取
            if n_sumfreezefare = 0
            then
               --更新冻结金额为已领状态
               update rec_freezefare_acc a
                  set a.freezefareflag = 1
                where customerunitcode = prmcustomerunitcode
                  and cardid = v_cardid
                  and a.freezefareflag = 0;
            else
               select nvl (max (a.opdt), sysdate)
                 into dt_maxlossdt
                 from rec_loss a
                where a.cardno = voldcardno;

               --比较挂失时间是否允许注销
               if     n_baselineallowwriteoff > 0
                  and trunc (sysdate - dt_maxlossdt) <=
                                                       n_baselineallowwriteoff
               then
                  out_result := -9003;
                  out_msg :=
                        '当前卡有未领冻结金额，请['
                     || to_char (n_baselineallowwriteoff)
                     || ']天以后先行领取冻结金额';
                  raise custom_exception;
               end if;

               if prmhascard = 1
               then
                  out_result := -1003;
                  out_msg := '有卡销户，请先领取冻结金额！';
                  raise custom_exception;
               end if;

               if prmoptype = 1
               then
                  out_result := -1002;
                  out_msg := '处理账户电子钱包未领冻结金额';
                  proc_elec_addfreezefare (prmcustomerid,
                                           v_cardid,
                                           prmcardsn,
                                           prmcardno,
                                           i_curcardtype,
                                           i_curcardkind,
                                           n_curelecopcount,
                                           n_curelecsaveopcount,
                                           n_curelecoddfare,
                                           n_curelecsumaddfare,
                                           i_custareaid,
                                           prmposcode,
                                           prmpsamcardno,
                                           prmempid,
                                           prmcustomerunitcode,
                                           out_result,
                                           out_msg
                                          );

                  if out_result <> 100
                  then
                     out_result := -1002;
                     out_msg := '处理电子钱包未领冻结金额出错，' || out_msg;
                     raise custom_exception;
                  end if;
               end if;
            end if;
         end if;

         out_msg := '获取账户月票钱包冻结金额';
         out_result := -1500;

         select count (*)
           into i_count
           from rec_freezefare_acc a
          where a.cardid = v_cardid and a.monthfreezefareflag = 0;

         if i_count > 0
         then
            select nvl (sum (a.monthfreezefare), 0)
              into n_sumfreezefare_mon
              from rec_freezefare_acc a
             where a.cardid = v_cardid and a.monthfreezefareflag = 0;

            --如果冻结金额为零，则直接更新为已领取
            if n_sumfreezefare_mon = 0
            then
               --更新冻结金额为已领状态
               update rec_freezefare_acc a
                  set a.monthfreezefareflag = 1
                where a.cardid = v_cardid and a.monthfreezefareflag = 0;
            else
               select nvl (max (a.opdt), sysdate)
                 into dt_maxlossdt
                 from rec_loss a
                where a.cardno = voldcardno;

               --比较挂失时间是否允许注销
               if     n_baselineallowwriteoff > 0
                  and trunc (sysdate - dt_maxlossdt) <=
                                                       n_baselineallowwriteoff
               then
                  out_result := -9003;
                  out_msg :=
                        '当前卡有未领冻结金额，请['
                     || to_char (n_baselineallowwriteoff)
                     || ']天以后先行领取冻结金额';
                  raise custom_exception;
               end if;

               if prmhascard = 1
               then
                  out_result := -1003;
                  out_msg := '有卡销户，请先领取冻结金额！';
                  raise custom_exception;
               end if;

               if prmoptype = 1
               then
                  out_result := -1502;
                  out_msg := '处理账户月票钱包未领冻结金额';
                  proc_mon_addfreezefare (prmcustomerid,
                                          v_cardid,
                                          prmcardsn,
                                          prmcardno,
                                          i_curcardtype,
                                          i_curcardkind,
                                          n_curmonopcount,
                                          n_curmonsaveopcount,
                                          n_curmonoddfare,
                                          n_curmonsumaddfare,
                                          prmposcode,
                                          prmpsamcardno,
                                          prmempid,
                                          prmcustomerunitcode,
                                          out_result,
                                          out_msg
                                         );

                  if out_result <> 100
                  then
                     out_result := -1503;
                     out_msg := '处理月票钱包未领冻结金额出错，' || out_msg;
                     raise custom_exception;
                  end if;
               end if;
            end if;
         end if;

         out_msg := '获取账户次卡钱包冻结金额';      --2011.08.08 新增次卡钱包
         out_result := -1500;

         select count (*)
           into i_count
           from rec_freezefare_acc a
          where a.cardid = v_cardid and a.vicefreezefareflag = 0;

         if i_count > 0
         then
            select nvl (sum (a.vicefreezefare), 0)
              into n_sumfreezefare_vice
              from rec_freezefare_acc a
             where a.cardid = v_cardid and a.vicefreezefareflag = 0;

            --如果冻结金额为零，则直接更新为已领取
            if n_sumfreezefare_vice = 0
            then
               --更新冻结金额为已领状态
               update rec_freezefare_acc a
                  set a.vicefreezefareflag = 1
                where a.cardid = v_cardid and a.vicefreezefareflag = 0;
            else
               select nvl (max (a.opdt), sysdate)
                 into dt_maxlossdt
                 from rec_loss a
                where a.cardno = voldcardno;

               --比较挂失时间是否允许注销
               if     n_baselineallowwriteoff > 0
                  and trunc (sysdate - dt_maxlossdt) <=
                                                       n_baselineallowwriteoff
               then
                  out_result := -9003;
                  out_msg :=
                        '当前卡有未领冻结金额，请['
                     || to_char (n_baselineallowwriteoff)
                     || ']天以后先行领取冻结金额';
                  raise custom_exception;
               end if;

               if prmhascard = 1
               then
                  out_result := -1003;
                  out_msg := '有卡销户，请先领取冻结金额！';
                  raise custom_exception;
               end if;

               if prmoptype = 1
               then
                  out_result := -1502;
                  out_msg := '处理账户次卡钱包未领冻结金额';
                  proc_vice_addfreezefare (prmcustomerid,
                                           v_cardid,
                                           prmcardsn,
                                           prmcardno,
                                           i_curcardtype,
                                           i_curcardkind,
                                           n_curviceopcount,
                                           n_curvicesaveopcount,
                                           n_curviceoddfare,
                                           n_curvicesumaddfare,
                                           prmposcode,
                                           prmpsamcardno,
                                           prmempid,
                                           prmcustomerunitcode,
                                           out_result,
                                           out_msg
                                          );

                  if out_result <> 100
                  then
                     out_result := -1503;
                     out_msg := '处理次卡钱包未领冻结金额出错，' || out_msg;
                     raise custom_exception;
                  end if;
               end if;
            end if;
         end if;
      end if;                                                   --冻结检查结束

      out_result := -1003;
      out_msg := '判断是否仍存在电子钱包存在领款未决记录';

      --判断是否有电子钱包未决记录
      select count (*)
        into i_count
        from rec_electtron_cash_plan a
       where a.customerid = prmcustomerid
         and a.cardno = prmcardno
         and a.customerunitcode = prmcustomerunitcode;

      if i_count > 0
      then
         out_result := -1003;
         out_msg := '电子钱包存在领款未决记录无法注销';
         raise custom_exception;
      end if;

      out_result := -1003;
      out_msg := '判断是否仍存在月票钱包存在领款未决记录';

      --判断是否有月票未决记录
      select count (*)
        into i_count
        from rec_monticket_cash_plan a
       where a.customerid = prmcustomerid
         and a.cardno = prmcardno
         and a.customerunitcode = prmcustomerunitcode;

      if i_count > 0
      then
         out_result := -1003;
         out_msg := '月票钱包存在领款未决记录无法注销';
         raise custom_exception;
      end if;

      out_result := -1003;
      out_msg := '判断是否仍存在次卡钱包存在领款未决记录';

      --判断是否有次卡钱包未决记录
      select count (*)
        into i_count
        from rec_vicecard_cash_plan a
       where a.customerid = prmcustomerid
         and a.cardno = prmcardno
         and a.customerunitcode = prmcustomerunitcode;

      if i_count > 0
      then
         out_result := -1003;
         out_msg := '次卡钱包存在领款未决记录无法注销';
         raise custom_exception;
      end if;

      --判断是否有冻结金额未领记录或者未决记录
      select count (*)
        into i_count
        from rec_freezefare_acc a
       where a.customerid = prmcustomerid
         and a.cardid = v_cardid
         and a.customerunitcode = prmcustomerunitcode
         and (   a.freezefareflag <> 1
              or a.monthfreezefareflag <> 1
              or a.vicefreezefareflag <> 1
             );

      if i_count > 0
      then
         out_result := -1003;
         out_msg := '存在未领或者未决的冻结金额记录无法注销';
         raise custom_exception;
      end if;

----------对月票过期的冲零------------------------------------------------------
      out_result := -1003;
      out_msg := '重新获取账户信息';

      --在处理冻结金额时有可能更新了账本操作计数等信息，所以重新获取
      select a.electropcount, a.electrsaveopcount, a.electroddfare,
             a.sumelectraddfare, a.monopcount, a.monsaveopcount,
             a.refunddumpfare, a.refundlimitconsumfare, a.numberoddfare,
             a.monoddfare, a.cardkind, a.vicevalidtimestart,
             a.videvalidtimeend, a.monvalidtimeend
        into n_curelecopcount, n_curelecsaveopcount, n_curelecoddfare,
             n_curelecsumaddfare, n_curmonopcount, n_curmonsaveopcount,
             n_refunddumpfare, n_refundlimitconsumfare, n_curviceoddfare,
             n_curmonoddfare, v_cardkind, v_validtimestart,
             v_validtimeend, v_monvalidtimeend
        from base_customers a
       where customerid = prmcustomerid
         and a.cardno = prmcardno
         and a.customerunitcode = prmcustomerunitcode;

      n_out_viceoddfare := n_curviceoddfare;
      n_out_monoddfare := n_curmonoddfare;
      --out_result := i_count;
      --raise custom_exception;
      out_result := -1003;
      out_msg := '收取折旧费信息异常';

      --------计算折旧费用--------------------------------
      --
      --如果收折旧费时间大于当前系统时间，则说明收费信息异常
      if dt_curdepreciatedate > sysdate
      then
         out_result := -1003;
         out_msg := '收取折旧费信息异常';
         raise custom_exception;
      else
         if (prmhascard = 1)
         then
            --检查卡类型
            if n_cardtypeid = 2
            then
               vcardfareratesparaname := 'mobile_cardfarerates';
            else
               if i_curcardkind = 1
               then
                  vcardfareratesparaname := 'cardfarerates';
               else
                  vcardfareratesparaname := 'cpu_cardfarerates';
               end if;
            end if;

            --修改人：梁小凯
            --修改时间：20091215
            --修改说明：
            --增加折旧费费率参数
            --根据卡类型所属的参数组获取卡折旧费费率
            --2013.7.19修改折旧费检查方式开始
            select count (*)
              into n_cardfarerates
              from base_param b
             where b.paramgroupid = n_cardtype
               and upper (b.paramname) = vcardfareratesparaname
               and customerunitcode = prmcustomerunitcode;

            if n_cardfarerates = 0
            then
               select nvl (to_number (b.paramvalue), -1)
                 into n_cardfarerates
                 from base_param b
                where b.paramgroupid = n_cardtype
                  and upper (b.paramname) = vcardfareratesparaname
                  and customerunitcode is null;
            else
               select nvl (to_number (b.paramvalue), -1)
                 into n_cardfarerates
                 from base_param b
                where b.paramgroupid = n_cardtype
                  and upper (b.paramname) = vcardfareratesparaname
                  and customerunitcode = prmcustomerunitcode;
            end if;

            --2013.7.19修改折旧费检查方式开始
            if n_cardfarerates = -1
            then
               out_result := -1003;
               out_msg := '少参数[' || vcardfareratesparaname || ']！';
               raise custom_exception;
            end if;

            --折旧率大折旧费时，表示不退费
            if n_cardfarerates > n_curdepreciatefare
            then
               n_out_depreciatefare := 0;
            else
               --有卡注销时计算折旧费=收到费用-使用月份*折旧费费率
               --找整月数
               v_sendcardmonths :=
                       trunc (months_between (sysdate, dt_curdepreciatedate));

               if v_sendcardmonths > 0
               then
                  v_sendcarddays :=
                     trunc (  sysdate
                            - add_months (dt_curdepreciatedate,
                                          v_sendcardmonths
                                         )
                           );
               else
                  v_sendcardmonths := 0;
                  v_sendcarddays := trunc (sysdate - dt_curdepreciatedate);
               end if;

               if v_sendcarddays < 0
               then
                  v_sendcarddays := 0;
               end if;

               --超过指定天数的，算一个月
               if v_sendcarddays >= v_cardfareratesday
               then
                  v_sendcardmonths := v_sendcardmonths + 1;
               end if;

               n_out_depreciatefare :=
                      n_curdepreciatefare - v_sendcardmonths * n_cardfarerates;

               if n_out_depreciatefare < 0
               then
                  n_out_depreciatefare := 0;
               end if;
            end if;
         else
            --无卡注销时不退折旧费
            n_out_depreciatefare := 0;
         end if;
      end if;

      --------处理虚充金额------
      --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
      --如果用卡余额计算的累计消费金额大，则说明卡上软准确
      --如果库里大，则说明库里可能正确，卡上总额可能错误
      if n_curelecsumaddfare - n_curelecoddfare > n_totalconsumfare
      then
         n_totalconsumfare := n_curelecsumaddfare - n_curelecoddfare;
      else
         n_totalconsumfare := n_totalconsumfare;
      end if;

      --比较累计消费与最低限额大小
      if n_totalconsumfare > n_refundlimitconsumfare
      then
         --如果累计消费与最低限额大，则认为虚充已经消费完，应按实际余额退还
         n_out_elecoddfare := n_curelecoddfare;
      else
         --如果累计消费与最低限额小，则说明虚充未消费完，用余额减去虚充金额退还用户
         n_out_elecoddfare := n_curelecoddfare - n_refunddumpfare;

         if n_out_elecoddfare < 0
         then
            n_out_elecoddfare := 0;
         end if;
      end if;

      --------处理月票退款金额------
      --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
      --如果用卡余额计算的累计消费金额大，则说明卡上软准确
      --如果库里大，则说明库里可能正确，卡上总额可能错误
      if n_curmonsumaddfare - n_curmonoddfare > n_totalconsumfare_mon
      then
         n_totalconsumfare_mon := n_curmonsumaddfare - n_curmonoddfare;
      else
         n_totalconsumfare_mon := n_totalconsumfare_mon;
      end if;

      --------处理次卡退款金额------
      --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
      --如果用卡余额计算的累计消费金额大，则说明卡上软准确
      --如果库里大，则说明库里可能正确，卡上总额可能错误
      if n_curvicesumaddfare - n_curviceoddfare > n_totalconsumfare_vice
      then
         n_totalconsumfare_vice := n_curvicesumaddfare - n_curviceoddfare;
      else
         n_totalconsumfare_vice := n_totalconsumfare_vice;
      end if;

      --比较累计消费与最低限额大小
      /*
      if n_totalconsumfare_vice > n_refundlimitconsumfare_vice
      then
         --如果累计消费与最低限额大，则认为虚充已经消费完，应按实际余额退还
         n_out_viceoddfare := n_curviceoddfare;
      else
         --如果累计消费与最低限额小，则说明虚充未消费完，用余额减去虚充金额退还用户
         n_out_viceoddfare := n_curviceoddfare - n_refunddumpfare_vice;

         if n_out_viceoddfare < 0
         then
            n_out_viceoddfare := 0;
         end if;
      end if;
            */

      --计算总退款金额
      n_out_sumrefundmentfare :=
                       n_out_elecoddfare + n_out_depreciatefare - prmotherfare;

      --次卡金额

      --销户处理
      if prmoptype = 1
      then
         n_out_viceoddfare := prmvicefare;                                  --
         n_out_sumrefundmentfare :=
                           n_out_sumrefundmentfare + prmvicefare + prmmonfare;
         n_out_monoddfare := prmmonfare;

         --更新账户为注销状态
         update base_customers a
            set a.status = 2
          where customerid = prmcustomerid
            and a.cardno = prmcardno
            and a.customerunitcode = prmcustomerunitcode;

         ---------统计退款金额
         proc_stat_refundment (prmcustomerid,
                               v_cardid,
                               prmcardno,
                               i_curcardkind,
                               i_curcardtype,
                               prmempid,
                               prmposcode,
                               prmpsamcardno,
                               i_custareaid,
                               v_empdept,
                               i_empareaid,
                               prmhascard,
                               n_out_elecoddfare,
                               n_out_depreciatefare,
                               n_out_viceoddfare,
                               n_out_monoddfare,
                               prmotherfare,
                               prmcustomerunitcode,
                               out_result,
                               out_msg
                              );

         if out_result <> 100
         then
            out_result := -1002;
            out_msg := '退款余额统计时出错，' || out_msg;
            raise custom_exception;
         end if;

         ---------统计退款管理费
         proc_stat_refundmanagefare (prmcustomerid,
                                     prmcardsn,
                                     prmcardno,
                                     prmposcode,
                                     prmpsamcardno,
                                     prmmanagefare,
                                     prmempid,
                                     prmcustomerunitcode,
                                     out_result,
                                     out_msg
                                    );

         if out_result <> 100
         then
            out_result := -1002;
            out_msg := '管理费退款余额统计时出错，' || out_msg;
            raise custom_exception;
         end if;

         ---------充零
         if prmmonfare_reset > 0
         then
            pkg_cust_cash.proc_build_month_rush
                                           (prmcustomerid,
                                            prmcardno,
                                            prmcardsn,
                                            n_curmonsaveopcount,
                                            n_curmonopcount,
                                            i_curcardkind,
                                            i_curcardtype,
                                            to_char (sysdate,
                                                     'rrrr-mm-dd hh24:mi:ss'
                                                    ),
                                            sysdate,
                                            sysdate,
                                            prmposcode,
                                            prmempid,
                                            prmpsamcardno,
                                            prmmonfare_reset,
                                            prmcustomerunitcode,
                                            2,
                                            out_result,
                                            out_msg
                                           );

            if out_result <> 100
            then
               out_result := -1002;
               out_msg := '月票钱包充零时出错，' || out_msg;
               raise custom_exception;
            end if;
         end if;

         ---------充零
         if prmvicefare_reset > 0
         then
            pkg_cust_cash.proc_build_month_rush
                                           (prmcustomerid,
                                            prmcardno,
                                            prmcardsn,
                                            n_curmonsaveopcount,
                                            n_curmonopcount,
                                            i_curcardkind,
                                            i_curcardtype,
                                            to_char (sysdate,
                                                     'rrrr-mm-dd hh24:mi:ss'
                                                    ),
                                            sysdate,
                                            sysdate,
                                            prmposcode,
                                            prmempid,
                                            prmpsamcardno,
                                            prmvicefare_reset,
                                            prmcustomerunitcode,
                                            3,
                                            out_result,
                                            out_msg
                                           );

            if out_result <> 100
            then
               out_result := -1002;
               out_msg := '月票钱包充零时出错，' || out_msg;
               raise custom_exception;
            end if;
         end if;

         if prmhascard = 0                                          --无卡注销
         then
            --职员操作统计，统计注销次数
            pkg_st_payment.proc_emptradeaccount_online
                                           (to_char (sysdate,
                                                     'yyyy-mm-dd hh24:mi:ss'
                                                    ),
                                            0,
                                            610,
                                            prmempid,
                                            prmposcode,
                                            prmpsamcardno,
                                            i_curcardtype,
                                            i_curcardkind,
                                            0,
                                            prmcustomerunitcode,
                                            out_msg,
                                            out_result
                                           );
         else                                                       --有卡注销
            --职员操作统计，统计注销次数
            pkg_st_payment.proc_emptradeaccount_online
                                           (to_char (sysdate,
                                                     'yyyy-mm-dd hh24:mi:ss'
                                                    ),
                                            0,
                                            604,
                                            prmempid,
                                            prmposcode,
                                            prmpsamcardno,
                                            i_curcardtype,
                                            i_curcardkind,
                                            0,
                                            prmcustomerunitcode,
                                            out_msg,
                                            out_result
                                           );
         end if;

         if out_result <> 100
         then
            out_result := -1002;
            out_msg := '职员操作统计时出错，' || out_msg;
            raise custom_exception;
         end if;

----------处理账本信息----------------------------------------------------
--转移账本信息
         out_result := -1002;
         out_msg := '转移账本信息';

         select count (*)
           into i_count
           from base_customers
          where customerid = prmcustomerid
            and customerunitcode = prmcustomerunitcode;

         if i_count < 2
         then
            insert into base_writeoff_info
                        (id, customerid, name, sex, nation, telphonenum,
                         idcardno, certificateid, custdept, opendt, address,
                         birthday, rremark, customerunitcode, custstatus)
               select id, customerid, name, sex, nation, telphonenum,
                      idcardno, certificateid, custdept, opendt, address,
                      birthday, rremark, customerunitcode, 0
                 from base_customers_info
                where customerid = prmcustomerid
                  and customerunitcode = prmcustomerunitcode;
         end if;

         insert into base_writeoff
                     (id, customerid, scardsnr, cardtypedetailid, cardsn,
                      status, querypwd, cardkind, countryid, electropcount,
                      electrsaveopcount, monopcount, monsaveopcount,
                      sumelectraddfareacc, sumelectraddfare, summonaddfareacc,
                      sumconsumfare, sumelectrconsumfare, summonconsumfare,
                      sumelectrdummyfare, summonrushfare, sumdiscount,
                      electroddfare, electroddfareacc, nousedate, empid,
                      yearchecks, checkbeginday, checkendday, ver,
                      summonthoddfareacc, depreciatefare, depreciatedate,
                      sumelectradddummyfare, refunddumpfare,
                      refundlimitconsumfare, nonameflag, temcardno, jgcardno,
                      cardtypeid, productid, asn, outid, cardtypepeopleid,
                      cardtypecityid, serverid, sendsys, numberopcount,
                      numbersaveopcount, numberoddfare, numberoddfareacc,
                      isnewcapecsys, summangefare, mangefarelastdate,
                      sumfreemangefare, customerunitcode, opdt, cardno,
                      monoddfare, accounttype, sumvicerushfare, hascard)
            select id, customerid, scardsnr, cardtypedetailid, cardsn, status,
                   querypwd, cardkind, countryid, electropcount,
                   electrsaveopcount, monopcount, monsaveopcount,
                   sumelectraddfareacc, sumelectraddfare, summonaddfareacc,
                   sumconsumfare, sumelectrconsumfare, summonconsumfare,
                   sumelectrdummyfare, summonrushfare, sumdiscount,
                   electroddfare, electroddfareacc, nousedate, empid,
                   yearchecks, checkbeginday, checkendday, ver,
                   summonthoddfareacc, depreciatefare, depreciatedate,
                   sumelectradddummyfare, refunddumpfare,
                   refundlimitconsumfare, nonameflag, temcardno, jgcardno,
                   cardtypeid, productid, asn, outid, cardtypepeopleid,
                   cardtypecityid, serverid, sendsys, numberopcount,
                   numbersaveopcount, numberoddfare, numberoddfareacc,
                   isnewcapecsys, summangefare, mangefarelastdate,
                   sumfreemangefare, customerunitcode, opdt, cardno,
                   monoddfare, accounttype, sumvicerushfare, prmhascard
              from base_customers
             where customerid = prmcustomerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

         select nvl (count (*), 0)
           into i_count2
           from base_customers_monticket
          where customerid = prmcustomerid
            and customerunitcode = prmcustomerunitcode
            and cardasn = prmcardno;

         if i_count2 > 0
         then
            insert into base_writeoff_monticket
                        (id, customerid, sumconsumefare, sumrdummyfare,
                         sumaddfare, sumaddfareacc, sumadddummyfare,
                         refunddumpfare, refundlimitconsumfare, ver,
                         customerunitcode, cardasn)
               select id, customerid, sumconsumefare, sumrdummyfare,
                      sumaddfare, sumaddfareacc, sumadddummyfare,
                      refunddumpfare, refundlimitconsumfare, ver,
                      customerunitcode, cardasn
                 from base_customers_monticket
                where customerid = prmcustomerid
                  and customerunitcode = prmcustomerunitcode
                  and cardasn = prmcardno;
         end if;

         select nvl (count (*), 0)
           into i_count3
           from base_writeoff_vicecard
          where customerid = prmcustomerid
            and customerunitcode = prmcustomerunitcode
            and cardasn = prmcardno;

         if i_count3 > 0
         then
            insert into base_writeoff_vicecard
                        (id, customerid, sumconsumefare, sumrdummyfare,
                         sumaddfare, sumaddfareacc, sumadddummyfare,
                         refunddumpfare, refundlimitconsumfare, ver,
                         customerunitcode, cardasn)
               select id, customerid, sumconsumefare, sumrdummyfare,
                      sumaddfare, sumaddfareacc, sumadddummyfare,
                      refunddumpfare, refundlimitconsumfare, ver,
                      customerunitcode, cardasn
                 from base_customers_vicecard
                where customerid = prmcustomerid
                  and customerunitcode = prmcustomerunitcode
                  and cardasn = prmcardno;
         end if;

         if i_count < 2
         then
            delete from base_customers_info a
                  where a.customerid = prmcustomerid
                    and customerunitcode = prmcustomerunitcode;
         end if;

         delete from base_customers a
               where a.customerid = prmcustomerid
                 and cardno = prmcardno
                 and customerunitcode = prmcustomerunitcode;

         if i_count2 > 0
         then
            delete from base_customers_monticket a
                  where customerid = prmcustomerid
                    and customerunitcode = prmcustomerunitcode
                    and cardasn = prmcardno;
         end if;

         if i_count3 > 0
         then
            delete from base_customers_vicecard a
                  where customerid = prmcustomerid
                    and customerunitcode = prmcustomerunitcode
                    and cardasn = prmcardno;
         end if;

         out_result := -1002;
         out_msg := '形成退款明细';

         select seq_rec_refundment_list.nextval
           into n_cashaccfc
           from dual;

         --形成退款明细--添加对此卡
         insert into rec_refundment_list
                     (id, customerid, elecoddfare,
                      depreciatefare, empid, psamcardno,
                      poscode, createdate, viceoddfare, mangefare,
                      otherfare, monoddfare, customerunitcode,
                      cardsn, cardno
                     )
              values (n_cashaccfc, prmcustomerid, n_out_elecoddfare,
                      n_out_depreciatefare, prmempid, prmpsamcardno,
                      prmposcode, sysdate, prmvicefare, prmmanagefare,
                      prmotherfare, prmmonfare, prmcustomerunitcode,
                      prmcardsn, prmcardno
                     );

         --更新授权额度
                 --只有在退金额时才会更新授权额度（只退卡成本费时不更新）
         if n_out_elecoddfare + prmvicefare + prmmonfare - prmotherfare > 0
         then
            begin
               --根据职员编号获取职员所属网点
               select a.dptcode
                 into v_netside
                 from base_emp a, base_dept b
                where a.dptcode = b.dptcode
                  and a.customerunitcode = b.customerunitcode
                  and a.empid = prmempid
                  and a.customerunitcode = prmcustomerunitcode;

               select a.isuse
                 into n_isuse
                 from base_chargeauth a
                where a.businesspoint = v_netside
                  and a.customerunitcode = prmcustomerunitcode;

               --启用充值授权
               if n_isuse = 1
               then
                  update base_chargeauth
                     set curoddfare =
                              curoddfare
                            + n_out_elecoddfare
                            + prmvicefare
                            + prmmonfare
                            - prmotherfare
                   where businesspoint = v_netside
                     and customerunitcode = prmcustomerunitcode;
               end if;
            exception
               when others
               then
                  rollback;
                  out_result := 21025;
                  out_msg := '获取充值授权额度信息异常';
                  return;
            end;
         end if;
      end if;

      --查询时加上冻结金额
      if prmoptype = 0
      then
         n_out_elecoddfare := n_out_elecoddfare + n_sumfreezefare;
         n_out_monoddfare := n_out_monoddfare + n_sumfreezefare_mon;
         n_out_summonoddfare := n_out_summonoddfare + n_sumfreezefare_vice;
      end if;

      --------返回退还金额
      open out_cursor for
         select n_out_elecoddfare as elecoddfare,
                n_out_depreciatefare as depreciatefare,
                n_out_summonoddfare as summonoddfare,
                n_out_sumrefundmentfare as sumrefundmentfare,
                n_out_viceoddfare as viceoddfare,
                to_char (v_validtimeend, 'rrrr-mm-dd') as validtimeend,
                to_char (v_monvalidtimeend, 'rrrr-mm-dd') as monvalidtimeend,
                n_out_monoddfare as monoddfare
           from dual;

      out_result := 100;
      out_msg := '销户成功';
      commit;
   exception
      when custom_exception
      then
         rollback;

         open out_cursor for
            select 0 as elecoddfare, 0 as depreciatefare, 0 as summonoddfare,
                   0 as sumrefundmentfare, 0 as viceoddfare,
                   '0001-01-01' as validtimeend,
                   '0001-01-01' as monvalidtimeend, 0 as monoddfare
              from dual;

         if out_result > 0
         then
            out_result := out_result * -1;
         else
            out_result := out_result;
         end if;

         if out_result != -9003
         then
            out_msg := '销户中出现错误，详细信息：' || out_msg;
         end if;
      when others
      then
         rollback;

         open out_cursor for
            select 0 as elecoddfare, 0 as depreciatefare, 0 as summonoddfare,
                   0 as sumrefundmentfare, 0 as viceoddfare,
                   '0001-01-01' as validtimeend,
                   '0001-01-01' as monvalidtimeend, 0 as monoddfare
              from dual;

         if out_result > 0
         then
            out_result := out_result * -1;
         else
            out_result := out_result;
         end if;

         out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
   end;

   procedure proc_stat_refundment (
      prmcustomerid          in       number,
      prmcardid              in       number,
      prmcardno              in       number,
      prmcardkind            in       number,
      prmcardtype            in       number,
      prmempid               in       number,
      prmposcode             in       number,
      prmpsamcardno          in       number,
      prmcardareaid          in       number,
      prmdeptcode            in       varchar2,
      prmdeptareaid          in       number,
      prmhascard             in       number,
      n_out_elecoddfare      in       number,
      n_out_depreciatefare   in       number,
      n_out_viceoddfare      in       number,                           --次卡
      n_out_monoddfare       in       number,
      n_otherfare            in       number,
      prmcustomerunitcode    in       varchar2,
      out_result             out      number,
      out_msg                out      varchar2
   )
   as
      /*
      --------------------------------------------------------------------------
      --存储过程：proc_stat_refundment
      --作　　者：朱鹏飞
      --时　　间：2009-07-25
      --说　　明：销户退款统计模块，注销内部过程
      --输入参数：
      --输出参数：
      --out_result：
      --    100 ：统计成功
      --------------------------------------------------------------------------
      */
      i_opmon             integer;
      v_opdt              varchar2 (20);
      n_elecacccode       number;
      n_monacccode        number;
      n_viceacccode       number;
      n_otheracccode      number;                                  --退卡扣费
      n_writeoffacccode   number;
   begin
      v_opdt := to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss');

      if prmhascard = 0                                            --无卡注销
      then
         n_elecacccode := 303;
         n_monacccode := 304;
         n_viceacccode := 305;
         n_writeoffacccode := 307;
      else                                                          --有卡注销
         n_elecacccode := 300;
         n_monacccode := 301;
         n_viceacccode := 302;
         n_writeoffacccode := 306;
      end if;

      n_otheracccode := 708;

      --更新账本系统余额，保持系统平衡
      update base_customers a
         set electroddfareacc = electroddfareacc - n_out_elecoddfare,
             numberoddfareacc = numberoddfareacc - n_out_viceoddfare,
             summonthoddfareacc = summonthoddfareacc - n_out_monoddfare
       where a.customerid = prmcustomerid and id = prmcardid;

-------------进行账目的即时统计-----------------------------------------
         --统计电子钱包余额退款
      pkg_st_payment.proc_custdataaccount_online (v_opdt,
                                                  n_out_elecoddfare,
                                                  n_elecacccode, --prmacccode,
                                                  0,
                                                  prmcardkind,
                                                  prmcardtype,
                                                  prmempid,
                                                  prmposcode,
                                                  prmpsamcardno,
                                                  0,           --prmbuslineid,
                                                  prmdeptcode,
                                                  0,               --prmbusid,
                                                  1,          --prmwallettype,
                                                  0,            --prmopertype,
                                                  prmcustomerunitcode,
                                                  out_msg,
                                                  out_result
                                                 );

      if out_result <> 100
      then
         return;
      end if;

      --次卡钱包余额退款
      pkg_st_payment.proc_custdataaccount_online (v_opdt,
                                                  n_out_viceoddfare,
                                                  n_viceacccode, --prmacccode,
                                                  0,
                                                  prmcardkind,
                                                  prmcardtype,
                                                  prmempid,
                                                  prmposcode,
                                                  prmpsamcardno,
                                                  0,           --prmbuslineid,
                                                  prmdeptcode,
                                                  0,               --prmbusid,
                                                  1,          --prmwallettype,
                                                  0,            --prmopertype,
                                                  prmcustomerunitcode,
                                                  out_msg,
                                                  out_result
                                                 );

      if out_result <> 100
      then
         return;
      end if;

      --统计销户张数
      pkg_st_payment.proc_custdataaccount_online (v_opdt,
                                                  0,
                                                  n_writeoffacccode,
                                                  --prmacccode,
                                                  0,
                                                  prmcardkind,
                                                  prmcardtype,
                                                  prmempid,
                                                  prmposcode,
                                                  prmpsamcardno,
                                                  0,           --prmbuslineid,
                                                  prmdeptcode,
                                                  0,               --prmbusid,
                                                  1,          --prmwallettype,
                                                  0,            --prmopertype,
                                                  prmcustomerunitcode,
                                                  out_msg,
                                                  out_result
                                                 );

      if out_result <> 100
      then
         return;
      end if;

      --统计退还折旧费统计
      pkg_st_payment.proc_custdataaccount_online (v_opdt,
                                                  n_out_depreciatefare,
                                                  704,           --prmacccode,
                                                  0,
                                                  prmcardkind,
                                                  prmcardtype,
                                                  prmempid,
                                                  prmposcode,
                                                  prmpsamcardno,
                                                  0,           --prmbuslineid,
                                                  prmdeptcode,
                                                  0,               --prmbusid,
                                                  1,          --prmwallettype,
                                                  0,            --prmopertype,
                                                  prmcustomerunitcode,
                                                  out_msg,
                                                  out_result
                                                 );

      if out_result <> 100
      then
         return;
      end if;

      --统计退卡扣费
      pkg_st_payment.proc_custdataaccount_online (v_opdt,
                                                  n_otherfare,
                                                  n_otheracccode,
                                                  --prmacccode,
                                                  0,
                                                  prmcardkind,
                                                  prmcardtype,
                                                  prmempid,
                                                  prmposcode,
                                                  prmpsamcardno,
                                                  0,           --prmbuslineid,
                                                  prmdeptcode,
                                                  0,               --prmbusid,
                                                  1,          --prmwallettype,
                                                  0,            --prmopertype,
                                                  prmcustomerunitcode,
                                                  out_msg,
                                                  out_result
                                                 );

      if out_result <> 100
      then
         return;
      end if;

      -----以下为统计月票月份退还金额-------------------------------
      pkg_st_payment.proc_custdataaccount_online (v_opdt,
                                                  n_out_monoddfare,
                                                  n_monacccode,  --prmacccode,
                                                  0,
                                                  prmcardkind,
                                                  prmcardtype,
                                                  prmempid,
                                                  prmposcode,
                                                  prmpsamcardno,
                                                  0,           --prmbuslineid,
                                                  prmdeptcode,
                                                  0,               --prmbusid,
                                                  1,          --prmwallettype,
                                                  0,            --prmopertype,
                                                  prmcustomerunitcode,
                                                  out_msg,
                                                  out_result
                                                 );
      i_opmon := 1;
      out_result := 100;
      out_msg := '退款账目统计成功';
   end;

   procedure proc_vice_addfreezefare (
      prmcustomerid         in       number,
      prmcardid             in       number,
      prmcardsn             in       number,
      prmcardno             in       number,
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmviceopcount        in       number,
      prmvicesaveopcount    in       number,
      prmviceoddfare        in       number,
      prmsumviceaddfare     in       number,
      prmposcode            in       number,
      prmpsamcardno         in       number,
      prmempid              in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   )
   as
       /*
      --------------------------------------------------------------------------
      --存储过程：proc_vice_addfreezefare
      --作　　者：吴琰书
      --时　　间：2011-08-08
      --说　　明：销户退款-领取次卡钱包未领冻结金额模块，注销内部过程
      --输入参数：
      --输出参数：
      --out_result：
      --    100 ：成功
      --------------------------------------------------------------------------
      */
      i_count              integer;
      n_sumfreezefare      number (10, 2);
      n_planid             number;
      v_deptcode           varchar (10);
      i_deptareaid         integer;
      i_month              integer;
      n_billno             number;
      row_vicefreezefare   number;
      row_vicehangdate     date;
      v_execsql            varchar (1000);
      n_thisviceoddfare    number (10, 2);
      n_cashaccfc          number;
   begin
      n_billno := 0;
      n_planid := 0;
      out_msg := '';

      --判断是否有次卡钱包未决记录
      select count (*)
        into i_count
        from rec_vicecard_cash_plan a
       where a.customerid = prmcustomerid
         and customerunitcode = prmcustomerunitcode
         and cardno = prmcardno;

      if i_count > 0
      then
         out_result := -1550;
         out_msg := '次卡钱包存在领款未决记录无法注销';
         return;
      end if;

      --判断是否有冻结金额未决记录
      select count (*)
        into i_count
        from rec_freezefare_acc a
       where a.cardid = prmcardid
         and (   a.freezefareflag = 2
              or a.monthfreezefareflag = 2
              or a.vicefreezefareflag = 2
             );

      if i_count > 0
      then
         out_result := -1551;
         out_msg := '存在未决状态的冻结金额记录无法注销';
         return;
      end if;

      --判断冻结金额记录是否有异常情况
      select count (*)
        into i_count
        from rec_freezefare_acc a
       where a.cardid = prmcardid and a.cardsn > prmcardsn;

      if i_count > 0
      then
         out_result := -1552;
         out_msg := '冻结金额记录异常';
         return;
      end if;

      -------一、领取次卡钱包可领冻结金额--------------------------------------

      --1、返回次卡钱包冻结金额
      select sum (nvl (a.vicefreezefare, 0))
        into n_sumfreezefare
        from rec_freezefare_acc a
       where a.cardid = prmcardid and a.vicefreezefareflag = 0;

      --获取申请流水号
      select seq_cash_plan.nextval
        into n_planid
        from dual;

      out_result := -1553;
      out_msg := '形成领款申请记录';

      --形成领款记录时，以数据库金额为准
      insert into rec_vicecard_cash_plan
                  (planid, customerid, cardno, cardsn,
                   cardtypedetailid, sumviceaddfare, viceoddfare,
                   viceoddfarepre, viceopfare, vicedummyopfare,
                   vicesaveopcount, viceopcount, status, acccode, opdt,
                   description, areaid, cardkind, poscode,
                   psamcardno, empid, dealtype, wallettype, tac, samtradeno,
                   ver, customerunitcode
                  )
           values (n_planid, prmcustomerid, prmcardno, prmcardsn,
                   prmcardtypedetailid, prmsumviceaddfare, 0,
                   prmviceoddfare, n_sumfreezefare, 0,
                   prmvicesaveopcount, prmviceopcount, 1, 502, sysdate,
                   '次卡钱包冻结金额', 0, prmcardkind, prmposcode,
                   prmpsamcardno, prmempid, 0, 0, 0, 0,
                   0, prmcustomerunitcode
                  );

      out_result := -1554;
      out_msg := '形成领款申请记录日志';

      insert into rec_vicecard_cash_plan_log
                  (planid, customerid, cardno, cardsn,
                   cardtypedetailid, sumviceaddfare, viceoddfare,
                   viceoddfarepre, viceopfare, vicesaveopcount,
                   viceopcount, status, acccode, opdt, description,
                   cardkind, poscode, psamcardno, empid, dealtype,
                   wallettype, tac, samtradeno, ver, customerunitcode
                  )
           values (n_planid, prmcustomerid, prmcardno, prmcardsn,
                   prmcardtypedetailid, prmsumviceaddfare, 0,
                   prmviceoddfare, n_sumfreezefare, prmvicesaveopcount,
                   prmviceopcount, 0, 502, sysdate, '次卡钱包冻结金额',
                   prmcardkind, prmposcode, prmpsamcardno, prmempid, 0,
                   0, 0, 0, 0, prmcustomerunitcode
                  );

      --获取交易记录流水号
      select seq_vicecard_cash.nextval
        into n_cashaccfc
        from dual;

-- 形成充值明细记录
      out_result := -1555;
      out_msg := '形成次卡钱包充值明细！';

      insert into rec_vicecard_cash
                  (cashaccfc, opdt, customerid, cardno, cardsn,
                   cardtypedetailid, cardkind, sumviceaddfare,
                   viceopcount, vicesaveopcount,
                   viceoddfare, viceoddfarepre, vicedummyopfare,
                   viceopfare, acccode, dscrp, poscode, dealtype,
                   samcardno, samtradeno, planid, uploaddate, empid,
                   wallettype, tac, customerunitcode
                  )
           values (n_cashaccfc, sysdate, prmcustomerid, prmcardno, prmcardsn,
                   prmcardtypedetailid, prmcardkind, prmsumviceaddfare,
                   prmviceopcount + 1, prmvicesaveopcount + 1,
                   prmviceoddfare + n_sumfreezefare, prmviceoddfare, 0,
                   n_sumfreezefare, 502, '次卡钱包冻结金额', prmposcode, 1,
                   prmpsamcardno, 0, n_planid, sysdate, prmempid,
                   1, 0, prmcustomerunitcode
                  );

      out_result := -1556;
      out_msg := '形成充值明细记录开始';

      --形成申请发放记录
      insert into rec_vicecard_cash_plan_putout
                  (planid, customerid, cardno, cardsn, cardtypedetailid,
                   sumviceaddfare, viceoddfare, viceoddfarepre,
                   vicedummyopfare, viceopfare, vicesaveopcount, viceopcount,
                   status, acccode, opdt, description, cardkind, poscode,
                   psamcardno, empid, dealtype, wallettype, tac, samtradeno,
                   areaid, ver, customerunitcode)
         (select planid, customerid, cardno, cardsn, cardtypedetailid,
                 prmsumviceaddfare, prmviceoddfare + n_sumfreezefare,
                 prmviceoddfare, 0, n_sumfreezefare, prmvicesaveopcount + 1,
                 prmviceopcount + 1, a.status, acccode, opdt, description,
                 cardkind, prmposcode, prmpsamcardno, prmempid, 1, 1, 0, 0, 0,
                 ver, prmcustomerunitcode
            from rec_vicecard_cash_plan a
           where planid = n_planid);

      --删除申请明细
      delete from rec_vicecard_cash_plan
            where planid = n_planid;

      --更新冻结金额已领
      update rec_freezefare_acc a
         set a.vicefreezefareflag = 1
       where a.cardid = prmcardid and a.vicefreezefareflag = 0;

      update base_customers a
         set numberoddfare = numberoddfare + n_sumfreezefare,
             numberopcount = prmviceopcount + 1,
             numbersaveopcount = prmvicesaveopcount + 1
       where a.customerid = prmcustomerid
         and customerunitcode = prmcustomerunitcode
         and cardno = prmcardno;

      select a.dptcode
        into v_deptcode
        from base_emp a
       where a.empid = prmempid and customerunitcode = prmcustomerunitcode;

      out_result := -1019;
      out_msg := '充值金额账目及时统计';
      pkg_st_payment.proc_custdataaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             n_sumfreezefare,
                                             502,           --次卡钱包冻结金额
                                             0,
                                             prmcardkind,
                                             --卡类型 1：m1卡 2：cpu卡
                                             prmcardtypedetailid,
                                             --卡类型，普通卡，月卡，老年卡等
                                             prmempid,
                                             --充值员或者司机id
                                             prmposcode,
                                             --设备唯一运营编号
                                             prmpsamcardno,
                                             --sam卡号
                                             0,                       --线路id
                                             v_deptcode,
                                             0,                     --车辆编号
                                             3,
                                             --钱包类型 1电子 2月票 3 次卡钱包
                                             0,
                                             --操作类型 0：正常 1：回滚
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

      if out_result <> 100
      then
         out_result := out_result;
         out_msg := out_msg;
         return;
      end if;

      out_msg := '领次卡钱包未领冻结金额成功';
      out_result := 100;
   end;

   procedure proc_elec_addfreezefare (
      prmcustomerid         in       number,
      prmcardid             in       number,
      prmcardsn             in       number,
      prmcardno             in       number,
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmelecopcount        in       number,
      prmelecsaveopcount    in       number,
      prmelecoddfare        in       number,
      prmsumelecaddfare     in       number,
      prmcustareaid         in       number,
      prmposcode            in       number,
      prmpsamcardno         in       number,
      prmempid              in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   )
   as
       /*
      --------------------------------------------------------------------------
      --存储过程：proc_elec_addfreezefare
      --作　　者：朱鹏飞
      --时　　间：2009-07-25
      --说　　明：销户退款-领取电子钱包未领冻结金额模块，注销内部过程
      --输入参数：
      --输出参数：
      --out_result：
      --    100 ：成功
      --------------------------------------------------------------------------
      */
      i_count             integer;
      n_sumfreezefare     number (10, 2);
      n_planid            number;
      v_deptcode          varchar (10);
      i_deptareaid        integer;
      i_month             integer;
      n_billno            number;
      row_monfreezefare   number;
      row_monhangdate     date;
      v_execsql           varchar (1000);
      n_thismonoddfare    number (10, 2);
      n_cashaccfc         number;
   begin
      n_billno := 0;
      n_planid := 0;
      out_msg := '';

      --判断是否有电子钱包未决记录
      select count (*)
        into i_count
        from rec_electtron_cash_plan a
       where a.customerid = prmcustomerid
         and customerunitcode = prmcustomerunitcode
         and cardno = prmcardno;

      if i_count > 0
      then
         out_result := -1003;
         out_msg := '电子钱包存在领款未决记录无法注销';
         return;
      end if;

      --判断是否有冻结金额未决记录
      select count (*)
        into i_count
        from rec_freezefare_acc a
       where a.cardid = prmcardid
         and (   a.freezefareflag = 2
              or a.monthfreezefareflag = 2
              or a.vicefreezefareflag = 2
             );

      if i_count > 0
      then
         out_result := -1003;
         out_msg := '存在未决状态的冻结金额记录无法注销';
         return;
      end if;

      --判断冻结金额记录是否有异常情况
      select count (*)
        into i_count
        from rec_freezefare_acc a
       where a.cardid = prmcardid and a.cardsn > prmcardsn;

      if i_count > 0
      then
         out_result := -1002;
         out_msg := '冻结金额记录异常';
         return;
      end if;

      -------一、领取电子钱包可领冻结金额--------------------------------------

      --1、返回电子钱包冻结金额
      select sum (nvl (a.freezefare, 0))
        into n_sumfreezefare
        from rec_freezefare_acc a
       where a.cardid = prmcardid and a.freezefareflag = 0;

      --获取申请流水号
      select seq_cash_plan.nextval
        into n_planid
        from dual;

      out_result := -1027;
      out_msg := '形成领款申请记录';

      --形成领款记录时，以数据库金额为准
      insert into rec_electtron_cash_plan
                  (planid, customerid, cardno, cardsn,
                   cardtypedetailid, sumelectraddfare, electroddfare,
                   electroddfarepre, electropfare, electrdummyopfare,
                   electrsaveopcount, electropcount, status, acccode, opdt,
                   description, cardkind, poscode,
                   psamcardno, empid, dealtype, wallettype, tac, samtradeno,
                   ver, customerunitcode
                  )
           values (n_planid, prmcustomerid, prmcardno, prmcardsn,
                   prmcardtypedetailid, prmsumelecaddfare, 0,
                   prmelecoddfare, n_sumfreezefare, 0,
                   prmelecsaveopcount, prmelecopcount, 1, 500, sysdate,
                   '电子钱包冻结金额', prmcardkind, prmposcode,
                   prmpsamcardno, prmempid, 0, 0, 0, 0,
                   0, prmcustomerunitcode
                  );

      out_result := -1028;
      out_msg := '形成领款申请记录日志';

      insert into rec_electtron_cash_plan_log
                  (planid, customerid, cardno, cardsn,
                   cardtypedetailid, sumelectraddfare, electroddfare,
                   electroddfarepre, electropfare, electrsaveopcount,
                   electropcount, status, acccode, opdt, description,
                   cardkind, poscode, psamcardno, empid, dealtype,
                   wallettype, tac, samtradeno, ver, customerunitcode
                  )
           values (n_planid, prmcustomerid, prmcardno, prmcardsn,
                   prmcardtypedetailid, prmsumelecaddfare, 0,
                   prmelecoddfare, n_sumfreezefare, prmelecsaveopcount,
                   prmelecopcount, 0, 500, sysdate, '电子钱包冻结金额',
                   prmcardkind, prmposcode, prmpsamcardno, prmempid, 0,
                   0, 0, 0, 0, prmcustomerunitcode
                  );

      --获取交易记录流水号
      select seq_electtron_cash.nextval
        into n_cashaccfc
        from dual;

-- 形成充值明细记录
      out_result := -1018;
      out_msg := '形成电子钱包充值明细！';

      insert into rec_electtron_cash
                  (cashaccfc, opdt, customerid, cardno, cardsn,
                   cardtypedetailid, cardkind, sumelectraddfare,
                   electropcount, electrsaveopcount,
                   electroddfare, electroddfarepre, electrdummyopfare,
                   electropfare, acccode, dscrp, poscode, dealtype,
                   samcardno, samtradeno, planid, uploaddate, empid,
                   wallettype, tac, customerunitcode
                  )
           values (n_cashaccfc, sysdate, prmcustomerid, prmcardno, prmcardsn,
                   prmcardtypedetailid, prmcardkind, prmsumelecaddfare,
                   prmelecopcount + 1, prmelecsaveopcount + 1,
                   prmelecoddfare + n_sumfreezefare, prmelecoddfare, 0,
                   n_sumfreezefare, 500, '电子钱包冻结金额', prmposcode, 1,
                   prmpsamcardno, 0, n_planid, sysdate, prmempid,
                   1, 0, prmcustomerunitcode
                  );

      out_result := -1023;
      out_msg := '形成充值明细记录开始';

      --形成申请发放记录
      insert into rec_electtron_cash_plan_putout
                  (planid, customerid, cardno, cardsn, cardtypedetailid,
                   sumelectraddfare, electroddfare, electroddfarepre,
                   electrdummyopfare, electropfare, electrsaveopcount,
                   electropcount, status, acccode, opdt, description,
                   cardkind, poscode, psamcardno, empid, dealtype, wallettype,
                   tac, samtradeno, ver, customerunitcode)
         (select planid, customerid, cardno, cardsn, cardtypedetailid,
                 prmsumelecaddfare, prmelecoddfare + n_sumfreezefare,
                 prmelecoddfare, 0, n_sumfreezefare, prmelecsaveopcount + 1,
                 prmelecopcount + 1, a.status, acccode, opdt, description,
                 cardkind, prmposcode, prmpsamcardno, prmempid, 1, 1, 0, 0,
                 ver, prmcustomerunitcode
            from rec_electtron_cash_plan a
           where planid = n_planid);

      --删除申请明细
      delete from rec_electtron_cash_plan
            where planid = n_planid;

      --更新冻结金额已领
      update rec_freezefare_acc a
         set a.freezefareflag = 1
       where a.cardid = prmcardid and a.freezefareflag = 0;

      update base_customers a
         set electroddfare = electroddfare + n_sumfreezefare,
             electropcount = prmelecopcount + 1,
             electrsaveopcount = prmelecsaveopcount + 1
       where a.id = prmcardid;

      select a.dptcode
        into v_deptcode
        from base_emp a
       where a.empid = prmempid and a.customerunitcode = prmcustomerunitcode;

      out_result := -1019;
      out_msg := '充值金额账目及时统计';
      pkg_st_payment.proc_custdataaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             n_sumfreezefare,
                                             500,
                                             0,
                                             prmcardkind,
                                             --卡类型 1：m1卡 2：cpu卡
                                             prmcardtypedetailid,
                                             --卡类型，普通卡，月卡，老年卡等
                                             prmempid,
                                             --充值员或者司机id
                                             prmposcode,
                                             --设备唯一运营编号
                                             prmpsamcardno,
                                             --sam卡号
                                             0,                       --线路id
                                             v_deptcode,
                                             0,                     --车辆编号
                                             1,
                                             --钱包类型 1电子 2月票
                                             0,
                                             --操作类型 0：正常 1：回滚
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

      if out_result <> 100
      then
         out_result := out_result;
         out_msg := out_msg;
         return;
      end if;

      out_msg := '领电子钱包未领冻结金额成功';
      out_result := 100;
   end;

   procedure proc_mon_addfreezefare (
      prmcustomerid         in       number,
      prmcardid             in       number,
      prmcardsn             in       number,
      prmcardno             in       number,
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmviceopcount        in       number,
      prmvicesaveopcount    in       number,
      prmviceoddfare        in       number,
      prmsumviceaddfare     in       number,
      prmposcode            in       number,
      prmpsamcardno         in       number,
      prmempid              in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   )
   as
       /*
      --------------------------------------------------------------------------
      --存储过程：proc_vice_addfreezefare
      --作　　者：吴琰书
      --时　　间：2011-08-08
      --说　　明：销户退款-领取次卡钱包未领冻结金额模块，注销内部过程
      --输入参数：
      --输出参数：
      --out_result：
      --    100 ：成功
      --------------------------------------------------------------------------
      */
      i_count              integer;
      n_sumfreezefare      number (10, 2);
      n_planid             number;
      v_deptcode           varchar (10);
      i_deptareaid         integer;
      i_month              integer;
      n_billno             number;
      row_vicefreezefare   number;
      row_vicehangdate     date;
      v_execsql            varchar (1000);
      n_thisviceoddfare    number (10, 2);
      n_cashaccfc          number;
   begin
      n_billno := 0;
      n_planid := 0;
      out_msg := '';

      --判断是否有次卡钱包未决记录
      select count (*)
        into i_count
        from rec_monticket_cash_plan a
       where a.customerid = prmcustomerid
         and customerunitcode = prmcustomerunitcode
         and cardno = prmcardno;

      if i_count > 0
      then
         out_result := -1550;
         out_msg := '次卡钱包存在领款未决记录无法注销';
         return;
      end if;

      --判断是否有冻结金额未决记录
      select count (*)
        into i_count
        from rec_freezefare_acc a
       where a.cardid = prmcardid
         and (   a.freezefareflag = 2
              or a.monthfreezefareflag = 2
              or a.vicefreezefareflag = 2
             );

      if i_count > 0
      then
         out_result := -1551;
         out_msg := '存在未决状态的冻结金额记录无法注销';
         return;
      end if;

      --判断冻结金额记录是否有异常情况
      select count (*)
        into i_count
        from rec_freezefare_acc a
       where a.cardid = prmcardid and a.cardsn > prmcardsn;

      if i_count > 0
      then
         out_result := -1552;
         out_msg := '冻结金额记录异常';
         return;
      end if;

      -------一、领取次卡钱包可领冻结金额--------------------------------------

      --1、返回次卡钱包冻结金额
      select sum (nvl (a.monthfreezefare, 0))
        into n_sumfreezefare
        from rec_freezefare_acc a
       where a.cardid = prmcardid and a.monthfreezefareflag = 0;

      --获取申请流水号
      select seq_cash_plan.nextval
        into n_planid
        from dual;

      out_result := -1553;
      out_msg := '形成领款申请记录';

      --形成领款记录时，以数据库金额为准
      insert into rec_monticket_cash_plan
                  (planid, customerid, cardno, cardsn,
                   cardtypedetailid, sumviceaddfare, viceoddfare,
                   viceoddfarepre, viceopfare, vicedummyopfare,
                   vicesaveopcount, viceopcount, status, acccode, opdt,
                   description, cardkind, poscode,
                   psamcardno, empid, dealtype, wallettype, tac, samtradeno,
                   ver, customerunitcode
                  )
           values (n_planid, prmcustomerid, prmcardno, prmcardsn,
                   prmcardtypedetailid, prmsumviceaddfare, 0,
                   prmviceoddfare, n_sumfreezefare, 0,
                   prmvicesaveopcount, prmviceopcount, 1, 502, sysdate,
                   '次卡钱包冻结金额', prmcardkind, prmposcode,
                   prmpsamcardno, prmempid, 0, 0, 0, 0,
                   0, prmcustomerunitcode
                  );

      out_result := -1554;
      out_msg := '形成领款申请记录日志';

      insert into rec_monticket_cash_plan_log
                  (planid, customerid, cardno, cardsn,
                   cardtypedetailid, sumviceaddfare, viceoddfare,
                   viceoddfarepre, viceopfare, vicesaveopcount,
                   viceopcount, status, acccode, opdt, description,
                   cardkind, poscode, psamcardno, empid, dealtype,
                   wallettype, tac, samtradeno, ver, customerunitcode
                  )
           values (n_planid, prmcustomerid, prmcardno, prmcardsn,
                   prmcardtypedetailid, prmsumviceaddfare, 0,
                   prmviceoddfare, n_sumfreezefare, prmvicesaveopcount,
                   prmviceopcount, 0, 502, sysdate, '次卡钱包冻结金额',
                   prmcardkind, prmposcode, prmpsamcardno, prmempid, 0,
                   0, 0, 0, 0, prmcustomerunitcode
                  );

      --获取交易流水号
      select seq_monticket_cash.nextval
        into n_cashaccfc
        from dual;

-- 形成充值明细记录
      out_result := -1555;
      out_msg := '形成次卡钱包充值明细！';

      insert into rec_monticket_cash
                  (cashaccfc, opdt, customerid, cardno, cardsn,
                   cardtypedetailid, cardkind, sumviceaddfare,
                   viceopcount, vicesaveopcount,
                   viceoddfare, viceoddfarepre, vicedummyopfare,
                   viceopfare, acccode, dscrp, poscode, dealtype,
                   samcardno, samtradeno, planid, uploaddate, empid,
                   wallettype, tac, customerunitcode
                  )
           values (n_cashaccfc, sysdate, prmcustomerid, prmcardno, prmcardsn,
                   prmcardtypedetailid, prmcardkind, prmsumviceaddfare,
                   prmviceopcount + 1, prmvicesaveopcount + 1,
                   prmviceoddfare + n_sumfreezefare, prmviceoddfare, 0,
                   n_sumfreezefare, 502, '次卡钱包冻结金额', prmposcode, 1,
                   prmpsamcardno, 0, n_planid, sysdate, prmempid,
                   1, 0, prmcustomerunitcode
                  );

      out_result := -1556;
      out_msg := '形成充值明细记录开始';

      --形成申请发放记录
      insert into rec_monticket_cash_plan_putout
                  (planid, customerid, cardno, cardsn, cardtypedetailid,
                   sumviceaddfare, viceoddfare, viceoddfarepre,
                   vicedummyopfare, viceopfare, vicesaveopcount, viceopcount,
                   status, acccode, opdt, description, cardkind, poscode,
                   psamcardno, empid, dealtype, wallettype, tac, samtradeno,
                   areaid, ver, customerunitcode)
         (select planid, customerid, cardno, cardsn, cardtypedetailid,
                 prmsumviceaddfare, prmviceoddfare + n_sumfreezefare,
                 prmviceoddfare, 0, n_sumfreezefare, prmvicesaveopcount + 1,
                 prmviceopcount + 1, a.status, acccode, opdt, description,
                 cardkind, prmposcode, prmpsamcardno, prmempid, 1, 1, 0, 0, 0,
                 ver, prmcustomerunitcode
            from rec_monticket_cash_plan a
           where planid = n_planid);

      --删除申请明细
      delete from rec_monticket_cash_plan
            where planid = n_planid;

      --更新冻结金额已领
      update rec_freezefare_acc a
         set a.monthfreezefareflag = 1
       where a.cardid = prmcardid and a.monthfreezefareflag = 0;

      update base_customers a
         set monoddfare = monoddfare + n_sumfreezefare,
             monopcount = prmviceopcount + 1,
             monsaveopcount = prmvicesaveopcount + 1
       where a.customerid = prmcustomerid
         and customerunitcode = prmcustomerunitcode
         and cardno = prmcardno;

      select a.dptcode
        into v_deptcode
        from base_emp a
       where a.empid = prmempid and a.customerunitcode = prmcustomerunitcode;

      out_result := -1019;
      out_msg := '充值金额账目及时统计';
      pkg_st_payment.proc_custdataaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             n_sumfreezefare,
                                             501,           --次卡钱包冻结金额
                                             0,
                                             prmcardkind,
                                             --卡类型 1：m1卡 2：cpu卡
                                             prmcardtypedetailid,
                                             --卡类型，普通卡，月卡，老年卡等
                                             prmempid,
                                             --充值员或者司机id
                                             prmposcode,
                                             --设备唯一运营编号
                                             prmpsamcardno,
                                             --sam卡号
                                             0,                       --线路id
                                             v_deptcode,
                                             0,                     --车辆编号
                                             3,
                                             --钱包类型 1电子 2月票 3 次卡钱包
                                             0,
                                             --操作类型 0：正常 1：回滚
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

      if out_result <> 100
      then
         out_result := out_result;
         out_msg := out_msg;
         return;
      end if;

      out_msg := '领次卡钱包未领冻结金额成功';
      out_result := 100;
   end;

   procedure proc_mon_rushoddfare (
      prmcustomerid         in       number,
      prmcardsn             in       number,
      prmcardno             in       number,
      prmcardtypedetailid   in       number,
      prmcardkind           in       number,
      prmmonopcount         in       number,
      prmmonsaveopcount     in       number,
      prmcustareaid         in       number,
      prmposcode            in       number,
      prmpsamcardno         in       number,
      prmempid              in       number,
      prmdeptcode           in       number,
      prmdeptareaid         in       number,
      out_result            out      number,
      out_msg               out      varchar2
   )
   as
       /*
      --------------------------------------------------------------------------
      --存储过程：proc_mon_rushoddfare
      --作　　者：朱鹏飞
      --时　　间：2009-07-25
      --说　　明：销户退款-月票余额冲零模块，注销内部过程
      --输入参数：
      --输出参数：
      --out_result：
      --    100 ：成功
      --------------------------------------------------------------------------
      */
      i_month        integer;
      n_monoddfare   number (10, 2);
      n_mondate      date;
      v_execsql      varchar2 (1000);
   begin
      out_result := -1001;
      out_msg := '对账户月票余额冲零';
            /*declare
               cursor cur_monoddfare
               is
                  select 1 as month, a.oddfare_month1 as monoddfare,
                         a.hangdate_month1 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid
                  union
                  select 2 as month, a.oddfare_month2 as monoddfare,
                         a.hangdate_month2 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid
                  union
                  select 3 as month, a.oddfare_month3 as monoddfare,
                         a.hangdate_month3 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid
                  union
                  select 4 as month, a.oddfare_month4 as monoddfare,
                         a.hangdate_month4 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid
                  union
                  select 5 as month, a.oddfare_month5 as monoddfare,
                         a.hangdate_month5 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid
                  union
                  select 6 as month, a.oddfare_month6 as monoddfare,
                         a.hangdate_month6 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid
                  union
                  select 7 as month, a.oddfare_month7 as monoddfare,
                         a.hangdate_month7 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid
                  union
                  select 8 as month, a.oddfare_month8 as monoddfare,
                         a.hangdate_month8 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid
                  union
                  select 9 as month, a.oddfare_month9 as monoddfare,
                         a.hangdate_month9 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid
                  union
                  select 10 as month, a.oddfare_month10 as monoddfare,
                         a.hangdate_month10 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid
                  union
                  select 11 as month, a.oddfare_month11 as monoddfare,
                         a.hangdate_month11 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid
                  union
                  select 12 as month, a.oddfare_month12 as monoddfare,
                         a.hangdate_month12 as mondate
                    from base_customers_monticket a
                   where a.customerid = prmcustomerid;
            begin
               open cur_monoddfare;

               loop
                  fetch cur_monoddfare
                   into i_month, n_monoddfare, n_mondate;

                  exit when cur_monoddfare%notfound;

                  if (n_mondate < trunc (sysdate))
                  then
                     out_msg := '更新月票卡余额';
                     out_result := -1005;
                     --更新月票卡余额
                     v_execsql :=
                           'update base_customers_monticket a set a.oddfare_month'
                        || i_month
                        || ' = 0 where a.customerid = '
                        || prmcustomerid;

                     execute immediate v_execsql;

                     --更新账本月票系统余额
                     update base_customers a
                        set summonthoddfareacc = summonthoddfareacc - n_monoddfare
                      where a.customerid = prmcustomerid;

                     out_msg := '形成冲零明细';
                     out_result := -1004;

                     insert into rec_monticket_reset
                                 (customerid, cardno, cardsn, createdate,
                                  cardtypedetailid, cardkind, monopcount,
                                  monsaveopcount, rushfare, hangdatemonth, planid,
                                  billno, acccode, dscrp, poscode, psamcardno,
                                  empid, areaid
                                 )
                          values (prmcustomerid, prmcardno, prmcardsn, sysdate,
                                  prmcardtypedetailid, prmcardkind, prmmonopcount,
                                  prmmonsaveopcount, n_monoddfare, n_mondate, 0,
                                  0, 900, '月票冲零', prmposcode, prmpsamcardno,
                                  prmempid, prmcustareaid
                                 );

                     out_msg := '冲零统计';
                     out_result := -1005;
                     --统计冲零数据
                     pkg_st_payment.proc_custdataaccount_online
                                                  (to_char (sysdate,
                                                            'yyyy-mm-dd hh24:mi:ss'
                                                           ),
                                                   n_monoddfare,
                                                   900,
                                                   0,             --prmdiscountfare,
                                                   prmcardkind,
                                                   prmcardtypedetailid,
                                                   prmempid,
                                                   prmposcode,
                                                   prmpsamcardno,
                                                   0,                --prmbuslineid,
                                                   prmdeptcode,
                                                   0,
                                                   --prmbusid,
                                                   prmcustareaid,
                                                   prmdeptareaid,
                                                   2,               --prmwallettype,
                                                   0,                 --prmopertype,
                                                   out_msg,
                                                   out_result
                                                  );

                     if (out_result <> 100)
                     then
                        out_msg := '冲零统计中出错[' || out_msg || ']';
                        out_result := -1002;
                        --回滚事务后，直接退出存储过程,返回错误
                        return;
                     end if;
                  end if;
               end loop;

               close cur_monoddfare;
            end;
      */
      out_msg := '冲零结束';
      out_result := 100;
   exception
      when others
      then
         if out_result > 0
         then
            out_result := out_result * -1;
         else
            out_result := out_result;
         end if;

         out_msg := out_msg || '||' || sqlerrm;
   end;

   procedure proc_stat_refundmanagefare (
      prmcustomerid         in       number,                            --账号
      prmcardsn             in       number,                        --持卡序号
      prmcardno             in       number,
      prmposcode            in       number,       --终端设备唯一编号,必须存在
      prmpsamcardno         in       number,                    --终端psam卡号
      prmmanagefare         in       number,                      --管理费总额
      prmempid              in       number,                        --操作员id
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      --返回结果，100表示成功，其它表示失败
      out_msg               out      varchar2                   --返回提示信息
   )
   /*
     --------------------------------------------------------------------------
     --存储过程：proc_stat_refundmanagefare
     --作　　者：周晓娜
     --时　　间：2012-05-12
     --说　　明：退管理费统计
     --输入参数：
     --输出参数：
     --out_result：
     --    100 ：统计成功
     --------------------------------------------------------------------------
     */
   as
      i_count         number;
      v_empdept       varchar2 (20);
      i_empareaid     number;
      i_custareaid    number;
      i_curcardtype   number;
      i_curcardkind   number;
   begin
      -------检查账户是否存在-----------
      /*select nvl (count (*), 0)
        into i_count
        from base_customers
       where customerid = prmcustomerid
         and cardsn = prmcardsn
         and cardno = prmcardno;

      --验证客户账号
      if i_count = 0
      then
         out_result := -1001;
         out_msg := '卡库信息不匹配';
         return;
      end if;

      --检查操作职员及状态是否正常
      select count (*)
        into i_count
        from base_emp a
       where a.empid = prmempid and a.status = 1;

      if i_count = 0
      then
         out_result := -1002;
         out_msg := '职员信息异常empid:' || to_char (prmempid);
         return;
      end if;*/
      select a.dptcode, a.areaid
        into v_empdept, i_empareaid
        from base_emp a
       where a.empid = prmempid and customerunitcode = prmcustomerunitcode;

      --获取账户相关信息
      select a.cardtypedetailid, a.cardkind
        into i_curcardtype, i_curcardkind
        from base_customers a
       where customerid = prmcustomerid
         and cardno = prmcardno
         and customerunitcode = prmcustomerunitcode;

      --统计退还管理费
      pkg_st_payment.proc_custdataaccount_online
                                            (to_char (sysdate,
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     ),
                                             prmmanagefare,
                                             707,                --prmacccode,
                                             0,
                                             i_curcardkind,
                                             i_curcardtype,
                                             prmempid,
                                             prmposcode,
                                             prmpsamcardno,
                                             0,                --prmbuslineid,
                                             v_empdept,
                                             0,                    --prmbusid,
                                             1,
                                             --prmwallettype,
                                             0,                 --prmopertype,
                                             prmcustomerunitcode,
                                             out_msg,
                                             out_result
                                            );

      if out_result <> 100
      then
         out_result := out_result;
         out_msg := '管理费退款统计失败，' || out_msg;
         return;
      end if;

      out_result := 100;
      out_msg := '管理费退款统计成功';
   end;
end;

/
create or replace package        pkg_common
is
   procedure check_psam_emp_term (
      prmempid              in       number,                         --操作员
      prmtermid             in       number,                       --终端编号
      prmposcode            in       number,      --终端设备唯一编号,必须存在
      prmpsamcardno         in       number,                   --终端psam卡号
      prmcustomerunitcode   in       varchar2,                     --客户代码
      out_result            out      number,
      --返回结果，100表示成功，其它表示失败
      out_msg               out      varchar2
   );
end;


 
 
 
 /
create or replace package body        pkg_common
is
   procedure check_psam_emp_term (
      prmempid              in       number,                         --操作员
      prmtermid             in       number,                       --终端编号
      prmposcode            in       number,      --终端设备唯一编号,必须存在
      prmpsamcardno         in       number,                   --终端psam卡号
      prmcustomerunitcode   in       varchar2,                     --客户代码
      out_result            out      number,
      --返回结果，100表示成功，其它表示失败
      out_msg               out      varchar2
   )
   as
      vcount   number;
   begin
      --1、判断终端是否存在
      select count (*)
        into vcount
        from base_term a
       where a.poscode = prmposcode
         and a.customerunitcode = prmcustomerunitcode
         and a.isdelete = 0;

      if vcount <> 1
      then
         out_result := -1002;
         out_msg := '终端在系统中不存在！poscode：' || to_char (prmposcode);
         return;
      end if;

      --2、判断psam卡是否存在
      select count (*)
        into vcount
        from base_samcard a
       where a.samcardno = prmpsamcardno
         and a.customerunitcode = prmcustomerunitcode;

      if vcount <> 1
      then
         out_result := -1003;
         out_msg := 'psam号不存在！samcardno：' || to_char (prmpsamcardno);
         return;
      end if;

      --3、判断psam卡状态
      select state
        into vcount
        from base_samcard a
       where a.samcardno = prmpsamcardno
         and a.customerunitcode = prmcustomerunitcode;

      if vcount <> 1
      then
         out_result := -1005;
         out_msg := 'psam卡状态异常，验证失败！';
         return;
      end if;

      --4、操作员是否存在
      select count (*)
        into vcount
        from base_emp a, base_dept b
       where a.dptcode = b.dptcode
         and a.customerunitcode = b.customerunitcode
         and a.empid = prmempid
         and a.customerunitcode = prmcustomerunitcode;

      if vcount <> 1
      then
         out_result := -1;
         out_msg := '操作员不存在,验证失败！';
      end if;
   exception
      when others
      then
         rollback;
         out_result := out_result;
         out_msg := out_msg || '基本信息验证失败:' || sqlerrm;
   end;
end;

/
create or replace package pkg_cust_cash
is
   type refcursortype is ref cursor;           --游标类型定义，用于返回数据集

   procedure proc_request_electr_cash (
      --客户基本信息-------------
      prmcustomerid          in       number,                      --客户编号
      prmcardno              in       number,                          --卡号
      prmcardsn              in       number,                      --持卡序号
      prmelectrsaveopcount   in       number,            --申请前充值交易计数
      prmelectropcount       in       number,                      --消费计数
      prmcardkind            in       number,                        --卡类型
      prmcardtypedetailid    in       number,                    --卡类型小类
      prmopdt                in       varchar2,                    --操作时间
      --客户金额信息-------------
      prmsumelectraddfare    in       number,                        --卡总额
      prmelectroddfare       in       number,            --电子钱包充值前余额
      prmelectrdummyopfare   in       number,                      --虚充金额
      prmelectropfare        in       number,              --电子钱包实充金额
      --终端交易信息-------------
      prmposcode             in       number,                      --消费终端
      prmpsamcardno          in       number,                      --psam卡号
      prmempid               in       number,                    --充值员编号
      prmcardasn             in       number,
      --返回值-------------------
      prmplanid              out      number,                    --领款计划id
      prmcustomerunitcode    in       varchar2,                    --客户代码
      out_result             out      number,
      out_msg                out      varchar2
   );

   procedure proc_request_monticket_repeal (
      --客户基本信息-------------
      prmcustomerid         in       number,                       --客户编号
      prmcardno             in       number,                           --卡号
      prmcardsn             in       number,                       --持卡序号
      prmvicesaveopcount    in       number,             --申请前充值交易计数
      prmviceopcount        in       number,                       --消费计数
      prmcardkind           in       number,                         --卡类型
      prmcardtypedetailid   in       number,                     --卡类型小类
      prmopdt               in       varchar2,                     --操作时间
      --客户金额信息-------------
      prmsumviceaddfare     in       number,                         --卡总额
      prmviceoddfare        in       number,             --电子钱包消费后余额
      prmvicedummyopfare    in       number,                       --虚充金额
      prmviceopfare         in       number,               --电子钱包实充金额
      --终端交易信息-------------
      prmposcode            in       number,                       --消费终端
      prmpsamcardno         in       number,                       --psam卡号
      prmempid              in       number,                     --充值员编号
      prmcardasn            in       number,                     --充值员编号
      prmlimittimes         in       number,                       --每月限额
      prmmonthnum           in       number,                       --充值月份
      prmvalidtimestart     in       varchar2,                     --有效起日
      prmvalidtimeend       in       varchar2,                     --有效止日
      prmcustomerunitcode   in       varchar2,
      --返回值-------------------
      prmplanid             in out   number,                     --领款计划id
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_commit_monticket_repeal (
      --客户基本信息-------------
      prmcustomerid         in       number,                       --客户编号
      prmcardno             in       number,                           --卡号
      prmcardsn             in       number,                       --持卡序号
      prmvicesaveopcount    in       number,                       --操作计数
      prmviceopcount        in       number,                       --操作计数
      prmcardkind           in       number,
      prmcardtypedetailid   in       number,
      prmopdt               in       varchar2,                     --操作时间
      --客户金额信息-------------
      prmsumviceaddfare     in       number,                         --卡总额
      prmviceoddfare        in       number,             --电子钱包消费后余额
      prmvicedummyopfare    in       number,
      prmviceopfare         in       number,               --电子钱包消费金额
      prmviceoddfarepre     in       number,             --电子钱包充值前余额
      --终端交易信息-------------
      prmposcode            in       number,                       --消费终端
      prmpsamcardno         in       number,
      prmtac                in       varchar2,                    --tac验证码
      prmempid              in       number,                       --职员编号
      prmpsamtradeno        in       number,
      --返回值-------------------
      prmplanid             in       number,
      prmoldplanid          in       number,               --原要撤销的planid
      prmcardasn            in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_commit_vicecard_repeal (
      --客户基本信息-------------
      prmcustomerid         in       number,                       --客户编号
      prmcardno             in       number,                           --卡号
      prmcardsn             in       number,                       --持卡序号
      prmvicesaveopcount    in       number,                       --操作计数
      prmviceopcount        in       number,                       --操作计数
      prmcardkind           in       number,
      prmcardtypedetailid   in       number,
      prmopdt               in       varchar2,                     --操作时间
      --客户金额信息-------------
      prmsumviceaddfare     in       number,                         --卡总额
      prmviceoddfare        in       number,             --电子钱包消费后余额
      prmvicedummyopfare    in       number,
      prmviceopfare         in       number,               --电子钱包消费金额
      prmviceoddfarepre     in       number,             --电子钱包充值前余额
      --终端交易信息-------------
      prmposcode            in       number,                       --消费终端
      prmpsamcardno         in       number,
      prmtac                in       varchar2,                    --tac验证码
      prmempid              in       number,                       --职员编号
      prmpsamtradeno        in       number,
      --返回值-------------------
      prmplanid             in       number,
      prmoldplanid          in       number,               --原要撤销的planid
      prmcardasn            in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_request_vicecard_repeal (
      --客户基本信息-------------
      prmcustomerid         in       number,                       --客户编号
      prmcardno             in       number,                           --卡号
      prmcardsn             in       number,                       --持卡序号
      prmvicesaveopcount    in       number,             --申请前充值交易计数
      prmviceopcount        in       number,                       --消费计数
      prmcardkind           in       number,                         --卡类型
      prmcardtypedetailid   in       number,                     --卡类型小类
      prmopdt               in       varchar2,                     --操作时间
      --客户金额信息-------------
      prmsumviceaddfare     in       number,                         --卡总额
      prmviceoddfare        in       number,             --电子钱包消费后余额
      prmvicedummyopfare    in       number,                       --虚充金额
      prmviceopfare         in       number,               --电子钱包实充金额
      --终端交易信息-------------
      prmposcode            in       number,                       --消费终端
      prmpsamcardno         in       number,                       --psam卡号
      prmempid              in       number,                     --充值员编号
      prmcardasn            in       number,                     --充值员编号
      prmlimittimes         in       number,                       --每月限额
      prmmonthnum           in       number,                       --充值月份
      prmvalidtimestart     in       varchar2,                     --有效起日
      prmvalidtimeend       in       varchar2,                     --有效止日
      prmcustomerunitcode   in       varchar2,
      --返回值-------------------
      prmplanid             in out   number,                     --领款计划id
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_commit_electr_cash (
      --客户基本信息-------------
      prmcustomerid          in       number,                      --客户编号
      prmcardno              in       number,                          --卡号
      prmcardsn              in       number,                      --持卡序号
      prmelectrsaveopcount   in       number,                      --操作计数
      prmelectropcount       in       number,                      --操作计数
      prmcardkind            in       number,       --卡种类 1：m1卡 2：cpu卡
      prmcardtypedetailid    in       number,   --卡类型 普通卡 月卡 老年卡等
      prmopdt                in       varchar2,                    --操作时间
      --客户金额信息-------------
      prmsumelectraddfare    in       number,                        --卡总额
      prmelectroddfare       in       number,            --电子钱包消费后余额
      prmelectrdummyopfare   in       number,
      prmelectropfare        in       number,              --电子钱包消费金额
      prmelectroddfarepre    in       number,            --电子钱包充值前余额
      --终端交易信息-------------
      prmposcode             in       number,                      --消费终端
      prmpsamcardno          in       number,
      prmtac                 in       varchar2,                   --tac验证码
      prmempid               in       number,                      --职员编号
      prmpsamtradeno         in       number,
      --返回值-------------------
      prmplanid              in       number,
      prmcardasn             in       number,
      prmcustomerunitcode    in       varchar2,                    --客户代码
      out_result             out      number,
      out_msg                out      varchar2
   );

   procedure proc_rollback_electr_cash (
      --客户基本信息-------------
      prmcustomerid          in       number,                      --客户编号
      prmcardno              in       number,                          --卡号
      prmcardsn              in       number,                      --持卡序号
      prmelectrsaveopcount   in       number,                      --操作计数
      prmelectropcount       in       number,                      --操作计数
      --终端交易信息-------------
      prmposcode             in       number,                      --消费终端
      prmpsamcardno          in       number,
      prmempid               in       number,
      --返回值-------------
      prmplanid              in       number,
      prmcustomerunitcode    in       varchar2,
      out_result             out      number,
      out_msg                out      varchar2
   );

   procedure proc_cash_unsettled_process (
      --客户基本信息-------------
      prmcustomerid          in       number,                      --客户编号
      prmcardno              in       number,                          --卡号
      prmcardsn              in       number,                      --持卡序号
      prmcardkind            in       number,       --卡种类 1：m1卡 2：cpu卡
      prmcardtypedetailid    in       number,   --卡类型 普通卡 月卡 老年卡等
      prmopdt                in       varchar2,                    --操作时间
      --客户电子钱包信息-------------
      prmsumelectraddfare    in       number,                --电子钱包卡总额
      prmelectroddfare       in       number,                  --电子钱包余额
      prmelectrsaveopcount   in       number,              --电子钱包充值计数
      prmelectropcount       in       number,              --电子钱包消费计数
      --终端交易信息-------------
      prmposcode             in       number,                      --终端编号
      prmpsamcardno          in       number,                      --psam卡号
      prmempid               in       number,                        --操作员
      prmcardasn             in       number,                --卡片应用序列号
      --钱包类型----------------------------
      prmwallettype          in       varchar2,                --钱包启用标识
      --客户次卡信息----------------------------
      prmvicesaveopcount     in       number,              --次卡充值交易计数
      prmviceopcount         in       number,              --次卡消费交易计数
      prmviceoddfare         in       number,                  --次卡钱包余额
      --客户月票信息-----------------------------
      prmmonthsaveopcount    in       number,              --月票充值交易计数
      prmmonthopcount        in       number,              --月票消费交易计数
      prmmonthoddfare        in       number,                  --月票钱包余额
      --返回值-------------------
      prmcustomerunitcode    in       varchar2,                    --客户代码
      out_result             out      number,                        --返回值
      out_msg                out      varchar2                     --返回信息
   );

   procedure proc_request_month_cash (
      --客户基本信息-------------
      prmcustomerid         in       number,                       --客户编号
      prmcardno             in       number,                           --卡号
      prmcardsn             in       number,                       --持卡序号
      prmvicesaveopcount    in       number,             --申请前充值交易计数
      prmviceopcount        in       number,                       --消费计数
      prmcardkind           in       number,                         --卡类型
      prmcardtypedetailid   in       number,                     --卡类型小类
      prmopdt               in       varchar2,                     --操作时间
      --客户金额信息-------------
      prmsumviceaddfare     in       number,                         --卡总额
      prmviceoddfare        in       number,             --次卡钱包消费后余额
      prmvicedummyopfare    in       number,                       --虚充金额
      prmviceopfare         in       number,               --次卡钱包实充金额
      --终端交易信息-------------
      prmposcode            in       number,                       --消费终端
      prmpsamcardno         in       number,                       --psam卡号
      prmempid              in       number,                     --充值员编号
      prmcardasn            in       number,
      --返回值-------------------
      prmplanid             out      number,                     --领款计划id
      prmcustomerunitcode   in       varchar2,
      --根据卡结构改动，表结构新增字段
      prmlimittimes         in       number,               --每月消费限制次数
      prmmonthnum           in       number,                       --充值月数
      prmvalidtimestart     in       varchar2,                     --有效起日
      prmvalidtimeend       in       varchar2,                     --有效止日
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_commit_month_cash (
      --客户基本信息-------------
      prmcustomerid         in       number,                       --客户编号
      prmcardno             in       number,                           --卡号
      prmcardsn             in       number,                       --持卡序号
      prmvicesaveopcount    in       number,                       --操作计数
      prmviceopcount        in       number,                       --操作计数
      prmcardkind           in       number,
      prmcardtypedetailid   in       number,
      prmopdt               in       varchar2,                     --操作时间
      --客户金额信息-------------
      prmsumviceaddfare     in       number,                         --卡总额
      prmviceoddfare        in       number,             --次卡钱包消费后余额
      prmvicedummyopfare    in       number,
      prmviceopfare         in       number,               --次卡钱包消费金额
      prmviceoddfarepre     in       number,             --次卡钱包充值前余额
      --终端交易信息-------------
      prmposcode            in       number,                       --消费终端
      prmpsamcardno         in       number,
      prmtac                in       varchar2,                    --tac验证码
      prmempid              in       number,                       --职员编号
      prmpsamtradeno        in       number,
      --返回值-------------------
      prmplanid             in       number,
      prmcardasn            in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   --月票、次卡钱包清零
   procedure proc_build_month_rush (
      prmcustomerid         in       number,
      prmcardno             in       number,
      prmcardsn             in       number,
      prmmonsaveopcount     in       number,
      prmmonopcount         in       number,
      prmcardkind           in       number,
      prmcardtypedetailid   in       number,
      prmopdt               in       varchar2,
      prmhangdatemonth      in       date,
      prmhangdatemonthpre   in       date,
      prmposcode            in       number,
      prmempid              in       number,
      prmpsamcardno         in       number,
      prmmonoddfare         in       number,
      prmcustomerunitcode   in       varchar2,
      prmwallettype         in       number,
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_verify_baseinfo (
      prmcustomerid         in       number,
      prmcardno             in       number,
      prmcardsn             in       number,
      prmempid              in       number,
      prmsamcardno          in       number,
      prmposcode            in       number,
      prmcardasn            in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure getbillno (prmplanid in out number, prmbillno out number);

   procedure proc_rollback_month_cash (
      --客户基本信息-------------
      prmcustomerid         in       number,                       --客户编号
      prmcardno             in       number,                           --卡号
      prmcardsn             in       number,                       --持卡序号
      prmvicesaveopcount    in       number,                       --操作计数
      prmviceopcount        in       number,                       --操作计数
      --终端交易信息-------------
      prmposcode            in       number,                       --消费终端
      prmpsamcardno         in       number,
      prmempid              in       number,
      --返回值-------------
      prmplanid             in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

/*
   procedure proc_commit_month_cash (
      --客户基本信息-------------
      prmcustomerid         in       number,                        --客户编号
      prmcardno             in       number,                            --卡号
      prmcardsn             in       number,                        --持卡序号
      prmvicesaveopcount    in       number,                        --操作计数
      prmviceopcount        in       number,                        --操作计数
      prmcardkind           in       number,
      prmcardtypedetailid   in       number,
      prmopdt               in       varchar2,                      --操作时间
      --客户金额信息-------------
      prmsumviceaddfare     in       number,                          --卡总额
      prmviceoddfare        in       number,              --次卡钱包消费后余额
      prmvicedummyopfare    in       number,
      prmviceopfare         in       number,                --次卡钱包消费金额
      prmviceoddfarepre     in       number,              --次卡钱包充值前余额
      --终端交易信息-------------
      prmposcode            in       number,                        --消费终端
      prmpsamcardno         in       number,
      prmtac                in       varchar2,                     --tac验证码
      prmempid              in       number,                        --职员编号
      prmpsamtradeno        in       number,
      --返回值-------------------
      prmplanid             in       number,
      prmcardasn            in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );
*/
   procedure proc_request_electr_repeal (
      --客户基本信息-------------
      prmcustomerid          in       number,                      --客户编号
      prmcardno              in       number,                          --卡号
      prmcardsn              in       number,                      --持卡序号
      prmelectrsaveopcount   in       number,            --申请前充值交易计数
      prmelectropcount       in       number,                      --消费计数
      prmcardkind            in       number,                        --卡类型
      prmcardtypedetailid    in       number,                    --卡类型小类
      prmopdt                in       varchar2,                    --操作时间
      --客户金额信息-------------
      prmsumelectraddfare    in       number,                        --卡总额
      prmelectroddfare       in       number,            --电子钱包消费后余额
      prmelectrdummyopfare   in       number,                      --虚充金额
      prmelectropfare        in       number,              --电子钱包实充金额
      --终端交易信息-------------
      prmposcode             in       number,                      --消费终端
      prmpsamcardno          in       number,                      --psam卡号
      prmempid               in       number,                    --充值员编号
      prmcardasn             in       number,
      --返回值-------------------
      prmplanid              in out   number,                    --领款计划id
      prmcustomerunitcode    in       varchar2,
      out_result             out      number,
      out_msg                out      varchar2
   );

   procedure proc_commit_electr_repeal (
      --客户基本信息-------------
      prmcustomerid          in       number,                      --客户编号
      prmcardno              in       number,                          --卡号
      prmcardsn              in       number,                      --持卡序号
      prmelectrsaveopcount   in       number,                      --操作计数
      prmelectropcount       in       number,                      --操作计数
      prmcardkind            in       number,
      prmcardtypedetailid    in       number,
      prmopdt                in       varchar2,                    --操作时间
      --客户金额信息-------------
      prmsumelectraddfare    in       number,                        --卡总额
      prmelectroddfare       in       number,            --电子钱包消费后余额
      prmelectrdummyopfare   in       number,
      prmelectropfare        in       number,              --电子钱包消费金额
      prmelectroddfarepre    in       number,            --电子钱包充值前余额
      --终端交易信息-------------
      prmposcode             in       number,                      --消费终端
      prmpsamcardno          in       number,
      prmtac                 in       varchar2,                   --tac验证码
      prmempid               in       number,                      --职员编号
      prmpsamtradeno         in       number,
      --返回值-------------------
      prmplanid              in       number,
      prmoldplanid           in       number,              --原要撤销的planid
      prmcardasn             in       number,
      prmcustomerunitcode    in       varchar2,
      out_result             out      number,
      out_msg                out      varchar2
   );

 -----------------------------------------------------------------------------
--次卡钱包充值申请
   procedure proc_request_vicecard_cash (
      --客户基本信息-------------
      prmcustomerid         in       number,                       --客户编号
      prmcardno             in       number,                           --卡号
      prmcardsn             in       number,                       --持卡序号
      prmvicesaveopcount    in       number,             --申请前充值交易计数
      prmviceopcount        in       number,                       --消费计数
      prmcardkind           in       number,                         --卡类型
      prmcardtypedetailid   in       number,                     --卡类型小类
      prmopdt               in       varchar2,                     --操作时间
      --客户金额信息-------------
      prmsumviceaddfare     in       number,                         --卡总额
      prmviceoddfare        in       number,             --次卡钱包消费后余额
      prmvicedummyopfare    in       number,                       --虚充金额
      prmviceopfare         in       number,               --次卡钱包实充金额
      --终端交易信息-------------
      prmposcode            in       number,                       --消费终端
      prmpsamcardno         in       number,                       --psam卡号
      prmempid              in       number,                     --充值员编号
      prmcardasn            in       number,
      --返回值-------------------
      prmplanid             out      number,                     --领款计划id
      prmcustomerunitcode   in       varchar2,
      --根据卡结构改动，表结构新增字段
      prmlimittimes         in       number,               --每月消费限制次数
      prmmonthnum           in       number,                       --充值月数
      prmvalidtimestart     in       varchar2,                     --有效起日
      prmvalidtimeend       in       varchar2,                     --有效止日
      out_result            out      number,
      out_msg               out      varchar2
   );

   --次卡钱包充值提交
   procedure proc_commit_vicecard_cash (
      --客户基本信息-------------
      prmcustomerid         in       number,                       --客户编号
      prmcardno             in       number,                           --卡号
      prmcardsn             in       number,                       --持卡序号
      prmvicesaveopcount    in       number,                       --操作计数
      prmviceopcount        in       number,                       --操作计数
      prmcardkind           in       number,
      prmcardtypedetailid   in       number,
      prmopdt               in       varchar2,                     --操作时间
      --客户金额信息-------------
      prmsumviceaddfare     in       number,                         --卡总额
      prmviceoddfare        in       number,             --次卡钱包消费后余额
      prmvicedummyopfare    in       number,
      prmviceopfare         in       number,               --次卡钱包消费金额
      prmviceoddfarepre     in       number,             --次卡钱包充值前余额
      --终端交易信息-------------
      prmposcode            in       number,                       --消费终端
      prmpsamcardno         in       number,
      prmtac                in       varchar2,                    --tac验证码
      prmempid              in       number,                       --职员编号
      prmpsamtradeno        in       number,
      --返回值-------------------
      prmplanid             in       number,
      prmcardasn            in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   --次卡钱包充值回滚
   procedure proc_rollback_vicecard_cash (
      --客户基本信息-------------
      prmcustomerid         in       number,                       --客户编号
      prmcardno             in       number,                           --卡号
      prmcardsn             in       number,                       --持卡序号
      prmvicesaveopcount    in       number,                       --操作计数
      prmviceopcount        in       number,                       --操作计数
      --终端交易信息-------------
      prmposcode            in       number,                       --消费终端
      prmpsamcardno         in       number,
      prmempid              in       number,
      --返回值-------------
      prmplanid             in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );
    --空中圈存申请处理未决记录 (张垒 20131231)
   procedure proc_nfc_cash_unsettled (
      --客户基本信息-------------
      prmcustomerid          in       number,                      --客户编号
      prmcardno              in       number,                          --卡号
      prmcardsn              in       number,                      --持卡序号
      prmcardkind            in       number,       --卡种类 1：m1卡 2：cpu卡
      prmcardtypedetailid    in       number,   --卡类型 普通卡 月卡 老年卡等
      prmopdt                in       varchar2,                    --操作时间
      --客户电子钱包信息-------------
      prmsumelectraddfare    in       number,                --电子钱包卡总额
      prmelectroddfare       in       number,                  --电子钱包余额
      prmelectrsaveopcount   in       number,              --电子钱包充值计数
      prmelectropcount       in       number,              --电子钱包消费计数
      --终端交易信息-------------
      prmposcode             in       number,                      --终端编号
      prmpsamcardno          in       number,                      --psam卡号
      prmempid               in       number,                        --操作员
      prmcardasn             in       number,                --卡片应用序列号
      --钱包类型----------------------------
      prmwallettype          in       varchar2,                --钱包启用标识
      --客户次卡信息----------------------------
      prmvicesaveopcount     in       number,              --次卡充值交易计数
      prmviceopcount         in       number,              --次卡消费交易计数
      prmviceoddfare         in       number,                  --次卡钱包余额
      --客户月票信息-----------------------------
      prmmonthsaveopcount    in       number,              --月票充值交易计数
      prmmonthopcount        in       number,              --月票消费交易计数
      prmmonthoddfare        in       number,                  --月票钱包余额
      --返回值-------------------
      prmcustomerunitcode    in       varchar2,                    --客户代码
      out_result             out      number,                        --返回值
      out_msg                out      varchar2                     --返回信息
   );

   procedure proc_get_topup_detail (
      prmcustomerid         in       number,
      prmcardno             in       number,
      prmcustomerunitcode   in       varchar2,                      --客户代码
      out_cursor            out      refcursortype,
      out_result            out      number,
      out_msg               out      varchar2
   );
end;/
create or replace package body pkg_cust_cash
/* formatted on 18-二月-2010 (qp5 v5.182) */
is
    procedure proc_request_electr_cash (
        --客户基本信息-------------
        prmcustomerid          in     number,                       --客户编号
        prmcardno              in     number,                           --卡号
        prmcardsn              in     number,                       --持卡序号
        prmelectrsaveopcount   in     number,             --申请前充值交易计数
        prmelectropcount       in     number,                       --消费计数
        prmcardkind            in     number,                         --卡类型
        prmcardtypedetailid    in     number,                     --卡类型小类
        prmopdt                in     varchar2,                     --操作时间
        --客户金额信息-------------
        prmsumelectraddfare    in     number,                         --卡总额
        prmelectroddfare       in     number,             --电子钱包充值前余额
        prmelectrdummyopfare   in     number,                       --虚充金额
        prmelectropfare        in     number,               --电子钱包实充金额
        --终端交易信息-------------
        prmposcode             in     number,                       --消费终端
        prmpsamcardno          in     number,                       --psam卡号
        prmempid               in     number,                     --充值员编号
        prmcardasn             in     number,
        --返回值-------------------
        prmplanid                 out number,                     --领款计划id
        prmcustomerunitcode    in     varchar2,                     --客户代码
        out_result                out number,
        out_msg                   out varchar2)
    as
        /*
         --------------------------------------------------------------------------
         --修改标记：周晓娜 20120910
         --修改说明： 增加客户代码和一人多卡的处理和充值额度判断
         --------------------------------------------------------------------------
         --修改标记：周晓娜 20130312
         --修改说明： 申请记录表中dealtype（记录类型）字段重新定义赋值：
         -- 如果是申请成功的记录，值为1
         --如果是tac校验不通过的记录，值为0，此时记录的status改为2（因为只要执行提交操作能确定是写卡成功的记录）

         --------------------------------------------------------------------------
         --修改标记：周晓娜 20130606
         --修改说明： 增加充值员允许充值卡类型的判断（主要针对充值机充值卡类型的判断 ）
         ----------------------------------------------------------------------------
         --修改标记：周晓娜 20130726
         --修改说明： 增加充值终端的类型判断 如果是充值机终端的操作，增加充值终端是否有灰记录，
         --        1、如果终端有灰记录 则直接结束流程 并同时返回灰记录的id 此时返回的领款记录id为灰记录的id
         --         2、如果是正常的流程 终端没有灰记录 直接按照正常的流程进行
         --------------------------------------------------------------------------
         */
        vcount                    number;
        visbalance                number;
        vplanid                   number;
        vacccode         constant number := 100;        --固定电子钱包充值科目
        vaccdesc                  varchar (20);
        vempid                    number;
        vareaid                   number;
        velectrsaveopcount        number;
        vplanacccode              number;
        vplanacccodegroup         number;
        n_totalconsumfare         number (20, 2);               --累计消费金额
        n_refunddumpfare          number (10, 2);         --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2);               --最低消费限额
        v_paramvalue              varchar2 (20);                    --运行参数
        v_dptcode                 varchar2 (9);     --职员所属网点（部门编号）
        v_termdptcode             varchar2 (9);     --终端所属网点（部门编号）
        n_isuse                   number;               --是否启用网点授权额度
        n_curoddfare              number (20, 2);               --可用充值额度
        n_workstatus              number;         --状态：0正常状态，1透支状态
        d_limitenddate            date;                     --允许透支截止日期
        d_currdate                date;                             --当前日期
        n_maxlimitdate            number;                     --最大逾期（天）
        n_allowoverdraftfare      number (20, 2);               --允许透支金额
        v_cardtypename            varchar2 (20);                  --卡类型名称
        v_cashtypestr             varchar2 (500);         --允许充值卡类型集合
        n_termtypeid              number;
    begin
        --初始化变量
        prmplanid := -1;
        out_result := -1000;
        out_msg := '开始充值申请！';
        d_currdate := sysdate;                                  --系统当前日期
        --------------------------------------------------------------------------------

        --验证账户、设备、psam卡号、职员合法性
        out_msg := '开始基本信息验证';
        proc_verify_baseinfo (prmcustomerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if out_result <> 100
        then
            out_result := -1001;
            out_msg := '基本信信验证不通过' || out_msg;
            return;
        end if;

        ----增加充值机终端的灰记录判断--------------------------------
        select a.typeid
          into n_termtypeid
          from base_term a
         where     a.poscode = prmposcode
               and a.customerunitcode = prmcustomerunitcode;

        if n_termtypeid = 3               --终端是充值机时判断终端是否有灰记录
        then
            --判断终端是否有灰记录
            select count (a.planid)
              into vcount
              from rec_electtron_cash_plan a
             where     a.customerunitcode = prmcustomerunitcode
                   and a.poscode = prmposcode
                   and a.status = 1;

            if vcount <> 0
            then
                select a.planid
                  into vplanid
                  from rec_electtron_cash_plan a
                 where     a.customerunitcode = prmcustomerunitcode
                       and a.poscode = prmposcode
                       and a.status = 1;

                prmplanid := vplanid;
                out_result := -1014;
                out_msg := '充值机终端' || prmposcode || '存在灰记录！';
                return;
            end if;
        end if;

        -------------------------------------------------------------------
        out_result := -1005;
        out_msg := '获取该充值员允许充值卡类型失败！';

        select count (detailid)
          into vcount
          from base_cardtype_detail_temp
         where     customerunitcode = prmcustomerunitcode
               and detailid = prmcardtypedetailid;

        if vcount = 0
        then
            select a.detailname
              into v_cardtypename
              from base_cardtype_detail a
             where a.detailid = prmcardtypedetailid;
        else
            select detailname
              into v_cardtypename
              from base_cardtype_detail_temp
             where     customerunitcode = prmcustomerunitcode
                   and detailid = prmcardtypedetailid;
        end if;

        select a.cashcardtype
          into v_cashtypestr
          from base_emp a
         where     a.empid = prmempid
               and a.customerunitcode = prmcustomerunitcode;

        select count (*)
          into vcount
          from table (split (v_cashtypestr, ',')) a
         where a.column_value = prmcardtypedetailid;

        if vcount = 0
        then
            out_result := -1005;
            out_msg :=
                '该充值员没有卡类型' || v_cardtypename || '的充值权限！';
            return;
        end if;

        --------------------------------------------------------------------------------
        --验证交易金额合法性
        out_msg := '开始验证交易金额合法性';

        if (prmelectropfare < 0)               --or (prmelectrdummyopfare < 0)
        then
            out_result := -1002;
            out_msg := '交易金额必须大于0！';
            return;
        end if;

        --交易金额是充值交款金额和虚充金额的和，一定是大于，如果小于则为异常
        out_msg := '开始判断交易金额是否大于或者等于虚冲金额';

        if prmelectropfare < prmelectrdummyopfare
        then
            out_result := -1003;
            out_msg := '交易金额必须大于或等于虚充金额！';
            return;
        end if;

        --------------------------------------------------------------------------------

        ------------------------增加充值额度判断-------------------------------
        --根据职员编号获取网点编号
        out_msg := '根据职员编号获取网点编号';

        select a.dptcode
          into v_dptcode
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.empid = prmempid
               and a.customerunitcode = prmcustomerunitcode;

        --根据终端编号获取网点编号
        out_msg := '根据终端编号获取网点编号';

        select a.dptcode
          into v_termdptcode
          from base_term a
         where     a.poscode = prmposcode
               and a.customerunitcode = prmcustomerunitcode;

        out_msg := '判断出纳员、终端是否属于同一个网点';

        if v_dptcode <> v_termdptcode
        then
            out_result := -1007;
            out_msg := '出纳员、终端不属于同一个点';
            return;
        end if;

        --根据职员编号获取职员所属网点
        begin
            select a.curoddfare,
                   a.isuse,
                   a.workstatus,
                   a.maxlimitdate,
                   a.limitenddate,
                   a.allowoverdraftfare
              into n_curoddfare,
                   n_isuse,
                   n_workstatus,
                   n_maxlimitdate,
                   d_limitenddate,
                   n_allowoverdraftfare
              from base_chargeauth a
             where     a.businesspoint = v_dptcode
                   and a.customerunitcode = prmcustomerunitcode;

            --该充值网点启用充值授权额度
            if n_isuse = 1
            then
                --充值额度不足
                if n_curoddfare < prmelectropfare - prmelectrdummyopfare
                then
                    --当前状态为正常状态
                    if n_workstatus = 0
                    then
                        --此出纳员允许透支
                        if d_currdate + n_maxlimitdate > d_currdate
                        then
                            --透支额度不足
                            if n_allowoverdraftfare + n_curoddfare <
                                   prmelectropfare - prmelectrdummyopfare
                            then
                                out_result := -1009;
                                out_msg := '允许透支额度不足，不能充值';
                                return;
                            end if;

                            --更新当前状态为透支状态，允许透支截止日期=当前日期+最大逾期
                            update base_chargeauth
                               set workstatus = 1,
                                   limitenddate = d_currdate + n_maxlimitdate
                             where     businesspoint = v_dptcode
                                   and customerunitcode = prmcustomerunitcode;
                        --没有授权允许逾期天数
                        else
                            out_result := -1010;
                            out_msg := '超过充值授权最大逾期，不能充值';
                            return;
                        end if;
                    --当前状态为透支状态
                    else
                        --没有超过最大逾期截止日期
                        if d_currdate < d_limitenddate
                        then
                            if n_allowoverdraftfare <
                                   prmelectropfare - prmelectrdummyopfare
                            then
                                out_result := -1009;
                                out_msg := '允许透支额度不足，不能充值';
                                return;
                            end if;
                        --超过最大逾期截止日期
                        else
                            out_result := -1010;
                            out_msg := '超过充值授权最大逾期，不能充值';
                            return;
                        end if;
                    end if;
                end if;
            end if;
        exception
            when others
            then
                out_result := -1013;
                out_msg := '获取充值授权额度信息异常';
                return;
        end;

        ----------------------------------------------------------------------
        out_result := -1004;
        out_msg := '获取交易科目描述！';

        select count (*)
          into vcount
          from base_acc_type a
         where a.acccode = vacccode;

        if vcount = 0
        then
            out_result := -1004;
            out_msg := '交易科目不存在acccode:' || to_char (vacccode);
            return;
        end if;

        select accdscrp
          into vaccdesc
          from base_acc_type
         where acccode = vacccode;

        --------------------------------------------------------------------------------
        out_msg := '判断是否存在电子钱包未觉记录';

        select nvl (count (*), 0)
          into vcount
          from rec_electtron_cash_plan
         where     customerid = prmcustomerid
               and cardsn = prmcardsn
               and status = 1
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount > 0
        then
            out_result := -1008;
            out_msg := '存在电子钱包未决记录';
            return;
        end if;

        --验证账户状态
        -- 20121107 zxn 去掉分区areaid
        out_msg := '开始验证账户状态';

        select electrsaveopcount,
               sumelectrconsumfare,
               refunddumpfare,
               refundlimitconsumfare
          into velectrsaveopcount,
               n_totalconsumfare,
               n_refunddumpfare,
               n_refundlimitconsumfare
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and customerunitcode = prmcustomerunitcode;

        --只允许卡上的交易计数和数据库中一至，才进行充值申请操作
        out_msg := '开始验证充值交易记录';

        if prmelectrsaveopcount <> velectrsaveopcount
        then
            out_result := -1006;
            out_msg :=
                   '卡充值交易计数校验错误！库中交易计数为：'
                || to_char (velectrsaveopcount)
                || '，卡上充值交易计数为：'
                || to_char (prmelectrsaveopcount);
            return;
        end if;

        --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
        --如果用卡余额计算的累计消费金额大，则说明卡上软准确
        --如果库里大，则说明库里可能正确，卡上总额可能错误
        out_msg := '判断卡总额、卡余额、累计消费金额等信息';

        if prmsumelectraddfare - prmelectroddfare > n_totalconsumfare
        then
            n_totalconsumfare := prmsumelectraddfare - prmelectroddfare;
        else
            n_totalconsumfare := n_totalconsumfare;
        end if;

        --比较累计消费金额与最低消费限额
        --如果累计消费金额大于等于最低消费限额，则虚充金额清零
        out_msg := '判断累计消费金额和最低消费限额';

        if     n_totalconsumfare >= n_refundlimitconsumfare
           and n_totalconsumfare > 0
        then
            out_result := -1008;
            out_msg := '电子钱包虚充金额清零';

            update base_customers
               set refunddumpfare = 0
             where     customerid = prmcustomerid
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            out_result := -1008;
            out_msg := '形成电子钱包虚充金额清零记录';

            insert into rec_rushdumpfare_log (id,
                                              customerid,
                                              cardno,
                                              elecopcount,
                                              elecsaveopcount,
                                              lastdumpfare,
                                              elecsumfare,
                                              sumconsumfare,
                                              opdt,
                                              poscode,
                                              psamcardno,
                                              customerunitcode)
                 values (0,
                         prmcustomerid,
                         prmcardno,
                         prmelectropcount,
                         prmelectrsaveopcount,
                         n_refunddumpfare,
                         prmsumelectraddfare,
                         n_totalconsumfare,
                         sysdate,
                         prmposcode,
                         prmpsamcardno,
                         prmcustomerunitcode);
        end if;

        out_result := -1026;
        out_msg := '获取交易流水号！';

        --获取申请流水号
        select seq_cash_plan.nextval into vplanid from dual;

        --------------------------------------------------------------------------------
        out_result := -1027;
        out_msg := '形成充值申请记录！';

        insert into rec_electtron_cash_plan (planid,
                                             customerid,
                                             cardno,
                                             cardsn,
                                             cardtypedetailid,
                                             sumelectraddfare,
                                             electroddfare,
                                             electroddfarepre,
                                             electropfare,
                                             electrdummyopfare,
                                             electrsaveopcount,
                                             electropcount,
                                             status,
                                             acccode,
                                             opdt,
                                             description,
                                             cardkind,
                                             poscode,
                                             psamcardno,
                                             empid,
                                             dealtype,
                                             wallettype,
                                             tac,
                                             samtradeno,
                                             ver,
                                             customerunitcode)
             values (vplanid,
                     prmcustomerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumelectraddfare,
                     0,
                     prmelectroddfare,
                     prmelectropfare,
                     prmelectrdummyopfare,
                     prmelectrsaveopcount,
                     prmelectropcount,
                     1,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     1,
                     1,
                     0,
                     0,
                     0,
                     prmcustomerunitcode);

        --------------------------------------------------------------------------------
        out_result := -1028;
        out_msg := '形成充值申请记录日志！';

        insert into rec_electtron_cash_plan_log (planid,
                                                 customerid,
                                                 cardno,
                                                 cardsn,
                                                 cardtypedetailid,
                                                 sumelectraddfare,
                                                 electroddfare,
                                                 electroddfarepre,
                                                 electropfare,
                                                 electrsaveopcount,
                                                 electropcount,
                                                 status,
                                                 acccode,
                                                 opdt,
                                                 description,
                                                 cardkind,
                                                 poscode,
                                                 psamcardno,
                                                 empid,
                                                 dealtype,
                                                 wallettype,
                                                 tac,
                                                 samtradeno,
                                                 ver,
                                                 createdt,
                                                 customerunitcode)
             values (vplanid,
                     prmcustomerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumelectraddfare,
                     0,
                     prmelectroddfare,
                     prmelectropfare,
                     prmelectrsaveopcount,
                     prmelectropcount,
                     0,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     1,
                     1,
                     0,
                     0,
                     0,
                     sysdate,
                     prmcustomerunitcode);

        --------------------------------------------------------------------------------
        prmplanid := vplanid;
        out_result := 100;
        out_msg := '充值申请成功！';
        commit;
    exception
        when others
        then
            rollback;
            prmplanid := -1;
            out_result := -1;
            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;

    procedure proc_commit_electr_cash (
        --客户基本信息-------------
        prmcustomerid          in     number,                       --客户编号
        prmcardno              in     number,                           --卡号
        prmcardsn              in     number,                       --持卡序号
        prmelectrsaveopcount   in     number,                       --操作计数
        prmelectropcount       in     number,                       --操作计数
        prmcardkind            in     number,        --卡种类 1：m1卡 2：cpu卡
        prmcardtypedetailid    in     number,    --卡类型 普通卡 月卡 老年卡等
        prmopdt                in     varchar2,                     --操作时间
        --客户金额信息-------------
        prmsumelectraddfare    in     number,                         --卡总额
        prmelectroddfare       in     number,             --电子钱包消费后余额
        prmelectrdummyopfare   in     number,
        prmelectropfare        in     number,               --电子钱包消费金额
        prmelectroddfarepre    in     number,             --电子钱包充值前余额
        --终端交易信息-------------
        prmposcode             in     number,                       --消费终端
        prmpsamcardno          in     number,
        prmtac                 in     varchar2,                    --tac验证码
        prmempid               in     number,                       --职员编号
        prmpsamtradeno         in     number,
        --返回值-------------------
        prmplanid              in     number,
        prmcardasn             in     number,
        prmcustomerunitcode    in     varchar2,                     --客户代码
        out_result                out number,
        out_msg                   out varchar2)
    as
        /*
       ------------------------------------------------------------------------
       --存储过程： proc_commit_electr_cash
       --作　　者：梁小凯
       --时　　间：2009-05-26
       --说　　明： 提交充值申请记录
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败
       --修改人：梁小凯
       --修改日期：20090615
       --修改说明：增加自定义异常，异常中记录客户提交时卡上的信息
       ------------------------------------------------------------------------
       --修改标示：朱鹏飞 2009-06-18
       --修改说明：1、虑充统计科目传错，原为103错误修改为800
       --     2、修改实充统计时统计金额减去虚充金额
       --------------------------------------------------------------------------
       --修改标识：程文平 2011-03-24
       --修改说明：电子钱包充值增加判断cpu卡处理业务流程。
       -----------------------------------------------------------------------
       --修改标识：党杰 2011-11-16
       --修改说明：电子钱包充值提交时增加不同卡种类的交易计数验证(opcount: m1加1，cpu不变)。
       -----------------------------------------------------------------------
        --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       --修改标识：周晓娜 2012-09-10
       --修改说明：增加客户代码，兼容多客户使用
       --------------------------------------------------------------------------
       */
        vcount               number;
        vacccodegroupid      number;
        vacccode             number;
        vacccodedesc         varchar2 (30);
        vstatus              number;
        vcardno              number;
        vcardsn              number;
        vcustomerid          number;
        velectrsaveopcount   number;
        velectropcount       number;
        vpsamcardno          number;
        vposcode             number;
        visuse               number;
        vgroupid             number;
        velectropfare        number;
        velectrdummyopfare   number;
        vareaid              number;
        v_deptcode           varchar2 (20);             --充值职员所属营业部门
        i_deptareaid         integer;               --充值职员营业部门所属分区
        n_customerid         number;                                    --帐号
        v_paramvalue         varchar2 (20);                         --运行参数
        custom_exception     exception;
    begin
        --------------------------------------------------------------------------------
        out_result := -1000;
        out_msg := '充值提交开始！';
        --
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0)                             --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            raise custom_exception;
        end if;

        n_customerid := prmcustomerid;
        --------------------------------------------------------------------------------

        --验证用户基本信息
        proc_verify_baseinfo (prmcustomerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if (out_result <> 100)
        then
            out_result := out_result;
            out_msg := '验证账户基本信息异常，' || out_msg;
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --验证金额合法性
        if (prmelectropfare <= 0)              --or (prmelectrdummyopfare < 0)
        then
            out_result := -1002;
            out_msg := '充值金额必须大于0！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --账本表信息验证
        select count (*)
          into vcount
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1011;
            out_msg := '账本表中不存在该账号！';
            raise custom_exception;
        end if;

        -- 20121107 zxn 去掉分区areaid
        select status,
               cardno,
               cardsn,
               electrsaveopcount,
               electropcount
          into vstatus,
               vcardno,
               vcardsn,
               velectrsaveopcount,
               velectropcount
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1012;
            out_msg := '账本表卡状态异常status:' || to_char (vstatus);
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1013;
            out_msg := '账本表卡号验证失败！';
            raise custom_exception;
        elsif vcardsn <> prmcardsn
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1014;
            out_msg := '账本表卡序号验证失败！';
            raise custom_exception;
        elsif velectrsaveopcount + 1 <> prmelectrsaveopcount
        then
            out_result := -1015;
            out_msg :=
                   '账本表卡充值交易计数验证失败！'
                || velectrsaveopcount
                || '/'
                || prmelectrsaveopcount;
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --充值申请记录验证
        select count (*)
          into vcount
          from rec_electtron_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1003;
            out_msg := '原充值申请记录不存在planid' || to_char (prmplanid);
            raise custom_exception;
        end if;

        --获取申请记录状态、卡号、卡序号、账号、电子钱包充值交易计数
        --电子钱包消费计数、终端编号、终端设备唯一运行编号、psam 卡号
        --交易科目、交易科目描述
        select status,
               cardno,
               cardsn,
               customerid,
               electrsaveopcount,
               electropcount,
               poscode,
               psamcardno,
               acccode,
               description,
               electropfare,
               a.electrdummyopfare
          into vstatus,
               vcardno,
               vcardsn,
               vcustomerid,
               velectrsaveopcount,
               velectropcount,
               vposcode,
               vpsamcardno,
               vacccode,
               vacccodedesc,
               velectropfare,
               velectrdummyopfare
          from rec_electtron_cash_plan a
         where     planid = prmplanid
               and a.customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1004;
            out_msg := '充值申请记录状态非申请状态！';
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            out_result := -1005;
            out_msg := '充值申请记录卡号验证失败！';
            raise custom_exception;
        elsif vcustomerid <> n_customerid
        then
            out_result := -1006;
            out_msg := '充值申请记录帐号验证失败！';
            raise custom_exception;
        elsif velectrsaveopcount + 1 <> prmelectrsaveopcount
        then
            out_result := -1007;
            out_msg := '充值申请记录充值交易计数验证失败！';
            raise custom_exception;
        elsif velectropcount <> prmelectropcount
        then
            out_result := -1008;
            out_msg :=
                   'cpu卡充值申请记录总交易计数验证失败！'
                || velectropcount
                || ','
                || prmelectropcount;
            raise custom_exception;
        elsif    velectropfare <> prmelectropfare
              or velectrdummyopfare <> prmelectrdummyopfare
        then
            out_result := -1009;
            out_msg := '充值申请记录交易金额验证失败！';
            raise custom_exception;
        elsif vposcode <> prmposcode or vpsamcardno <> prmpsamcardno
        then
            out_result := -1010;
            out_msg := '申请记录中终端和psam卡验证失败！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --增加两个参数prmcardno prmcustunitcode  兼容多客户处理和一个客户多张卡处理
        pkg_handdeal_unsetcash.module_electrcash_commit (prmplanid,
                                                         prmcustomerid,
                                                         prmtac,
                                                         prmcustomerunitcode,
                                                         out_result,
                                                         out_msg);

        if out_result = 100
        then
            out_result := 100;
            out_msg := '电子钱包充值提交成功';
            commit;
        else
            out_result := -1005;
            out_msg := '电子钱包充值提交失败:' || out_msg;
            raise custom_exception;
        end if;
    exception
        when custom_exception
        then
            rollback;

            --记录日志
            insert into rec_electtron_cash_plan_bad (id,
                                                     planid,
                                                     customerid,
                                                     cardno,
                                                     cardsn,
                                                     cardtypedetailid,
                                                     sumelectraddfare,
                                                     electroddfare,
                                                     electroddfarepre,
                                                     electrdummyopfare,
                                                     electropfare,
                                                     electrsaveopcount,
                                                     electropcount,
                                                     status,
                                                     acccode,
                                                     opdt,
                                                     description,
                                                     cardkind,
                                                     poscode,
                                                     psamcardno,
                                                     empid,
                                                     dealtype,
                                                     wallettype,
                                                     tac,
                                                     samtradeno,
                                                     badcode,
                                                     baddesc,
                                                     ver,
                                                     customerunitcode)
                 values (0,
                         prmplanid,
                         prmcustomerid,
                         prmcardno,
                         prmcardsn,
                         prmcardtypedetailid,
                         prmsumelectraddfare,
                         prmelectroddfare,
                         prmelectroddfarepre,
                         prmelectrdummyopfare,
                         prmelectropfare,
                         prmelectrsaveopcount,
                         prmelectropcount,
                         0,
                         vacccode,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                         '电子钱包充值',
                         prmcardkind,
                         prmposcode,
                         prmpsamcardno,
                         prmempid,
                         1,
                         1,
                         prmtac,
                         prmpsamtradeno,
                         out_result,
                         out_msg,
                         0,
                         prmcustomerunitcode);

            commit;
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，具体原因为：' || sqlerrm;
    end;

    procedure proc_request_vicecard_repeal (
        --客户基本信息-------------
        prmcustomerid         in     number,                        --客户编号
        prmcardno             in     number,                            --卡号
        prmcardsn             in     number,                        --持卡序号
        prmvicesaveopcount    in     number,              --申请前充值交易计数
        prmviceopcount        in     number,                        --消费计数
        prmcardkind           in     number,                          --卡类型
        prmcardtypedetailid   in     number,                      --卡类型小类
        prmopdt               in     varchar2,                      --操作时间
        --客户金额信息-------------
        prmsumviceaddfare     in     number,                          --卡总额
        prmviceoddfare        in     number,              --电子钱包消费后余额
        prmvicedummyopfare    in     number,                        --虚充金额
        prmviceopfare         in     number,                --电子钱包实充金额
        --终端交易信息-------------
        prmposcode            in     number,                        --消费终端
        prmpsamcardno         in     number,                        --psam卡号
        prmempid              in     number,                      --充值员编号
        prmcardasn            in     number,                      --充值员编号
        prmlimittimes         in     number,                        --每月限额
        prmmonthnum           in     number,                        --充值月份
        prmvalidtimestart     in     varchar2,                      --有效起日
        prmvalidtimeend       in     varchar2,                      --有效止日
        prmcustomerunitcode   in     varchar2,
        --返回值-------------------
        prmplanid             in out number,                      --领款计划id
        out_result               out number,
        out_msg                  out varchar2)
    as
        /*
       --------------------------------------------------------------------------
       --存储过程： proc_request_electr_repeal
       --作　　者：赵军强
       --时　　间：2009-05-26
       --说　　明： 电子钱包充值撤销
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败

       --从 充值申请过程 移植

       --------------------------------------------------------------------------
       --修改标识：周晓娜 2012-04-26
       --修改说明：增加充值撤销记录原申请planid记录
       --------------------------------------------------------------------------
       --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       */
        vcount                    number;
        visbalance                number;
        vplanid                   number;
        vacccode         constant number := 241;
        --固定次卡钱包充值撤销科目
        vaccdesc                  varchar (20);
        vempid                    number;
        vareaid                   number;
        vvicesaveopcount          number;
        vviceopcount              number;
        vplanacccode              number;
        vplanacccodegroup         number;
        vrepealempid              number;
        --
        n_totalconsumfare         number (20, 2);               --累计消费金额
        n_refunddumpfare          number (10, 2);         --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2);               --最低消费限额
        n_customerid              number;                               --帐号
        v_paramvalue              varchar2 (20);                    --运行参数
    begin
        --初始化变量
        -- prmplanid := -1;
        out_result := -1000;
        out_msg := '撤销充值申请开始！';
        --------------------------------------------------------------------------------
        --验证账户、设备、psam卡号、职员合法性
        proc_verify_baseinfo (prmcustomerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if out_result <> 100
        then
            out_result := -1002;
            out_msg := '基本信信验证不通过' || out_msg;
            return;
        end if;

        ----------------------------------------------------------------------
        out_result := -1003;
        out_msg := '获取交易科目描述！';

        select count (*)
          into vcount
          from base_acc_type a
         where a.acccode = vacccode;

        if vcount = 0
        then
            out_result := -1004;
            out_msg := '交易科目不存在acccode:' || to_char (vacccode);
            return;
        end if;

        select accdscrp
          into vaccdesc
          from base_acc_type
         where acccode = vacccode;

        --------------------------------------------------------------------------------
        --验证交易金额合法性
        if (prmviceopfare < 0)                   --or (prmvicedummyopfare < 0)
        then
            out_result := -1001;
            out_msg := '交易金额必须大于0！';
            return;
        end if;

        --交易金额是充值交款金额和虚充金额的和，一定是大于，如果小于则为异常
        if prmviceopfare < prmvicedummyopfare
        then
            out_result := -1002;
            out_msg := '交易金额必须大于或等于虚充金额！';
            return;
        end if;

        --------------------------------------------------------------------------------

        --新系统卡行业应用编号0000
        n_customerid := prmcustomerid;

        --------------------------------------------------------------------------------
        select count (*)
          into vcount
          from rec_vicecard_cash1
         where     customerid = n_customerid
               and planid = prmplanid
               and customerunitcode = prmcustomerunitcode;

        if (vcount <> 0)
        then
            out_result := -1003;
            out_msg := '同一存款不能多次撤销，请检查是否有未决记录！';
            return;
        end if;

        --------------------------------------------------------------------------------
        --校验领未未决记录
        select count (*)
          into vcount
          from rec_vicecard_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and planid = prmplanid
               and status = 1
               and customerunitcode = prmcustomerunitcode;

        if (vcount <> 0)
        then
            --写卡成功
            pkg_handdeal_unsetcash.module_vicecardcash_commit (
                prmplanid,
                n_customerid,
                '77777',
                prmcustomerunitcode,
                out_result,
                out_msg);
        -- out_result := -1025;
        --out_msg := '当前卡存在未决记录，无法进行撤销充值操作';
        --return;
        --end if;
        else
              select count (*), empid
                into vcount, vrepealempid
                from rec_vicecard_cash
               where     customerid = n_customerid
                     and planid = prmplanid
                     and customerunitcode = prmcustomerunitcode
            group by empid;

            --  where  planid=prmplanid;
            if vcount = 0
            then
                out_result := -1033;
                out_msg := '纠错计划不存在:' || to_char (prmplanid);
                return;
            end if;
        end if;

        -------------------------------------------------------------------------------
        select count (*)
          into vcount
          from base_customers a
         where     a.customerid = n_customerid
               and cardno = prmcardno
               and a.numberoddfare < prmviceopfare
               and customerunitcode = prmcustomerunitcode;

        if vcount > 0
        then
            out_result := -1066;
            out_msg := '卡余额不足:' || to_char (prmviceopfare);
            return;
        end if;

        -------------------------------------------------------------------------------
        select nvl (count (*), 0)
          into vcount
          from rec_vicecard_cash_plan
         where     customerid = n_customerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and status = 1
               and customerunitcode = prmcustomerunitcode;

        if vcount > 0
        then
            out_result := -1008;
            out_msg := '存在次卡钱包未决记录';
            return;
        end if;

        --验证账户状态
        select numbersaveopcount, numberopcount
          into vvicesaveopcount, vviceopcount
          from base_customers
         where     customerid = n_customerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and customerunitcode = prmcustomerunitcode;

        --只允许卡上的交易计数和数据库中一至，才进行充值申请操作
        if prmviceopcount <> vviceopcount
        then
            out_result := -1025;
            out_msg :=
                   '卡充值交易计数校验错误！库中交易计数为：'
                || to_char (vviceopcount)
                || '，卡上充值交易计数为：'
                || to_char (prmviceopcount);
            return;
        end if;

        out_result := -1026;
        out_msg := '获取交易流水号！';

        --获取申请流水号
        select seq_cash_plan.nextval into vplanid from dual;

        --------------------------------------------------------------------------------
        out_result := -1027;
        out_msg := '形成撤销充值申请记录！';

        --zxn 20120426增加申请时的planid记录
        insert into rec_vicecard_cash_plan (planid,
                                            customerid,
                                            cardno,
                                            cardsn,
                                            cardtypedetailid,
                                            sumviceaddfare,
                                            viceoddfare,
                                            viceoddfarepre,
                                            viceopfare,
                                            vicedummyopfare,
                                            vicesaveopcount,
                                            viceopcount,
                                            status,
                                            acccode,
                                            opdt,
                                            description,
                                            areaid,
                                            cardkind,
                                            poscode,
                                            psamcardno,
                                            empid,
                                            dealtype,
                                            wallettype,
                                            tac,
                                            samtradeno,
                                            ver,
                                            repealempid,
                                            oldplanid,
                                            limittimes,
                                            monthnum,
                                            validtimestart,
                                            validtimeend,
                                            customerunitcode)
             values (vplanid,
                     n_customerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumviceaddfare,
                     prmviceoddfare,
                     --刘东红 120420改为0这 prmelectroddfare
                     prmviceoddfare,
                     prmviceopfare,
                     prmvicedummyopfare,
                     prmvicesaveopcount,
                     prmviceopcount,
                     1,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     vareaid,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     0,
                     0,
                     0,
                     0,
                     0,
                     vrepealempid,
                     prmplanid,
                     prmlimittimes,
                     prmmonthnum,
                     to_date (prmvalidtimestart, 'yyyy-mm-dd'),
                     to_date (prmvalidtimeend, 'yyyy-mm-dd'),
                     prmcustomerunitcode);

        --------------------------------------------------------------------------------
        out_result := -1028;
        out_msg := '形成充值申请记录日志！';

        insert into rec_vicecard_cash_plan_log (planid,
                                                customerid,
                                                cardno,
                                                cardsn,
                                                cardtypedetailid,
                                                sumviceaddfare,
                                                viceoddfare,
                                                viceoddfarepre,
                                                viceopfare,
                                                vicesaveopcount,
                                                viceopcount,
                                                status,
                                                acccode,
                                                opdt,
                                                description,
                                                cardkind,
                                                poscode,
                                                psamcardno,
                                                empid,
                                                dealtype,
                                                wallettype,
                                                tac,
                                                samtradeno,
                                                ver,
                                                createdt,
                                                limittimes,
                                                monthnum,
                                                validtimestart,
                                                validtimeend,
                                                customerunitcode)
             values (vplanid,
                     n_customerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumviceaddfare,
                     0,
                     prmviceoddfare,
                     prmviceopfare,
                     prmvicesaveopcount,
                     prmviceopcount,
                     0,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     0,
                     0,
                     0,
                     0,
                     0,
                     sysdate,
                     prmlimittimes,
                     prmmonthnum,
                     to_date (prmvalidtimestart, 'yyyy-mm-dd'),
                     to_date (prmvalidtimeend, 'yyyy-mm-dd'),
                     prmcustomerunitcode);

        --------------------------------------------------------------------------------
        prmplanid := vplanid;
        out_result := 100;
        out_msg := '撤销次卡充值申请成功！';
        commit;
    exception
        when others
        then
            rollback;
            prmplanid := -1;
            out_result := -1;
            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;

    procedure proc_request_monticket_repeal (
        --客户基本信息-------------
        prmcustomerid         in     number,                        --客户编号
        prmcardno             in     number,                            --卡号
        prmcardsn             in     number,                        --持卡序号
        prmvicesaveopcount    in     number,              --申请前充值交易计数
        prmviceopcount        in     number,                        --消费计数
        prmcardkind           in     number,                          --卡类型
        prmcardtypedetailid   in     number,                      --卡类型小类
        prmopdt               in     varchar2,                      --操作时间
        --客户金额信息-------------
        prmsumviceaddfare     in     number,                          --卡总额
        prmviceoddfare        in     number,              --电子钱包消费后余额
        prmvicedummyopfare    in     number,                        --虚充金额
        prmviceopfare         in     number,                --电子钱包实充金额
        --终端交易信息-------------
        prmposcode            in     number,                        --消费终端
        prmpsamcardno         in     number,                        --psam卡号
        prmempid              in     number,                      --充值员编号
        prmcardasn            in     number,                      --充值员编号
        prmlimittimes         in     number,                        --每月限额
        prmmonthnum           in     number,                        --充值月份
        prmvalidtimestart     in     varchar2,                      --有效起日
        prmvalidtimeend       in     varchar2,                      --有效止日
        prmcustomerunitcode   in     varchar2,
        --返回值-------------------
        prmplanid             in out number,                      --领款计划id
        out_result               out number,
        out_msg                  out varchar2)
    as
        /*
       --------------------------------------------------------------------------
       --存储过程： proc_request_electr_repeal
       --作　　者：赵军强
       --时　　间：2009-05-26
       --说　　明： 电子钱包充值撤销
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败

       --从 充值申请过程 移植

       --------------------------------------------------------------------------
       --修改标识：周晓娜 2012-04-26
       --修改说明：增加充值撤销记录原申请planid记录
       --------------------------------------------------------------------------
       --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       */
        vcount                    number;
        visbalance                number;
        vplanid                   number;
        vacccode         constant number := 242;        --固定电子钱包充值科目
        vaccdesc                  varchar (20);
        vempid                    number;
        vareaid                   number;
        vvicesaveopcount          number;
        vviceopcount              number;
        vplanacccode              number;
        vplanacccodegroup         number;
        vrepealempid              number;
        --
        n_totalconsumfare         number (20, 2);               --累计消费金额
        n_refunddumpfare          number (10, 2);         --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2);               --最低消费限额
        n_customerid              number;                               --帐号
        v_paramvalue              varchar2 (20);                    --运行参数
    begin
        --初始化变量
        -- prmplanid := -1;
        out_result := -1000;
        out_msg := '撤销充值申请开始！';
        --------------------------------------------------------------------------------
        --验证账户、设备、psam卡号、职员合法性
        proc_verify_baseinfo (prmcustomerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if out_result <> 100
        then
            out_result := -1002;
            out_msg := '基本信信验证不通过' || out_msg;
            return;
        end if;

        ----------------------------------------------------------------------
        out_result := -1003;
        out_msg := '获取交易科目描述！';

        select count (*)
          into vcount
          from base_acc_type a
         where a.acccode = vacccode;

        if vcount = 0
        then
            out_result := -1004;
            out_msg := '交易科目不存在acccode:' || to_char (vacccode);
            return;
        end if;

        select accdscrp
          into vaccdesc
          from base_acc_type
         where acccode = vacccode;

        --------------------------------------------------------------------------------
        --验证交易金额合法性
        if (prmviceopfare < 0)                   --or (prmvicedummyopfare < 0)
        then
            out_result := -1001;
            out_msg := '交易金额必须大于0！';
            return;
        end if;

        --交易金额是充值交款金额和虚充金额的和，一定是大于，如果小于则为异常
        if prmviceopfare < prmvicedummyopfare
        then
            out_result := -1002;
            out_msg := '交易金额必须大于或等于虚充金额！';
            return;
        end if;

        --------------------------------------------------------------------------------

        --新系统卡行业应用编号0000
        n_customerid := prmcustomerid;

        --------------------------------------------------------------------------------
        select count (*)
          into vcount
          from rec_monticket_cash1
         where     customerid = n_customerid
               and planid = prmplanid
               and customerunitcode = prmcustomerunitcode;

        if (vcount <> 0)
        then
            out_result := -1003;
            out_msg := '同一存款不能多次撤销，请检查是否有未决记录！';
            return;
        end if;

        --------------------------------------------------------------------------------
        --校验领未未决记录
        select count (*)
          into vcount
          from rec_monticket_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and planid = prmplanid
               and status = 1
               and customerunitcode = prmcustomerunitcode;

        if (vcount <> 0)
        then
            --写卡成功module_montrcash_commit
            pkg_handdeal_unsetcash.module_montrcash_commit (
                prmplanid,
                n_customerid,
                '77777',
                prmcustomerunitcode,
                out_result,
                out_msg);
        -- out_result := -1025;
        --out_msg := '当前卡存在未决记录，无法进行撤销充值操作';
        --return;
        --end if;
        else
              select count (*), empid
                into vcount, vrepealempid
                from rec_monticket_cash
               where     customerid = n_customerid
                     and planid = prmplanid
                     and customerunitcode = prmcustomerunitcode
            group by empid;

            --  where  planid=prmplanid;
            if vcount = 0
            then
                out_result := -1033;
                out_msg := '纠错计划不存在:' || to_char (prmplanid);
                return;
            end if;
        end if;

        -------------------------------------------------------------------------------
        select count (*)
          into vcount
          from base_customers a
         where     a.customerid = n_customerid
               and cardno = prmcardno
               and a.monoddfare < prmviceopfare
               and a.customerunitcode = prmcustomerunitcode;

        if vcount > 0
        then
            out_result := -1066;
            out_msg := '卡余额不足:' || to_char (prmviceopfare);
            return;
        end if;

        --------------------------------------------------------------------------------
        select nvl (count (*), 0)
          into vcount
          from rec_monticket_cash_plan
         where     customerid = n_customerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and status = 1
               and customerunitcode = prmcustomerunitcode;

        if vcount > 0
        then
            out_result := -1008;
            out_msg := '存在月票钱包未决记录';
            return;
        end if;

        --验证账户状态
        select a.monsaveopcount, a.monopcount
          into vvicesaveopcount, vviceopcount
          from base_customers a
         where     customerid = n_customerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and customerunitcode = prmcustomerunitcode;

        --只允许卡上的交易计数和数据库中一至，才进行充值申请操作
        if prmviceopcount <> vviceopcount
        then
            out_result := -1025;
            out_msg :=
                   '卡充值交易计数校验错误！库中交易计数为：'
                || to_char (vviceopcount)
                || '，卡上充值交易计数为：'
                || to_char (prmviceopcount);
            return;
        end if;

        out_result := -1026;
        out_msg := '获取交易流水号！';

        --获取申请流水号
        select seq_cash_plan.nextval into vplanid from dual;

        --------------------------------------------------------------------------------
        out_result := -1027;
        out_msg := '形成撤销充值申请记录！';

        --zxn 20120426增加申请时的planid记录
        insert into rec_monticket_cash_plan (planid,
                                             customerid,
                                             cardno,
                                             cardsn,
                                             cardtypedetailid,
                                             sumviceaddfare,
                                             viceoddfare,
                                             viceoddfarepre,
                                             viceopfare,
                                             vicedummyopfare,
                                             vicesaveopcount,
                                             viceopcount,
                                             status,
                                             acccode,
                                             opdt,
                                             description,
                                             cardkind,
                                             poscode,
                                             psamcardno,
                                             empid,
                                             dealtype,
                                             wallettype,
                                             tac,
                                             samtradeno,
                                             ver,
                                             repealempid,
                                             oldplanid,
                                             limittimes,
                                             monthnum,
                                             validtimestart,
                                             validtimeend,
                                             customerunitcode)
             values (vplanid,
                     n_customerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumviceaddfare,
                     prmviceoddfare,
                     --刘东红 120420改为0这 prmelectroddfare
                     prmviceoddfare,
                     prmviceopfare,
                     prmvicedummyopfare,
                     prmvicesaveopcount,
                     prmviceopcount,
                     1,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     0,
                     0,
                     0,
                     0,
                     0,
                     vrepealempid,
                     prmplanid,
                     prmlimittimes,
                     prmmonthnum,
                     to_date (prmvalidtimestart, 'yyyy-mm-dd'),
                     to_date (prmvalidtimeend, 'yyyy-mm-dd'),
                     prmcustomerunitcode);

        --------------------------------------------------------------------------------
        out_result := -1028;
        out_msg := '形成充值申请记录日志！';

        insert into rec_monticket_cash_plan_log (planid,
                                                 customerid,
                                                 cardno,
                                                 cardsn,
                                                 cardtypedetailid,
                                                 sumviceaddfare,
                                                 viceoddfare,
                                                 viceoddfarepre,
                                                 viceopfare,
                                                 vicesaveopcount,
                                                 viceopcount,
                                                 status,
                                                 acccode,
                                                 opdt,
                                                 description,
                                                 cardkind,
                                                 poscode,
                                                 psamcardno,
                                                 empid,
                                                 dealtype,
                                                 wallettype,
                                                 tac,
                                                 samtradeno,
                                                 ver,
                                                 createdt,
                                                 limittimes,
                                                 monthnum,
                                                 validtimestart,
                                                 validtimeend,
                                                 customerunitcode)
             values (vplanid,
                     n_customerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumviceaddfare,
                     0,
                     prmviceoddfare,
                     prmviceopfare,
                     prmvicesaveopcount,
                     prmviceopcount,
                     0,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     0,
                     0,
                     0,
                     0,
                     0,
                     sysdate,
                     prmlimittimes,
                     prmmonthnum,
                     to_date (prmvalidtimestart, 'yyyy-mm-dd'),
                     to_date (prmvalidtimeend, 'yyyy-mm-dd'),
                     prmcustomerunitcode);

        --------------------------------------------------------------------------------
        prmplanid := vplanid;
        out_result := 100;
        out_msg := '撤销月票充值申请成功！';
        commit;
    exception
        when others
        then
            rollback;
            prmplanid := -1;
            out_result := -1;
            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;

    procedure proc_commit_monticket_repeal (
        --客户基本信息-------------
        prmcustomerid         in     number,                        --客户编号
        prmcardno             in     number,                            --卡号
        prmcardsn             in     number,                        --持卡序号
        prmvicesaveopcount    in     number,                        --操作计数
        prmviceopcount        in     number,                        --操作计数
        prmcardkind           in     number,
        prmcardtypedetailid   in     number,
        prmopdt               in     varchar2,                      --操作时间
        --客户金额信息-------------
        prmsumviceaddfare     in     number,                          --卡总额
        prmviceoddfare        in     number,              --电子钱包消费后余额
        prmvicedummyopfare    in     number,
        prmviceopfare         in     number,                --电子钱包消费金额
        prmviceoddfarepre     in     number,              --电子钱包充值前余额
        --终端交易信息-------------
        prmposcode            in     number,                        --消费终端
        prmpsamcardno         in     number,
        prmtac                in     varchar2,                     --tac验证码
        prmempid              in     number,                        --职员编号
        prmpsamtradeno        in     number,
        --返回值-------------------
        prmplanid             in     number,
        prmoldplanid          in     number,                --原要撤销的planid
        prmcardasn            in     number,
        prmcustomerunitcode   in     varchar2,
        out_result               out number,
        out_msg                  out varchar2)
    as
        /*
       ------------------------------------------------------------------------
       --存储过程： proc_commit_electr_cash
       --作　　者：赵军强
       --时　　间：20101023
       --说　　明： 提交撤销充值申请记录
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败

       -----------------------------------------------------------------------
        --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       --从 提交充值申请过程 移植
       */
        vcount             number;
        vacccodegroupid    number;
        vacccode           number;
        vacccodedesc       varchar2 (30);
        vstatus            number;
        vcardno            number;
        vcardsn            number;
        vcustomerid        number;
        vvicesaveopcount   number;
        vviceopcount       number;
        vpsamcardno        number;
        vposcode           number;
        visuse             number;
        vgroupid           number;
        vviceopfare        number;
        vvicedummyopfare   number;
        vareaid            number;
        v_deptcode         varchar2 (20);               --充值职员所属营业部门
        i_deptareaid       integer;                 --充值职员营业部门所属分区
        n_customerid       number;                                      --帐号
        v_paramvalue       varchar2 (20);                           --运行参数
        custom_exception   exception;
    begin
        --------------------------------------------------------------------------------
        out_result := -1000;
        out_msg := '充值提交开始！';
        --
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0)                             --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        n_customerid := prmcustomerid;
        --------------------------------------------------------------------------------

        --验证用户基本信息
        proc_verify_baseinfo (n_customerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if (out_result <> 100)
        then
            out_result := out_result;
            out_msg := '验证账户基本信息异常，' || out_msg;
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --验证金额合法性
        if (prmviceopfare <= 0)                  --or (prmvicedummyopfare < 0)
        then
            out_result := -1002;
            out_msg := '撤销充值金额必须大于0！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --账本表信息验证
        select count (*)
          into vcount
          from base_customers
         where     customerid = n_customerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1011;
            out_msg := '账本表中不存在该账号！';
            raise custom_exception;
        end if;

        select status,
               cardno,
               cardsn,
               a.monsaveopcount,
               a.monopcount
          into vstatus,
               vcardno,
               vcardsn,
               vvicesaveopcount,
               vviceopcount
          from base_customers a
         where     customerid = n_customerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1012;
            out_msg := '账本表卡状态异常status:' || to_char (vstatus);
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1013;
            out_msg := '账本表卡号验证失败！';
            raise custom_exception;
        elsif vcardsn <> prmcardsn
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1014;
            out_msg := '账本表卡序号验证失败！';
            raise custom_exception;
        elsif vviceopcount + 1 <> prmviceopcount
        then
            out_result := -1015;
            out_msg := '账本表卡充值交易计数验证失败！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --充值申请记录验证
        select count (*)
          into vcount
          from rec_monticket_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1003;
            out_msg := '原充值申请记录不存在planid' || to_char (prmplanid);
            raise custom_exception;
        end if;

        --获取申请记录状态、卡号、卡序号、账号、电子钱包充值交易计数
        --电子钱包消费计数、终端编号、终端设备唯一运行编号、psam 卡号
        --交易科目、交易科目描述
        select status,
               cardno,
               cardsn,
               customerid,
               vicesaveopcount,
               viceopcount,
               poscode,
               psamcardno,
               acccode,
               description,
               viceopfare,
               a.vicedummyopfare
          into vstatus,
               vcardno,
               vcardsn,
               vcustomerid,
               vvicesaveopcount,
               vviceopcount,
               vposcode,
               vpsamcardno,
               vacccode,
               vacccodedesc,
               vviceopfare,
               vvicedummyopfare
          from rec_monticket_cash_plan a
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1004;
            out_msg := '撤销充值申请记录状态非申请状态！';
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            out_result := -1005;
            out_msg := '撤销充值申请记录卡号验证失败！';
            raise custom_exception;
        elsif vcustomerid <> n_customerid
        then
            out_result := -1006;
            out_msg := '撤销充值申请记录帐号验证失败！';
            raise custom_exception;
        elsif vvicesaveopcount <> prmvicesaveopcount
        then
            out_result := -1007;
            out_msg :=
                   '撤销充值申请记录充值交易计数验证失败！'
                || vvicesaveopcount
                || '/'
                || prmvicesaveopcount;
            raise custom_exception;
        elsif vviceopcount + 1 <> prmviceopcount
        then
            out_result := -1008;
            out_msg := '撤销充值申请记录总交易计数验证失败！';
            raise custom_exception;
        elsif    vviceopfare <> prmviceopfare
              or vvicedummyopfare <> prmvicedummyopfare
        then
            out_result := -1009;
            out_msg := '撤销充值申请记录交易金额验证失败！';
            raise custom_exception;
        elsif vposcode <> prmposcode or vpsamcardno <> prmpsamcardno
        then
            out_result := -1010;
            out_msg := '撤销充值申请记录中终端和psam卡验证失败！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        pkg_handdeal_unsetcash.repeal_monticket_commit (prmplanid,
                                                        n_customerid,
                                                        prmtac,
                                                        prmcustomerunitcode,
                                                        out_result,
                                                        out_msg);

        if out_result <> 100
        then
            out_result := -1005;
            out_msg := '月票钱包撤销充值提交失败:' || out_msg;
            raise custom_exception;
        end if;

        out_result := 100;
        out_msg := '月票钱包撤销充值提交成功';
        commit;
    exception
        when custom_exception
        then
            rollback;

            --记录日志
            insert into rec_monticket_cash_plan_bad (id,
                                                     planid,
                                                     customerid,
                                                     cardno,
                                                     cardsn,
                                                     cardtypedetailid,
                                                     sumviceaddfare,
                                                     viceoddfare,
                                                     viceoddfarepre,
                                                     vicedummyopfare,
                                                     viceopfare,
                                                     vicesaveopcount,
                                                     viceopcount,
                                                     status,
                                                     acccode,
                                                     opdt,
                                                     description,
                                                     cardkind,
                                                     poscode,
                                                     psamcardno,
                                                     empid,
                                                     dealtype,
                                                     wallettype,
                                                     tac,
                                                     samtradeno,
                                                     badcode,
                                                     baddesc,
                                                     ver,
                                                     customerunitcode)
                 values (0,
                         prmplanid,
                         n_customerid,
                         prmcardno,
                         prmcardsn,
                         prmcardtypedetailid,
                         prmsumviceaddfare,
                         prmviceoddfare,
                         prmviceoddfarepre,
                         prmvicedummyopfare,
                         prmviceopfare,
                         prmvicesaveopcount,
                         prmviceopcount,
                         0,
                         vacccode,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                         '月票钱包充值撤销',
                         prmcardkind,
                         prmposcode,
                         prmpsamcardno,
                         prmempid,
                         1,
                         1,
                         prmtac,
                         prmpsamtradeno,
                         out_result,
                         out_msg,
                         0,
                         prmcustomerunitcode);

            commit;
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，具体原因为：' || sqlerrm;
    end;

    procedure proc_rollback_electr_cash (
        --客户基本信息-------------
        prmcustomerid          in     number,                       --客户编号
        prmcardno              in     number,                           --卡号
        prmcardsn              in     number,                       --持卡序号
        prmelectrsaveopcount   in     number,                       --操作计数
        prmelectropcount       in     number,                       --操作计数
        --终端交易信息-------------
        prmposcode             in     number,                       --消费终端
        prmpsamcardno          in     number,
        prmempid               in     number,
        --返回值-------------
        prmplanid              in     number,                   --充值领款编号
        prmcustomerunitcode    in     varchar2,
        out_result                out number,
        out_msg                   out varchar2)
    as
        /*
        ------------------------------------------------------------------------
        --存储过程： proc_rollback_electr_cash
        --作　　者：梁小凯
        --时　　间：2009-05-26
        --说　　明： 回滚充值申请记录
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：成功，帐目统计成功，其他失败
        ------------------------------------------------------------------------
        --修改标示：朱鹏飞 2009-07-04
        --修改说明：增加回滚冻结金额领取，回滚冻结金额记录，只更新记录为初始状态
        ------------------------------------------------------------------------
        --修改标识：程文平 2012-08-11
        --修改说明：兼容标准公交和住建部密钥系统
        --------------------------------------------------------------------------
        --修改标识：周晓娜 2012-09-12
        --修改说明：兼容多客户处理，回滚的时候不用更新回授权额度
        --------------------------------------------------------------------------
        */
        vcount               number;
        --原申请记录信息
        vstatus              number;
        vcardno              number;
        vcardsn              number;
        vcustomerid          number;
        velectrsaveopcount   number;
        velectropcount       number;
        vpsamcardno          number;
        vposcode             number;
        vplanacccode         number;                          --未决记录的科目
        vplanacccodegroup    number;                          --未决记录的科目
        n_customerid         number;                                    --帐号
        v_paramvalue         varchar2 (20);                         --运行参数
    begin
        out_result := -1000;
        out_msg := '回滚充值申请开始';
        --------------------------------------------------------------------------------
        n_customerid := prmcustomerid;

        --------------------------------------------------------------------------------
        --充值申请记录验证
        select nvl (count (*), 0)
          into vcount
          from rec_electtron_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := '充值申请记录不存在';
            return;
        end if;

        out_result := -1002;
        out_msg := '获取待回滚记录';

        --获取申请记录状态、卡号、卡序号、账号、电子钱包充值交易计数
        --电子钱包消费计数、终端设备唯一运行编号、psam 卡号
        select status,
               cardno,
               cardsn,
               customerid,
               electrsaveopcount,
               electropcount,
               poscode,
               psamcardno,
               acccode
          into vstatus,
               vcardno,
               vcardsn,
               vcustomerid,
               velectrsaveopcount,
               velectropcount,
               vposcode,
               vpsamcardno,
               vplanacccode
          from rec_electtron_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        ----验证卡与申请记录是否一致，是否允许回滚
        if vstatus <> 1
        then
            out_result := -1004;
            out_msg := '电子钱包充值申请记录状态非申请状态，不允许回滚';
            return;
        elsif vcardno <> prmcardno
        then
            out_result := -1005;
            out_msg := '卡号与申请记录卡号不一致，不允许回滚';
            return;
        elsif vcustomerid <> n_customerid
        then
            out_result := -1006;
            out_msg := '账号与申请记录帐号不一致，不允许回滚';
            return;
        elsif velectrsaveopcount <> prmelectrsaveopcount
        then
            out_result := -1007;
            out_msg := '卡充值操作计数与申请充值计数不一致，不允许回滚';
            return;
        elsif velectropcount <> prmelectropcount
        then
            out_result := -1008;
            out_msg := '卡消费操作计数与申请消费计数不一致，不允许回滚';
            return;
        elsif vposcode <> prmposcode
        then
            out_result := -1009;
            dbms_output.put_line (' ');
            out_msg := '交易终端与申请终端不一致，不允许回滚';
            return;
        elsif vpsamcardno <> prmpsamcardno
        then
            out_result := -1010;
            out_msg := '交易psam卡号与申请psam卡号不一致，不允许回滚';
            return;
        end if;

        --------------------------------------------------------------------------------
        pkg_handdeal_unsetcash.module_electrcash_rollback (
            prmplanid,
            n_customerid,
            -100,
            '充值回滚',
            prmcustomerunitcode,
            out_result,
            out_msg);

        if out_result = 100
        then
            out_result := 100;
            out_msg := '电子钱包领款回滚成功！';
            commit;
        else
            out_result := -1005;
            out_msg := '电子钱包领款回滚成功！';
            rollback;
        end if;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，具体原因为：' || sqlerrm;
    end;

    procedure proc_cash_unsettled_process (
        --客户基本信息-------------
        prmcustomerid          in     number,                       --客户编号
        prmcardno              in     number,                           --卡号
        prmcardsn              in     number,                       --持卡序号
        prmcardkind            in     number,        --卡种类 1：m1卡 2：cpu卡
        prmcardtypedetailid    in     number,    --卡类型 普通卡 月卡 老年卡等
        prmopdt                in     varchar2,                     --操作时间
        --客户电子钱包信息-------------
        prmsumelectraddfare    in     number,                 --电子钱包卡总额
        prmelectroddfare       in     number,                   --电子钱包余额
        prmelectrsaveopcount   in     number,               --电子钱包充值计数
        prmelectropcount       in     number,               --电子钱包消费计数
        --终端交易信息-------------
        prmposcode             in     number,                       --终端编号
        prmpsamcardno          in     number,                       --psam卡号
        prmempid               in     number,                         --操作员
        prmcardasn             in     number,                 --卡片应用序列号
        --钱包类型----------------------------
        prmwallettype          in     varchar2,                 --钱包启用标识
        --客户次卡信息----------------------------
        prmvicesaveopcount     in     number,               --次卡充值交易计数
        prmviceopcount         in     number,               --次卡消费交易计数
        prmviceoddfare         in     number,                   --次卡钱包余额
        --客户月票信息-----------------------------
        prmmonthsaveopcount    in     number,               --月票充值交易计数
        prmmonthopcount        in     number,               --月票消费交易计数
        prmmonthoddfare        in     number,                   --月票钱包余额
        --返回值-------------------
        prmcustomerunitcode    in     varchar2,                     --客户代码
        out_result                out number,                         --返回值
        out_msg                   out varchar2                      --返回信息
                                              )
    as
        vopmonth                  number;
        vcount                    number;
        velectropcount            number;
        velectrsaveopcount        number;
        vmonopcount               number;
        vmonsaveopcount           number;
        --次卡钱包
        vviceopcount              number;                   --次卡钱包消费计数
        vvicesaveopcount          number;                   --次卡钱包充值计数
        vplanelectropfare         number;
        vplanelectroddfarepre     number;
        vplanelectroddfare        number;
        vplanelectrdummyopfare    number;
        vplanelectropcount        number;
        vplanelectrsaveopcount    number;
        vplanacccode              number;
        vplanacccodegroup         number;
        --次卡钱包
        vplanviceopfare           number;
        vplanviceoddfarepre       number;
        vplanviceoddfare          number;
        vplanvicerdummyopfare     number;
        vplanviceopcount          number;
        vplanvicesaveopcount      number;
        n_unset_planid            number;                     --未决记录事务号
        n_unset_elecopcount       number;               --电子钱包未决交易计数
        n_unset_elecsaveopcount   number;               --电子钱包未决充值计数
        v_execsql                 varchar2 (1000);
        n_elecunsetcount          number;                 --电子钱包未决记录数
        n_monunsetcount           number;  --月票未决记录数-------------------
        --次卡钱包
        n_unset_viceopcount       number;               --次卡钱包未决交易计数
        n_unset_vicesaveopcount   number;               --次卡钱包未决充值计数
        n_unset_monopcount        number;               --次卡钱包未决交易计数
        n_unset_monsaveopcount    number;               --次卡钱包未决充值计数
        n_viceunsetcount          number;                 --次卡钱包未决记录数
        v_isindependent           varchar2 (1);
        b_eleopcount              number;               --后续消费记录交易计数
        b_eleoddfare              number;                     --后续消费卡余额
        b_eleopfare               number;                   --后续消费交易金额
        n_unset_customerid        number;                       --未决记录账号
        n_unset_tac               varchar2 (16);
        n_unset_oldplanid         number;                     --申请时的planid
        n_customerid              number;                               --帐号
        v_paramvalue              varchar2 (20);                    --运行参数
        vplanmonthoddfare         number;
        vplanmonthopfare          number;
        b_monoddfare              number;
        b_monopfare               number;
        b_monopcount              number;
        b_viceoddfare             number;
        b_viceopfare              number;
        b_viceopcount             number;
    begin
        out_result := -1000;
        out_msg := '处理电子钱包、次卡钱包和月票充值未决记录开始！';
        vopmonth := 0;
        n_customerid := prmcustomerid;
        --------------------------------------------------------------------------------

        --验证账户、设备、psam卡号、职员合法性
        proc_verify_baseinfo (n_customerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if out_result <> 100
        then
            out_result := -1001;
            out_msg := '基本信息验证失败，' || out_msg;
            return;
        end if;

        --------------------------------------------------------------------------------
        --验证个人信息
        select count (*)
          into vcount
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount < 1
        then
            out_result := -1001;
            out_msg := '无此卡信息！';
            return;
        end if;

        --验证个人信息
        select electropcount,
               electrsaveopcount,
               monopcount,
               monsaveopcount,
               numberopcount,
               numbersaveopcount
          into velectropcount,
               velectrsaveopcount,
               vmonopcount,
               vmonsaveopcount,
               vviceopcount,
               vvicesaveopcount
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --库中的交易计数不允许比卡上交易计数大
        if    velectropcount > prmelectropcount
           or velectrsaveopcount > prmelectrsaveopcount
        then
            out_result := -1002;
            out_msg :=
                   '电子钱包交易计数校验失败！'
                || velectropcount
                || prmelectropcount
                || velectrsaveopcount
                || prmelectrsaveopcount;
            return;
        end if;

        --库中的交易计数不允许比卡上交易计数大
        if    vviceopcount > prmviceopcount
           or vvicesaveopcount > prmvicesaveopcount
        then
            out_result := -1002;
            out_msg :=
                   '次卡钱包交易计数校验失败！'
                || vviceopcount
                || prmviceopcount
                || vvicesaveopcount
                || prmvicesaveopcount;
            return;
        end if;

        --库中的交易计数不允许比卡上交易计数大
        if    vmonopcount > prmmonthopcount
           or vmonsaveopcount > prmmonthsaveopcount
        then
            out_result := -1002;
            out_msg :=
                   '月票钱包交易计数校验失败！'
                || vmonopcount
                || prmmonthopcount
                || vmonsaveopcount
                || prmmonthsaveopcount;
            return;
        end if;

        ----------每次读卡都以卡信息更新数据库信息-------------------------------------
        --每次读卡都以卡信息更新数据库信息
        out_result := -1002;
        out_msg := '更新账本信息';

        update base_customers a
           set a.electropcount = prmelectropcount,
               a.electrsaveopcount = prmelectrsaveopcount,
               a.numberopcount = prmviceopcount,             -- prmmonopcount,
               a.numbersaveopcount = prmvicesaveopcount,
               a.electroddfare = prmelectroddfare,
               a.sumelectraddfare = prmsumelectraddfare,
               a.numberoddfare = prmviceoddfare,
               a.monopcount = prmmonthopcount,
               monsaveopcount = prmmonthsaveopcount,
               monoddfare = prmmonthoddfare
         where     a.customerid = prmcustomerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --------------判断是否有未决记录------------------------------------------
        out_result := -1002;
        out_msg := '判断是否有未决记录';

        --电子钱包未决
        --查询电子钱包未决记录数
        select nvl (count (*), 0)
          into n_elecunsetcount
          from rec_electtron_cash_plan
         where     customerid = prmcustomerid
               and cardsn = prmcardsn
               and status = 1
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --有未决记录多于一笔，无法校验
        if n_elecunsetcount > 2
        then
            --电子钱包未决记录
            out_result := -1005;
            out_msg := '钱包未决记录记录异常无法校验';
            return;
        end if;

        --查询月票未决记录数
        select nvl (count (*), 0)
          into n_monunsetcount
          from rec_monticket_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and status = 1
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --有未决记录多于一笔，无法校验
        if n_monunsetcount > 2
        then
            --没有电子钱包和月票未决记录
            out_result := -1005;
            out_msg := '月票未决记录记录异常无法校验';
            return;
        end if;

        --查询次卡钱包未决记录数
        select nvl (count (*), 0)
          into n_viceunsetcount
          from rec_vicecard_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and status = 1
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --有未决记录多于一笔，无法校验
        if n_viceunsetcount > 2
        then
            --没有电子钱包和次卡未决记录
            out_result := -1005;
            out_msg := '次卡未决记录记录异常无法校验';
            return;
        end if;

        -------------确定有未决记录，进行未决处理--------------------------------------
        out_result := -1005;
        out_msg := '确定有未决记录，进行未决处理';

        if n_elecunsetcount > 0
        then
            out_result := -1005;
            out_msg := '处理当前卡电子钱包未决记录开始！';

            --zxn 20120418增加未决卡余额、未决交易金额和交易科目、账号信息、tac值处理、申请时planid
            select a.planid,
                   a.electropcount,
                   a.electrsaveopcount,
                   a.electroddfare,
                   a.electropfare,
                   a.acccode,
                   a.customerid,
                   a.tac,
                   a.oldplanid
              into n_unset_planid,
                   n_unset_elecopcount,
                   n_unset_elecsaveopcount,
                   vplanelectroddfare,
                   vplanelectropfare,
                   vplanacccode,
                   n_unset_customerid,
                   n_unset_tac,
                   n_unset_oldplanid
              from rec_electtron_cash_plan a
             where     customerid = prmcustomerid
                   and cardsn = prmcardsn
                   and status = 1
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            --zxn 20120426 增加判断
            --prmelectropcount > n_unset_elecopcount 改为prmelectropcount >= n_unset_elecopcount
            if (    prmelectrsaveopcount = n_unset_elecsaveopcount + 1
                and prmelectropcount >= n_unset_elecopcount
                and prmcardkind = 1)
            then
                --m1卡写卡成功
                pkg_handdeal_unsetcash.module_electrcash_commit (
                    n_unset_planid,
                    prmcustomerid,
                    n_unset_tac,
                    prmcustomerunitcode,
                    out_result,
                    out_msg);
            elsif (    prmelectrsaveopcount = n_unset_elecsaveopcount + 1
                   and prmelectropcount >= n_unset_elecopcount
                   and prmcardkind = 2)
            then
                --cpu卡写卡成功
                pkg_handdeal_unsetcash.module_electrcash_commit (
                    n_unset_planid,
                    prmcustomerid,
                    n_unset_tac,
                    prmcustomerunitcode,
                    out_result,
                    out_msg);
            elsif (    prmelectrsaveopcount = n_unset_elecsaveopcount
                   and prmelectropcount >= n_unset_elecopcount)
            then
                --增加判断有可能是充值撤销的未决记录 （充值撤销相当于取款消费）
                if vplanacccode = '240'
                then
                    --如果卡上消费计数  = 未决消费计数+ 1 （通过判断卡上的余额和未决表中卡余额-交易金额最对比进行判断）
                    --未决卡余额-未决消费金额 = 目前卡上余额 则证明写卡成功，提交记录
                    if (    prmelectropcount = n_unset_elecopcount + 1
                        and (vplanelectroddfare - vplanelectropfare =
                                 prmelectroddfare))  --如果消费计数=未决计数+1
                    then
                        --写卡成功，进行提交
                        pkg_handdeal_unsetcash.repeal_electrcash_commit (
                            n_unset_planid,
                            prmcustomerid,
                            n_unset_tac,
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    elsif (prmelectropcount > n_unset_elecopcount + 1)
                    then
                        --判断消费记录表中的后续记录
                        select count (a.cstaccfc)
                          into vcount
                          from rec_electtron_consume a
                         where     a.opcount - 1 = n_unset_elecopcount + 1
                               and a.customerid = n_unset_customerid
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        if vcount = 0
                        then
                            --没有后续消费记录无法判断
                            out_result := -1005;
                            out_msg := '无法校验未决记录';
                            return;
                        end if;

                        select a.electronoddfare, a.electronopfare, a.opcount
                          into b_eleoddfare, b_eleopfare, b_eleopcount
                          from rec_electtron_consume a
                         where     a.customerid = n_unset_customerid
                               and a.opcount - 1 = n_unset_elecopcount + 1
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        --如果当前卡上交易计数的后续消费记录的卡余额+消费金额= 当前卡余额则证明写卡成功
                        if (    b_eleoddfare + b_eleopfare = prmelectroddfare
                            and b_eleopcount >= prmelectropcount)
                        then
                            --写卡成功，进行提交
                            pkg_handdeal_unsetcash.repeal_electrcash_commit (
                                n_unset_planid,
                                prmcustomerid,
                                n_unset_tac,
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        else
                            --写卡失败进行回滚
                            pkg_handdeal_unsetcash.module_electrcash_rollback (
                                n_unset_planid,
                                prmcustomerid,
                                -300,
                                '充值前校验写卡失败',
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        end if;
                    elsif (    prmelectrsaveopcount = n_unset_elecsaveopcount
                           and prmelectropcount >= n_unset_elecopcount)
                    then
                        --写卡失败进行回滚
                        pkg_handdeal_unsetcash.module_electrcash_rollback (
                            n_unset_planid,
                            prmcustomerid,
                            -300,
                            '充值前校验写卡失败',
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    else
                        out_result := -1007;
                        out_msg := '无法校验电子钱包未决记录完毕！';
                        rollback;
                        return;
                    end if;
                else
                    --写卡失败
                    pkg_handdeal_unsetcash.module_electrcash_rollback (
                        n_unset_planid,
                        prmcustomerid,
                        -300,
                        '充值前校验写卡失败',
                        prmcustomerunitcode,
                        out_result,
                        out_msg);
                end if;

                if out_result <> 100
                then
                    --out_result := -1007;
                    out_result := out_result;
                    out_msg :=
                        '处理电子钱包未决记录出错：' || out_result || out_msg;
                    rollback;
                    return;
                end if;
            else
                out_result := -1007;
                out_msg := '无法校验电子钱包未决记录完毕！';
                rollback;
                return;
            end if;

            if out_result <> 100
            then
                --out_result := -1007;
                out_result := out_result;
                out_msg :=
                    '处理电子钱包未决记录出错：' || out_result || out_msg;
                rollback;
                return;
            end if;
        end if;

        --------------------------------------------------------------------------------
        if n_monunsetcount > 0                                        --有月票
        then
            out_result := -1005;
            out_msg := '处理当前卡月票钱包未决记录开始！';

            --检查账本信息是否完整
            select count (*)
              into vcount
              from base_customers_monticket
             where     customerid = n_customerid
                   and cardasn = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            if vcount <= 0
            then
                out_result := -1010;
                out_msg := '有月票充值未决记录，但无月票账本信息';
                rollback;
                return;
            end if;

            select a.planid,
                   a.viceopcount,
                   a.vicesaveopcount,
                   a.acccode,
                   a.viceoddfare,
                   a.viceopfare
              into n_unset_planid,
                   n_unset_monopcount,
                   n_unset_monsaveopcount,
                   vplanacccode,
                   vplanmonthoddfare,
                   vplanmonthopfare
              from rec_monticket_cash_plan a
             where     customerid = n_customerid
                   and cardsn = prmcardsn
                   and status = 1
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            if (    prmmonthsaveopcount = n_unset_monsaveopcount + 1
                and prmmonthopcount >= n_unset_monopcount)
            then
                --写卡成功
                pkg_handdeal_unsetcash.module_montrcash_commit (
                    n_unset_planid,
                    n_customerid,
                    '555555',
                    prmcustomerunitcode,
                    out_result,
                    out_msg);
            elsif (    prmmonthsaveopcount = n_unset_monsaveopcount
                   and prmmonthopcount >= n_unset_monopcount)
            then
                --增加判断有可能是充值撤销的未决记录 （充值撤销相当于取款消费）
                if vplanacccode = '242'
                then
                    --如果卡上消费计数  = 未决消费计数+ 1 （通过判断卡上的余额和未决表中卡余额-交易金额最对比进行判断）
                    --未决卡余额-未决消费金额 = 目前卡上余额 则证明写卡成功，提交记录
                    if (    prmmonthopcount = n_unset_monopcount + 1
                        and (vplanmonthoddfare - vplanmonthopfare =
                                 prmmonthoddfare))   --如果消费计数=未决计数+1
                    then
                        --写卡成功，进行提交
                        pkg_handdeal_unsetcash.repeal_monticket_commit (
                            n_unset_planid,
                            prmcustomerid,
                            '555555',
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    elsif (prmmonthopcount > n_unset_monopcount + 1)
                    then
                        --判断消费记录表中的后续记录
                        select count (a.cstaccfc)
                          into vcount
                          from rec_monticket_consum a
                         where     a.opcount - 1 = n_unset_monopcount + 1
                               and a.customerid = prmcustomerid
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        if vcount = 0
                        then
                            --没有后续消费记录无法判断
                            out_result := -1005;
                            out_msg := '无法校验未决记录';
                            return;
                        end if;

                        select a.viceonoddfare, a.viceonopfare, a.opcount
                          into b_monoddfare, b_monopfare, b_monopcount
                          from rec_monticket_consum a
                         where     a.customerid = prmcustomerid
                               and a.opcount - 1 = n_unset_monopcount + 1
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        --如果当前卡上交易计数的后续消费记录的卡余额+消费金额= 当前卡余额则证明写卡成功
                        if (    b_monoddfare + b_monopfare = prmmonthoddfare
                            and b_monopcount >= prmmonthopcount)
                        then
                            --写卡成功，进行提交
                            pkg_handdeal_unsetcash.repeal_monticket_commit (
                                n_unset_planid,
                                prmcustomerid,
                                '555555',
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        else
                            --写卡失败进行回滚
                            pkg_handdeal_unsetcash.module_montrcash_rollback (
                                n_unset_planid,
                                n_customerid,
                                -400,
                                '充值时校验写卡失败',
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        end if;
                    elsif (    prmmonthsaveopcount = n_unset_monsaveopcount
                           and prmmonthopcount >= n_unset_monopcount)
                    then
                        --写卡失败进行回滚
                        pkg_handdeal_unsetcash.module_montrcash_rollback (
                            n_unset_planid,
                            n_customerid,
                            -400,
                            '充值时校验写卡失败',
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    else
                        out_result := -1007;
                        out_msg := '无法校验月票钱包未决记录完毕！';
                        rollback;
                        return;
                    end if;
                else
                    --写卡失败
                    pkg_handdeal_unsetcash.module_montrcash_rollback (
                        n_unset_planid,
                        n_customerid,
                        -400,
                        '充值时校验写卡失败',
                        prmcustomerunitcode,
                        out_result,
                        out_msg);
                end if;

                if out_result <> 100
                then
                    --out_result := -1007;
                    out_result := out_result;
                    out_msg :=
                        '处理月票钱包未决记录出错：' || out_result || out_msg;
                    rollback;
                    return;
                end if;
            else
                out_result := -1007;
                out_msg := '无法校验月票钱包未决记录';
                rollback;
                return;
            end if;

            if out_result <> 100
            then
                out_result := -1007;
                out_msg := '处理月票钱包未决记录出错：' || out_msg;
                rollback;
                return;
            end if;
        end if;

        --------------------------------------------------------------------------------
        if n_viceunsetcount > 0                                   --有次卡钱包
        then
            out_result := -1005;
            out_msg := '处理当前卡次卡钱包未决记录开始！';

            select a.planid,
                   a.viceopcount,
                   a.vicesaveopcount,
                   a.viceoddfare,
                   a.viceopfare,
                   a.acccode
              into n_unset_planid,
                   n_unset_viceopcount,
                   n_unset_vicesaveopcount,
                   vplanviceoddfare,
                   vplanviceopfare,
                   vplanacccode
              from rec_vicecard_cash_plan a
             where     customerid = n_customerid
                   and cardsn = prmcardsn
                   and status = 1
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;
 out_msg := '处理当前卡次卡钱包未决记录开始88888';
            if (    prmvicesaveopcount = n_unset_vicesaveopcount + 1
                and prmviceopcount >= n_unset_viceopcount)
            then
                --写卡成功
                pkg_handdeal_unsetcash.module_vicecardcash_commit (
                    n_unset_planid,
                    prmcustomerid,
                    '666666',
                    prmcustomerunitcode,
                    out_result,
                    out_msg);
            elsif (    prmvicesaveopcount = n_unset_vicesaveopcount
                   and prmviceopcount >= n_unset_viceopcount)
            then
                --增加判断有可能是充值撤销的未决记录 （充值撤销相当于取款消费）
                if vplanacccode = '241'
                then
                    --如果卡上消费计数  = 未决消费计数+ 1 （通过判断卡上的余额和未决表中卡余额-交易金额最对比进行判断）
                    --未决卡余额-未决消费金额 = 目前卡上余额 则证明写卡成功，提交记录
                    if (    prmviceopcount = n_unset_viceopcount + 1
                        and (vplanviceoddfare - vplanviceopfare =
                                 prmviceoddfare))    --如果消费计数=未决计数+1
                    then
                        --写卡成功，进行提交
                        pkg_handdeal_unsetcash.repeal_vicecard_commit (
                            n_unset_planid,
                            prmcustomerid,
                            '555555',
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    elsif (prmviceopcount > n_unset_viceopcount + 1)
                    then
                        --判断消费记录表中的后续记录
                        select count (a.cstaccfc)
                          into vcount
                          from rec_vicecard_consume a
                         where     a.opcount - 1 = n_unset_viceopcount + 1
                               and a.customerid = prmcustomerid
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        if vcount = 0
                        then
                            --没有后续消费记录无法判断
                            out_result := -1005;
                            out_msg := '无法校验未决记录';
                            return;
                        end if;

                        select a.viceonoddfare, a.viceonopfare, a.opcount
                          into b_viceoddfare, b_viceopfare, b_viceopcount
                          from rec_vicecard_consume a
                         where     a.customerid = prmcustomerid
                               and a.opcount - 1 = n_unset_viceopcount + 1
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        --如果当前卡上交易计数的后续消费记录的卡余额+消费金额= 当前卡余额则证明写卡成功
                        if (    b_viceoddfare + b_viceopfare = prmviceoddfare
                            and b_viceopcount >= prmviceopcount)
                        then
                            --写卡成功，进行提交
                            pkg_handdeal_unsetcash.repeal_vicecard_commit (
                                n_unset_planid,
                                prmcustomerid,
                                '555555',
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        else
                            --写卡失败进行回滚
                            pkg_handdeal_unsetcash.module_vicecardcash_rollback (
                                n_unset_planid,
                                prmcustomerid,
                                -500,
                                '充值前校验写卡失败',
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        end if;
                    elsif (    prmvicesaveopcount = n_unset_vicesaveopcount
                           and prmviceopcount >= n_unset_viceopcount)
                    then
                        --写卡失败进行回滚
                        pkg_handdeal_unsetcash.module_vicecardcash_rollback (
                            n_unset_planid,
                            prmcustomerid,
                            -500,
                            '充值前校验写卡失败',
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    else
                        out_result := -1007;
                        out_msg := '无法校验次卡钱包未决记录完毕！';
                        rollback;
                        return;
                    end if;
                else
                    --写卡失败
                    pkg_handdeal_unsetcash.module_vicecardcash_rollback (
                        n_unset_planid,
                        prmcustomerid,
                        -500,
                        '充值前校验写卡失败',
                        prmcustomerunitcode,
                        out_result,
                        out_msg);
                end if;

                if out_result <> 100
                then
                    --out_result := -1007;
                    out_result := out_result;
                    out_msg :=
                        '处理次卡钱包未决记录出错：' || out_result || out_msg;
                    rollback;
                    return;
                end if;
            else
                out_result := -1007;
                out_msg := '无法校验次卡钱包未决记录完毕！';
                rollback;
                return;
            end if;

            if out_result <> 100
            then
                out_result := -1007;
                out_msg := '处理次卡钱包未决记录出错：' || out_msg;
                rollback;
                return;
            end if;
        end if;

        --------------------------------------------------------------------------------
        --验证电子钱包未决记录是否处理完毕
        select nvl (count (*), 0)
          into vcount
          from rec_electtron_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and status = 1
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount <> 0
        then
            out_result := -1017;
            out_msg := '存在未处理为电子钱包领款未决记录!';
            rollback;
            return;
        end if;

        --验证月票钱包未决记录是否处理完毕
        select nvl (count (*), 0)
          into vcount
          from rec_monticket_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and status = 1
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount <> 0
        then
            out_result := -1018;
            out_msg := '存在未处理为月票钱包领款未决记录!';
            rollback;
            return;
        end if;

        --验证次卡钱包未决记录是否处理完毕
        select nvl (count (*), 0)
          into vcount
          from rec_vicecard_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and status = 1
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount <> 0
        then
            out_result := -1018;
            out_msg := '存在未处理为次卡钱包领款未决记录!';
            rollback;
            return;
        end if;

        out_result := -1018;
        out_msg := '形成未决校验记录';

        --记录未决校验记录
        insert into rec_cash_request (requestid,
                                      customerid,
                                      cardno,
                                      cardsn,
                                      opdt,
                                      cardtypedetailid,
                                      cardkind,
                                      electropcount,
                                      electrsaveopcount,
                                      monopcount,
                                      monsaveopcount,
                                      sumfare,
                                      electroddfare,
                                      poscode,
                                      samcardno,
                                      uploaddate,
                                      empid,
                                      viceopcount,
                                      vicesaveopcount,
                                      viceoddfare,
                                      monoddfare,
                                      customerunitcode)
             values (0,
                     n_customerid,
                     prmcardno,
                     prmcardsn,
                     sysdate,
                     prmcardtypedetailid,
                     prmcardkind,
                     prmelectropcount,
                     prmelectrsaveopcount,
                     prmmonthopcount,
                     prmmonthsaveopcount,
                     prmsumelectraddfare,
                     prmelectroddfare,
                     prmposcode,
                     prmpsamcardno,
                     sysdate,
                     prmempid,
                     prmviceopcount,
                     prmvicesaveopcount,
                     prmviceoddfare,
                     prmmonthoddfare,
                     prmcustomerunitcode);

        --------------------------------------------------------------------------------
        out_result := 100;
        out_msg := '未决帐处理完毕，可以进行充值操作!';
        commit;
        return;
    exception
        when others
        then
            rollback;

            if out_result > 0
            then
                out_result := -1001;
            else
                out_result := out_result;
            end if;

            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;

    procedure proc_request_month_cash (--客户基本信息-------------
                                       prmcustomerid         in     number, --客户编号
                                       prmcardno             in     number, --卡号
                                       prmcardsn             in     number, --持卡序号
                                       prmvicesaveopcount    in     number, --申请前充值交易计数
                                       prmviceopcount        in     number, --消费计数
                                       prmcardkind           in     number, --卡类型
                                       prmcardtypedetailid   in     number, --卡类型小类
                                       prmopdt               in     varchar2, --操作时间
                                       --客户金额信息-------------
                                       prmsumviceaddfare     in     number, --卡总额
                                       prmviceoddfare        in     number, --次卡钱包消费后余额
                                       prmvicedummyopfare    in     number, --虚充金额
                                       prmviceopfare         in     number, --次卡钱包实充金额
                                       --终端交易信息-------------
                                       prmposcode            in     number, --消费终端
                                       prmpsamcardno         in     number, --psam卡号
                                       prmempid              in     number, --充值员编号
                                       prmcardasn            in     number,
                                       --返回值-------------------
                                       prmplanid                out number, --领款计划id
                                       prmcustomerunitcode   in     varchar2,
                                       --根据卡结构改动，表结构新增字段
                                       prmlimittimes         in     number, --每月消费限制次数
                                       prmmonthnum           in     number, --充值月数
                                       prmvalidtimestart     in     varchar2, --有效起日
                                       prmvalidtimeend       in     varchar2, --有效止日
                                       out_result               out number,
                                       out_msg                  out varchar2)
    as
        /*
       --------------------------------------------------------------------------
       --存储过程： proc_request_month_cash
       --作　　者：梁小凯
       --时　　间：2009-07-03
       --说　　明： 月票钱包充值申请
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败
       --------------------------------------------------------------------------
       --修改标示：朱鹏飞 2009-08-07
       --修改说明：增加月票充值前未决处理
       --------------------------------------------------------------------------
       --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       --修改标记：周晓娜 20120910
       --修改说明： 增加客户代码和一人多卡的处理和充值额度判断
       --------------------------------------------------------------------------
       --修改标记：周晓娜 20121204
       --修改说明： 月票钱包信息修改表结构，根据表结构调整过程满足需求
       --------------------------------------------------------------------------
       */
        vcount                    number;
        visbalance                number;
        vplanid                   number;
        vacccode         constant number := 101;        --固定月票钱包充值科目
        vaccdesc                  varchar (20);
        vempid                    number;
        vareaid                   number;
        vvicesaveopcount          number;
        vplanacccode              number;
        vplanacccodegroup         number;
        --
        n_totalconsumfare         number (20, 2);               --累计消费金额
        n_refunddumpfare          number (10, 2);         --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2);               --最低消费限额
        n_customerid              number;                               --帐号
        v_paramvalue              varchar2 (20);                    --运行参数
        --充值额度
        v_dptcode                 varchar2 (9);     --职员所属网点（部门编号）
        v_termdptcode             varchar2 (9);     --终端所属网点（部门编号）
        n_isuse                   number;               --是否启用网点授权额度
        n_curoddfare              number (20, 2);               --可用充值额度
        n_workstatus              number;         --状态：0正常状态，1透支状态
        d_limitenddate            date;                     --允许透支截止日期
        d_currdate                date;                             --当前日期
        n_maxlimitdate            number;                     --最大逾期（天）
        n_allowoverdraftfare      number (20, 2);               --允许透支金额
        v_validtimestart          varchar2 (20);                    --有效起日
        v_validtimeend            varchar2 (20);                    --有效止日
        vmonthfreezefare          number (20, 2);
    begin
        --初始化变量
        v_validtimestart :=
            to_date (prmvalidtimestart, 'yyyy-mm-dd hh24:mi:ss');
        v_validtimeend := to_date (prmvalidtimeend, 'yyyy-mm-dd hh24:mi:ss');
        prmplanid := -1;
        out_result := -1000;
        out_msg := '充值申请开始！';
        d_currdate := sysdate;                                  --系统当前日期
        --验证账户、设备、psam卡号、职员合法性
        proc_verify_baseinfo (prmcustomerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if out_result <> 100
        then
            out_result := -1002;
            out_msg := '基本信息验证不通过' || out_msg;
            return;
        end if;

        --2013.7.19新加判断未领冻结金额条件
        select sum (monthfreezefare)
          into vmonthfreezefare
          from rec_freezefare_acc a
         where     a.customerid = prmcustomerid
               and a.customerunitcode = prmcustomerunitcode
               and monthfreezefareflag = 0
               and cardid in
                       (select id
                          from base_customers
                         where     customerid = prmcustomerid
                               and customerunitcode = prmcustomerunitcode
                               and cardno = prmcardno);

        if vmonthfreezefare > 0
        then
            out_result := -1003;
            out_msg := '有未领月票冻结金额，当前只能充值电子钱包！';
            return;
        end if;

        --2013.7.19新加判断未领冻结金额条件结束
        --------------------------------------------------------------------------------

        --验证交易金额合法性
        if (prmviceopfare < 0)
        then
            out_result := -1001;
            out_msg := '交易金额必须大于0！';
            return;
        end if;

        --交易金额是充值交款金额和虚充金额的和，一定是大于，如果小于则为异常
        if prmviceopfare < prmvicedummyopfare
        then
            out_result := -1002;
            out_msg := '交易金额必须大于或等于虚充金额！';
            return;
        end if;

        --------------------------------------------------------------------------------
        out_result := -1003;
        out_msg := '获取交易科目描述！';

        select count (*)
          into vcount
          from base_acc_type a
         where a.acccode = vacccode;

        if vcount = 0
        then
            out_result := -1004;
            out_msg := '交易科目不存在acccode:' || to_char (vacccode);
            return;
        end if;

        select accdscrp
          into vaccdesc
          from base_acc_type
         where acccode = vacccode;

        --------------------------------------------------------------------------------
        ------------------------增加充值额度判断-------------------------------

        --根据职员编号获取网点编号
        select a.dptcode
          into v_dptcode
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.empid = prmempid
               and a.customerunitcode = prmcustomerunitcode;

        --根据终端编号获取网点编号
        select a.dptcode
          into v_termdptcode
          from base_term a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.poscode = prmposcode
               and a.customerunitcode = prmcustomerunitcode;

        if v_dptcode <> v_termdptcode
        then
            out_result := -1026;
            out_msg := '出纳员、终端不属于同一个点';
            return;
        end if;

        --根据职员编号获取职员所属网点
        begin
            select a.curoddfare,
                   a.isuse,
                   a.workstatus,
                   a.maxlimitdate,
                   a.limitenddate,
                   a.allowoverdraftfare
              into n_curoddfare,
                   n_isuse,
                   n_workstatus,
                   n_maxlimitdate,
                   d_limitenddate,
                   n_allowoverdraftfare
              from base_chargeauth a
             where     a.businesspoint = v_dptcode
                   and a.customerunitcode = prmcustomerunitcode;

            --该充值网点启用充值授权额度
            if n_isuse = 1
            then
                --充值额度不足
                if n_curoddfare < prmviceopfare - prmvicedummyopfare
                then
                    --当前状态为正常状态
                    if n_workstatus = 0
                    then
                        --此出纳员允许透支
                        if d_currdate + n_maxlimitdate > d_currdate
                        then
                            --透支额度不足
                            if n_allowoverdraftfare + n_curoddfare <
                                   prmviceopfare - prmvicedummyopfare
                            then
                                out_result := -1026;
                                out_msg := '允许透支额度不足，不能充值';
                                return;
                            end if;

                            --更新当前状态为透支状态，允许透支截止日期=当前日期+最大逾期
                            update base_chargeauth
                               set workstatus = 1,
                                   limitenddate = d_currdate + n_maxlimitdate
                             where     businesspoint = v_dptcode
                                   and customerunitcode = prmcustomerunitcode;
                        --没有授权允许逾期天数
                        else
                            out_result := -1027;
                            out_msg := '超过充值授权最大逾期，不能充值';
                            return;
                        end if;
                    --当前状态为透支状态
                    else
                        --没有超过最大逾期截止日期
                        if d_currdate < d_limitenddate
                        then
                            if n_allowoverdraftfare <
                                   prmviceopfare - prmvicedummyopfare
                            then
                                out_result := -1028;
                                out_msg := '允许透支额度不足，不能充值';
                                return;
                            end if;
                        --超过最大逾期截止日期
                        else
                            out_result := -1029;
                            out_msg := '超过充值授权最大逾期，不能充值';
                            return;
                        end if;
                    end if;
                end if;
            end if;
        exception
            when others
            then
                out_result := -1030;
                out_msg := '获取充值授权额度信息异常';
                return;
        end;

        --------------------------------------------------------------------------------
        --校验领未未决记录
        select count (*)
          into vcount
          from rec_monticket_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if (vcount <> 0)
        then
            out_result := -1025;
            out_msg := '当前卡存在月票未决记录，无法进行充值操作';
            return;
        end if;

        ----------------------------------------------------------------------
        --验证账户状态
        select monsaveopcount
          into vvicesaveopcount
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and customerunitcode = prmcustomerunitcode;

        select nvl (count (*), 0)
          into vcount
          from base_customers_monticket
         where     customerid = prmcustomerid
               and cardasn = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount < 1
        then
            insert into base_customers_monticket (customerid,
                                                  sumconsumefare,
                                                  sumrdummyfare,
                                                  sumaddfare,
                                                  sumaddfareacc,
                                                  refunddumpfare,
                                                  refundlimitconsumfare,
                                                  ver,
                                                  sumadddummyfare,
                                                  customerunitcode,
                                                  cardasn--需要添加清零日期和清零方式,vicehangdate,hangtype
                                                  )
                 values (prmcustomerid,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         prmcustomerunitcode,
                         prmcardno);
        end if;

        --获取月票钱包消费额累积、未消费完的虚充金额、最低消费限额
        select sumconsumefare, refunddumpfare, refundlimitconsumfare
          into n_totalconsumfare, n_refunddumpfare, n_refundlimitconsumfare
          from base_customers_monticket
         where     customerid = prmcustomerid
               and cardasn = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --只允许卡上的交易计数和数据库中一至，才进行充值申请操作
        if prmvicesaveopcount <> vvicesaveopcount
        then
            out_result := -1025;
            out_msg :=
                   '卡充值交易计数校验错误！库中交易计数为：'
                || to_char (vvicesaveopcount)
                || '，卡上充值交易计数为：'
                || to_char (prmvicesaveopcount);
            return;
        end if;

        --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
        --如果用卡余额计算的累计消费金额大，则说明卡上软准确
        --如果库里大，则说明库里可能正确，卡上总额可能错误
        if prmsumviceaddfare - prmviceoddfare > n_totalconsumfare
        then
            n_totalconsumfare := prmsumviceaddfare - prmviceoddfare;
        else
            n_totalconsumfare := n_totalconsumfare;
        end if;

        --比较累计消费金额与最低消费限额
        --如果累计消费金额大于等于最低消费限额，则虚充金额清零
        if     n_totalconsumfare >= n_refundlimitconsumfare
           and n_totalconsumfare > 0
        then
            out_result := -1008;
            out_msg := '月票钱包虚充金额清零';

            update base_customers
               set refunddumpfare = 0
             where     customerid = n_customerid
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            out_result := -1008;
            out_msg := '形成月票钱包虚充金额清零记录';

            insert into rec_rushvicedumpfare_log (id,
                                                  customerid,
                                                  cardno,
                                                  viceopcount,
                                                  vicesaveopcount,
                                                  lastdumpfare,
                                                  elecsumfare,
                                                  sumconsumfare,
                                                  opdt,
                                                  poscode,
                                                  psamcardno,
                                                  customerunitcode,
                                                  wallettype)
                 values (0,
                         prmcustomerid,
                         prmcardno,
                         prmviceopcount,
                         prmvicesaveopcount,
                         n_refunddumpfare,
                         prmsumviceaddfare,
                         n_totalconsumfare,
                         sysdate,
                         prmposcode,
                         prmpsamcardno,
                         prmcustomerunitcode,
                         2);
        end if;

        out_result := -1026;
        out_msg := '获取交易流水号！';

        --获取申请流水号
        select seq_cash_plan.nextval into vplanid from dual;

        --------------------------------------------------------------------------------
        out_result := -1027;
        out_msg := '形成充值申请记录！';

        insert into rec_monticket_cash_plan (planid,
                                             customerid,
                                             cardno,
                                             cardsn,
                                             cardtypedetailid,
                                             sumviceaddfare,
                                             viceoddfare,
                                             viceoddfarepre,
                                             viceopfare,
                                             vicedummyopfare,
                                             vicesaveopcount,
                                             viceopcount,
                                             status,
                                             acccode,
                                             opdt,
                                             description,
                                             cardkind,
                                             poscode,
                                             psamcardno,
                                             empid,
                                             dealtype,
                                             wallettype,
                                             tac,
                                             samtradeno,
                                             ver,
                                             customerunitcode,
                                             validtimestart,
                                             validtimeend,
                                             limittimes,
                                             monthnum)
             values (vplanid,
                     prmcustomerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumviceaddfare,
                     0,
                     prmviceoddfare,
                     prmviceopfare,
                     prmvicedummyopfare,
                     prmvicesaveopcount,
                     prmviceopcount,
                     1,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     1,
                     2,
                     0,
                     0,
                     0,
                     prmcustomerunitcode,
                     v_validtimestart,
                     v_validtimeend,
                     prmlimittimes,
                     prmmonthnum);

        --------------------------------------------------------------------------------
        out_result := -1028;
        out_msg := '形成充值申请记录日志！';

        insert into rec_monticket_cash_plan_log (planid,
                                                 customerid,
                                                 cardno,
                                                 cardsn,
                                                 cardtypedetailid,
                                                 sumviceaddfare,
                                                 viceoddfare,
                                                 viceoddfarepre,
                                                 viceopfare,
                                                 vicesaveopcount,
                                                 viceopcount,
                                                 status,
                                                 acccode,
                                                 opdt,
                                                 description,
                                                 cardkind,
                                                 poscode,
                                                 psamcardno,
                                                 empid,
                                                 dealtype,
                                                 wallettype,
                                                 tac,
                                                 samtradeno,
                                                 ver,
                                                 createdt,
                                                 customerunitcode,
                                                 limittimes,
                                                 monthnum,
                                                 validtimestart,
                                                 validtimeend)
             values (vplanid,
                     prmcustomerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumviceaddfare,
                     0,
                     prmviceoddfare,
                     prmviceopfare,
                     prmvicesaveopcount,
                     prmviceopcount,
                     0,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     1,
                     2,
                     0,
                     0,
                     0,
                     sysdate,
                     prmcustomerunitcode,
                     prmlimittimes,
                     prmmonthnum,
                     v_validtimestart,
                     v_validtimeend);

        --------------------------------------------------------------------------------
        prmplanid := vplanid;
        out_result := 100;
        out_msg := '充值申请成功！';
        commit;
    exception
        when others
        then
            rollback;
            prmplanid := -1;
            out_result := -1;
            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;

    procedure proc_build_month_rush (prmcustomerid         in     number, --账号
                                     prmcardno             in     number, --卡号
                                     prmcardsn             in     number, --持卡序号
                                     prmmonsaveopcount     in     number, --充值计数
                                     prmmonopcount         in     number, --消费交易计数
                                     prmcardkind           in     number, --卡类别
                                     prmcardtypedetailid   in     number, --卡类型
                                     prmopdt               in     varchar2, --清零时间
                                     prmhangdatemonth      in     date, --清零月份
                                     prmhangdatemonthpre   in     date,
                                     prmposcode            in     number, --设备唯一编号
                                     prmempid              in     number, --操作职员
                                     prmpsamcardno         in     number, --psam卡号
                                     prmmonoddfare         in     number, --清零金额
                                     prmcustomerunitcode   in     varchar2, --客户代码
                                     prmwallettype         in     number,
                                     out_result               out number,
                                     out_msg                  out varchar2)
    as
        /*
       -------------------------------------------------------------------------------
       --存储过程： proc_build_month_rush
       --作　　者：梁小凯
       --时　　间：2009-07-03
       --说　　明： 月票钱包充零
       --应用环境：在充值提交时调用，为内部过程，不得包含提交回滚，外层使用过程要判断
       --    处理结果，100为成功提交，其他为失败回滚
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败
       --------------------------------------------------------------------------
       --修改标示：朱鹏飞 2009-07-24
       --修改说明：增加冲零统计时更新账本系统余额
       --------------------------------------------------------------------------
       --修改标示：朱鹏飞 2009.12.21
       --修改说明：去掉cardking和areaid两个多余的变量
       --------------------------------------------------------------------------
       --修改标示：周晓娜 20120911
       --修改说明：兼容多客户处理
       --------------------------------------------------------------------------
       --修改标记：周晓娜 20121224
       --修改说明： 增加资产负债账目-收支、会计账目处理
       --------------------------------------------------------------------------
       --修改标记：周晓娜 20130417
       --修改说明： 修改该过程支持销户时月票钱包冲零使用
       --------------------------------------------------------------------------
       */
        vaccdesc          varchar2 (30);
        vacccode          number;
        v_deptcode        varchar2 (10);
        vcount            number;
        v_excesql         varchar2 (1000);
        --账户类型（收支账户使用）
        v_codeid          varchar2 (50);            --获取该客户法人的账户信息
        n_cashaccfc       number;                   --形成消费明细的原始流水号
        n_balancetype     number;
        --卡类型结算周期 0 月卡 1 季卡 2 半年卡 3 年卡，其它值没有结算周期
        n_clearzeroflag   number;
        --清零类型：1-固定日期清零，具体日期由单位结算日期字段规定；2-月末清零，在每月结束时清零；其它-保留(不清0)
        n_systemoddfare   number (20, 2);                       --出纳账户余额
    begin
        --赋初始值
        vacccode := 900;
        n_balancetype := -1;
        n_clearzeroflag := 0;
        out_result := -1001;
        out_msg := '冲零科目不存在';

        if prmwallettype = 2                                        --月票清零
        then
            vacccode := 900;
        else                                                        --次卡清零
            vacccode := 901;
        end if;

        select count (*)
          into vcount
          from base_acc_type
         where acccode = vacccode;

        if vcount = 0
        then
            out_result := -1011;
            out_msg := '冲零科目不存在';
            return;
        end if;

        select accdscrp
          into vaccdesc
          from base_acc_type
         where acccode = vacccode;

        select count (*)
          into vcount
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.empid = prmempid
               and a.customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1012;
            out_msg := '职员信息不合法！';
            return;
        end if;

        select a.dptcode
          into v_deptcode
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.empid = prmempid
               and a.customerunitcode = prmcustomerunitcode;

        /* --获取卡类型结算周期
         select a.paramvalue
           into n_balancetype
           from base_param a
          where a.paramname = 'balancetype'
            and a.paramgroupid = prmcardtypedetailid
            and a.customerunitcode = prmcustomerunitcode
            and a.flag = 0;

         --获取卡类型清零类型
         select a.paramvalue
           into n_clearzeroflag
           from base_param a
          where a.paramname = 'clearzeroflag'
            and a.paramgroupid = prmcardtypedetailid
            and a.customerunitcode = prmcustomerunitcode
            and a.flag = 0;

         --更新月票钱包
         v_excesql :=
               'update base_customers_monticket set oddfare_month'
            || to_char (prmopmonth)
            || ' = 0, hangdate_month'
            || to_char (prmopmonth)
            || ' = to_date('''
            || to_char (prmhangdatemonth, 'yyyy-mm-dd')
            || ''',''yyyy-mm-dd'') where customerid = '
            || prmcustomerid
            || ' and cardasn = '
            || prmcardno
            || ' and customerunitcode = '
            || prmcustomerunitcode;

         execute immediate v_excesql;*/

        --当冲零金额大于0时进行及时统计
        if prmmonoddfare > 0
        then
            --获取交易记录流水号
            select seq_rec_monticket_reset.nextval into n_cashaccfc from dual;

            --月票充零时间prmhangdatemonthpre
            insert into rec_monticket_reset (resetid,
                                             customerid,
                                             cardno,
                                             cardsn,
                                             createdate,
                                             cardtypedetailid,
                                             cardkind,
                                             monopcount,
                                             monsaveopcount,
                                             rushfare,
                                             hangdatemonth,
                                             planid,
                                             billno,
                                             acccode,
                                             dscrp,
                                             poscode,
                                             empid,
                                             psamcardno,
                                             customerunitcode)
                 values (n_cashaccfc,
                         prmcustomerid,
                         prmcardno,
                         prmcardsn,
                         sysdate,
                         prmcardtypedetailid,
                         prmcardkind,
                         prmmonopcount,
                         prmmonsaveopcount,
                         prmmonoddfare,
                         prmhangdatemonthpre,
                         -1,
                         -1,
                         vacccode,
                         vaccdesc,
                         prmposcode,
                         prmempid,
                         prmpsamcardno,
                         prmcustomerunitcode);

            --更新账本系统余额、 清零金额合计
            if prmwallettype = 2
            then
                update base_customers a
                   set summonthoddfareacc = summonthoddfareacc - prmmonoddfare,
                       summonrushfare = summonrushfare + prmmonoddfare
                 where     a.customerid = prmcustomerid
                       and cardno = prmcardno
                       and customerunitcode = prmcustomerunitcode;
            else
                update base_customers a
                   set numberoddfareacc = numberoddfareacc - prmmonoddfare,
                       sumvicerushfare = sumvicerushfare + prmmonoddfare
                 where     a.customerid = prmcustomerid
                       and cardno = prmcardno
                       and customerunitcode = prmcustomerunitcode;
            end if;

            out_result := -1019;
            out_msg := '清零金额账目及时统计';
            pkg_st_payment.proc_custdataaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                prmmonoddfare,
                vacccode,
                0,                                                  --打折费用
                prmcardkind,
                --卡类型 1：m1卡 2：cpu卡
                prmcardtypedetailid,
                --卡类型，普通卡，月卡，老年卡等
                prmempid,                                   --充值员或者司机id
                prmposcode,                                 --设备唯一运营编号
                prmpsamcardno,
                0,                                                    --线路id
                v_deptcode,
                0,                                                  --车辆编号
                --prmareaid,       --卡所属分区编号
                --0,                     --所属分区
                prmwallettype,
                --钱包类型 1电子 2月票
                0,                                  --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                out_msg := '冲零统计出错：' || out_msg;
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := vaccdesc || '余额冲零成功';
    exception
        when others
        then
            out_result := -1;
            out_msg := vaccdesc || '余额冲零异常,' || sqlerrm;
    end;

    procedure getbillno (prmplanid in out number, prmbillno out number)
    as
        /*
       ------------------------------------------------------------------------
       --存储过程： getbillno
       --作　　者：梁小凯
       --时　　间：2009-07-11
       --说　　明： 获取账单编号 目前使用于月票领款
       --输入参数：prmplanid=0时重新生成 >0时查询
       --输出参数：
       -----------------------------------------------------------------------
       */
        vcount   number;
        vdate    date;
    begin
        prmbillno := to_number (to_char (sysdate, 'yyyymmdd')) * 1000000 + 1;

        --需要根据planid找帐单编号
        if prmplanid > 0
        then
            --更具月票充值日志找帐单编号
            select count (*)
              into vcount
              from rec_monticket_cash_plan_log
             where planid = prmplanid;

            if vcount = 1
            then
                --如果可以找到帐单，直接返回
                select billno
                  into prmbillno
                  from rec_monticket_cash_plan_log
                 where planid = prmplanid;

                return;
            end if;
        end if;

        --prmplanid小于0或找不到帐单编号时产生新的帐单编号
        lock table rec_monticket_billno in exclusive mode;

        select count (*) into vcount from rec_monticket_billno;

        if vcount = 0
        then
            insert into rec_monticket_billno (billdt, billno)
                 values (sysdate, prmbillno);
        elsif vcount = 1
        then
            select billdt, billno
              into vdate, prmbillno
              from rec_monticket_billno;

            if to_char (vdate, 'yyyymmdd') <> to_char (sysdate, 'yyyymmdd')
            then
                prmbillno :=
                    to_number (to_char (sysdate, 'yyyymmdd')) * 1000000 + 1;

                update rec_monticket_billno
                   set billdt = sysdate, billno = prmbillno;
            else
                prmbillno := prmbillno + 1;

                update rec_monticket_billno
                   set billno = prmbillno;
            end if;
        else
            delete from rec_monticket_billno;

            insert into rec_monticket_billno (billdt, billno)
                 values (sysdate, prmbillno);
        end if;
    end;

    procedure proc_verify_baseinfo (prmcustomerid         in     number,
                                    prmcardno             in     number,
                                    prmcardsn             in     number,
                                    prmempid              in     number,
                                    prmsamcardno          in     number,
                                    prmposcode            in     number,
                                    prmcardasn            in     number,
                                    prmcustomerunitcode   in     varchar2, --客户代码
                                    out_result               out number,
                                    out_msg                  out varchar2)
    as
        /*
       -------------------------------------------------------------------------------
       --存储过程： proc_verify_baseinfo
       --作　　者：梁小凯
       --时　　间：2009-07-03
       --说　　明： 验证用户基本信息
       --应用场景：在领款申请，提交过程中验证，为内部验证过程，本过程不提交回滚，
       --    由外部调用过程决定是否提交或者回滚
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：验证正确，其他失败
       --------------------------------------------------------------------------
       --修改标记：周晓娜 20120910
       --修改说明：增加客户代码处理
       --------------------------------------------------------------------------
       */
        vcount     number;
        vstatus    number;
        vnousedt   date;
    begin
        out_result := -3000;
        out_msg := '验证基本信息开始';
        --------------------------------------------------------------------------------
        --检查是否正在数据结算
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0)                             --0当前系统未进行结算
        then
            out_result := -3001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        --------------------------------------------------------------------------------
        --检验客户代码是否合法
        select count (id)
          into vcount
          from base_legal_person
         where customerunitcode = prmcustomerunitcode;

        if vcount <> 1
        then
            out_result := -3011;
            out_msg := '系统中不存在客户代码：' || prmcustomerunitcode;
            return;
        end if;

        --------------------------------------------------------------------------------
        --验证终端
        select count (*)
          into vcount
          from base_term a
         where     a.poscode = prmposcode
               and isuse = 1
               and a.customerunitcode = prmcustomerunitcode;

        if vcount <> 1
        then
            out_result := -3002;
            out_msg :=
                   '系统中不存在poscode：'
                || to_char (prmposcode)
                || '或终端状态错误！';
            return;
        end if;

        --------------------------------------------------------------------------------
        --验证sam卡
        select count (*)
          into vcount
          from base_samcard a
         where     samcardno = prmsamcardno
               and a.customerunitcode = prmcustomerunitcode;

        if vcount <> 1
        then
            out_result := -3003;
            out_msg := '系统中不存在samcardno：' || to_char (prmsamcardno);
            return;
        end if;

        select state
          into vstatus
          from base_samcard
         where     samcardno = prmsamcardno
               and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -3004;
            out_msg := '充值psam卡状态异常，验证失败！';
            return;
        end if;

        --------------------------------------------------------------------------------
        select count (*)
          into vcount
          from base_emp a
         where     a.empid = prmempid
               and status = 1
               and a.customerunitcode = prmcustomerunitcode;

        if vcount <> 1
        then
            out_result := -3005;
            out_msg := '职员账号不存在或者职员状态不正常！';
            return;
        end if;

        --------------------------------------------------------------------------------
        select nvl (count (*), 0)
          into vcount
          from rec_bllt a
         where     cardno = prmcardno
               and a.state = 0
               and a.customerunitcode = prmcustomerunitcode;

        if vcount <> 0
        then
            out_result := -3006;
            out_msg := '此卡号在黑名单中！';
            return;
        end if;

        --------------------------------------------------------------------------------
        --验证账号、卡序号、卡号、卡状态、失效期
        select nvl (count (*), 0)
          into vcount
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and customerunitcode = prmcustomerunitcode;

        if vcount <> 1
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          prmsamcardno,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -3007;
            out_msg := '账号、卡号、卡序号验证失败！' || prmcardno;
            return;
        end if;

        select status, nousedate
          into vstatus, vnousedt
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -3008;
            out_msg := '账户状态验证失败！';
            return;
        end if;

        if vnousedt is null
        then
            out_result := -3009;
            out_msg := '客户失效期为空！';
            return;
        end if;

        if vnousedt < sysdate
        then
            out_result := -3010;
            out_msg := '客户已过失效期！';
            return;
        end if;

        --------------------------------------------------------------------------------
        out_result := 100;
        out_msg := '验证通过';
    exception
        when others
        then
            out_result := -1;
            out_msg := '验证异常：' || sqlerrm;
    end;

    procedure proc_rollback_month_cash (
        --客户基本信息-------------
        prmcustomerid         in     number,                        --客户编号
        prmcardno             in     number,                            --卡号
        prmcardsn             in     number,                        --持卡序号
        prmvicesaveopcount    in     number,                        --操作计数
        prmviceopcount        in     number,                        --操作计数
        --终端交易信息-------------
        prmposcode            in     number,                        --消费终端
        prmpsamcardno         in     number,
        prmempid              in     number,
        --返回值-------------
        prmplanid             in     number,
        prmcustomerunitcode   in     varchar2,
        out_result               out number,
        out_msg                  out varchar2)
    as
        /*
       -------------------------------------------------------------------------------
       --存储过程： proc_verify_baseinfo
       --作　　者：梁小凯
       --时　　间：2009-07-03
       --说　　明： 验证用户基本信息
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：验证正确，其他失败
       --------------------------------------------------------------------------
       --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       */
        vcount              number;
        --原申请记录信息
        vstatus             number;
        vcardno             number;
        vcardsn             number;
        vcustomerid         number;
        vvicesaveopcount    number;
        vviceopcount        number;
        vpsamcardno         number;
        vposcode            number;
        vplanacccode        number;                           --未决记录的科目
        vplanacccodegroup   number;                           --未决记录的科目
        n_customerid        number;                                     --帐号
        v_paramvalue        varchar2 (20);                          --运行参数
    begin
        out_result := -1000;
        out_msg := '回滚充值申请开始';
        --------------------------------------------------------------------------------
        n_customerid := prmcustomerid;

        --------------------------------------------------------------------------------
        --充值申请记录验证
        select nvl (count (*), 0)
          into vcount
          from rec_monticket_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := '充值申请记录不存在';
            return;
        end if;

        out_result := -1002;
        out_msg := '获取待回滚记录';

        --获取申请记录状态、卡号、卡序号、账号、次卡钱包充值交易计数
        --次卡钱包消费计数、终端设备唯一运行编号、psam 卡号
        select status,
               cardno,
               cardsn,
               customerid,
               vicesaveopcount,
               viceopcount,
               poscode,
               psamcardno,
               acccode
          into vstatus,
               vcardno,
               vcardsn,
               vcustomerid,
               vvicesaveopcount,
               vviceopcount,
               vposcode,
               vpsamcardno,
               vplanacccode
          from rec_monticket_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        ----验证卡与申请记录是否一致，是否允许回滚
        if vstatus <> 1
        then
            out_result := -1004;
            out_msg := '月票钱包充值申请记录状态非申请状态，不允许回滚';
            return;
        elsif vcardno <> prmcardno
        then
            out_result := -1005;
            out_msg := '月票与申请记录卡号不一致，不允许回滚';
            return;
        elsif vcustomerid <> n_customerid
        then
            out_result := -1006;
            out_msg := '账号与申请记录帐号不一致，不允许回滚';
            return;
        elsif vvicesaveopcount <> prmvicesaveopcount
        then
            out_result := -1007;
            out_msg := '卡充值操作计数与申请充值计数不一致，不允许回滚';
            return;
        elsif vviceopcount <> prmviceopcount
        then
            out_result := -1008;
            out_msg := '卡消费操作计数与申请消费计数不一致，不允许回滚';
            return;
        elsif vposcode <> prmposcode
        then
            out_result := -1009;
            out_msg := '交易终端与申请终端不一致，不允许回滚';
            return;
        elsif vpsamcardno <> prmpsamcardno
        then
            out_result := -1010;
            out_msg := '交易psam卡号与申请psam卡号不一致，不允许回滚';
            return;
        end if;

        --------------------------------------------------------------------------------
        pkg_handdeal_unsetcash.module_montrcash_rollback (
            prmplanid,
            n_customerid,
            -101,
            '月票钱包充值回滚',
            prmcustomerunitcode,
            out_result,
            out_msg);

        if out_result = 100
        then
            out_result := 100;
            out_msg := '月票钱包领款回滚成功！';
            commit;
        else
            out_result := -1005;
            out_msg := '月票钱包领款回滚成功！';
            rollback;
        end if;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，具体原因为：' || sqlerrm;
    end;

    procedure proc_commit_month_cash (--客户基本信息-------------
                                      prmcustomerid         in     number, --客户编号
                                      prmcardno             in     number, --卡号
                                      prmcardsn             in     number, --持卡序号
                                      prmvicesaveopcount    in     number, --操作计数
                                      prmviceopcount        in     number, --操作计数
                                      prmcardkind           in     number,
                                      prmcardtypedetailid   in     number,
                                      prmopdt               in     varchar2, --操作时间
                                      --客户金额信息-------------
                                      prmsumviceaddfare     in     number, --卡总额
                                      prmviceoddfare        in     number, --次卡钱包消费后余额
                                      prmvicedummyopfare    in     number,
                                      prmviceopfare         in     number, --次卡钱包消费金额
                                      prmviceoddfarepre     in     number, --次卡钱包充值前余额
                                      --终端交易信息-------------
                                      prmposcode            in     number, --消费终端
                                      prmpsamcardno         in     number,
                                      prmtac                in     varchar2, --tac验证码
                                      prmempid              in     number, --职员编号
                                      prmpsamtradeno        in     number,
                                      --返回值-------------------
                                      prmplanid             in     number,
                                      prmcardasn            in     number,
                                      prmcustomerunitcode   in     varchar2,
                                      out_result               out number,
                                      out_msg                  out varchar2)
    as
        ------------------------------------------------------------------------
        --存储过程： proc_commit_month_cash
        --作　　者：梁小凯
        --时　　间：2009-07-11
        --说　　明： 提交月票领款申请记录
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：记录上传成功，帐目统计成功，其他失败
        -----------------------------------------------------------------------
        --修改标识：程文平 2012-08-11
        --修改说明：兼容标准公交和住建部密钥系统
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20120911
        --修改说明： 增加客户代码和一人多卡的处理和充值额度判断
        --------------------------------------------------------------------------
        vcount             number;
        vacccodegroupid    number;
        vacccode           number;
        vacccodedesc       varchar2 (30);
        vstatus            number;
        vcardno            number;
        vcardsn            number;
        vcustomerid        number;
        vvicesaveopcount   number;
        vviceopcount       number;
        vpsamcardno        number;
        vposcode           number;
        visuse             number;
        vgroupid           number;
        vviceopfare        number;
        vvicedummyopfare   number;
        vareaid            number;
        v_deptcode         varchar2 (20);               --充值职员所属营业部门
        i_deptareaid       integer;                 --充值职员营业部门所属分区
        n_customerid       number;                                      --帐号
        v_paramvalue       varchar2 (20);                           --运行参数
        custom_exception   exception;
    begin
        --------------------------------------------------------------------------------
        out_result := -1000;
        out_msg := '充值提交开始！';
        --
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0)                             --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------

        --验证用户基本信息
        proc_verify_baseinfo (prmcustomerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if (out_result <> 100)
        then
            out_result := out_result;
            out_msg := '验证账户基本信息异常，' || out_msg;
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --验证金额合法性
        if (prmviceopfare <= 0)
        then
            out_result := -1002;
            out_msg := '充值金额必须大于0！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --账本表信息验证
        select count (*)
          into vcount
          from base_customers
         where     customerid = prmcustomerid
               and cardsn = prmcardsn
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1011;
            out_msg := '账本表中不存在该账号！';
            raise custom_exception;
        end if;

        select status,
               cardno,
               cardsn,
               monsaveopcount,
               monopcount
          into vstatus,
               vcardno,
               vcardsn,
               vvicesaveopcount,
               vviceopcount
          from base_customers
         where     customerid = prmcustomerid
               and cardsn = prmcardsn
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1012;
            out_msg := '账本表卡状态异常status:' || to_char (vstatus);
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1013;
            out_msg := '账本表卡号验证失败！';
            raise custom_exception;
        elsif vcardsn <> prmcardsn
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1014;
            out_msg := '账本表卡序号验证失败！';
            raise custom_exception;
        elsif vvicesaveopcount + 1 <> prmvicesaveopcount
        then
            out_result := -1015;
            out_msg := '账本表卡充值交易计数验证失败！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --充值申请记录验证
        select count (*)
          into vcount
          from rec_monticket_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1003;
            out_msg := '原充值申请记录不存在planid' || to_char (prmplanid);
            raise custom_exception;
        end if;

        --获取申请记录状态、卡号、卡序号、账号、次卡钱包充值交易计数
        --次卡钱包消费计数、终端编号、终端设备唯一运行编号、psam 卡号
        --交易科目、交易科目描述
        select status,
               cardno,
               cardsn,
               customerid,
               vicesaveopcount,
               viceopcount,
               poscode,
               psamcardno,
               acccode,
               description,
               viceopfare,
               vicedummyopfare
          into vstatus,
               vcardno,
               vcardsn,
               vcustomerid,
               vvicesaveopcount,
               vviceopcount,
               vposcode,
               vpsamcardno,
               vacccode,
               vacccodedesc,
               vviceopfare,
               vvicedummyopfare
          from rec_monticket_cash_plan a
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1004;
            out_msg := '充值申请记录状态非申请状态！';
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            out_result := -1005;
            out_msg := '充值申请记录卡号验证失败！';
            raise custom_exception;
        elsif vcustomerid <> n_customerid
        then
            out_result := -1006;
            out_msg := '充值申请记录帐号验证失败！';
            raise custom_exception;
        elsif vvicesaveopcount + 1 <> prmvicesaveopcount
        then
            out_result := -1007;
            out_msg := '充值申请记录充值交易计数验证失败！';
            raise custom_exception;
        elsif vviceopcount <> prmviceopcount
        then
            out_result := -1009;
            out_msg := 'cpu充值申请记录总交易技术验证失败！';
            raise custom_exception;
        elsif    vviceopfare <> prmviceopfare
              or vvicedummyopfare <> prmvicedummyopfare
        then
            out_result := -1009;
            out_msg := '充值申请记录交易金额验证失败！';
            raise custom_exception;
        elsif vposcode <> prmposcode or vpsamcardno <> prmpsamcardno
        then
            out_result := -1010;
            out_msg := '申请记录中终端和psam卡验证失败！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        pkg_handdeal_unsetcash.module_montrcash_commit (prmplanid,
                                                        prmcustomerid,
                                                        prmtac,
                                                        prmcustomerunitcode,
                                                        out_result,
                                                        out_msg);

        if out_result = 100
        then
            out_result := 100;
            out_msg := '月票钱包充值提交成功';
            commit;
        else
            out_result := -1005;
            out_msg := '月票钱包充值提交失败:' || out_msg;
            raise custom_exception;
        end if;
    exception
        when custom_exception
        then
            rollback;

            --记录日志
            insert into rec_monticket_cash_plan_bad (id,
                                                     planid,
                                                     customerid,
                                                     cardno,
                                                     cardsn,
                                                     cardtypedetailid,
                                                     sumviceaddfare,
                                                     viceoddfare,
                                                     viceoddfarepre,
                                                     vicedummyopfare,
                                                     viceopfare,
                                                     vicesaveopcount,
                                                     viceopcount,
                                                     status,
                                                     acccode,
                                                     opdt,
                                                     description,
                                                     cardkind,
                                                     poscode,
                                                     psamcardno,
                                                     empid,
                                                     dealtype,
                                                     wallettype,
                                                     tac,
                                                     samtradeno,
                                                     badcode,
                                                     baddesc,
                                                     ver,
                                                     customerunitcode)
                 values (0,
                         prmplanid,
                         prmcustomerid,
                         prmcardno,
                         prmcardsn,
                         prmcardtypedetailid,
                         prmsumviceaddfare,
                         prmviceoddfare,
                         prmviceoddfarepre,
                         prmvicedummyopfare,
                         prmviceopfare,
                         prmvicesaveopcount,
                         prmviceopcount,
                         0,
                         vacccode,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                         '月票钱包充值',
                         prmcardkind,
                         prmposcode,
                         prmpsamcardno,
                         prmempid,
                         1,
                         2,
                         prmtac,
                         prmpsamtradeno,
                         out_result,
                         out_msg,
                         0,
                         prmcustomerunitcode);

            commit;
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，具体原因为：' || sqlerrm;
    end;

    procedure proc_request_electr_repeal (
        --客户基本信息-------------
        prmcustomerid          in     number,                       --客户编号
        prmcardno              in     number,                           --卡号
        prmcardsn              in     number,                       --持卡序号
        prmelectrsaveopcount   in     number,             --申请前充值交易计数
        prmelectropcount       in     number,                       --消费计数
        prmcardkind            in     number,                         --卡类型
        prmcardtypedetailid    in     number,                     --卡类型小类
        prmopdt                in     varchar2,                     --操作时间
        --客户金额信息-------------
        prmsumelectraddfare    in     number,                         --卡总额
        prmelectroddfare       in     number,             --电子钱包消费后余额
        prmelectrdummyopfare   in     number,                       --虚充金额
        prmelectropfare        in     number,               --电子钱包实充金额
        --终端交易信息-------------
        prmposcode             in     number,                       --消费终端
        prmpsamcardno          in     number,                       --psam卡号
        prmempid               in     number,                     --充值员编号
        prmcardasn             in     number,                     --充值员编号
        --返回值-------------------
        prmplanid              in out number,                     --领款计划id
        prmcustomerunitcode    in     varchar2,                     --客户代码
        out_result                out number,
        out_msg                   out varchar2)
    as
        /*
       --------------------------------------------------------------------------
       --存储过程： proc_request_electr_repeal
       --作　　者：赵军强
       --时　　间：2009-05-26
       --说　　明： 电子钱包充值撤销
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败

       --从 充值申请过程 移植

       --------------------------------------------------------------------------
       --修改标识：周晓娜 2012-04-26
       --修改说明：增加充值撤销记录原申请planid记录
       --------------------------------------------------------------------------
       --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       --修改标识：周晓娜 2012-09-13
       --修改说明：兼容多客户处理
       --------------------------------------------------------------------------
       --修改标记：周晓娜 20130726
        --修改说明： 增加充值终端的类型判断 如果是充值机终端的操作，增加充值终端是否有灰记录，
        --        1、如果终端有灰记录 则直接结束流程 并同时返回灰记录的id 此时返回的领款记录id为灰记录的id
        --         2、如果是正常的流程 终端没有灰记录 直接按照正常的流程进行
        --------------------------------------------------------------------------
       */
        vcount                    number;
        visbalance                number;
        vplanid                   number;
        vacccode         constant number := 240;        --固定电子钱包充值科目
        vaccdesc                  varchar (20);
        vempid                    number;
        vareaid                   number;
        velectrsaveopcount        number;
        velectropcount            number;
        vplanacccode              number;
        vplanacccodegroup         number;
        vrepealempid              number;
        --
        n_totalconsumfare         number (20, 2);               --累计消费金额
        n_refunddumpfare          number (10, 2);         --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2);               --最低消费限额
        n_customerid              number;                               --帐号
        v_paramvalue              varchar2 (20);                    --运行参数
        n_termtypeid              number;
    begin
        --初始化变量
        -- prmplanid := -1;
        out_result := -1000;
        out_msg := '撤销充值申请开始！';
        n_customerid := prmcustomerid;
        --------------------------------------------------------------------------
        --验证账户、设备、psam卡号、职员合法性
        proc_verify_baseinfo (n_customerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if out_result <> 100
        then
            out_result := -1001;
            out_msg := '基本信信验证不通过' || out_msg;
            return;
        end if;

        ----增加充值机终端的灰记录判断--------------------------------
        select a.typeid
          into n_termtypeid
          from base_term a
         where     a.poscode = prmposcode
               and a.customerunitcode = prmcustomerunitcode;

        if n_termtypeid = 3               --终端是充值机时判断终端是否有灰记录
        then
            --判断终端是否有灰记录
            select count (a.planid)
              into vcount
              from rec_electtron_cash_plan a
             where     a.customerunitcode = prmcustomerunitcode
                   and a.poscode = prmposcode
                   and a.status = 1;

            if vcount <> 0
            then
                select a.planid
                  into vplanid
                  from rec_electtron_cash_plan a
                 where     a.customerunitcode = prmcustomerunitcode
                       and a.poscode = prmposcode
                       and a.status = 1;

                prmplanid := vplanid;
                out_result := -1014;
                out_msg := '充值机终端' || prmposcode || '存在灰记录！';
                return;
            end if;
        end if;

        -------------------------------------------------------------------

        --------------------------------------------------------------------------
        out_result := -1003;
        out_msg := '获取交易科目描述！';

        select count (*)
          into vcount
          from base_acc_type a
         where a.acccode = vacccode;

        if vcount = 0
        then
            out_result := -1004;
            out_msg := '交易科目不存在acccode:' || to_char (vacccode);
            return;
        end if;

        select accdscrp
          into vaccdesc
          from base_acc_type
         where acccode = vacccode;

        --------------------------------------------------------------------------------
        --验证交易金额合法性
        if (prmelectropfare < 0)               --or (prmelectrdummyopfare < 0)
        then
            out_result := -1002;
            out_msg := '交易金额必须大于0！';
            return;
        end if;

        --交易金额是充值交款金额和虚充金额的和，一定是大于，如果小于则为异常
        if prmelectropfare < prmelectrdummyopfare
        then
            out_result := -1003;
            out_msg := '交易金额必须大于或等于虚充金额！';
            return;
        end if;

        --------------------------------------------------------------------------------
        select count (*)
          into vcount
          from rec_electtion_cash1
         where     customerid = n_customerid
               and planid = prmplanid
               and customerunitcode = prmcustomerunitcode;

        if (vcount <> 0)
        then
            out_result := -1025;
            out_msg := '同一存款不能多次撤销，请检查是否有未决记录！';
            return;
        end if;

        --------------------------------------------------------------------------------
        --校验领未未决记录
        select count (*)
          into vcount
          from rec_electtron_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and planid = prmplanid
               and status = 1
               and cardno = prmcardasn
               and customerunitcode = prmcustomerunitcode;

        if (vcount <> 0)
        then
            --写卡成功
            pkg_handdeal_unsetcash.module_electrcash_commit (
                prmplanid,
                n_customerid,
                '77777',
                prmcustomerunitcode,
                out_result,
                out_msg);
        -- out_result := -1025;
        --out_msg := '当前卡存在未决记录，无法进行撤销充值操作';
        --return;
        --end if;
        else
              select count (*), empid
                into vcount, vrepealempid
                from rec_electtron_cash
               where     customerid = n_customerid
                     and planid = prmplanid
                     and cardno = prmcardasn
                     and customerunitcode = prmcustomerunitcode
            group by empid;

            --  where  planid=prmplanid;
            if vcount = 0
            then
                out_result := -1033;
                out_msg := '纠错计划不存在:' || to_char (prmplanid);
                return;
            end if;
        end if;

        ----------------------------------------------------------------------
        select count (*)
          into vcount
          from base_customers a
         where     a.customerid = n_customerid
               and a.electroddfare < prmelectropfare
               and a.cardno = prmcardasn
               and a.customerunitcode = prmcustomerunitcode;

        if vcount > 0
        then
            out_result := -1066;
            out_msg := '卡余额不足:' || to_char (prmelectropfare);
            return;
        end if;

        -------------------------------------------------------------------------------
        select nvl (count (*), 0)
          into vcount
          from rec_electtron_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and status = 1
               and cardno = prmcardasn
               and customerunitcode = prmcustomerunitcode;

        if vcount > 0
        then
            out_result := -1008;
            out_msg := '存在电子钱包未决记录';
            return;
        end if;

        -- 20121107 zxn 去掉分区areaid
        --验证账户状态
        select electrsaveopcount,
               sumelectrconsumfare,
               electropcount,
               refunddumpfare,
               refundlimitconsumfare
          into velectrsaveopcount,
               n_totalconsumfare,
               velectropcount,
               n_refunddumpfare,
               n_refundlimitconsumfare
          from base_customers
         where     customerid = n_customerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and customerunitcode = prmcustomerunitcode;

        --只允许卡上的交易计数和数据库中一至，才进行充值申请操作
        if prmelectropcount <> velectropcount
        then
            out_result := -1006;
            out_msg :=
                   '卡充值交易计数校验错误！库中交易计数为：'
                || to_char (velectropcount)
                || '，卡上充值交易计数为：'
                || to_char (prmelectropcount);
            return;
        end if;

        --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
        --如果用卡余额计算的累计消费金额大，则说明卡上软准确
        --如果库里大，则说明库里可能正确，卡上总额可能错误
        if prmsumelectraddfare - prmelectroddfare > n_totalconsumfare
        then
            n_totalconsumfare := prmsumelectraddfare - prmelectroddfare;
        else
            n_totalconsumfare := n_totalconsumfare;
        end if;

        --比较累计消费金额与最低消费限额
        --如果累计消费金额大于等于最低消费限额，则虚充金额清零
        if     n_totalconsumfare >= n_refundlimitconsumfare
           and n_totalconsumfare > 0
        then
            out_result := -1029;
            out_msg := '电子钱包虚充金额清零';

            update base_customers
               set refunddumpfare = 0
             where     customerid = n_customerid
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            out_result := -1030;
            out_msg := '形成电子钱包虚充金额清零记录';

            insert into rec_rushdumpfare_log (id,
                                              customerid,
                                              cardno,
                                              elecopcount,
                                              elecsaveopcount,
                                              lastdumpfare,
                                              elecsumfare,
                                              sumconsumfare,
                                              opdt,
                                              poscode,
                                              psamcardno,
                                              customerunitcode)
                 values (0,
                         n_customerid,
                         prmcardno,
                         prmelectropcount,
                         prmelectrsaveopcount,
                         n_refunddumpfare,
                         prmsumelectraddfare,
                         n_totalconsumfare,
                         sysdate,
                         prmposcode,
                         prmpsamcardno,
                         prmcustomerunitcode);
        end if;

        out_result := -1026;
        out_msg := '获取交易流水号！';

        --获取申请流水号
        select seq_cash_plan.nextval into vplanid from dual;

        --------------------------------------------------------------------------------
        out_result := -1027;
        out_msg := '形成撤销充值申请记录！';

        --zxn 20120426增加申请时的planid记录
        insert into rec_electtron_cash_plan (planid,
                                             customerid,
                                             cardno,
                                             cardsn,
                                             cardtypedetailid,
                                             sumelectraddfare,
                                             electroddfare,
                                             electroddfarepre,
                                             electropfare,
                                             electrdummyopfare,
                                             electrsaveopcount,
                                             electropcount,
                                             status,
                                             acccode,
                                             opdt,
                                             description,
                                             cardkind,
                                             poscode,
                                             psamcardno,
                                             empid,
                                             dealtype,
                                             wallettype,
                                             tac,
                                             samtradeno,
                                             ver,
                                             repealempid,
                                             oldplanid,
                                             customerunitcode)
             values (vplanid,
                     n_customerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumelectraddfare,
                     prmelectroddfare, --刘东红 120420改为0这 prmelectroddfare
                     prmelectroddfare,
                     prmelectropfare,
                     prmelectrdummyopfare,
                     prmelectrsaveopcount,
                     prmelectropcount,
                     1,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     0,
                     0,
                     0,
                     0,
                     0,
                     vrepealempid,
                     prmplanid,
                     prmcustomerunitcode);

        --------------------------------------------------------------------------------
        out_result := -1028;
        out_msg := '形成充值申请记录日志！';

        insert into rec_electtron_cash_plan_log (planid,
                                                 customerid,
                                                 cardno,
                                                 cardsn,
                                                 cardtypedetailid,
                                                 sumelectraddfare,
                                                 electroddfare,
                                                 electroddfarepre,
                                                 electropfare,
                                                 electrsaveopcount,
                                                 electropcount,
                                                 status,
                                                 acccode,
                                                 opdt,
                                                 description,
                                                 cardkind,
                                                 poscode,
                                                 psamcardno,
                                                 empid,
                                                 dealtype,
                                                 wallettype,
                                                 tac,
                                                 samtradeno,
                                                 ver,
                                                 createdt,
                                                 customerunitcode)
             values (vplanid,
                     n_customerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumelectraddfare,
                     0,
                     prmelectroddfare,
                     prmelectropfare,
                     prmelectrsaveopcount,
                     prmelectropcount,
                     0,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     0,
                     1,
                     0,
                     0,
                     0,
                     sysdate,
                     prmcustomerunitcode);

        --------------------------------------------------------------------------------
        prmplanid := vplanid;
        out_result := 100;
        out_msg := '撤销充值申请成功！';
        commit;
    exception
        when others
        then
            rollback;
            prmplanid := -1;
            out_result := -1;
            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;

    procedure proc_commit_electr_repeal (
        --客户基本信息-------------
        prmcustomerid          in     number,                       --客户编号
        prmcardno              in     number,                           --卡号
        prmcardsn              in     number,                       --持卡序号
        prmelectrsaveopcount   in     number,                       --操作计数
        prmelectropcount       in     number,                       --操作计数
        prmcardkind            in     number,
        prmcardtypedetailid    in     number,
        prmopdt                in     varchar2,                     --操作时间
        --客户金额信息-------------
        prmsumelectraddfare    in     number,                         --卡总额
        prmelectroddfare       in     number,             --电子钱包消费后余额
        prmelectrdummyopfare   in     number,
        prmelectropfare        in     number,               --电子钱包消费金额
        prmelectroddfarepre    in     number,             --电子钱包充值前余额
        --终端交易信息-------------
        prmposcode             in     number,                       --消费终端
        prmpsamcardno          in     number,
        prmtac                 in     varchar2,                    --tac验证码
        prmempid               in     number,                       --职员编号
        prmpsamtradeno         in     number,
        --返回值-------------------
        prmplanid              in     number,
        prmoldplanid           in     number,               --原要撤销的planid
        prmcardasn             in     number,
        prmcustomerunitcode    in     varchar2,
        out_result                out number,
        out_msg                   out varchar2)
    as
        /*
       ------------------------------------------------------------------------
       --存储过程： proc_commit_electr_cash
       --作　　者：赵军强
       --时　　间：20101023
       --说　　明： 提交撤销充值申请记录
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败

       -----------------------------------------------------------------------
        --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       --修改标识：周晓娜 2012-09-13
       --修改说明：兼容多客户处理
       --------------------------------------------------------------------------
       --从 提交充值申请过程 移植

       */
        vcount               number;
        vacccodegroupid      number;
        vacccode             number;
        vacccodedesc         varchar2 (30);
        vstatus              number;
        vcardno              number;
        vcardsn              number;
        vcustomerid          number;
        velectrsaveopcount   number;
        velectropcount       number;
        vpsamcardno          number;
        vposcode             number;
        visuse               number;
        vgroupid             number;
        velectropfare        number;
        velectrdummyopfare   number;
        vareaid              number;
        v_deptcode           varchar2 (20);             --充值职员所属营业部门
        i_deptareaid         integer;               --充值职员营业部门所属分区
        n_customerid         number;                                    --帐号
        v_paramvalue         varchar2 (20);                         --运行参数
        custom_exception     exception;
    begin
        --------------------------------------------------------------------------------
        out_result := -1000;
        out_msg := '充值提交开始！';
        --
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0)                             --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            raise custom_exception;
        end if;

        n_customerid := prmcustomerid;
        --------------------------------------------------------------------------------

        --验证用户基本信息
        proc_verify_baseinfo (n_customerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if (out_result <> 100)
        then
            out_result := out_result;
            out_msg := '验证账户基本信息异常，' || out_msg;
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --验证金额合法性
        if (prmelectropfare <= 0)              --or (prmelectrdummyopfare < 0)
        then
            out_result := -1002;
            out_msg := '撤销充值金额必须大于0！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --账本表信息验证
        select count (*)
          into vcount
          from base_customers
         where     customerid = n_customerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1011;
            out_msg := '账本表中不存在该账号！';
            raise custom_exception;
        end if;

        -- 20121107 zxn 去掉分区areaid
        select status,
               cardno,
               cardsn,
               electrsaveopcount,
               electropcount
          into vstatus,
               vcardno,
               vcardsn,
               velectrsaveopcount,
               velectropcount
          from base_customers
         where     customerid = n_customerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1012;
            out_msg := '账本表卡状态异常status:' || to_char (vstatus);
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1013;
            out_msg := '账本表卡号验证失败！';
            raise custom_exception;
        elsif vcardsn <> prmcardsn
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1014;
            out_msg := '账本表卡序号验证失败！';
            raise custom_exception;
        elsif velectropcount + 1 <> prmelectropcount
        then
            out_result := -1015;
            out_msg := '账本表卡充值交易计数验证失败！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --充值申请记录验证
        select count (*)
          into vcount
          from rec_electtron_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1003;
            out_msg := '原充值申请记录不存在planid' || to_char (prmplanid);
            raise custom_exception;
        end if;

        --获取申请记录状态、卡号、卡序号、账号、电子钱包充值交易计数
        --电子钱包消费计数、终端编号、终端设备唯一运行编号、psam 卡号
        --交易科目、交易科目描述
        select status,
               cardno,
               cardsn,
               customerid,
               electrsaveopcount,
               electropcount,
               poscode,
               psamcardno,
               acccode,
               description,
               electropfare,
               a.electrdummyopfare
          into vstatus,
               vcardno,
               vcardsn,
               vcustomerid,
               velectrsaveopcount,
               velectropcount,
               vposcode,
               vpsamcardno,
               vacccode,
               vacccodedesc,
               velectropfare,
               velectrdummyopfare
          from rec_electtron_cash_plan a
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1004;
            out_msg := '撤销充值申请记录状态非申请状态！';
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            out_result := -1005;
            out_msg := '撤销充值申请记录卡号验证失败！';
            raise custom_exception;
        elsif vcustomerid <> n_customerid
        then
            out_result := -1006;
            out_msg := '撤销充值申请记录帐号验证失败！';
            raise custom_exception;
        elsif velectrsaveopcount <> prmelectrsaveopcount
        then
            out_result := -1007;
            out_msg := '撤销充值申请记录充值交易计数验证失败！';
            raise custom_exception;
        elsif velectropcount + 1 <> prmelectropcount
        then
            out_result := -1008;
            out_msg := '撤销充值申请记录总交易计数验证失败！';
            raise custom_exception;
        elsif    velectropfare <> prmelectropfare
              or velectrdummyopfare <> prmelectrdummyopfare
        then
            out_result := -1009;
            out_msg := '撤销充值申请记录交易金额验证失败！';
            raise custom_exception;
        elsif vposcode <> prmposcode or vpsamcardno <> prmpsamcardno
        then
            out_result := -1010;
            out_msg := '撤销充值申请记录中终端和psam卡验证失败！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        pkg_handdeal_unsetcash.repeal_electrcash_commit (prmplanid,
                                                         n_customerid,
                                                         prmtac,
                                                         prmcustomerunitcode,
                                                         out_result,
                                                         out_msg);

        if out_result <> 100
        then
            out_result := -1005;
            out_msg := '电子钱包撤销充值提交失败:' || out_msg;
            raise custom_exception;
        end if;

        out_result := 100;
        out_msg := '电子钱包撤销充值提交成功';
        commit;
    exception
        when custom_exception
        then
            rollback;

            --记录日志
            -- 20121107 zxn 去掉分区areaid
            insert into rec_electtron_cash_plan_bad (id,
                                                     planid,
                                                     customerid,
                                                     cardno,
                                                     cardsn,
                                                     cardtypedetailid,
                                                     sumelectraddfare,
                                                     electroddfare,
                                                     electroddfarepre,
                                                     electrdummyopfare,
                                                     electropfare,
                                                     electrsaveopcount,
                                                     electropcount,
                                                     status,
                                                     acccode,
                                                     opdt,
                                                     description,
                                                     cardkind,
                                                     poscode,
                                                     psamcardno,
                                                     empid,
                                                     dealtype,
                                                     wallettype,
                                                     tac,
                                                     samtradeno,
                                                     badcode,
                                                     baddesc,
                                                     ver,
                                                     customerunitcode)
                 values (0,
                         prmplanid,
                         n_customerid,
                         prmcardno,
                         prmcardsn,
                         prmcardtypedetailid,
                         prmsumelectraddfare,
                         prmelectroddfare,
                         prmelectroddfarepre,
                         prmelectrdummyopfare,
                         prmelectropfare,
                         prmelectrsaveopcount,
                         prmelectropcount,
                         0,
                         vacccode,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                         '电子钱包充值撤销',
                         prmcardkind,
                         prmposcode,
                         prmpsamcardno,
                         prmempid,
                         1,
                         1,
                         prmtac,
                         prmpsamtradeno,
                         out_result,
                         out_msg,
                         0,
                         prmcustomerunitcode);

            commit;
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，具体原因为：' || sqlerrm;
    end;

    ---------------------------次卡钱包充值处理-------------------------------------
    --次卡钱包充值申请
    procedure proc_request_vicecard_cash (
        --客户基本信息-------------
        prmcustomerid         in     number,                        --客户编号
        prmcardno             in     number,                            --卡号
        prmcardsn             in     number,                        --持卡序号
        prmvicesaveopcount    in     number,              --申请前充值交易计数
        prmviceopcount        in     number,                        --消费计数
        prmcardkind           in     number,                          --卡类型
        prmcardtypedetailid   in     number,                      --卡类型小类
        prmopdt               in     varchar2,                      --操作时间
        --客户金额信息-------------
        prmsumviceaddfare     in     number,                          --卡总额
        prmviceoddfare        in     number,              --次卡钱包消费后余额
        prmvicedummyopfare    in     number,                        --虚充金额
        prmviceopfare         in     number,                --次卡钱包实充金额
        --终端交易信息-------------
        prmposcode            in     number,                        --消费终端
        prmpsamcardno         in     number,                        --psam卡号
        prmempid              in     number,                      --充值员编号
        prmcardasn            in     number,
        --返回值-------------------
        prmplanid                out number,                      --领款计划id
        prmcustomerunitcode   in     varchar2,
        --根据卡结构改动，表结构新增字段
        prmlimittimes         in     number,                --每月消费限制次数
        prmmonthnum           in     number,                        --充值月数
        prmvalidtimestart     in     varchar2,                      --有效起日
        prmvalidtimeend       in     varchar2,                      --有效止日
        out_result               out number,
        out_msg                  out varchar2)
    as
        /*
       --------------------------------------------------------------------------
       --存储过程： proc_request_vicecard_cash
       --作　　者：周晓娜
       --时　　间：2011-07-22
       --说　　明： 次卡钱包充值申请
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败
       --------------------------------------------------------------------------
       --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       --修改标识：周晓娜 2012-09-11
       --修改说明：兼容多客户、增加充值授权额度和一人多卡处理
       --------------------------------------------------------------------------
       --修改标识：周晓娜 2012-12-06
       --修改说明：次卡钱包增加连充月次的功能，对应表结构调整账目处理过程
       --------------------------------------------------------------------------
       */
        vcount                    number;
        visbalance                number;
        vplanid                   number;
        vacccode         constant number := 102;        --固定次卡钱包充值科目
        vaccdesc                  varchar (20);
        vempid                    number;
        vareaid                   number;
        vvicesaveopcount          number;
        vplanacccode              number;
        vplanacccodegroup         number;
        --
        n_totalconsumfare         number (20, 2);               --累计消费金额
        n_refunddumpfare          number (10, 2);         --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2);               --最低消费限额
        n_customerid              number;                               --帐号
        v_paramvalue              varchar2 (20);                    --运行参数
        --充值额度
        v_dptcode                 varchar2 (9);     --职员所属网点（部门编号）
        v_termdptcode             varchar2 (9);     --终端所属网点（部门编号）
        n_isuse                   number;               --是否启用网点授权额度
        n_curoddfare              number (20, 2);               --可用充值额度
        n_workstatus              number;         --状态：0正常状态，1透支状态
        d_limitenddate            date;                     --允许透支截止日期
        d_currdate                date;                             --当前日期
        n_maxlimitdate            number;                     --最大逾期（天）
        n_allowoverdraftfare      number (20, 2);               --允许透支金额
        v_validtimestart          varchar2 (20);                    --有效起日
        v_validtimeend            varchar2 (20);                    --有效止日
        vvicefreezefare           number (20, 2);
    begin
        --初始化变量
        v_validtimestart :=
            to_date (prmvalidtimestart, 'yyyy-mm-dd hh24:mi:ss');
        v_validtimeend := to_date (prmvalidtimeend, 'yyyy-mm-dd hh24:mi:ss');
        prmplanid := -1;
        out_result := -1000;
        out_msg := '充值申请开始！';
        d_currdate := sysdate;                                  --系统当前日期
        --------------------------------------------------------------------------------

        --验证账户、设备、psam卡号、职员合法性
        proc_verify_baseinfo (prmcustomerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if out_result <> 100
        then
            out_result := -1002;
            out_msg := '基本信信验证不通过' || out_msg;
            return;
        end if;

        --2013.7.19新加判断未领冻结金额条件
        select sum (a.vicefreezefare)
          into vvicefreezefare
          from rec_freezefare_acc a
         where     a.customerid = prmcustomerid
               and a.customerunitcode = prmcustomerunitcode
               and a.vicefreezefareflag = 0
               and cardid in
                       (select id
                          from base_customers
                         where     customerid = prmcustomerid
                               and customerunitcode = prmcustomerunitcode
                               and cardno = prmcardno);

        if vvicefreezefare > 0
        then
            out_result := -1003;
            out_msg := '有未领月票冻结金额，当前只能充值电子钱包！';
            return;
        end if;

        --2013.7.19新加判断未领冻结金额条件结束

        --验证交易金额合法性
        if (prmviceopfare < 0)
        then
            out_result := -1001;
            out_msg := '交易金额必须大于0！';
            return;
        end if;

        --交易金额是充值交款金额和虚充金额的和，一定是大于，如果小于则为异常
        if prmviceopfare < prmvicedummyopfare
        then
            out_result := -1002;
            out_msg := '交易金额必须大于或等于虚充金额！';
            return;
        end if;

        ----------------------------------------------------------------------
        out_result := -1003;
        out_msg := '获取交易科目描述！';

        select count (*)
          into vcount
          from base_acc_type a
         where a.acccode = vacccode;

        if vcount = 0
        then
            out_result := -1004;
            out_msg := '交易科目不存在acccode:' || to_char (vacccode);
            return;
        end if;

        select accdscrp
          into vaccdesc
          from base_acc_type
         where acccode = vacccode;

        --------------------------------------------------------------------------------
        n_customerid := prmcustomerid;

        --------------------------------------------------------------------------------
        ------------------------增加充值额度判断-------------------------------

        --根据职员编号获取网点编号
        select a.dptcode
          into v_dptcode
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.empid = prmempid
               and a.customerunitcode = prmcustomerunitcode;

        --根据终端编号获取网点编号
        select a.dptcode
          into v_termdptcode
          from base_term a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.poscode = prmposcode
               and a.customerunitcode = prmcustomerunitcode;

        if v_dptcode <> v_termdptcode
        then
            out_result := -1026;
            out_msg := '出纳员、终端不属于同一个点';
            return;
        end if;

        --根据职员编号获取职员所属网点
        begin
            select a.curoddfare,
                   a.isuse,
                   a.workstatus,
                   a.maxlimitdate,
                   a.limitenddate,
                   a.allowoverdraftfare
              into n_curoddfare,
                   n_isuse,
                   n_workstatus,
                   n_maxlimitdate,
                   d_limitenddate,
                   n_allowoverdraftfare
              from base_chargeauth a
             where     a.businesspoint = v_dptcode
                   and a.customerunitcode = prmcustomerunitcode;

            --该充值网点启用充值授权额度
            if n_isuse = 1
            then
                --充值额度不足
                if n_curoddfare < prmviceopfare - prmvicedummyopfare
                then
                    --当前状态为正常状态
                    if n_workstatus = 0
                    then
                        --此出纳员允许透支
                        if d_currdate + n_maxlimitdate > d_currdate
                        then
                            --透支额度不足
                            if n_allowoverdraftfare + n_curoddfare <
                                   prmviceopfare - prmvicedummyopfare
                            then
                                out_result := -1026;
                                out_msg := '允许透支额度不足，不能充值';
                                return;
                            end if;

                            --更新当前状态为透支状态，允许透支截止日期=当前日期+最大逾期
                            update base_chargeauth
                               set workstatus = 1,
                                   limitenddate = d_currdate + n_maxlimitdate
                             where     businesspoint = v_dptcode
                                   and customerunitcode = prmcustomerunitcode;
                        --没有授权允许逾期天数
                        else
                            out_result := -1027;
                            out_msg := '超过充值授权最大逾期，不能充值';
                            return;
                        end if;
                    --当前状态为透支状态
                    else
                        --没有超过最大逾期截止日期
                        if d_currdate < d_limitenddate
                        then
                            if n_allowoverdraftfare <
                                   prmviceopfare - prmvicedummyopfare
                            then
                                out_result := -1028;
                                out_msg := '允许透支额度不足，不能充值';
                                return;
                            end if;
                        --超过最大逾期截止日期
                        else
                            out_result := -1029;
                            out_msg := '超过充值授权最大逾期，不能充值';
                            return;
                        end if;
                    end if;
                end if;
            end if;
        exception
            when others
            then
                out_result := -1030;
                out_msg := '获取充值授权额度信息异常';
                return;
        end;

        --------------------------------------------------------------------------------
        --校验领未未决记录
        select count (*)
          into vcount
          from rec_vicecard_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               --2016.06.30 添加status=1条件
               and status = 1
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if (vcount <> 0)
        then
            out_result := -1025;
            out_msg := '当前卡存在次卡未决记录，无法进行充值操作';
            return;
        end if;

        --验证账户状态
        select numbersaveopcount
          into vvicesaveopcount
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and customerunitcode = prmcustomerunitcode;

        select nvl (count (*), 0)
          into vcount
          from base_customers_vicecard
         where     customerid = prmcustomerid
               and cardasn = prmcardasn
               and customerunitcode = prmcustomerunitcode;

        if vcount < 1
        then
            insert into base_customers_vicecard (customerid,
                                                 sumconsumefare,
                                                 sumrdummyfare,
                                                 sumaddfare,
                                                 sumaddfareacc,
                                                 refunddumpfare,
                                                 refundlimitconsumfare,
                                                 ver,
                                                 sumadddummyfare,
                                                 customerunitcode,
                                                 cardasn--需要添加清零日期和清零方式,vicehangdate,hangtype
                                                 )
                 values (prmcustomerid,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         prmcustomerunitcode,
                         prmcardno);
        end if;

        --获取次卡钱包消费额累积、未消费完的虚充金额、最低消费限额
        select sumconsumefare, refunddumpfare, refundlimitconsumfare
          into n_totalconsumfare, n_refunddumpfare, n_refundlimitconsumfare
          from base_customers_vicecard
         where     customerid = prmcustomerid
               and cardasn = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --只允许卡上的交易计数和数据库中一至，才进行充值申请操作
        if prmvicesaveopcount <> vvicesaveopcount
        then
            out_result := -1025;
            out_msg :=
                   '卡充值交易计数校验错误！库中交易计数为：'
                || to_char (vvicesaveopcount)
                || '，卡上充值交易计数为：'
                || to_char (prmvicesaveopcount);
            return;
        end if;

        --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
        --如果用卡余额计算的累计消费金额大，则说明卡上软准确
        --如果库里大，则说明库里可能正确，卡上总额可能错误
        if prmsumviceaddfare - prmviceoddfare > n_totalconsumfare
        then
            n_totalconsumfare := prmsumviceaddfare - prmviceoddfare;
        else
            n_totalconsumfare := n_totalconsumfare;
        end if;

        --比较累计消费金额与最低消费限额
        --如果累计消费金额大于等于最低消费限额，则虚充金额清零
        if     n_totalconsumfare >= n_refundlimitconsumfare
           and n_totalconsumfare > 0
        then
            out_result := -1008;
            out_msg := '次卡钱包虚充金额清零';

            update base_customers
               set refunddumpfare = 0
             where     customerid = n_customerid
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            out_result := -1008;
            out_msg := '形成次卡钱包虚充金额清零记录';

            insert into rec_rushvicedumpfare_log (id,
                                                  customerid,
                                                  cardno,
                                                  viceopcount,
                                                  vicesaveopcount,
                                                  lastdumpfare,
                                                  elecsumfare,
                                                  sumconsumfare,
                                                  opdt,
                                                  poscode,
                                                  psamcardno,
                                                  customerunitcode,
                                                  wallettype)
                 values (0,
                         prmcustomerid,
                         prmcardno,
                         prmviceopcount,
                         prmvicesaveopcount,
                         n_refunddumpfare,
                         prmsumviceaddfare,
                         n_totalconsumfare,
                         sysdate,
                         prmposcode,
                         prmpsamcardno,
                         prmcustomerunitcode,
                         3);
        end if;

        out_result := -1026;
        out_msg := '获取交易流水号！';

        --获取申请流水号
        select seq_cash_plan.nextval into vplanid from dual;

        --------------------------------------------------------------------------------
        out_result := -1027;
        out_msg := '形成充值申请记录！';

        insert into rec_vicecard_cash_plan (planid,
                                            customerid,
                                            cardno,
                                            cardsn,
                                            cardtypedetailid,
                                            sumviceaddfare,
                                            viceoddfare,
                                            viceoddfarepre,
                                            viceopfare,
                                            vicedummyopfare,
                                            vicesaveopcount,
                                            viceopcount,
                                            status,
                                            acccode,
                                            opdt,
                                            description,
                                            areaid,
                                            cardkind,
                                            poscode,
                                            psamcardno,
                                            empid,
                                            dealtype,
                                            wallettype,
                                            tac,
                                            samtradeno,
                                            ver,
                                            customerunitcode,
                                            validtimestart,
                                            validtimeend,
                                            limittimes,
                                            monthnum)
             values (vplanid,
                     prmcustomerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumviceaddfare,
                     0,
                     prmviceoddfare,
                     prmviceopfare,
                     prmvicedummyopfare,
                     prmvicesaveopcount,
                     prmviceopcount,
                     1,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     vareaid,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     1,
                     3,
                     0,
                     0,
                     0,
                     prmcustomerunitcode,
                     v_validtimestart,
                     v_validtimeend,
                     prmlimittimes,
                     prmmonthnum);

        --------------------------------------------------------------------------------
        out_result := -1028;
        out_msg := '形成充值申请记录日志！';

        insert into rec_vicecard_cash_plan_log (planid,
                                                customerid,
                                                cardno,
                                                cardsn,
                                                cardtypedetailid,
                                                sumviceaddfare,
                                                viceoddfare,
                                                viceoddfarepre,
                                                viceopfare,
                                                vicesaveopcount,
                                                viceopcount,
                                                status,
                                                acccode,
                                                opdt,
                                                description,
                                                cardkind,
                                                poscode,
                                                psamcardno,
                                                empid,
                                                dealtype,
                                                wallettype,
                                                tac,
                                                samtradeno,
                                                ver,
                                                createdt,
                                                customerunitcode,
                                                limittimes,
                                                monthnum,
                                                validtimestart,
                                                validtimeend)
             values (vplanid,
                     prmcustomerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumviceaddfare,
                     0,
                     prmviceoddfare,
                     prmviceopfare,
                     prmvicesaveopcount,
                     prmviceopcount,
                     0,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     1,
                     3,
                     0,
                     0,
                     0,
                     sysdate,
                     prmcustomerunitcode,
                     prmlimittimes,
                     prmmonthnum,
                     v_validtimestart,
                     v_validtimeend);

        --------------------------------------------------------------------------------
        prmplanid := vplanid;
        out_result := 100;
        out_msg := '充值申请成功！';
        commit;
    exception
        when others
        then
            rollback;
            prmplanid := -1;
            out_result := -1;
            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;

    procedure proc_commit_vicecard_repeal (
        --客户基本信息-------------
        prmcustomerid         in     number,                        --客户编号
        prmcardno             in     number,                            --卡号
        prmcardsn             in     number,                        --持卡序号
        prmvicesaveopcount    in     number,                        --操作计数
        prmviceopcount        in     number,                        --操作计数
        prmcardkind           in     number,
        prmcardtypedetailid   in     number,
        prmopdt               in     varchar2,                      --操作时间
        --客户金额信息-------------
        prmsumviceaddfare     in     number,                          --卡总额
        prmviceoddfare        in     number,              --电子钱包消费后余额
        prmvicedummyopfare    in     number,
        prmviceopfare         in     number,                --电子钱包消费金额
        prmviceoddfarepre     in     number,              --电子钱包充值前余额
        --终端交易信息-------------
        prmposcode            in     number,                        --消费终端
        prmpsamcardno         in     number,
        prmtac                in     varchar2,                     --tac验证码
        prmempid              in     number,                        --职员编号
        prmpsamtradeno        in     number,
        --返回值-------------------
        prmplanid             in     number,
        prmoldplanid          in     number,                --原要撤销的planid
        prmcardasn            in     number,
        prmcustomerunitcode   in     varchar2,
        out_result               out number,
        out_msg                  out varchar2)
    as
        /*
       ------------------------------------------------------------------------
       --存储过程： proc_commit_electr_cash
       --作　　者：赵军强
       --时　　间：20101023
       --说　　明： 提交撤销充值申请记录
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败

       -----------------------------------------------------------------------
        --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       --从 提交充值申请过程 移植
       */
        vcount             number;
        vacccodegroupid    number;
        vacccode           number;
        vacccodedesc       varchar2 (30);
        vstatus            number;
        vcardno            number;
        vcardsn            number;
        vcustomerid        number;
        vvicesaveopcount   number;
        vviceopcount       number;
        vpsamcardno        number;
        vposcode           number;
        visuse             number;
        vgroupid           number;
        vviceopfare        number;
        vvicedummyopfare   number;
        vareaid            number;
        v_deptcode         varchar2 (20);               --充值职员所属营业部门
        i_deptareaid       integer;                 --充值职员营业部门所属分区
        n_customerid       number;                                      --帐号
        v_paramvalue       varchar2 (20);                           --运行参数
        custom_exception   exception;
    begin
        --------------------------------------------------------------------------------
        out_result := -1000;
        out_msg := '充值提交开始！';
        --
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0)                             --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        n_customerid := prmcustomerid;
        --------------------------------------------------------------------------------

        --验证用户基本信息
        proc_verify_baseinfo (n_customerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if (out_result <> 100)
        then
            out_result := out_result;
            out_msg := '验证账户基本信息异常，' || out_msg;
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --验证金额合法性
        if (prmviceopfare <= 0)                  --or (prmvicedummyopfare < 0)
        then
            out_result := -1002;
            out_msg := '撤销充值金额必须大于0！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --账本表信息验证
        select count (*)
          into vcount
          from base_customers
         where     customerid = n_customerid
               and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1011;
            out_msg := '账本表中不存在该账号！';
            raise custom_exception;
        end if;

        select status,
               cardno,
               cardsn,
               numbersaveopcount,
               numberopcount
          into vstatus,
               vcardno,
               vcardsn,
               vvicesaveopcount,
               vviceopcount
          from base_customers
         where     customerid = n_customerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1012;
            out_msg := '账本表卡状态异常status:' || to_char (vstatus);
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1013;
            out_msg := '账本表卡号验证失败！';
            raise custom_exception;
        elsif vcardsn <> prmcardsn
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1014;
            out_msg := '账本表卡序号验证失败！';
            raise custom_exception;
        elsif vviceopcount + 1 <> prmviceopcount
        then
            out_result := -1015;
            out_msg := '账本表卡充值交易计数验证失败！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --充值申请记录验证
        select count (*)
          into vcount
          from rec_vicecard_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1003;
            out_msg := '原充值申请记录不存在planid' || to_char (prmplanid);
            raise custom_exception;
        end if;

        --获取申请记录状态、卡号、卡序号、账号、电子钱包充值交易计数
        --电子钱包消费计数、终端编号、终端设备唯一运行编号、psam 卡号
        --交易科目、交易科目描述
        select status,
               cardno,
               cardsn,
               customerid,
               vicesaveopcount,
               viceopcount,
               poscode,
               psamcardno,
               acccode,
               description,
               viceopfare,
               a.vicedummyopfare
          into vstatus,
               vcardno,
               vcardsn,
               vcustomerid,
               vvicesaveopcount,
               vviceopcount,
               vposcode,
               vpsamcardno,
               vacccode,
               vacccodedesc,
               vviceopfare,
               vvicedummyopfare
          from rec_vicecard_cash_plan a
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1004;
            out_msg := '撤销充值申请记录状态非申请状态！';
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            out_result := -1005;
            out_msg := '撤销充值申请记录卡号验证失败！';
            raise custom_exception;
        elsif vcustomerid <> n_customerid
        then
            out_result := -1006;
            out_msg := '撤销充值申请记录帐号验证失败！';
            raise custom_exception;
        elsif vvicesaveopcount <> prmvicesaveopcount
        then
            out_result := -1007;
            out_msg :=
                   '撤销充值申请记录充值交易计数验证失败！'
                || vvicesaveopcount
                || '/'
                || prmvicesaveopcount;
            raise custom_exception;
        elsif vviceopcount + 1 <> prmviceopcount
        then
            out_result := -1008;
            out_msg := '撤销充值申请记录总交易计数验证失败！';
            raise custom_exception;
        elsif    vviceopfare <> prmviceopfare
              or vvicedummyopfare <> prmvicedummyopfare
        then
            out_result := -1009;
            out_msg := '撤销充值申请记录交易金额验证失败！';
            raise custom_exception;
        elsif vposcode <> prmposcode or vpsamcardno <> prmpsamcardno
        then
            out_result := -1010;
            out_msg := '撤销充值申请记录中终端和psam卡验证失败！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        pkg_handdeal_unsetcash.repeal_vicecard_commit (prmplanid,
                                                       n_customerid,
                                                       prmtac,
                                                       prmcustomerunitcode,
                                                       out_result,
                                                       out_msg);

        if out_result <> 100
        then
            out_result := -1005;
            out_msg := '电子钱包撤销充值提交失败:' || out_msg;
            raise custom_exception;
        end if;

        out_result := 100;
        out_msg := '次卡钱包撤销充值提交成功';
        commit;
    exception
        when custom_exception
        then
            rollback;

            --记录日志
            insert into rec_vicecard_cash_plan_bad (id,
                                                    planid,
                                                    customerid,
                                                    cardno,
                                                    cardsn,
                                                    cardtypedetailid,
                                                    sumviceaddfare,
                                                    viceoddfare,
                                                    viceoddfarepre,
                                                    vicedummyopfare,
                                                    viceopfare,
                                                    vicesaveopcount,
                                                    viceopcount,
                                                    status,
                                                    acccode,
                                                    opdt,
                                                    description,
                                                    cardkind,
                                                    poscode,
                                                    psamcardno,
                                                    empid,
                                                    dealtype,
                                                    wallettype,
                                                    tac,
                                                    samtradeno,
                                                    badcode,
                                                    baddesc,
                                                    ver,
                                                    customerunitcode)
                 values (0,
                         prmplanid,
                         n_customerid,
                         prmcardno,
                         prmcardsn,
                         prmcardtypedetailid,
                         prmsumviceaddfare,
                         prmviceoddfare,
                         prmviceoddfarepre,
                         prmvicedummyopfare,
                         prmviceopfare,
                         prmvicesaveopcount,
                         prmviceopcount,
                         0,
                         vacccode,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                         '次卡钱包充值撤销',
                         prmcardkind,
                         prmposcode,
                         prmpsamcardno,
                         prmempid,
                         1,
                         1,
                         prmtac,
                         prmpsamtradeno,
                         out_result,
                         out_msg,
                         0,
                         prmcustomerunitcode);

            commit;
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，具体原因为：' || sqlerrm;
    end;

    --次卡钱包充值提交
    procedure proc_commit_vicecard_cash (
        --客户基本信息-------------
        prmcustomerid         in     number,                        --客户编号
        prmcardno             in     number,                            --卡号
        prmcardsn             in     number,                        --持卡序号
        prmvicesaveopcount    in     number,                        --操作计数
        prmviceopcount        in     number,                        --操作计数
        prmcardkind           in     number,
        prmcardtypedetailid   in     number,
        prmopdt               in     varchar2,                      --操作时间
        --客户金额信息-------------
        prmsumviceaddfare     in     number,                          --卡总额
        prmviceoddfare        in     number,              --次卡钱包消费后余额
        prmvicedummyopfare    in     number,
        prmviceopfare         in     number,                --次卡钱包消费金额
        prmviceoddfarepre     in     number,              --次卡钱包充值前余额
        --终端交易信息-------------
        prmposcode            in     number,                        --消费终端
        prmpsamcardno         in     number,
        prmtac                in     varchar2,                     --tac验证码
        prmempid              in     number,                        --职员编号
        prmpsamtradeno        in     number,
        --返回值-------------------
        prmplanid             in     number,
        prmcardasn            in     number,
        prmcustomerunitcode   in     varchar2,
        out_result               out number,
        out_msg                  out varchar2)
    as
        /*
       ------------------------------------------------------------------------
       --存储过程： proc_commit_vicecard_cash
       --作　　者：周晓娜
       --时　　间：2011-07-22
       --说　　明： 提交充值申请记录
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败

       ------------------------------------------------------------------------
        --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       --修改标识：周晓娜 2012-09-11
       --修改说明：兼容多客户、增加充值授权额度和一人多卡处理
       --------------------------------------------------------------------------
       */
        vcount             number;
        vacccodegroupid    number;
        vacccode           number;
        vacccodedesc       varchar2 (30);
        vstatus            number;
        vcardno            number;
        vcardsn            number;
        vcustomerid        number;
        vvicesaveopcount   number;
        vviceopcount       number;
        vpsamcardno        number;
        vposcode           number;
        visuse             number;
        vgroupid           number;
        vviceopfare        number;
        vvicedummyopfare   number;
        vareaid            number;
        v_deptcode         varchar2 (20);               --充值职员所属营业部门
        i_deptareaid       integer;                 --充值职员营业部门所属分区
        n_customerid       number;                                      --帐号
        v_paramvalue       varchar2 (20);                           --运行参数
        custom_exception   exception;
    begin
        --------------------------------------------------------------------------------
        out_result := -1000;
        out_msg := '充值提交开始！';
        --
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0)                             --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            raise custom_exception;
        end if;

        n_customerid := prmcustomerid;
        --------------------------------------------------------------------------------

        --验证用户基本信息
        proc_verify_baseinfo (prmcustomerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if (out_result <> 100)
        then
            out_result := out_result;
            out_msg := '验证账户基本信息异常，' || out_msg;
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --验证金额合法性
        if (prmviceopfare <= 0)
        then
            out_result := -1002;
            out_msg := '充值金额必须大于0！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --账本表信息验证
        select count (*)
          into vcount
          from base_customers
         where     customerid = prmcustomerid
               and cardsn = prmcardsn
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1011;
            out_msg := '账本表中不存在该账号！';
            raise custom_exception;
        end if;

        select status,
               cardno,
               cardsn,
               numbersaveopcount,
               numberopcount
          into vstatus,
               vcardno,
               vcardsn,
               vvicesaveopcount,
               vviceopcount
          from base_customers
         where     customerid = prmcustomerid
               and cardsn = prmcardsn
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1012;
            out_msg := '账本表卡状态异常status:' || to_char (vstatus);
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1013;
            out_msg := '账本表卡号验证失败！';
            raise custom_exception;
        elsif vcardsn <> prmcardsn
        then
            pkg_rec_bllt.proc_insertbllt (prmcardno,
                                          3,
                                          prmcardasn,
                                          prmcustomerunitcode,
                                          out_msg,
                                          out_result);
            out_result := -1014;
            out_msg := '账本表卡序号验证失败！';
            raise custom_exception;
        elsif vvicesaveopcount + 1 <> prmvicesaveopcount
        then
            out_result := -1015;
            out_msg := '账本表卡充值交易计数验证失败！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        --充值申请记录验证
        select count (*)
          into vcount
          from rec_vicecard_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1003;
            out_msg := '原充值申请记录不存在planid' || to_char (prmplanid);
            raise custom_exception;
        end if;

        --获取申请记录状态、卡号、卡序号、账号、次卡钱包充值交易计数
        --次卡钱包消费计数、终端编号、终端设备唯一运行编号、psam 卡号
        --交易科目、交易科目描述
        select status,
               cardno,
               cardsn,
               customerid,
               vicesaveopcount,
               viceopcount,
               poscode,
               psamcardno,
               acccode,
               description,
               viceopfare,
               a.vicedummyopfare
          into vstatus,
               vcardno,
               vcardsn,
               vcustomerid,
               vvicesaveopcount,
               vviceopcount,
               vposcode,
               vpsamcardno,
               vacccode,
               vacccodedesc,
               vviceopfare,
               vvicedummyopfare
          from rec_vicecard_cash_plan a
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1004;
            out_msg := '充值申请记录状态非申请状态！';
            raise custom_exception;
        elsif vcardno <> prmcardno
        then
            out_result := -1005;
            out_msg := '充值申请记录卡号验证失败！';
            raise custom_exception;
        elsif vcustomerid <> n_customerid
        then
            out_result := -1006;
            out_msg := '充值申请记录帐号验证失败！';
            raise custom_exception;
        elsif vvicesaveopcount + 1 <> prmvicesaveopcount
        then
            out_result := -1007;
            out_msg := '充值申请记录充值交易计数验证失败！';
            raise custom_exception;
        elsif vviceopcount <> prmviceopcount
        then
            out_result := -1008;
            out_msg := 'cpu充值申请记录总交易计数验证失败！';
            raise custom_exception;
        elsif    vviceopfare <> prmviceopfare
              or vvicedummyopfare <> prmvicedummyopfare
        then
            out_result := -1009;
            out_msg := '充值申请记录交易金额验证失败！';
            raise custom_exception;
        elsif vposcode <> prmposcode or vpsamcardno <> prmpsamcardno
        then
            out_result := -1010;
            out_msg := '申请记录中终端和psam卡验证失败！';
            raise custom_exception;
        end if;

        --------------------------------------------------------------------------------
        pkg_handdeal_unsetcash.module_vicecardcash_commit (
            prmplanid,
            prmcustomerid,
            prmtac,
            prmcustomerunitcode,
            out_result,
            out_msg);

        if out_result = 100
        then
            out_result := 100;
            out_msg := '次卡钱包充值提交成功';
            commit;
        else
            out_result := -1005;
            out_msg := '次卡钱包充值提交失败:' || out_msg;
            raise custom_exception;
        end if;
    exception
        when custom_exception
        then
            rollback;

            --记录日志
            insert into rec_vicecard_cash_plan_bad (id,
                                                    planid,
                                                    customerid,
                                                    cardno,
                                                    cardsn,
                                                    cardtypedetailid,
                                                    sumviceaddfare,
                                                    viceoddfare,
                                                    viceoddfarepre,
                                                    vicedummyopfare,
                                                    viceopfare,
                                                    vicesaveopcount,
                                                    viceopcount,
                                                    status,
                                                    acccode,
                                                    opdt,
                                                    description,
                                                    cardkind,
                                                    poscode,
                                                    psamcardno,
                                                    empid,
                                                    dealtype,
                                                    wallettype,
                                                    tac,
                                                    samtradeno,
                                                    badcode,
                                                    baddesc,
                                                    ver,
                                                    customerunitcode)
                 values (0,
                         prmplanid,
                         prmcustomerid,
                         prmcardno,
                         prmcardsn,
                         prmcardtypedetailid,
                         prmsumviceaddfare,
                         prmviceoddfare,
                         prmviceoddfarepre,
                         prmvicedummyopfare,
                         prmviceopfare,
                         prmvicesaveopcount,
                         prmviceopcount,
                         0,
                         vacccode,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                         '次卡钱包充值',
                         prmcardkind,
                         prmposcode,
                         prmpsamcardno,
                         prmempid,
                         1,
                         3,
                         prmtac,
                         prmpsamtradeno,
                         out_result,
                         out_msg,
                         0,
                         prmcustomerunitcode);

            commit;
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，具体原因为：' || sqlerrm;
    end;

    --次卡钱包充值回滚
    procedure proc_rollback_vicecard_cash (
        --客户基本信息-------------
        prmcustomerid         in     number,                        --客户编号
        prmcardno             in     number,                            --卡号
        prmcardsn             in     number,                        --持卡序号
        prmvicesaveopcount    in     number,                        --操作计数
        prmviceopcount        in     number,                        --操作计数
        --终端交易信息-------------
        prmposcode            in     number,                        --消费终端
        prmpsamcardno         in     number,
        prmempid              in     number,
        --返回值-------------
        prmplanid             in     number,
        prmcustomerunitcode   in     varchar2,
        out_result               out number,
        out_msg                  out varchar2)
    as
        /*
        ------------------------------------------------------------------------
        --存储过程： proc_rollback_vicecard_cash
        --作　　者：周晓娜
        --时　　间：2011-07-22
        --说　　明： 回滚充值申请记录
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：成功，帐目统计成功，其他失败
        ------------------------------------------------------------------------
        --修改标识：程文平 2012-08-11
        --修改说明：兼容标准公交和住建部密钥系统
        --------------------------------------------------------------------------
        */
        vcount              number;
        --原申请记录信息
        vstatus             number;
        vcardno             number;
        vcardsn             number;
        vcustomerid         number;
        vvicesaveopcount    number;
        vviceopcount        number;
        vpsamcardno         number;
        vposcode            number;
        vplanacccode        number;                           --未决记录的科目
        vplanacccodegroup   number;                           --未决记录的科目
        n_customerid        number;                                     --帐号
        v_paramvalue        varchar2 (20);                          --运行参数
    begin
        out_result := -1000;
        out_msg := '回滚充值申请开始';
        --------------------------------------------------------------------------------
        n_customerid := prmcustomerid;

        --------------------------------------------------------------------------------
        --充值申请记录验证
        select nvl (count (*), 0)
          into vcount
          from rec_vicecard_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := '充值申请记录不存在';
            return;
        end if;

        out_result := -1002;
        out_msg := '获取待回滚记录';

        --获取申请记录状态、卡号、卡序号、账号、次卡钱包充值交易计数
        --次卡钱包消费计数、终端设备唯一运行编号、psam 卡号
        select status,
               cardno,
               cardsn,
               customerid,
               vicesaveopcount,
               viceopcount,
               poscode,
               psamcardno,
               acccode
          into vstatus,
               vcardno,
               vcardsn,
               vcustomerid,
               vvicesaveopcount,
               vviceopcount,
               vposcode,
               vpsamcardno,
               vplanacccode
          from rec_vicecard_cash_plan
         where planid = prmplanid and customerunitcode = prmcustomerunitcode;

        ----验证卡与申请记录是否一致，是否允许回滚
        if vstatus <> 1
        then
            out_result := -1004;
            out_msg := '次卡钱包充值申请记录状态非申请状态，不允许回滚';
            return;
        elsif vcardno <> prmcardno
        then
            out_result := -1005;
            out_msg := '卡号与申请记录卡号不一致，不允许回滚';
            return;
        elsif vcustomerid <> n_customerid
        then
            out_result := -1006;
            out_msg := '账号与申请记录帐号不一致，不允许回滚';
            return;
        elsif vvicesaveopcount <> prmvicesaveopcount
        then
            out_result := -1007;
            out_msg := '卡充值操作计数与申请充值计数不一致，不允许回滚';
            return;
        elsif vviceopcount <> prmviceopcount
        then
            out_result := -1008;
            out_msg := '卡消费操作计数与申请消费计数不一致，不允许回滚';
            return;
        elsif vposcode <> prmposcode
        then
            out_result := -1009;
            out_msg := '交易终端与申请终端不一致，不允许回滚';
            return;
        elsif vpsamcardno <> prmpsamcardno
        then
            out_result := -1010;
            out_msg := '交易psam卡号与申请psam卡号不一致，不允许回滚';
            return;
        end if;

        --------------------------------------------------------------------------------
        pkg_handdeal_unsetcash.module_vicecardcash_rollback (
            prmplanid,
            n_customerid,
            -102,
            '次卡钱包充值回滚',
            prmcustomerunitcode,
            out_result,
            out_msg);

        if out_result = 100
        then
            out_result := 100;
            out_msg := '次卡钱包领款回滚成功！';
            commit;
        else
            out_result := -1005;
            out_msg := '次卡钱包领款回滚成功！';
            rollback;
        end if;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，具体原因为：' || sqlerrm;
    end;

    procedure proc_get_topup_detail (
        prmcustomerid         in     number,
        prmcardno             in     number,
        prmcustomerunitcode   in     varchar2,                      --客户代码
        out_cursor               out refcursortype,
        out_result               out number,
        out_msg                  out varchar2)
    as
        /*
       -------------------------------------------------------------------------------
       --存储过程： proc_get_topup_detail
       --作　　者：刘东红
       --时　　间：2009-07-03
       --说　　明： 读取最新充值记录
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：验证正确，其他失败
       --------------------------------------------------------------------------
       */
        vcount            number;
        velesaveplanid    number;
        vvicesaveplanid   number;
        vmonsaveplanid    number;
    begin
        out_result := -3000;
        out_msg := '读取充值记录失败！';

        --------------------------------------------------------------------------------
        --检验客户代码是否合法
        select count (id)
          into vcount
          from base_customers a
         where     a.customerid = prmcustomerid
               and a.cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount <> 1
        then
            out_result := -3011;
            out_msg := '系统中不存在此客户！';
            return;
        end if;

        select a.vicesaveplanid - 1, a.monsaveplanid - 1, a.elesaveplanid - 1
          into vvicesaveplanid, vmonsaveplanid, velesaveplanid
          from base_customers a
         where     a.customerid = prmcustomerid
               and a.cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        open out_cursor for
              select *
                from (select *
                        from (  select a.cashaccfc,
                                       a.opdt,
                                       a.customerid,
                                       a.cardno,
                                       a.cardsn,
                                       a.cardtypedetailid,
                                       a.cardkind,
                                       a.electropcount,
                                       a.electrsaveopcount,
                                       a.electroddfare,
                                       a.electroddfarepre,
                                       a.electrdummyopfare,
                                       a.electropfare,
                                       a.acccode,
                                       a.dscrp,
                                       a.poscode,
                                       a.dealtype,
                                       a.samcardno,
                                       a.samtradeno,
                                       a.planid,
                                       a.uploaddate,
                                       a.empid,
                                       a.wallettype,
                                       (case
                                            when a.wallettype = 1 then '电子钱包'
                                            else '钱包其他充值'
                                        end)
                                           wallettypetitle,
                                       a.tac,
                                       a.sumelectraddfare,
                                       0 as limittimes,
                                       0 as monthnum,
                                       '' as validtimestart,
                                       '' as validtimeend,
                                       b.name,
                                       c.empname
                                  from rec_electtron_cash a,
                                       base_customers_info b,
                                       base_emp c,
                                       base_term d
                                 where     a.planid > velesaveplanid
                                       and a.customerid = prmcustomerid
                                       and a.cardno = prmcardno
                                       and a.customerunitcode =
                                               prmcustomerunitcode
                                       and a.acccode = 100
                                       and a.customerid = b.customerid
                                       and a.empid = c.empid
                                       and a.customerunitcode =
                                               c.customerunitcode
                                       and a.poscode = d.poscode
                                       and a.customerunitcode =
                                               b.customerunitcode
                                       and a.customerunitcode =
                                               d.customerunitcode
                                       and d.typeid = 1
                              order by a.planid desc)
                       where rownum < 2
                      union
                      select *
                        from (  select a.cashaccfc,
                                       a.opdt,
                                       a.customerid,
                                       a.cardno,
                                       a.cardsn,
                                       a.cardtypedetailid,
                                       a.cardkind,
                                       a.viceopcount as electropcount,
                                       a.vicesaveopcount as electrsaveopcount,
                                       a.viceoddfare as electroddfare,
                                       a.viceoddfarepre as electroddfarepre,
                                       a.vicedummyopfare as electrdummyopfare,
                                       a.viceopfare as electropfare,
                                       a.acccode,
                                       a.dscrp,
                                       a.poscode,
                                       a.dealtype,
                                       a.samcardno,
                                       a.samtradeno,
                                       a.planid,
                                       a.uploaddate,
                                       a.empid,
                                       a.wallettype,
                                       (case
                                            when a.wallettype = 3 then '次卡钱包'
                                            else '次卡其他充值'
                                        end)
                                           wallettypetitle,
                                       a.tac,
                                       a.sumviceaddfare as sumelectraddfare,
                                       a.limittimes,
                                       a.monthnum,
                                       to_char (a.validtimestart, 'yyyy-mm-dd')
                                           as validtimestart,
                                       to_char (a.validtimeend, 'yyyy-mm-dd')
                                           as validtimeend,
                                       b.name,
                                       c.empname
                                  from rec_vicecard_cash a,
                                       base_customers_info b,
                                       base_emp c,
                                       base_term d
                                 where     a.planid > vvicesaveplanid
                                       and a.customerid = prmcustomerid
                                       and a.cardno = prmcardno
                                       and a.customerunitcode =
                                               prmcustomerunitcode
                                       and a.acccode = 102
                                       and a.monthnum > 0
                                       and a.customerid = b.customerid
                                       and a.empid = c.empid
                                       and a.customerunitcode =
                                               c.customerunitcode
                                       and a.poscode = d.poscode
                                       and a.customerunitcode =
                                               b.customerunitcode
                                       and a.customerunitcode =
                                               d.customerunitcode
                                       and d.typeid = 1
                              order by a.planid desc)
                       where rownum < 2
                      union
                      select *
                        from (  select a.cashaccfc,
                                       a.opdt,
                                       a.customerid,
                                       a.cardno,
                                       a.cardsn,
                                       a.cardtypedetailid,
                                       a.cardkind,
                                       a.viceopcount as electropcount,
                                       a.vicesaveopcount as electrsaveopcount,
                                       a.viceoddfare as electroddfare,
                                       a.viceoddfarepre as electroddfarepre,
                                       a.vicedummyopfare as electrdummyopfare,
                                       a.viceopfare as electropfare,
                                       a.acccode,
                                       a.dscrp,
                                       a.poscode,
                                       a.dealtype,
                                       a.samcardno,
                                       a.samtradeno,
                                       a.planid,
                                       a.uploaddate,
                                       a.empid,
                                       a.wallettype,
                                       (case
                                            when a.wallettype = 3 then '月票钱包'
                                            else '月票其他充值'
                                        end)
                                           wallettypetitle,
                                       a.tac,
                                       a.sumviceaddfare as sumelectraddfare,
                                       a.limittimes,
                                       a.monthnum,
                                       to_char (a.validtimestart, 'yyyy-mm-dd')
                                           as validtimestart,
                                       to_char (a.validtimeend, 'yyyy-mm-dd')
                                           as validtimeend,
                                       b.name,
                                       c.empname
                                  from rec_monticket_cash a,
                                       base_customers_info b,
                                       base_emp c,
                                       base_term d
                                 where     a.planid > vmonsaveplanid
                                       and a.customerid = prmcustomerid
                                       and a.cardno = prmcardno
                                       and a.customerunitcode =
                                               prmcustomerunitcode
                                       and a.acccode = 101
                                       and a.monthnum > 0
                                       and a.customerid = b.customerid
                                       and a.empid = c.empid
                                       and a.customerunitcode =
                                               c.customerunitcode
                                       and a.poscode = d.poscode
                                       and a.customerunitcode =
                                               b.customerunitcode
                                       and a.customerunitcode =
                                               d.customerunitcode
                                       and d.typeid = 1
                              order by a.planid desc)
                       where rownum < 2)
            order by acccode, opdt desc;

        out_result := 100;
        out_msg := '成功';
    exception
        when others
        then
            open out_cursor for select 0 as id from dual;

            out_result := -1;
            out_msg := '读取充值记录异常：' || sqlerrm;
    end;


    --空中圈存申请处理未决记录 (张垒 20131231)
    procedure proc_nfc_cash_unsettled (
        --客户基本信息-------------
        prmcustomerid          in     number,                       --客户编号
        prmcardno              in     number,                           --卡号
        prmcardsn              in     number,                       --持卡序号
        prmcardkind            in     number,        --卡种类 1：m1卡 2：cpu卡
        prmcardtypedetailid    in     number,    --卡类型 普通卡 月卡 老年卡等
        prmopdt                in     varchar2,                     --操作时间
        --客户电子钱包信息-------------
        prmsumelectraddfare    in     number,                 --电子钱包卡总额
        prmelectroddfare       in     number,                   --电子钱包余额
        prmelectrsaveopcount   in     number,               --电子钱包充值计数
        prmelectropcount       in     number,               --电子钱包消费计数
        --终端交易信息-------------
        prmposcode             in     number,                       --终端编号
        prmpsamcardno          in     number,                       --psam卡号
        prmempid               in     number,                         --操作员
        prmcardasn             in     number,                 --卡片应用序列号
        --钱包类型----------------------------
        prmwallettype          in     varchar2,                 --钱包启用标识
        --客户次卡信息----------------------------
        prmvicesaveopcount     in     number,               --次卡充值交易计数
        prmviceopcount         in     number,               --次卡消费交易计数
        prmviceoddfare         in     number,                   --次卡钱包余额
        --客户月票信息-----------------------------
        prmmonthsaveopcount    in     number,               --月票充值交易计数
        prmmonthopcount        in     number,               --月票消费交易计数
        prmmonthoddfare        in     number,                   --月票钱包余额
        --返回值-------------------
        prmcustomerunitcode    in     varchar2,                     --客户代码
        out_result                out number,                         --返回值
        out_msg                   out varchar2                      --返回信息
                                              )
    as
        vopmonth                  number;
        vcount                    number;
        velectropcount            number;
        velectrsaveopcount        number;
        vmonopcount               number;
        vmonsaveopcount           number;
        --次卡钱包
        vviceopcount              number;                   --次卡钱包消费计数
        vvicesaveopcount          number;                   --次卡钱包充值计数
        vplanelectropfare         number;
        vplanelectroddfarepre     number;
        vplanelectroddfare        number;
        vplanelectrdummyopfare    number;
        vplanelectropcount        number;
        vplanelectrsaveopcount    number;
        vplanacccode              number;
        vplanacccodegroup         number;
        --次卡钱包
        vplanviceopfare           number;
        vplanviceoddfarepre       number;
        vplanviceoddfare          number;
        vplanvicerdummyopfare     number;
        vplanviceopcount          number;
        vplanvicesaveopcount      number;
        n_unset_planid            number;                     --未决记录事务号
        n_unset_elecopcount       number;               --电子钱包未决交易计数
        n_unset_elecsaveopcount   number;               --电子钱包未决充值计数
        v_execsql                 varchar2 (1000);
        n_elecunsetcount          number;                 --电子钱包未决记录数
        n_monunsetcount           number;  --月票未决记录数-------------------
        --次卡钱包
        n_unset_viceopcount       number;               --次卡钱包未决交易计数
        n_unset_vicesaveopcount   number;               --次卡钱包未决充值计数
        n_unset_monopcount        number;               --次卡钱包未决交易计数
        n_unset_monsaveopcount    number;               --次卡钱包未决充值计数
        n_viceunsetcount          number;                 --次卡钱包未决记录数
        v_isindependent           varchar2 (1);
        b_eleopcount              number;               --后续消费记录交易计数
        b_eleoddfare              number;                     --后续消费卡余额
        b_eleopfare               number;                   --后续消费交易金额
        n_unset_customerid        number;                       --未决记录账号
        n_unset_tac               varchar2 (16);
        n_unset_oldplanid         number;                     --申请时的planid
        n_customerid              number;                               --帐号
        v_paramvalue              varchar2 (20);                    --运行参数
        vplanmonthoddfare         number;
        vplanmonthopfare          number;
        b_monoddfare              number;
        b_monopfare               number;
        b_monopcount              number;
        b_viceoddfare             number;
        b_viceopfare              number;
        b_viceopcount             number;
    begin
        out_result := -1000;
        out_msg := '处理电子钱包、次卡钱包和月票充值未决记录开始！';
        vopmonth := 0;
        n_customerid := prmcustomerid;
        --------------------------------------------------------------------------------

        --验证账户、设备、psam卡号、职员合法性
        proc_verify_baseinfo (n_customerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if out_result <> 100
        then
            out_result := -1001;
            out_msg := '基本信息验证失败，' || out_msg;
            return;
        end if;

        --------------------------------------------------------------------------------
        --验证个人信息
        select count (*)
          into vcount
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount < 1
        then
            out_result := -1001;
            out_msg := '无此卡信息！';
            return;
        end if;

        --验证个人信息
        select electropcount,
               electrsaveopcount,
               monopcount,
               monsaveopcount,
               numberopcount,
               numbersaveopcount
          into velectropcount,
               velectrsaveopcount,
               vmonopcount,
               vmonsaveopcount,
               vviceopcount,
               vvicesaveopcount
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --库中的交易计数不允许比卡上交易计数大
        if    velectropcount > prmelectropcount
           or velectrsaveopcount > prmelectrsaveopcount
        then
            out_result := -1002;
            out_msg :=
                   '电子钱包交易计数校验失败！'
                || velectropcount
                || prmelectropcount
                || velectrsaveopcount
                || prmelectrsaveopcount;
            return;
        end if;

        ----nfc空中圈存，去掉次卡和月票的验证 (张垒 2013-12-31)
        /*
              --库中的交易计数不允许比卡上交易计数大
              if vviceopcount > prmviceopcount
                 or vvicesaveopcount > prmvicesaveopcount
              then
                 out_result := -1002;
                 out_msg :=
                       '次卡钱包交易计数校验失败！'
                    || vviceopcount
                    || prmviceopcount
                    || vvicesaveopcount
                    || prmvicesaveopcount;
                 return;
              end if;

              --库中的交易计数不允许比卡上交易计数大
              if vmonopcount > prmmonthopcount
                 or vmonsaveopcount > prmmonthsaveopcount
              then
                 out_result := -1002;
                 out_msg :=
                       '月票钱包交易计数校验失败！'
                    || vmonopcount
                    || prmmonthopcount
                    || vmonsaveopcount
                    || prmmonthsaveopcount;
                 return;
              end if;
        */

        ----------每次读卡都以卡信息更新数据库信息-------------------------------------
        --每次读卡都以卡信息更新数据库信息
        out_result := -1002;
        out_msg := '更新账本信息';

        update base_customers a
           set a.electropcount = prmelectropcount,
               a.electrsaveopcount = prmelectrsaveopcount,
               a.numberopcount = prmviceopcount,             -- prmmonopcount,
               a.numbersaveopcount = prmvicesaveopcount,
               a.electroddfare = prmelectroddfare,
               a.sumelectraddfare = prmsumelectraddfare,
               a.numberoddfare = prmviceoddfare,
               a.monopcount = prmmonthopcount,
               monsaveopcount = prmmonthsaveopcount,
               monoddfare = prmmonthoddfare
         where     a.customerid = prmcustomerid
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --------------判断是否有未决记录------------------------------------------
        out_result := -1002;
        out_msg := '判断是否有未决记录';

        --电子钱包未决
        --查询电子钱包未决记录数
        select nvl (count (*), 0)
          into n_elecunsetcount
          from rec_electtron_cash_plan
         where     customerid = prmcustomerid
               and cardsn = prmcardsn
               and status = 1
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --有未决记录多于一笔，无法校验
        if n_elecunsetcount > 2
        then
            --电子钱包未决记录
            out_result := -1005;
            out_msg := '钱包未决记录记录异常无法校验';
            return;
        end if;

        ----nfc空中圈存，去掉次卡和月票的验证 (张垒 2013-12-31)
        /*
              --查询月票未决记录数
              select nvl (count (*), 0)
                into n_monunsetcount
                from rec_monticket_cash_plan
               where customerid = n_customerid
                 and cardsn = prmcardsn
                 and cardno = prmcardno
                 and customerunitcode = prmcustomerunitcode;

              --有未决记录多于一笔，无法校验
              if n_monunsetcount > 2
              then
                 --没有电子钱包和月票未决记录
                 out_result := -1005;
                 out_msg := '月票未决记录记录异常无法校验';
                 return;
              end if;

              --查询次卡钱包未决记录数
              select nvl (count (*), 0)
                into n_viceunsetcount
                from rec_vicecard_cash_plan
               where customerid = n_customerid
                 and cardsn = prmcardsn
                 and cardno = prmcardno
                 and customerunitcode = prmcustomerunitcode;

              --有未决记录多于一笔，无法校验
              if n_viceunsetcount > 2
              then
                 --没有电子钱包和次卡未决记录
                 out_result := -1005;
                 out_msg := '次卡未决记录记录异常无法校验';
                 return;
              end if;
        */
        -------------确定有未决记录，进行未决处理--------------------------------------
        out_result := -1005;
        out_msg := '确定有未决记录，进行未决处理';

        if n_elecunsetcount > 0
        then
            out_result := -1005;
            out_msg := '处理当前卡电子钱包未决记录开始！';

            --zxn 20120418增加未决卡余额、未决交易金额和交易科目、账号信息、tac值处理、申请时planid
            select a.planid,
                   a.electropcount,
                   a.electrsaveopcount,
                   a.electroddfare,
                   a.electropfare,
                   a.acccode,
                   a.customerid,
                   a.tac,
                   a.oldplanid
              into n_unset_planid,
                   n_unset_elecopcount,
                   n_unset_elecsaveopcount,
                   vplanelectroddfare,
                   vplanelectropfare,
                   vplanacccode,
                   n_unset_customerid,
                   n_unset_tac,
                   n_unset_oldplanid
              from rec_electtron_cash_plan a
             where     customerid = prmcustomerid
                   and cardsn = prmcardsn
                   and status = 1
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            --zxn 20120426 增加判断
            --prmelectropcount > n_unset_elecopcount 改为prmelectropcount >= n_unset_elecopcount
            if (    prmelectrsaveopcount = n_unset_elecsaveopcount + 1
                and prmelectropcount >= n_unset_elecopcount
                and prmcardkind = 1)
            then
                --m1卡写卡成功
                pkg_handdeal_unsetcash.module_electrcash_commit (
                    n_unset_planid,
                    prmcustomerid,
                    n_unset_tac,
                    prmcustomerunitcode,
                    out_result,
                    out_msg);
            elsif (    prmelectrsaveopcount = n_unset_elecsaveopcount + 1
                   and prmelectropcount >= n_unset_elecopcount
                   and prmcardkind = 2)
            then
                --cpu卡写卡成功
                pkg_handdeal_unsetcash.module_electrcash_commit (
                    n_unset_planid,
                    prmcustomerid,
                    n_unset_tac,
                    prmcustomerunitcode,
                    out_result,
                    out_msg);
            elsif (    prmelectrsaveopcount = n_unset_elecsaveopcount
                   and prmelectropcount >= n_unset_elecopcount)
            then
                --增加判断有可能是充值撤销的未决记录 （充值撤销相当于取款消费）
                if vplanacccode = '240'
                then
                    --如果卡上消费计数  = 未决消费计数+ 1 （通过判断卡上的余额和未决表中卡余额-交易金额最对比进行判断）
                    --未决卡余额-未决消费金额 = 目前卡上余额 则证明写卡成功，提交记录
                    if (    prmelectropcount = n_unset_elecopcount + 1
                        and (vplanelectroddfare - vplanelectropfare =
                                 prmelectroddfare))  --如果消费计数=未决计数+1
                    then
                        --写卡成功，进行提交
                        pkg_handdeal_unsetcash.repeal_electrcash_commit (
                            n_unset_planid,
                            prmcustomerid,
                            n_unset_tac,
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    elsif (prmelectropcount > n_unset_elecopcount + 1)
                    then
                        --判断消费记录表中的后续记录
                        select count (a.cstaccfc)
                          into vcount
                          from rec_electtron_consume a
                         where     a.opcount - 1 = n_unset_elecopcount + 1
                               and a.customerid = n_unset_customerid
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        if vcount = 0
                        then
                            --没有后续消费记录无法判断
                            out_result := -1005;
                            out_msg := '无法校验未决记录';
                            return;
                        end if;

                        select a.electronoddfare, a.electronopfare, a.opcount
                          into b_eleoddfare, b_eleopfare, b_eleopcount
                          from rec_electtron_consume a
                         where     a.customerid = n_unset_customerid
                               and a.opcount - 1 = n_unset_elecopcount + 1
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        --如果当前卡上交易计数的后续消费记录的卡余额+消费金额= 当前卡余额则证明写卡成功
                        if (    b_eleoddfare + b_eleopfare = prmelectroddfare
                            and b_eleopcount >= prmelectropcount)
                        then
                            --写卡成功，进行提交
                            pkg_handdeal_unsetcash.repeal_electrcash_commit (
                                n_unset_planid,
                                prmcustomerid,
                                n_unset_tac,
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        else
                            --写卡失败进行回滚
                            pkg_handdeal_unsetcash.module_electrcash_rollback (
                                n_unset_planid,
                                prmcustomerid,
                                -300,
                                '充值前校验写卡失败',
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        end if;
                    elsif (    prmelectrsaveopcount = n_unset_elecsaveopcount
                           and prmelectropcount >= n_unset_elecopcount)
                    then
                        --写卡失败进行回滚
                        pkg_handdeal_unsetcash.module_electrcash_rollback (
                            n_unset_planid,
                            prmcustomerid,
                            -300,
                            '充值前校验写卡失败',
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    else
                        out_result := -1007;
                        out_msg := '无法校验电子钱包未决记录完毕！';
                        rollback;
                        return;
                    end if;
                else
                    --写卡失败
                    pkg_handdeal_unsetcash.module_electrcash_rollback (
                        n_unset_planid,
                        prmcustomerid,
                        -300,
                        '充值前校验写卡失败',
                        prmcustomerunitcode,
                        out_result,
                        out_msg);
                end if;

                if out_result <> 100
                then
                    --out_result := -1007;
                    out_result := out_result;
                    out_msg :=
                        '处理电子钱包未决记录出错：' || out_result || out_msg;
                    rollback;
                    return;
                end if;
            else
                out_result := -1007;
                out_msg := '无法校验电子钱包未决记录完毕！';
                rollback;
                return;
            end if;

            if out_result <> 100
            then
                --out_result := -1007;
                out_result := out_result;
                out_msg :=
                    '处理电子钱包未决记录出错：' || out_result || out_msg;
                rollback;
                return;
            end if;
        end if;

        --------------------------------------------------------------------------------
        if n_monunsetcount > 0                                        --有月票
        then
            out_result := -1005;
            out_msg := '处理当前卡月票钱包未决记录开始！';

            --检查账本信息是否完整
            select count (*)
              into vcount
              from base_customers_monticket
             where     customerid = n_customerid
                   and cardasn = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            if vcount <= 0
            then
                out_result := -1010;
                out_msg := '有月票充值未决记录，但无月票账本信息';
                rollback;
                return;
            end if;

            select a.planid,
                   a.viceopcount,
                   a.vicesaveopcount,
                   a.acccode,
                   a.viceoddfare,
                   a.viceopfare
              into n_unset_planid,
                   n_unset_monopcount,
                   n_unset_monsaveopcount,
                   vplanacccode,
                   vplanmonthoddfare,
                   vplanmonthopfare
              from rec_monticket_cash_plan a
             where     customerid = n_customerid
                   and cardsn = prmcardsn
                   and status = 1
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            if (    prmmonthsaveopcount = n_unset_monsaveopcount + 1
                and prmmonthopcount >= n_unset_monopcount)
            then
                --写卡成功
                pkg_handdeal_unsetcash.module_montrcash_commit (
                    n_unset_planid,
                    n_customerid,
                    '555555',
                    prmcustomerunitcode,
                    out_result,
                    out_msg);
            elsif (    prmmonthsaveopcount = n_unset_monsaveopcount
                   and prmmonthopcount >= n_unset_monopcount)
            then
                --增加判断有可能是充值撤销的未决记录 （充值撤销相当于取款消费）
                if vplanacccode = '242'
                then
                    --如果卡上消费计数  = 未决消费计数+ 1 （通过判断卡上的余额和未决表中卡余额-交易金额最对比进行判断）
                    --未决卡余额-未决消费金额 = 目前卡上余额 则证明写卡成功，提交记录
                    if (    prmmonthopcount = n_unset_monopcount + 1
                        and (vplanmonthoddfare - vplanmonthopfare =
                                 prmmonthoddfare))   --如果消费计数=未决计数+1
                    then
                        --写卡成功，进行提交
                        pkg_handdeal_unsetcash.repeal_monticket_commit (
                            n_unset_planid,
                            prmcustomerid,
                            '555555',
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    elsif (prmmonthopcount > n_unset_monopcount + 1)
                    then
                        --判断消费记录表中的后续记录
                        select count (a.cstaccfc)
                          into vcount
                          from rec_monticket_consum a
                         where     a.opcount - 1 = n_unset_monopcount + 1
                               and a.customerid = prmcustomerid
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        if vcount = 0
                        then
                            --没有后续消费记录无法判断
                            out_result := -1005;
                            out_msg := '无法校验未决记录';
                            return;
                        end if;

                        select a.viceonoddfare, a.viceonopfare, a.opcount
                          into b_monoddfare, b_monopfare, b_monopcount
                          from rec_monticket_consum a
                         where     a.customerid = prmcustomerid
                               and a.opcount - 1 = n_unset_monopcount + 1
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        --如果当前卡上交易计数的后续消费记录的卡余额+消费金额= 当前卡余额则证明写卡成功
                        if (    b_monoddfare + b_monopfare = prmmonthoddfare
                            and b_monopcount >= prmmonthopcount)
                        then
                            --写卡成功，进行提交
                            pkg_handdeal_unsetcash.repeal_monticket_commit (
                                n_unset_planid,
                                prmcustomerid,
                                '555555',
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        else
                            --写卡失败进行回滚
                            pkg_handdeal_unsetcash.module_montrcash_rollback (
                                n_unset_planid,
                                n_customerid,
                                -400,
                                '充值时校验写卡失败',
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        end if;
                    elsif (    prmmonthsaveopcount = n_unset_monsaveopcount
                           and prmmonthopcount >= n_unset_monopcount)
                    then
                        --写卡失败进行回滚
                        pkg_handdeal_unsetcash.module_montrcash_rollback (
                            n_unset_planid,
                            n_customerid,
                            -400,
                            '充值时校验写卡失败',
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    else
                        out_result := -1007;
                        out_msg := '无法校验月票钱包未决记录完毕！';
                        rollback;
                        return;
                    end if;
                else
                    --写卡失败
                    pkg_handdeal_unsetcash.module_montrcash_rollback (
                        n_unset_planid,
                        n_customerid,
                        -400,
                        '充值时校验写卡失败',
                        prmcustomerunitcode,
                        out_result,
                        out_msg);
                end if;

                if out_result <> 100
                then
                    --out_result := -1007;
                    out_result := out_result;
                    out_msg :=
                        '处理月票钱包未决记录出错：' || out_result || out_msg;
                    rollback;
                    return;
                end if;
            else
                out_result := -1007;
                out_msg := '无法校验月票钱包未决记录';
                rollback;
                return;
            end if;

            if out_result <> 100
            then
                out_result := -1007;
                out_msg := '处理月票钱包未决记录出错：' || out_msg;
                rollback;
                return;
            end if;
        end if;

        --------------------------------------------------------------------------------
        if n_viceunsetcount > 0                                   --有次卡钱包
        then
            out_result := -1005;
            out_msg := '处理当前卡次卡钱包未决记录开始！';

            select a.planid,
                   a.viceopcount,
                   a.vicesaveopcount,
                   a.viceoddfare,
                   a.viceopfare,
                   a.acccode
              into n_unset_planid,
                   n_unset_viceopcount,
                   n_unset_vicesaveopcount,
                   vplanviceoddfare,
                   vplanviceopfare,
                   vplanacccode
              from rec_vicecard_cash_plan a
             where     customerid = n_customerid
                   and cardsn = prmcardsn
                   and status = 1
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            if (    prmvicesaveopcount = n_unset_vicesaveopcount + 1
                and prmviceopcount >= n_unset_viceopcount)
            then
                --写卡成功
                pkg_handdeal_unsetcash.module_vicecardcash_commit (
                    n_unset_planid,
                    prmcustomerid,
                    '666666',
                    prmcustomerunitcode,
                    out_result,
                    out_msg);
            elsif (    prmvicesaveopcount = n_unset_vicesaveopcount
                   and prmviceopcount >= n_unset_viceopcount)
            then
                --增加判断有可能是充值撤销的未决记录 （充值撤销相当于取款消费）
                if vplanacccode = '241'
                then
                    --如果卡上消费计数  = 未决消费计数+ 1 （通过判断卡上的余额和未决表中卡余额-交易金额最对比进行判断）
                    --未决卡余额-未决消费金额 = 目前卡上余额 则证明写卡成功，提交记录
                    if (    prmviceopcount = n_unset_viceopcount + 1
                        and (vplanviceoddfare - vplanviceopfare =
                                 prmviceoddfare))    --如果消费计数=未决计数+1
                    then
                        --写卡成功，进行提交
                        pkg_handdeal_unsetcash.repeal_vicecard_commit (
                            n_unset_planid,
                            prmcustomerid,
                            '555555',
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    elsif (prmviceopcount > n_unset_viceopcount + 1)
                    then
                        --判断消费记录表中的后续记录
                        select count (a.cstaccfc)
                          into vcount
                          from rec_vicecard_consume a
                         where     a.opcount - 1 = n_unset_viceopcount + 1
                               and a.customerid = prmcustomerid
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        if vcount = 0
                        then
                            --没有后续消费记录无法判断
                            out_result := -1005;
                            out_msg := '无法校验未决记录';
                            return;
                        end if;

                        select a.viceonoddfare, a.viceonopfare, a.opcount
                          into b_viceoddfare, b_viceopfare, b_viceopcount
                          from rec_vicecard_consume a
                         where     a.customerid = prmcustomerid
                               and a.opcount - 1 = n_unset_viceopcount + 1
                               and a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;

                        --如果当前卡上交易计数的后续消费记录的卡余额+消费金额= 当前卡余额则证明写卡成功
                        if (    b_viceoddfare + b_viceopfare = prmviceoddfare
                            and b_viceopcount >= prmviceopcount)
                        then
                            --写卡成功，进行提交
                            pkg_handdeal_unsetcash.repeal_vicecard_commit (
                                n_unset_planid,
                                prmcustomerid,
                                '555555',
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        else
                            --写卡失败进行回滚
                            pkg_handdeal_unsetcash.module_vicecardcash_rollback (
                                n_unset_planid,
                                prmcustomerid,
                                -500,
                                '充值前校验写卡失败',
                                prmcustomerunitcode,
                                out_result,
                                out_msg);
                        end if;
                    elsif (    prmvicesaveopcount = n_unset_vicesaveopcount
                           and prmviceopcount >= n_unset_viceopcount)
                    then
                        --写卡失败进行回滚
                        pkg_handdeal_unsetcash.module_vicecardcash_rollback (
                            n_unset_planid,
                            prmcustomerid,
                            -500,
                            '充值前校验写卡失败',
                            prmcustomerunitcode,
                            out_result,
                            out_msg);
                    else
                        out_result := -1007;
                        out_msg := '无法校验次卡钱包未决记录完毕！';
                        rollback;
                        return;
                    end if;
                else
                    --写卡失败
                    pkg_handdeal_unsetcash.module_vicecardcash_rollback (
                        n_unset_planid,
                        prmcustomerid,
                        -500,
                        '充值前校验写卡失败',
                        prmcustomerunitcode,
                        out_result,
                        out_msg);
                end if;

                if out_result <> 100
                then
                    --out_result := -1007;
                    out_result := out_result;
                    out_msg :=
                        '处理次卡钱包未决记录出错：' || out_result || out_msg;
                    rollback;
                    return;
                end if;
            else
                out_result := -1007;
                out_msg := '无法校验次卡钱包未决记录完毕！';
                rollback;
                return;
            end if;

            if out_result <> 100
            then
                out_result := -1007;
                out_msg := '处理次卡钱包未决记录出错：' || out_msg;
                rollback;
                return;
            end if;
        end if;

        --------------------------------------------------------------------------------
        --验证电子钱包未决记录是否处理完毕
        select nvl (count (*), 0)
          into vcount
          from rec_electtron_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and status = 1
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount <> 0
        then
            out_result := -1017;
            out_msg := '存在未处理为电子钱包领款未决记录!';
            rollback;
            return;
        end if;

        ----nfc空中圈存，去掉次卡和月票的验证 (张垒 2013-12-31)
        /*
              --验证月票钱包未决记录是否处理完毕
              select nvl (count (*), 0)
                into vcount
                from rec_monticket_cash_plan
               where customerid = n_customerid
                 and cardsn = prmcardsn
                 and status = 1
                 and cardno = prmcardno
                 and customerunitcode = prmcustomerunitcode;

              if vcount <> 0
              then
                 out_result := -1018;
                 out_msg := '存在未处理为月票钱包领款未决记录!';
                 rollback;
                 return;
              end if;

              --验证次卡钱包未决记录是否处理完毕
              select nvl (count (*), 0)
                into vcount
                from rec_vicecard_cash_plan
               where customerid = n_customerid
                 and cardsn = prmcardsn
                 and status = 1
                 and cardno = prmcardno
                 and customerunitcode = prmcustomerunitcode;

              if vcount <> 0
              then
                 out_result := -1018;
                 out_msg := '存在未处理为次卡钱包领款未决记录!';
                 rollback;
                 return;
              end if;

        */

        out_result := -1018;
        out_msg := '形成未决校验记录';

        --记录未决校验记录
        insert into rec_cash_request (requestid,
                                      customerid,
                                      cardno,
                                      cardsn,
                                      opdt,
                                      cardtypedetailid,
                                      cardkind,
                                      electropcount,
                                      electrsaveopcount,
                                      monopcount,
                                      monsaveopcount,
                                      sumfare,
                                      electroddfare,
                                      poscode,
                                      samcardno,
                                      uploaddate,
                                      empid,
                                      viceopcount,
                                      vicesaveopcount,
                                      viceoddfare,
                                      monoddfare,
                                      customerunitcode)
             values (0,
                     n_customerid,
                     prmcardno,
                     prmcardsn,
                     sysdate,
                     prmcardtypedetailid,
                     prmcardkind,
                     prmelectropcount,
                     prmelectrsaveopcount,
                     prmmonthopcount,
                     prmmonthsaveopcount,
                     prmsumelectraddfare,
                     prmelectroddfare,
                     prmposcode,
                     prmpsamcardno,
                     sysdate,
                     prmempid,
                     prmviceopcount,
                     prmvicesaveopcount,
                     prmviceoddfare,
                     prmmonthoddfare,
                     prmcustomerunitcode);

        --------------------------------------------------------------------------------
        out_result := 100;
        out_msg := '未决帐处理完毕，可以进行充值操作!';
        commit;
        return;
    exception
        when others
        then
            rollback;

            if out_result > 0
            then
                out_result := -1001;
            else
                out_result := out_result;
            end if;

            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;
end;/
create or replace package pkg_cust_consume is
  type refcursortype is ref cursor; --游标类型定义，用于返回数据集

  ---------------------------未决记录查询和处理----------------------------
  --获取电子钱包消费未决
  procedure proc_geteletr_unsetconsume(prmcustunitcode in varchar2,
                                       out_cursor      out refcursortype);

  procedure proc_getelectr_unsetcashconsum(prmcsutomerid   in number, --账号
                                           prmcardsn       in number, --持卡序号
                                           prmopcount      in number, --消费操作计数
                                           prmcustunitcode in varchar2, --客户代码
                                           prmcardasn      in number, --卡号
                                           out_cursor      out refcursortype);

  --获取月票钱包消费未决
  procedure proc_getmon_unsetconsume(prmcustunitcode in varchar2,
                                     out_cursor      out refcursortype);

  procedure proc_getmon_unsetcashconsum(prmcustomerid   in number,
                                        prmcardsn       in number,
                                        prmopcount      in number,
                                        prmcustunitcode in varchar2, --客户代码
                                        prmcardasn      in number, --卡号
                                        out_cursor      out refcursortype);

  --获取次卡钱包消费未决
  procedure proc_getvice_unsetconsume(prmcustunitcode in varchar2,
                                      out_cursor      out refcursortype);

  --获取未决记录充值和消费opount左右相差5的记录信息
  procedure proc_getvice_unsetcashconsum(prmcsutomerid   in number, --账号
                                         prmcardsn       in number, --持卡序号
                                         prmopcount      in number, --交易操作计数
                                         prmcustunitcode in varchar2, --客户代码
                                         prmcardasn      in number, --卡号
                                         out_cursor      out refcursortype);

  ----------------------------账目处理-------------------------------------
  procedure proc_upload_consumerec( --客户基本信息-------------
                                   prmcustomerid    in out number, --客户编号
                                   prmcardno        in number, --卡号
                                   prmcardsn        in out number, --持卡序号
                                   prmcardkind      in number, --卡种类 1：m1卡 2：cpu卡
                                   prmcardtype      in number, --卡类型 普通卡 月卡 老年卡等
                                   prmopdt          in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                   prmopcount       in number, --消费操作计数，根据钱包判断
                                   prmisnullopcount in number, --消费操作计数是否赋值 0已赋值 1未赋值                                                  
                                   prmsaveopcount   in number, --充值操作计数，根据钱包判断
                                   --客户金额信息-------------
                                   prmsumelectrfare in out number, --卡总额
                                   prmoddfare       in out number, --消费后余额，根据钱包类型判断钱包
                                   prmopfare        in out number, --消费金额，根据钱包类型判断钱包
                                   prmdiscountfare  in out number, -- 打折金额（如果为清零记录，此字段代表每月充值金额）
                                   --终端交易信息-------------
                                   prmbusid      in out number, --车辆id
                                   prmposcode    in number, --设备唯一运营编号
                                   prmsamcardno  in number, --pasm卡卡号
                                   prmtac        in number, --tac验证码
                                   prmdriverid   in number, --司机编号
                                   prmbuslineid  in out number, --线路编号
                                   prmdeptcode   in out varchar2, --终端部门代码
                                   prmdealtype   in number, --记录类型，用于确定科目
                                   prmtradetype  in number, --交易应用类型
                                   prmcollectdt  in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                   prmtotalrecno in number,
                                   --总交易流水号包含交易流水和日志流水
                                   prmtraderecno in number, --终端交易流水号
                                   prmsamtradeno in number, --pasm卡交易流水号
                                   prmwallettype in number, --钱包类型 1电子钱包 2月票
                                   --cpu卡加入字段------------
                                   prmcardasn       in number, --卡应用序列号
                                   prmtradecitycode in varchar2, --交易地城市代码
                                   prmownercitycode in out varchar2, --所属地城市代码
                                   prmmaincardtype  in number, --主卡类型
                                   prmassocardtype  in number, --子卡类型
                                   prmcardversion   in number, --卡内版本
                                   prmtradekind     in number, --交易性质
                                   prmtestflag      in number, --测试标记
                                   prmcollectpoint  in varchar2, --采集点编号
                                   prmoperatorpoint in out varchar2, --营运单位编号
                                   prmcustunitcode  in varchar2, --客户代码
                                   prmextentvalue   in varchar2, --扩展域
                                   --------清算加入字段------------
                                   prmfilename    in varchar2, --清算文件名称
                                   prmclearresult in varchar2, --清算机构清算结构
                                   --坏账处理---
                                   prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                   --返回值-------------------
                                   out_result out number,
                                   out_msg    out varchar2);

  procedure proc_uploadelecconsumerec( --客户基本信息-------------
                                      prmcustomerid    in number, --客户编号
                                      prmcardno        in number, --卡号
                                      prmcardsn        in number, --持卡序号
                                      prmcardkind      in number, --卡种类 1：m1卡 2：cpu卡
                                      prmcardtype      in number, --卡类型 普通卡 月卡 老年卡等
                                      prmopdt          in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                      prmwallettype    in number, --钱包类型 1：电子钱包 4电子现金
                                      prmopcount       in number, --消费操作计数，根据钱包判断
                                      prmisnullopcount in number, --消费操作计数是否赋值 0已赋值 1未赋值                                   
                                      prmacccode       in number, --消费科目类型
                                      prmaccdesc       in varchar2, --科目描述
                                      --客户金额信息-------------
                                      prmsumelectrfare in number, --卡总额
                                      prmoddfare       in number, --消费后余额，根据钱包类型判断钱包
                                      prmopfare        in number, --消费金额，根据钱包类型判断钱包
                                      prmdiscountfare  in number, --打折金额
                                      --终端交易信息-------------
                                      prmbusid      in number, --车辆id
                                      prmposcode    in number, --设备唯一运营编号
                                      prmsamcardno  in number, --pasm卡卡号
                                      prmtac        in number, --tac验证码
                                      prmdriverid   in number, --司机编号
                                      prmbuslineid  in number, --线路编号
                                      prmdeptcode   in varchar2, --线路所属部门
                                      prmdealtype   in number, --记录类型，用于确定科目
                                      prmtradetype  in number, --交易应用类型
                                      prmcollectdt  in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                      prmtotalrecno in number,
                                      --总交易流水号包含交易流水和日志流水
                                      prmtraderecno in number, --终端交易流水号
                                      prmsamtradeno in number, --pasm卡交易流水号
                                      --cpu卡加入字段------------
                                      prmcardasn       in number, --卡应用序列号
                                      prmtradecitycode in varchar2, --交易地城市代码
                                      prmownercitycode in varchar2, --所属地城市代码
                                      prmmaincardtype  in number, --主卡类型
                                      prmassocardtype  in number, --子卡类型
                                      prmcardversion   in number, --卡内版本
                                      prmtradekind     in number, --交易性质
                                      prmtestflag      in number, --测试标记
                                      prmcollectpoint  in varchar2, --采集点编号
                                      prmoperatorpoint in varchar2, --营运单位编号
                                      prmcustunitcode  in varchar2, --客户代码
                                      prmiscurcard     in number, --1当前卡  0非当前卡
                                      prmisnewconsume  in number, --1新消费    0老消费
                                      --坏账处理---
                                      prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                      --返回值-------------------
                                      out_result out number,
                                      out_msg    out varchar2);

  --本地卡异地消费电子钱包消费记录上传
  procedure proc_upcitylocalcardconsumecl(
                                          --客户基本信息-------------
                                          prmcustomerid  in number, --客户编号
                                          prmcardno      in number, --卡号
                                          prmcardsn      in number, --持卡序号
                                          prmcardkind    in number, --卡种类 1：m1卡 2：cpu卡
                                          prmcardtype    in number, --卡类型 普通卡 月卡 老年卡等
                                          prmopdt        in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                          prmopcount     in number, --消费操作计数，根据钱包判断
                                          prmsaveopcount in number, --充值计数
                                          prmacccode     in number, --消费科目类型 201电子钱包，201电子现金
                                          prmaccdesc     in varchar2, --科目描述
                                          --客户金额信息-------------
                                          prmsumelectrfare in number, --卡总额
                                          prmoddfare       in number, --消费后余额，根据钱包类型判断钱包
                                          prmopfare        in number, --消费金额，根据钱包类型判断钱包
                                          prmdiscountfare  in number, --打折金额
                                          --终端交易信息-------------
                                          prmbusid      in number, --车辆id
                                          prmposcode    in number, --设备唯一运营编号
                                          prmsamcardno  in number, --pasm卡卡号
                                          prmtac        in number, --tac验证码
                                          prmdriverid   in number, --司机编号
                                          prmbuslineid  in number, --线路编号
                                          prmdeptcode   in varchar2, --线路所属部门
                                          prmdealtype   in number, --记录类型，用于确定科目
                                          prmtradetype  in number, --交易应用类型
                                          prmcollectdt  in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                          prmtotalrecno in number, --总交易流水号包含交易流水和日志流水
                                          prmtraderecno in number, --终端交易流水号
                                          prmsamtradeno in number, --pasm卡交易流水号
                                          --cpu卡加入字段------------
                                          prmcardasn       in number, --卡应用序列号
                                          prmtradecitycode in varchar2, --交易地城市代码
                                          prmownercitycode in varchar2, --所属地城市代码
                                          prmmaincardtype  in number, --主卡类型
                                          prmassocardtype  in number, --子卡类型
                                          prmcardversion   in number, --卡内版本
                                          prmtradekind     in number, --交易性质
                                          prmtestflag      in number, --测试标记
                                          prmwallettype    in number,
                                          prmcollectpoint  in varchar2, --采集点编号
                                          prmoperatorpoint in varchar2, --营运单位编号
                                          prmcustunitcode  in varchar2, --客户代码
                                          prmextentvalue   in varchar2, --扩展域
                                          ---------清算加入字段---------
                                          prmfilename     in varchar2, --清算文件名称
                                          prmclearresult  in varchar2, --清算机构清算结构
                                          prmiscurcard    in number, --1当前卡  0非当前卡
                                          prmisnewconsume in number, --1新消费    0老消费                                          
                                          --返回值-------------------
                                          out_result out number,
                                          out_msg    out varchar2);

  procedure proc_uploadmonconsumerec( --客户基本信息-------------
                                     prmcustomerid    in number, --客户编号
                                     prmcardno        in number, --卡号
                                     prmcardsn        in number, --持卡序号
                                     prmcardkind      in number, --卡种类 1：m1卡 2：cpu卡
                                     prmcardtype      in number, --卡类型 普通卡 月卡 老年卡等
                                     prmopdt          in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                     prmopcount       in number, --消费操作计数，根据钱包判断
                                     prmisnullopcount in number, --消费操作计数是否赋值 0已赋值 1未赋值                                  
                                     prmacccode       in number, --消费科目类型
                                     prmaccdesc       in varchar2, --科目描述
                                     --客户金额信息-------------
                                     prmsumvicefare  in number, --卡总额
                                     prmoddfare      in number, --消费后余额，根据钱包类型判断钱包
                                     prmopfare       in number, --消费金额，根据钱包类型判断钱包
                                     prmdiscountfare in out number, -- 打折金额（如果为清零记录，此字段代表每月充值金额）
                                     --终端交易信息-------------
                                     prmbusid      in number, --车辆id
                                     prmposcode    in number, --设备唯一运营编号
                                     prmsamcardno  in number, --pasm卡卡号
                                     prmtac        in number, --tac验证码
                                     prmdriverid   in number, --司机编号
                                     prmbuslineid  in number, --线路编号
                                     prmdeptcode   in varchar2, --线路所属部门
                                     prmdealtype   in number, --记录类型，用于确定科目
                                     prmtradetype  in number, --交易应用类型
                                     prmcollectdt  in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                     prmtotalrecno in number,
                                     --总交易流水号包含交易流水和日志流水
                                     prmtraderecno in number, --终端交易流水号
                                     prmsamtradeno in number, --pasm卡交易流水号
                                     --cpu卡加入字段------------
                                     prmcardasn       in number, --卡应用序列号
                                     prmtradecitycode in varchar2, --交易地城市代码
                                     prmownercitycode in varchar2, --所属地城市代码
                                     prmmaincardtype  in number, --主卡类型
                                     prmassocardtype  in number, --子卡类型
                                     prmcardversion   in number, --卡内版本
                                     prmtradekind     in number, --交易性质
                                     prmtestflag      in number, --测试标记
                                     prmcollectpoint  in varchar2, --采集点编号
                                     prmoperatorpoint in varchar2, --营运单位编号
                                     prmcustunitcode  in varchar2, --客户代码
                                     prmiscurcard     in number, --1当前卡  0非当前卡
                                     prmisnewconsume  in number, --1新消费    0老消费
                                     --坏账处理---
                                     prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                     --返回值-------------------
                                     out_result out number,
                                     out_msg    out varchar2);

  procedure proc_insertbadrec( --客户基本信息-------------
                              prmcustomerid in number, --客户编号
                              prmcardno     in number, --卡号
                              prmcardsn     in number, --持卡序号
                              prmopcount    in number, --操作计数
                              prmcardkind   in number, --卡类型 1：m1卡 2：cpu卡
                              prmcardtype   in number, --卡类型，普通卡，月卡，老年卡等
                              prmopdt       in varchar2, --操作时间
                              --客户金额信息-------------
                              prmsumelecfare  in number, --卡总额
                              prmoddfare      in number, --消费后余额根据钱包类型判断钱包
                              prmopfare       in number, --消费金额，根据钱包类型判断钱包
                              prmdiscountfare in number, --打折金额
                              --终端交易信息-------------
                              prmacccode  in number, --消费科目
                              prmaccdscrp in varchar2,
                              prmbusid    in number, --车辆id
                              prmposcode  in number,
                              --设备唯一运营编号
                              prmsamcardno    in number,
                              prmtac          in number, --tac验证码
                              prmempid        in number, --司机编号
                              prmbuslineid    in number, --线路编号
                              prmlinedeptcode in varchar2, --线路所属部门
                              prmdealtype     in number, --记录类型
                              prmtradetype    in number, --交易应用类型
                              prmcollectdt    in varchar2, --记录采集时间
                              prmtotalrecno   in number,
                              --总交易流水号包含交易流水和日志流水
                              prmtraderecno in number, --终端交易流水号
                              prmsamtradeno in number, --pasm卡交易流水号
                              prmwallettype in number, --钱包类型 1电子 2月票
                              prmbadrectype in number, --坏账类型
                              --cpu卡加入字段------------
                              prmcardasn       in number, --卡应用序列号
                              prmtradecitycode in varchar2, --交易地城市代码
                              prmownercitycode in varchar2, --所属地城市代码
                              prmislocaltrade  in number, --是否是本地消费 0异地消费 1本地消费
                              prmmaincardtype  in number, --主卡类型
                              prmassocardtype  in number, --子卡类型
                              prmcardversion   in number, --卡内版本
                              prmtradekind     in number, --交易性质
                              prmtestflag      in number, --测试标记
                              prmcollectpoint  in varchar2, --采集点编号
                              prmoperatorpoint in varchar2, --营运单位编号
                              prmcustunitcode  in varchar2, --客户代码
                              --增加分段计费内容
                              prmrecordtype in number,
                              --记录类型 0 普通消费记录 1 分段计费记录
                              prmflag     in number, --逃票标记 0-无逃票 1-逃票记录
                              prmtposcode in number, --逃票设备编号
                              prmstopid   in number, --上车站点编号
                              prmestopid  in number, --下车站点编号
                              --坏账处理---
                              prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                              --返回值-------------------
                              out_result out number,
                              out_msg    out varchar2);

  procedure proc_upload_badconsumrec( --客户基本信息-------------
                                     prmcustomerid in number, --客户编号
                                     prmcardno     in number, --卡号
                                     prmcardsn     in number, --持卡序号
                                     prmopcount    in number, --操作计数
                                     prmcardkind   in number, --卡类型 1：m1卡 2：cpu卡
                                     prmcardtype   in number, --卡类型，普通卡，月卡，老年卡等
                                     prmopdt       in varchar2, --操作时间
                                     --客户金额信息-------------
                                     prmsumelectrfare in number, --卡总额
                                     prmoddfare       in number, --消费后余额根据钱包类型判断钱包
                                     prmopfare        in number, --消费金额，根据钱包类型判断钱包
                                     prmdiscountfare  in number, --打折金额
                                     --终端交易信息-------------
                                     prmacccode  in number, --消费科目
                                     prmaccdscrp in varchar2, --科目描述
                                     prmbusid    in number, --车辆id
                                     prmposcode  in number,
                                     --设备唯一运营编号
                                     prmsamcardno    in number,
                                     prmtac          in number, --tac验证码
                                     prmempid        in number, --司机编号
                                     prmbuslineid    in number, --线路编号
                                     prmlinedeptcode in varchar2, --线路所属部门
                                     prmdealtype     in number, --记录类型
                                     prmtradetype    in number, --交易应用类型
                                     prmcollectdt    in varchar2, --记录采集时间
                                     prmtotalrecno   in number,
                                     --总交易流水号包含交易流水和日志流水
                                     prmtraderecno in number, --终端交易流水号
                                     prmsamtradeno in number, --pasm卡交易流水号
                                     prmwallettype in number, --钱包类型 1电子 2月票
                                     prmbadrectype in number, --坏账类型
                                     --cpu卡加入字段------------
                                     prmcardasn       in number, --卡应用序列号
                                     prmtradecitycode in varchar2, --交易地城市代码
                                     prmownercitycode in varchar2, --所属地城市代码
                                     prmislocaltrade  in number, --是否是本地消费 0异地消费 1本地消费
                                     prmmaincardtype  in number, --主卡类型
                                     prmassocardtype  in number, --子卡类型
                                     prmcardversion   in number, --卡内版本
                                     prmtradekind     in number, --交易性质
                                     prmtestflag      in number, --测试标记
                                     prmcollectpoint  in varchar2, --采集点编号
                                     prmoperatorpoint in varchar2, --营运单位编号
                                     prmcustunitcode  in varchar2, --客户代码
                                     --增加分段计费内容
                                     prmrecordtype in number,
                                     --记录类型 0 普通消费记录 1 分段计费记录
                                     prmflag     in number, --逃票标记 0-无逃票 1-逃票记录
                                     prmtposcode in number, --逃票设备编号
                                     prmstopid   in number, --上车站点编号
                                     prmestopid  in number, --下车站点编号
                                     --坏账处理---
                                     prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                     --返回值-------------------
                                     out_result out number,
                                     out_msg    out varchar2);

  --次卡钱包消费记录上传
  procedure proc_uploadvicecardconsumerec(
                                          --客户基本信息-------------
                                          prmcustomerid    in number, --客户编号
                                          prmcardno        in number, --卡号
                                          prmcardsn        in number, --持卡序号
                                          prmcardkind      in number, --卡种类 1：m1卡 2：cpu卡
                                          prmcardtype      in number, --卡类型 普通卡 月卡 老年卡等
                                          prmopdt          in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                          prmopcount       in number, --消费操作计数，根据钱包判断
                                          prmisnullopcount in number, --消费操作计数是否赋值 0已赋值 1未赋值                                       
                                          prmacccode       in number, --消费科目类型
                                          prmaccdesc       in varchar2, --科目描述
                                          --客户金额信息-------------
                                          prmsumvicefare  in number, --卡总额
                                          prmoddfare      in number, --消费后余额，根据钱包类型判断钱包
                                          prmopfare       in number, --消费金额，根据钱包类型判断钱包
                                          prmdiscountfare in out number, -- 打折金额（如果为清零记录，此字段代表每月充值金额）
                                          --终端交易信息-------------
                                          prmbusid      in number, --车辆id
                                          prmposcode    in number, --设备唯一运营编号
                                          prmsamcardno  in number, --pasm卡卡号
                                          prmtac        in number, --tac验证码
                                          prmdriverid   in number, --司机编号
                                          prmbuslineid  in number, --线路编号
                                          prmdeptcode   in varchar2, --线路所属部门
                                          prmdealtype   in number, --记录类型，用于确定科目
                                          prmtradetype  in number, --交易应用类型
                                          prmcollectdt  in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                          prmtotalrecno in number,
                                          --总交易流水号包含交易流水和日志流水
                                          prmtraderecno in number, --终端交易流水号
                                          prmsamtradeno in number, --pasm卡交易流水号
                                          --cpu卡加入字段------------
                                          prmcardasn       in number, --卡应用序列号
                                          prmtradecitycode in varchar2, --交易地城市代码
                                          prmownercitycode in varchar2, --所属地城市代码
                                          prmmaincardtype  in number, --主卡类型
                                          prmassocardtype  in number, --子卡类型
                                          prmcardversion   in number, --卡内版本
                                          prmtradekind     in number, --交易性质
                                          prmtestflag      in number, --测试标记
                                          prmcollectpoint  in varchar2, --采集点编号
                                          prmoperatorpoint in varchar2, --营运单位编号
                                          prmcustunitcode  in varchar2, --客户代码
                                          prmiscurcard     in number, --1当前卡  0非当前卡
                                          prmisnewconsume  in number, --1新消费    0老消费
                                          --坏账处理---
                                          prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0                                       
                                          --返回值-------------------
                                          out_result out number,
                                          out_msg    out varchar2);

  procedure proc_uploadthirdcardconsumerec(
                                           --客户基本信息-------------
                                           prmthirdcardno in varchar2,
                                           prmwallettype  in number,
                                           prmcardkind    in number, --卡种类 1：m1卡 2：cpu卡
                                           prmcardtype    in number, --卡类型 普通卡 月卡 老年卡等
                                           prmopdt        in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                           prmopcount     in number, --消费操作计数，根据钱包判断
                                           --客户金额信息-------------
                                           prmsumelectrfare in out number, --卡总额
                                           prmoddfare       in out number, --消费后余额，根据钱包类型判断钱包
                                           prmopfare        in out number, --消费金额，根据钱包类型判断钱包
                                           prmdiscountfare  in out number, --打折金额
                                           --终端交易信息-------------
                                           prmbusid      in out number, --车辆id
                                           prmposcode    in number, --设备唯一运营编号
                                           prmsamcardno  in number, --pasm卡卡号
                                           prmtac        in number, --tac验证码
                                           prmdriverid   in number, --司机编号
                                           prmbuslineid  in out number, --线路编号
                                           prmdeptcode   in out varchar2, --线路所属部门
                                           prmdealtype   in number, --记录类型，用于确定科目
                                           prmtradetype  in number, --交易应用类型
                                           prmcollectdt  in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                           prmtotalrecno in number,
                                           --总交易流水号包含交易流水和日志流水
                                           prmtraderecno in number, --终端交易流水号
                                           prmsamtradeno in number, --pasm卡交易流水号
                                           --cpu卡加入字段------------
                                           prmcardasn       in number, --卡应用序列号
                                           prmtradecitycode in varchar2, --交易地城市代码
                                           prmownercitycode in varchar2, --所属地城市代码
                                           prmmaincardtype  in number, --主卡类型
                                           prmassocardtype  in number, --子卡类型
                                           prmcardversion   in number, --卡内版本
                                           prmtradekind     in number, --交易性质
                                           prmtestflag      in number, --测试标记
                                           prmcollectpoint  in varchar2, --采集点编号
                                           prmoperatorpoint in varchar2, --营运单位编号
                                           prmmerchantcode  in varchar2, --商户编号
                                           prmuniontermid   in varchar2, --银联终端编号
                                           prmunionbatchno  in varchar2, --批次号
                                           prmunionappkey   in varchar2, --应用密文
                                           prmbackup        in varchar2, --预留字段
                                           prmcustunitcode  in varchar2,
                                           --增加分段计费内容
                                           prmisuseflag in number, --统一票价启用标示，0 不启用 1 启用
                                           prmflag      in number, --逃票标记 0-无逃票 1-逃票记录
                                           prmtposcode  in number, --逃票设备编号
                                           prmstopid    in number, --上车站点编号
                                           prmestopid   in number, --下车站点编号
                                           --坏账处理---
                                           prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                           --返回值-------------------
                                           out_result out number,
                                           out_msg    out varchar2);

  --分段计费接口
  procedure proc_uploadsubchargeconsumerec(
                                           --客户基本信息-------------
                                           prmcustomerid    in out number, --客户编号
                                           prmcardno        in number, --卡号
                                           prmcardsn        in out number, --持卡序号
                                           prmcardkind      in number, --卡种类 1：m1卡 2：cpu卡
                                           prmcardtype      in number, --卡类型 普通卡 月卡 老年卡等
                                           prmopdt          in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                           prmopcount       in number, --消费操作计数，根据钱包判断
                                           prmisnullopcount in number, --消费操作计数是否赋值 0已赋值 1未赋值                                            
                                           --客户金额信息-------------
                                           prmsumelectrfare in out number, --卡总额
                                           prmoddfare       in out number, --消费后余额，根据钱包类型判断钱包
                                           prmopfare        in out number, --消费金额，根据钱包类型判断钱包
                                           prmdiscountfare  in out number, --打折金额
                                           --终端交易信息-------------
                                           prmbusid      in out number, --车辆id
                                           prmposcode    in number, --设备唯一运营编号
                                           prmsamcardno  in number, --pasm卡卡号
                                           prmtac        in number, --tac验证码
                                           prmdriverid   in number, --司机编号
                                           prmbuslineid  in out number, --线路编号
                                           prmdeptcode   in out varchar2, --线路所属部门
                                           prmdealtype   in number, --记录类型，用于确定科目
                                           prmtradetype  in number, --交易应用类型
                                           prmcollectdt  in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                           prmtotalrecno in number,
                                           --总交易流水号包含交易流水和日志流水
                                           prmtraderecno in number, --终端交易流水号
                                           prmsamtradeno in number, --pasm卡交易流水号
                                           --cpu卡加入字段------------
                                           prmcardasn       in number, --卡应用序列号
                                           prmtradecitycode in varchar2, --交易地城市代码
                                           prmownercitycode in varchar2, --所属地城市代码
                                           prmmaincardtype  in number, --主卡类型
                                           prmassocardtype  in number, --子卡类型
                                           prmcardversion   in number, --卡内版本
                                           prmtradekind     in number, --交易性质
                                           prmtestflag      in number, --测试标记
                                           prmcollectpoint  in varchar2, --采集点编号
                                           prmoperatorpoint in varchar2, --营运单位编号
                                           --增加分段计费内容
                                           prmflag         in number, --逃票标记 0-无逃票 1-逃票记录
                                           prmtposcode     in number, --逃票设备编号
                                           prmstopid       in number, --上车站点编号
                                           prmestopid      in number, --下车站点编号
                                           prmcustunitcode in varchar2, --客户代码
                                           --坏账处理---
                                           prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0                                        
                                           --返回值-------------------
                                           out_result out number,
                                           out_msg    out varchar2);

  --上传银联对账结果
  procedure proc_uploadthirdcardresult( --客户基本信息-------------
                                       prmthirdcardno  in varchar2, --第三方卡号
                                       prmposcode      in number, --设备唯一运营编号
                                       prmtraderecno   in number, --终端交易流水号
                                       prmopcount      in number, --消费操作计数，卡片交易流水
                                       prmanswercode   in varchar2, --应答码
                                       prmsellcarddate in varchar2,
                                       --售卡方所在地时间 yyyy-mm-dd hh24:mi:ss
                                       prmsquaredate   in varchar2, --清算日期 yyyy-mm-dd hh24:mi:ss
                                       prmindexcode    in varchar2, --索引号
                                       prmunionbatchno in varchar2, --批次号
                                       prmuploaddate   in varchar2,
                                       --终端上传时间 yyyy-mm-dd hh24:mi:ss
                                       --返回值-------------------
                                       out_result out number,
                                       out_msg    out varchar2);
end;
/
create or replace package body pkg_cust_consume
is
    ---------------------------未决记录查询和处理----------------------------
    --获取电子钱包消费未决
    procedure proc_geteletr_unsetconsume (
        prmcustunitcode   in     varchar2,
        out_cursor           out refcursortype)
    as
    /*
    ------------------------------------------------------------------------
    --存储过程： proc_geteletr_unsetconsume
    --作　　者：周晓娜
    --时　　间：2012-09-14
    --说　　明： 获取未处理的电子钱包消费未决记录记录
    ------------------------------------------------------------------------
    --作　　者：周晓娜
    --时　　间：2012-11-07
    --说　　明： 去掉分区字段 a.cardareaid, a.dptareaid
    ------------------------------------------------------------------------
    */
    begin
        open out_cursor for
              select a.cstaccfc,
                     a.customerid,
                     a.cardno,
                     a.cardtype,
                     a.opdt,
                     a.sumelectraddfare,
                     a.electronoddfare,
                     a.electronopfare,
                     a.acccode,
                     a.dscrp,
                     a.cardsn,
                     a.opcount,
                     a.dealtype,
                     a.collectdt,
                     a.uploaddate,
                     a.busid,
                     a.driverid,
                     a.poscode,
                     a.samcardno,
                     a.cardkind,
                     a.traderecno,
                     a.tac,
                     a.samtradeno,
                     a.buslineid,
                     a.totalrecno,
                     a.discount,
                     a.tradetype,
                     a.linedept,
                     a.repealempid,
                     a.electrdummyopfare,
                     a.cardasn,
                     a.tradecitycode,
                     a.ownercitycode,
                     a.maincardtype,
                     a.assocardtype,
                     a.cardversion,
                     a.tradekind,
                     a.testflag,
                     a.operatorpoint,
                     a.collectpoint,
                     a.accountdate,
                     a.recordtype,
                     a.flag,
                     a.fleeposcode,
                     a.upstopid,
                     a.downstopid,
                     a.customerunitcode,
                     a.trcflg,
                     a.disflag,
                     m.baddesc
                from rec_eleconsume_inaccurate a
                     left join base_customers c
                         on     a.customerid = c.customerid
                            and a.cardno = c.cardno
                            and a.customerunitcode = c.customerunitcode
                     left join base_customers_info d
                         on     a.customerid = d.customerid
                            and a.customerunitcode = d.customerunitcode
                     left join base_legal_person e
                         on a.customerunitcode = e.customerunitcode
                     left join base_rec_bad_type m
                         on a.trcflg = m.badid
               where a.customerunitcode = prmcustunitcode and a.disflag = 0
            order by a.opdt desc;
    end;

    procedure proc_getelectr_unsetcashconsum (
        prmcsutomerid     in     number, --账号
        prmcardsn         in     number, --持卡序号
        prmopcount        in     number, --消费操作计数
        prmcustunitcode   in     varchar2, --客户代码
        prmcardasn        in     number, --卡号
        out_cursor           out refcursortype)
    as
    /*
    ------------------------------------------------------------------------
    --存储过程： proc_getelectr_unsetcashconsum
    --作　　者：朱鹏飞
    --时　　间：2009-06-19
    --说　　明： 获取充值未决记录前后的消费记录
    ------------------------------------------------------------------------
    --作　　者：周晓娜
    --时　　间：2012-09-13
    --说　　明： 兼容多客户和一人多卡的情况处理
    ------------------------------------------------------------------------
    */
    begin
        open out_cursor for
            select rownum as id, c.*
              from (select a.customerid,
                           a.cardsn,
                           a.cardno,
                           a.opdt,
                           a.acccode,
                           a.dscrp,
                           a.electropcount,
                           a.electrsaveopcount,
                           a.electroddfare,
                           a.electropfare
                      from rec_electtron_cash a
                     where     a.customerid = prmcsutomerid
                           and a.cardsn = prmcardsn
                           and a.electropcount = prmopcount
                           and a.cardno = prmcardasn
                           and a.customerunitcode = prmcustunitcode
                    union
                    select a.customerid,
                           a.cardsn,
                           a.cardno,
                           a.opdt,
                           a.acccode,
                           a.dscrp,
                           a.opcount,
                           0 as electrsaveopcount,
                           a.electronoddfare,
                           a.electronopfare as electropfare
                      from rec_electtron_consume a
                     where     a.customerid = prmcsutomerid
                           and a.cardsn = prmcardsn
                           and (a.opcount between prmopcount - 5
                                              and prmopcount + 5)
                           and a.cardasn = prmcardasn
                           and a.customerunitcode = prmcustunitcode) c;
    end;

    --获取月票钱包消费未决
    procedure proc_getmon_unsetconsume (
        prmcustunitcode   in     varchar2,
        out_cursor           out refcursortype)
    as
    /*
    ------------------------------------------------------------------------
    --存储过程： proc_getmon_unsetconsume
    --作　　者：周晓娜
    --时　　间：2012-09-14
    --说　　明： 获取未处理的月票钱包消费未决记录记录
    ------------------------------------------------------------------------
    --作　　者：周晓娜
    --时　　间：2012-11-07
    --说　　明： 去掉分区字段 a.cardareaid, a.dptareaid
    ------------------------------------------------------------------------
    */
    begin
        open out_cursor for
              select a.cstaccfc,
                     a.customerid,
                     a.cardno,
                     a.cardtype,
                     a.opdt,
                     a.sumviceaddfare,
                     a.viceonoddfare,
                     a.viceonopfare,
                     a.acccode,
                     a.dscrp,
                     a.cardsn,
                     a.opcount,
                     a.dealtype,
                     a.collectdt,
                     a.uploaddate,
                     a.busid,
                     a.driverid,
                     a.poscode,
                     a.samcardno,
                     a.cardkind,
                     a.traderecno,
                     a.tac,
                     a.samtradeno,
                     a.buslineid,
                     a.totalrecno,
                     a.discount,
                     a.tradetype,
                     a.linedept,
                     a.repealempid,
                     a.vicedummyopfare,
                     a.cardasn,
                     a.tradecitycode,
                     a.ownercitycode,
                     a.maincardtype,
                     a.assocardtype,
                     a.cardversion,
                     a.tradekind,
                     a.testflag,
                     a.operatorpoint,
                     a.collectpoint,
                     a.accountdate,
                     a.customerunitcode,
                     a.trcflg,
                     a.disflag,
                     m.baddesc
                from rec_monconsume_inaccurate a
                     left join base_customers c
                         on     a.customerid = c.customerid
                            and a.cardno = c.cardno
                            and a.customerunitcode = c.customerunitcode
                     left join base_customers_info d
                         on     a.customerid = d.customerid
                            and a.customerunitcode = d.customerunitcode
                     left join base_legal_person e
                         on a.customerunitcode = e.customerunitcode
                     left join base_rec_bad_type m
                         on a.trcflg = m.badid
               where a.customerunitcode = prmcustunitcode and a.disflag = 0
            order by a.opdt desc;
    end;

    procedure proc_getmon_unsetcashconsum (
        prmcustomerid     in     number,
        prmcardsn         in     number,
        prmopcount        in     number,
        prmcustunitcode   in     varchar2, --客户代码
        prmcardasn        in     number, --卡号
        out_cursor           out refcursortype)
    as
    /*
    ------------------------------------------------------------------------
    --存储过程：  proc_getmonticket_unsetcashconsum
    --作者：      程文平
    --创建日期：  2009-07-21
    --说明：      获取未决记录前后的消费记录
    ------------------------------------------------------------------------
    --作　　者：周晓娜
    --时　　间：2012-09-13
    --说　　明： 兼容多客户和一人多卡的情况处理
    ------------------------------------------------------------------------
       */
    begin
        open out_cursor for
            select rownum as id, c.*
              from (select a.customerid,
                           a.cardsn,
                           a.cardno,
                           a.opdt,
                           a.acccode,
                           a.dscrp,
                           a.viceopcount,
                           a.vicesaveopcount,
                           a.viceoddfare,
                           a.viceopfare
                      from rec_monticket_cash a
                     where     a.customerid = prmcustomerid
                           and a.cardsn = prmcardsn
                           and a.viceopcount = prmopcount
                           and a.cardno = prmcardasn
                           and a.customerunitcode = prmcustunitcode
                    union
                    select a.customerid,
                           a.cardsn,
                           a.cardno,
                           a.opdt,
                           a.acccode,
                           a.dscrp,
                           a.opcount,
                           0 as vicesaveopcount,
                           a.viceonoddfare,
                           a.viceonopfare
                      from rec_monticket_consum a
                     where     a.customerid = prmcustomerid
                           and a.cardsn = prmcardsn
                           and (a.opcount between prmopcount - 5
                                              and prmopcount + 5)
                           and a.cardasn = prmcardasn
                           and a.customerunitcode = prmcustunitcode) c;
    end;

    --获取次卡钱包消费未决
    procedure proc_getvice_unsetconsume (
        prmcustunitcode   in     varchar2,
        out_cursor           out refcursortype)
    as
    /*
    ------------------------------------------------------------------------
    --存储过程： proc_getvice_unsetconsume
    --作　　者：周晓娜
    --时　　间：2012-09-14
    --说　　明： 获取未处理的次卡钱包消费未决记录记录
    ------------------------------------------------------------------------
    --作　　者：周晓娜
    --时　　间：2012-11-07
    --说　　明： 去掉分区字段 a.cardareaid, a.dptareaid
    ------------------------------------------------------------------------
    */
    begin
        open out_cursor for
              select a.cstaccfc,
                     a.customerid,
                     a.cardno,
                     a.cardtype,
                     a.opdt,
                     a.sumviceaddfare,
                     a.viceonoddfare,
                     a.viceonopfare,
                     a.acccode,
                     a.dscrp,
                     a.cardsn,
                     a.opcount,
                     a.dealtype,
                     a.collectdt,
                     a.uploaddate,
                     a.busid,
                     a.driverid,
                     a.poscode,
                     a.samcardno,
                     a.cardkind,
                     a.traderecno,
                     a.tac,
                     a.samtradeno,
                     a.buslineid,
                     a.totalrecno,
                     a.discount,
                     a.tradetype,
                     a.linedept,
                     a.repealempid,
                     a.vicedummyopfare,
                     a.cardasn,
                     a.tradecitycode,
                     a.ownercitycode,
                     a.maincardtype,
                     a.assocardtype,
                     a.cardversion,
                     a.tradekind,
                     a.testflag,
                     a.operatorpoint,
                     a.collectpoint,
                     a.accountdate,
                     a.customerunitcode,
                     a.trcflg,
                     a.disflag,
                     m.baddesc
                from rec_viceconsume_inaccurate a
                     left join base_customers c
                         on     a.customerid = c.customerid
                            and a.cardno = c.cardno
                            and a.customerunitcode = c.customerunitcode
                     left join base_customers_info d
                         on     a.customerid = d.customerid
                            and a.customerunitcode = d.customerunitcode
                     left join base_legal_person e
                         on a.customerunitcode = e.customerunitcode
                     left join base_rec_bad_type m
                         on a.trcflg = m.badid
               where a.customerunitcode = prmcustunitcode and a.disflag = 0
            order by a.opdt desc;
    end;

    procedure proc_getvice_unsetcashconsum (
        prmcsutomerid     in     number, --账号
        prmcardsn         in     number, --持卡序号
        prmopcount        in     number, --交易操作计数
        prmcustunitcode   in     varchar2, --客户代码
        prmcardasn        in     number, --卡号
        out_cursor           out refcursortype)
    as
    /*
    ------------------------------------------------------------------------
    --存储过程： proc_getvice_unsetcashconsum
    --作　　者：周晓娜
    --时　　间：2012-09-13
    --说　　明： 获取充值未决记录前后的消费记录
    ------------------------------------------------------------------------
    */
    begin
        open out_cursor for
            select rownum as id, c.*
              from (select a.customerid,
                           a.cardsn,
                           a.cardno,
                           a.opdt,
                           a.acccode,
                           a.dscrp,
                           a.viceopcount,
                           a.vicesaveopcount,
                           a.viceoddfare,
                           a.viceopfare
                      from rec_vicecard_cash a
                     where     a.customerid = prmcsutomerid
                           and a.cardsn = prmcardsn
                           and a.viceopcount = prmopcount
                           and a.cardno = prmcardasn
                           and a.customerunitcode = prmcustunitcode
                    union
                    select a.customerid,
                           a.cardsn,
                           a.cardno,
                           a.opdt,
                           a.acccode,
                           a.dscrp,
                           a.opcount,
                           0 as vicesaveopcount,
                           a.viceonoddfare,
                           a.viceonopfare
                      from rec_vicecard_consume a
                     where     a.customerid = prmcsutomerid
                           and a.cardsn = prmcardsn
                           and (a.opcount between prmopcount - 5
                                              and prmopcount + 5)
                           and a.cardasn = prmcardasn
                           and a.customerunitcode = prmcustunitcode) c;
    end;

    ----------------------------账目处理-------------------------------------
    procedure proc_upload_consumerec ( --客户基本信息-------------
                                      prmcustomerid      in out number, --客户编号
                                      prmcardno          in     number, --卡号
                                      prmcardsn          in out number, --持卡序号
                                      prmcardkind        in     number, --卡种类 1：m1卡 2：cpu卡
                                      prmcardtype        in     number, --卡类型 普通卡 月卡 老年卡等
                                      prmopdt            in     varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                      prmopcount         in     number, --消费操作计数，根据钱包判断
                                      prmisnullopcount   in     number, --消费操作计数是否赋值 0已赋值 1未赋值
                                      prmsaveopcount     in     number, --充值操作计数，根据钱包判断
                                      --客户金额信息-------------
                                      prmsumelectrfare   in out number, --卡总额
                                      prmoddfare         in out number, --消费后余额，根据钱包类型判断钱包
                                      prmopfare          in out number, --消费金额，根据钱包类型判断钱包
                                      prmdiscountfare    in out number, -- 打折金额（如果为清零记录，此字段代表每月充值金额）
                                      --终端交易信息-------------
                                      prmbusid           in out number, --车辆id
                                      prmposcode         in     number, --设备唯一运营编号
                                      prmsamcardno       in     number, --pasm卡卡号
                                      prmtac             in     number, --tac验证码
                                      prmdriverid        in     number, --司机编号
                                      prmbuslineid       in out number, --线路编号
                                      prmdeptcode        in out varchar2, --终端部门代码
                                      prmdealtype        in     number, --记录状态（正常、灰色）
                                      prmtradetype       in     number, --交易应用类型
                                      prmcollectdt       in     varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                      prmtotalrecno      in     number,
                                      --总交易流水号包含交易流水和日志流水
                                      prmtraderecno      in     number, --终端交易流水号
                                      prmsamtradeno      in     number, --pasm卡交易流水号
                                      prmwallettype      in     number, --钱包类型 1电子钱包 2月票
                                      --cpu卡加入字段------------
                                      prmcardasn         in     number, --卡应用序列号
                                      prmtradecitycode   in     varchar2, --交易地城市代码
                                      prmownercitycode   in out varchar2, --所属地城市代码
                                      prmmaincardtype    in     number, --主卡类型 7 兼容第三方系统卡   8 交通部秘钥卡 0 自建秘钥卡
                                      prmassocardtype    in     number, --子卡类型
                                      prmcardversion     in     number, --卡内版本
                                      prmtradekind       in     number, --交易性质
                                      prmtestflag        in     number, --测试标记
                                      prmcollectpoint    in     varchar2, --采集点编号
                                      prmoperatorpoint   in out varchar2, --营运单位编号
                                      prmcustunitcode    in     varchar2, --客户代码
                                      prmextentvalue     in     varchar2, --扩展域
                                      --------清算加入字段------------
                                      prmfilename        in     varchar2, --清算文件名称
                                      prmclearresult     in     varchar2, --清算机构清算结构
                                      --坏账处理---
                                      prmbadid           in     number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                      --返回值-------------------
                                      out_result            out number,
                                      out_msg               out varchar2)
    as
        /*
        --------------------------------------------------------------------------
        --存储过程：proc_upload_consumerec
        --过程类型：接口过程（外层过程）
        --应用场景：消费记录上传
        --作　　者：朱鹏飞
        --时　　间：2009-05-26
        --说　　明：消费记录上传（包含电子钱包消费，月票消费，次卡消费和冲零消费记录上传入口）
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：记录上传成功，帐目统计成功， 其他失败
        --------------------------------------------------------------------------
        */

        --变量定义
        i_count            integer;
        i_badrectype       integer; --坏账类型
        custom_exception   exception; --自定义错误
        i_factor           number; --最小货币单位和通用货币单位之间的转换因子
        n_acccode          number; --坏账科目
        v_accdscrp         varchar (20); --坏账科目描述
        ---------------------------------------------------------------
        i_customerid       number; --账号
        i_cardsn           number; -- 卡序号
        n_islocal          int; --本地卡异地消费标识 1本地，0异地
        n_islocalcard      int; --本地卡 1本地，0异地
        ---------------------------------------------------------------
        t_sumelectrfare    number (10, 2);
        t_oddfare          number (10, 2);
        t_opfare           number (10, 2);
        t_discountfare     number (10, 2);

        v_opdt             date; --操作时间yyyy-mm-dd hh24:mi:ss
        i_flag             int;
        n_iscurcard        number; --1当前卡  0非当前卡
        n_isnewconsume     number; --1新消费    0老消费
    begin
        out_result := -1000;
        out_msg := '初始化变量';
        t_sumelectrfare := prmsumelectrfare;
        t_oddfare := prmoddfare;
        t_opfare := prmopfare;
        t_discountfare := prmdiscountfare;
        i_badrectype := 0;
        i_factor := 100; --根据分和元之间的转换（100）赋默认值
        i_customerid := 0;
        i_cardsn := 0;
        i_flag := 0;
        n_iscurcard := 0;
        n_isnewconsume := 0;

        ------------------------检查是否正在数据结算-------------------------
        out_result := -1001;
        out_msg := '检查当前是否正在结算';

        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        ------------------------先验证客户信息是否合法------------------------
        out_result := -1002;
        out_msg := '检查客户法人信息是否合法';

        select count (a.id)
          into i_count
          from base_legal_person a
         where a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
            out_msg :=
                   '客户法人信息不合法！customerunitcode：'
                || to_char (prmcustunitcode);

            return;
        end if;

        ---------------------------获取转换因子-----------------------------------
        --获取最小货币单位和通用货币单位间的转换因子
        out_result := -1003;
        out_msg := '获取货币转换因子失败！';

        select nvl (max (a.paramvalue), -1)
          into i_factor
          from base_param a
         where a.paramname = 'hexadecimal' and a.paramgroupid = 1002;

        if (i_factor < 0)
        then
            out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
            out_msg := '获取转换因子失败！factor：' || i_factor;

            return;
        end if;

        ------------------------------发卡地收单方判断-----------------------------------------
        proc_getcard_info (prmcustunitcode,
                           prmmaincardtype, --7 兼容第三方系统卡   8 交通部秘钥卡 0 自建秘钥卡
                           prmownercitycode,
                           prmoperatorpoint,
                           n_islocalcard, --本地卡 1本地，0异地
                           n_islocal, --本地卡异地消费标识 1本地，0异地
                           out_result,
                           out_msg);

        if out_result = 101
        then
            return;
        end if;

        ---------------------------账号信息验证和取值--------------------------------------------
        out_result := -1005;
        out_msg := '获取账户信息失败';

        if (n_islocalcard = 1)
        then
            proc_get_customer (prmcardno,
                               prmcardsn,
                               prmcustomerid,
                               prmopdt,
                               prmcustunitcode,
                               prmopcount,
                               prmwallettype,
                               i_badrectype,
                               prmmaincardtype,
                               n_iscurcard,
                               n_isnewconsume,
                               out_result,
                               out_msg);

            if (out_result <> 100)
            then
                goto insert_err_consumrec;
            end if;
        end if;

        ------------------------本地消费验证psam卡信息是否正确-------------------------------------
        out_result := -1006;
        out_msg := '本地消费验证psam卡信息失败！';

        if (n_islocal = 1)
        then
            proc_validatesamcard (prmsamcardno,
                                  prmcustunitcode,
                                  i_badrectype,
                                  prmopdt,
                                  out_result,
                                  out_msg);

            if (out_result <> 100)
            then
                goto insert_err_consumrec;
            end if;
        end if;

        -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
        out_result := -1007;
        out_msg := '验证终端,车辆，线路，部门是否正确';
        proc_validatetermbusline (prmposcode,
                                  prmcustunitcode,
                                  prmbusid,
                                  prmbuslineid,
                                  prmdeptcode,
                                  i_badrectype,
                                  out_result,
                                  out_msg);

        if (out_result <> 100)
        then
            goto insert_err_consumrec;
        end if;

        ---------------------------科目赋值，金额转换---------------------------------------------

        --钱包类型 1：电子钱包 2:月票 3：次卡钱包  4:交通部电子现金
        if (not (   prmwallettype = 1
                 or prmwallettype = 2
                 or prmwallettype = 3
                 or prmwallettype = 4))
        then
            out_msg := '钱包类型无效！无效的钱包类型为：' || prmwallettype;
            i_badrectype := 24; --钱包类型无效！
            goto insert_err_consumrec;
        end if;

        if (prmwallettype = 1)
        then
            if n_islocalcard = 0 and n_islocal = 1
            then
                n_acccode := 211; --异地卡本地钱包消费
            elsif n_islocalcard = 1 and n_islocal = 0
            then
                n_acccode := 221; --本地卡异地钱包消费
            else
                n_acccode := 201; --本地卡本地电子钱包消费
            end if;
        elsif (prmwallettype = 2)
        then
            if (prmtradetype = 9)
            then
                n_acccode := 902; --终端冲零
            else
                n_acccode := 202; --本地卡本地月票消费
            end if;
        elsif (prmwallettype = 3)
        then
            if (prmtradetype = 9)
            then
                n_acccode := 902; --终端冲零
            else
                n_acccode := 203; --次卡消费
            end if;
        elsif (prmwallettype = 4)
        then
            if n_islocalcard = 0 and n_islocal = 1
            then
                n_acccode := 214; --异地卡本地电子现金消费
            elsif n_islocalcard = 1 and n_islocal = 0
            then
                n_acccode := 224; --本地卡异地现金消费
            else
                n_acccode := 204; --本地卡本地电子现金消费
            end if;
        end if;

        if (prmwallettype = 1 or prmwallettype = 2 or prmwallettype = 4)
        then
            prmsumelectrfare := prmsumelectrfare / i_factor;
            prmoddfare := prmoddfare / i_factor;
            prmopfare := prmopfare / i_factor;
            prmdiscountfare := prmdiscountfare / i_factor;
        end if;

        ------------------------消费未决记录处理-----------------------------
        if (prmdealtype = 2 and prmtradetype <> 9)
        then
            i_badrectype := 17; --终端上传的灰色记录
            goto insert_err_consumrec;
        elsif (prmdealtype = 3 and prmtradetype <> 9)
        then
            i_badrectype := 18; --终端上传的mac校验不通过记录
            goto insert_err_consumrec;
        end if;

        out_result := -1008;
        out_msg := '取交易科目描述信息失败！';

        select nvl (max (a.accdscrp), '未知')
          into v_accdscrp
          from base_acc_type a
         where a.acccode = n_acccode;

        if (v_accdscrp = '未知')
        then
            i_badrectype := 25; --取交易科目描述信息失败！
            goto insert_err_consumrec;
        end if;

        ---------------------------------------消费记录入账处理----------------------------------------
        out_result := -109;
        out_msg := '消费记录入账失败！';

        -----------钱包类型 1：电子钱包 2：月票钱包 3：次卡钱包 4：交通部电子现金  0：预留他用 如投币 消费记录上传--------------
        if (prmwallettype = 1 or prmwallettype = 4)
        then
            -----------------本地卡本地消费------------------
            if (n_islocalcard = 1 and n_islocal = 1)
            then
                --判断是否重复上传
                --traderecno终端交易序号，添加此条件为解决老卡有些opcount终端不赋值时，秒级消费的问题
                --本地卡本地消费包括电子钱包和电子现金，索引中添加钱包类型字段
                select count (*)
                  into i_count
                  from rec_electtron_consume a
                 where     a.customerid = prmcustomerid
                       and a.cardsn = prmcardsn
                       and a.opcount = prmopcount
                       and a.cardasn = prmcardasn
                       and a.wallettype = prmwallettype
                       and a.traderecno = prmtraderecno
                       and a.customerunitcode = prmcustunitcode;

                if i_count > 0
                then
                    out_result := -1011;
                    out_msg := '重复记录';

                    i_badrectype := 3;

                    --cpu卡不存在赋值卡的情况，直接执行坏账
                    if prmcardkind = 2
                    then
                        goto insert_err_consumrec;
                    end if;

                    --判断是否为m1赋值卡，如果是则形成黑名单
                    select max (a.opdt)
                      into v_opdt
                      from rec_electtron_consume a
                     where     a.customerid = prmcustomerid
                           and a.cardsn = prmcardsn
                           and a.opcount = prmopcount
                           and a.cardasn = prmcardasn
                           and a.wallettype = prmwallettype
                           and a.customerunitcode = prmcustunitcode;

                    if v_opdt != to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss')
                    then
                        out_msg := 'm1复制卡记录形成黑名单';
                        pkg_rec_bllt.proc_insertbllt (prmcardno,
                                                      6,
                                                      prmcardasn,
                                                      prmcustunitcode,
                                                      out_msg,
                                                      out_result);

                        i_badrectype := 21; --m1复制卡记录
                    end if;

                    goto insert_err_consumrec;
                end if;

                out_result := -1011;
                out_msg := '电子钱包消费记录上传';
                --电子钱包消费记录上传
                proc_uploadelecconsumerec (prmcustomerid,
                                           prmcardno,
                                           prmcardsn,
                                           prmcardkind,
                                           prmcardtype,
                                           prmopdt,
                                           prmwallettype,
                                           prmopcount,
                                           prmisnullopcount,
                                           n_acccode,
                                           v_accdscrp,
                                           prmsumelectrfare,
                                           prmoddfare,
                                           prmopfare,
                                           prmdiscountfare,
                                           prmbusid,
                                           prmposcode,
                                           prmsamcardno,
                                           prmtac,
                                           prmdriverid,
                                           prmbuslineid,
                                           prmdeptcode,
                                           prmdealtype,
                                           prmtradetype,
                                           prmcollectdt,
                                           prmtotalrecno,
                                           prmtraderecno,
                                           prmsamtradeno,
                                           --cpu卡加入字段------------
                                           prmcardasn,
                                           prmtradecitycode,
                                           prmownercitycode,
                                           prmmaincardtype,
                                           prmassocardtype,
                                           prmcardversion,
                                           prmtradekind,
                                           prmtestflag,
                                           prmcollectpoint,
                                           prmoperatorpoint,
                                           prmcustunitcode,
                                           n_iscurcard,
                                           n_isnewconsume,
                                           prmbadid,
                                           out_result,
                                           out_msg);
                return;
            end if;

            -----------------本地卡异地消费------------------
            if (n_islocalcard = 1 and n_islocal = 0)
            then
                --判断是否重复上传
                --交通部规范验证记录唯一性条件：用户卡号、交易日期、交易时间、交易终端号、卡脱机交易序列号、发卡机构代码、收单机构代码
                select count (*)
                  into i_count
                  from rec_city_localcardconsume a
                 where     a.customerunitcode = prmcustunitcode --自发卡加此验证
                       and a.cardno = prmcardasn
                       and a.customerid = prmcustomerid
                       and a.wallettype = prmwallettype
                       and a.opdt =
                               to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss')
                       and a.samcardno = prmsamcardno
                       and a.tac = prmtac;

                if i_count > 0
                then
                    out_result := -1012;
                    out_msg := '重复记录';
                    i_badrectype := 3;
                    goto insert_err_consumrec;
                end if;

                out_result := -1012;
                out_msg := '本地卡异地消费电子钱包消费记录上传';

                --本地卡异地消费电子钱包消费记录上传
                proc_upcitylocalcardconsumecl (prmcustomerid,
                                               prmcardno,
                                               prmcardsn,
                                               prmcardkind,
                                               prmcardtype,
                                               prmopdt,
                                               prmopcount,
                                               prmsaveopcount,
                                               n_acccode,
                                               v_accdscrp,
                                               prmsumelectrfare,
                                               prmoddfare,
                                               prmopfare,
                                               prmdiscountfare,
                                               prmbusid,
                                               prmposcode,
                                               prmsamcardno,
                                               prmtac,
                                               prmdriverid,
                                               prmbuslineid,
                                               prmdeptcode,
                                               prmdealtype,
                                               prmtradetype,
                                               prmcollectdt,
                                               prmtotalrecno,
                                               prmtraderecno,
                                               prmsamtradeno,
                                               --cpu卡加入字段------------
                                               prmcardasn,
                                               trim (prmtradecitycode),
                                               trim (prmownercitycode),
                                               prmmaincardtype,
                                               prmassocardtype,
                                               prmcardversion,
                                               prmtradekind,
                                               prmtestflag,
                                               prmwallettype,
                                               prmcollectpoint,
                                               prmoperatorpoint, -- v_operator,
                                               prmcustunitcode,
                                               prmextentvalue,
                                               prmfilename,
                                               prmclearresult,
                                               n_iscurcard,
                                               n_isnewconsume,
                                               out_result,
                                               out_msg);
                return;
            end if;

            -----------------异地卡本地消费------------------
            if (n_islocalcard = 0 and n_islocal = 1)
            then
                --判断记录是否重复
                select nvl (count (*), 0)
                  into i_count
                  from rec_city_nonlocalconsume
                 where     cardasn = prmcardno
                       and opcount = prmopcount
                       and wallettype = prmwallettype
                       and customerunitcode = prmcustunitcode;

                if (i_count > 0)
                then
                    out_result := -1013;
                    out_msg := '重复记录';
                    i_badrectype := 3;
                    goto insert_err_consumrec;
                end if;

                out_result := -1013;
                out_msg := '异地卡本地消费电子钱包消费记录上传';

                pkg_rec_city_interconnect.proc_uploadnoncardconsumerec (
                    0,
                    prmcardno,
                    prmcardsn,
                    prmwallettype,
                    prmcardkind,
                    prmcardtype,
                    prmopdt,
                    prmopcount,
                    prmsumelectrfare,
                    prmoddfare,
                    prmopfare,
                    prmdiscountfare,
                    prmbusid,
                    prmposcode,
                    prmsamcardno,
                    prmtac,
                    prmdriverid,
                    prmbuslineid,
                    prmdeptcode,
                    prmdealtype,
                    prmtradetype,
                    prmcollectdt,
                    prmtotalrecno,
                    prmtraderecno,
                    prmsamtradeno,
                    prmcardasn,
                    trim (prmtradecitycode),
                    trim (prmownercitycode),
                    prmmaincardtype,
                    prmassocardtype,
                    prmcardversion,
                    prmtradekind,
                    prmtestflag,
                    prmcollectpoint,
                    prmoperatorpoint, --v_operator,
                    prmcustunitcode,
                    n_acccode,
                    v_accdscrp,
                    prmbadid,
                    out_result,
                    out_msg);
                return;
            end if;

            -----------------非本地卡非本地消费---------------
            if (n_islocalcard = 0 and n_islocal = 0)
            then
                i_badrectype := 100; --非本地卡非本地消费！
                goto insert_err_consumrec;
            end if;
        end if;

        ------------------月票消费记录上传------------------
        if (prmwallettype = 2)
        then
            --判断是否重复上传
            --traderecno终端交易序号，添加此条件为解决老卡有些opcount终端不赋值时，秒级消费的问题
            if prmtradetype = 9
            then
                select count (*)
                  into i_count
                  from rec_poscode_reset a
                 where     a.customerid = prmcustomerid
                       and a.cardno = prmcardno
                       and a.cardsn = prmcardsn
                       and a.wallettype = prmwallettype
                       and a.opcount = prmopcount
                       and a.customerunitcode = prmcustunitcode;

                if i_count > 0
                then
                    i_badrectype := 3;
                    goto insert_err_consumrec;
                end if;
            else
                select count (*)
                  into i_count
                  from rec_monticket_consum a
                 where     a.customerid = prmcustomerid
                       and a.cardsn = prmcardsn
                       and a.opcount = prmopcount
                       and a.cardasn = prmcardasn
                       and a.traderecno = prmtraderecno
                       and a.customerunitcode = prmcustunitcode;

                if i_count > 0
                then
                    out_result := -1014;
                    out_msg := '重复记录';
                    i_badrectype := 3;

                    --cpu卡不存在复制卡的问题，直接执行坏账
                    if prmcardkind = 2
                    then
                        goto insert_err_consumrec;
                    end if;

                    --判断是否为m1赋值卡，如果是则形成黑名单
                    select max (a.opdt)
                      into v_opdt
                      from rec_monticket_consum a
                     where     a.customerid = prmcustomerid
                           and a.cardsn = prmcardsn
                           and a.opcount = prmopcount
                           and a.cardasn = prmcardasn
                           and a.customerunitcode = prmcustunitcode;

                    if     v_opdt !=
                               to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss')
                       and prmcardkind = 1
                    then
                        out_msg := 'm1复制卡记录形成黑名单';
                        pkg_rec_bllt.proc_insertbllt (prmcardno,
                                                      6,
                                                      prmcardasn,
                                                      prmcustunitcode,
                                                      out_msg,
                                                      out_result);

                        i_badrectype := 21; --m1复制卡记录
                    end if;

                    goto insert_err_consumrec;
                end if;
            end if;

            out_result := -1014;
            out_msg := '月票钱包消费或冲零记录上传';
            --月票钱包消费记录上传
            proc_uploadmonconsumerec (prmcustomerid,
                                      prmcardno,
                                      prmcardsn,
                                      prmcardkind,
                                      prmcardtype,
                                      prmopdt,
                                      prmopcount,
                                      prmisnullopcount,
                                      n_acccode,
                                      v_accdscrp,
                                      prmsumelectrfare,
                                      prmoddfare,
                                      prmopfare,
                                      prmdiscountfare,
                                      prmbusid,
                                      prmposcode,
                                      prmsamcardno,
                                      prmtac,
                                      prmdriverid,
                                      prmbuslineid,
                                      prmdeptcode,
                                      prmdealtype,
                                      prmtradetype,
                                      prmcollectdt,
                                      prmtotalrecno,
                                      prmtraderecno,
                                      prmsamtradeno,
                                      --cpu卡加入字段------------
                                      prmcardasn,
                                      prmtradecitycode,
                                      prmownercitycode,
                                      prmmaincardtype,
                                      prmassocardtype,
                                      prmcardversion,
                                      prmtradekind,
                                      prmtestflag,
                                      prmcollectpoint,
                                      prmoperatorpoint,
                                      prmcustunitcode,
                                      n_iscurcard,
                                      n_isnewconsume,
                                      prmbadid,
                                      out_result,
                                      out_msg);
            return;
        end if;

        ------------------次卡钱包消费记录上传--------------
        if (prmwallettype = 3)
        then
            --判断是否重复记录
            if prmtradetype = 9
            then
                select count (*)
                  into i_count
                  from rec_poscode_reset a
                 where     a.customerid = prmcustomerid
                       and a.cardno = prmcardno
                       and a.cardsn = prmcardsn
                       and a.wallettype = prmwallettype
                       and a.opcount = prmopcount
                       and a.customerunitcode = prmcustunitcode;

                if i_count > 0
                then
                    i_badrectype := 3;
                    goto insert_err_consumrec;
                end if;
            else
                --traderecno终端交易序号，添加此条件为解决老卡有些opcount终端不赋值时，秒级消费的问题
                select count (*)
                  into i_count
                  from rec_vicecard_consume a
                 where     a.customerid = prmcustomerid
                       and a.cardsn = prmcardsn
                       and a.opcount = prmopcount
                       and a.cardasn = prmcardasn
                       and a.traderecno = prmtraderecno
                       and a.customerunitcode = prmcustunitcode;

                if i_count > 0
                then
                    out_result := -1015;
                    out_msg := '重复记录';
                    i_badrectype := 3;

                    --cup卡不存在复制卡的问题，直接执行坏账
                    if prmcardkind = 2
                    then
                        goto insert_err_consumrec;
                    end if;

                    --判断是否为m1赋值卡，如果是则形成黑名单
                    select max (a.opdt)
                      into v_opdt
                      from rec_vicecard_consume a
                     where     a.customerid = prmcustomerid
                           and a.cardsn = prmcardsn
                           and a.opcount = prmopcount
                           and a.cardasn = prmcardasn
                           and a.customerunitcode = prmcustunitcode;

                    if     v_opdt !=
                               to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss')
                       and prmcardkind = 1
                    then
                        out_msg := 'm1复制卡记录形成黑名单';
                        pkg_rec_bllt.proc_insertbllt (prmcardno,
                                                      6,
                                                      prmcardasn,
                                                      prmcustunitcode,
                                                      out_msg,
                                                      out_result);

                        i_badrectype := 21; --m1复制卡记录
                    end if;

                    goto insert_err_consumrec;
                end if;
            end if;

            out_result := -1015;
            out_msg := '次卡钱包消费或冲零记录上传';
            --次卡钱包消费记录上传
            proc_uploadvicecardconsumerec (prmcustomerid,
                                           prmcardno,
                                           prmcardsn,
                                           prmcardkind,
                                           prmcardtype,
                                           prmopdt,
                                           prmopcount,
                                           prmisnullopcount,
                                           n_acccode,
                                           v_accdscrp,
                                           prmsumelectrfare,
                                           prmoddfare,
                                           prmopfare,
                                           --次卡交易金额终端传1，不用再用转换因子处理
                                           prmdiscountfare,
                                           prmbusid,
                                           prmposcode,
                                           prmsamcardno,
                                           prmtac,
                                           prmdriverid,
                                           prmbuslineid,
                                           prmdeptcode,
                                           prmdealtype,
                                           prmtradetype,
                                           prmcollectdt,
                                           prmtotalrecno,
                                           prmtraderecno,
                                           prmsamtradeno,
                                           --cpu卡加入字段------------
                                           prmcardasn,
                                           prmtradecitycode,
                                           prmownercitycode,
                                           prmmaincardtype,
                                           prmassocardtype,
                                           prmcardversion,
                                           prmtradekind,
                                           prmtestflag,
                                           prmcollectpoint,
                                           prmoperatorpoint,
                                           prmcustunitcode,
                                           n_iscurcard,
                                           n_isnewconsume,
                                           prmbadid,
                                           out_result,
                                           out_msg);
            return;
        end if;

       ------------------------------------坏帐记录入坏帐表----------------------------------------
       --坏帐记录入坏帐表
       <<insert_err_consumrec>>
        out_result := -1016;
        out_msg := '处理坏账记录失败';

        proc_insertbadrec (prmcustomerid,
                           prmcardno,
                           prmcardsn,
                           prmopcount,
                           prmcardkind,
                           prmcardtype,
                           prmopdt,
                           t_sumelectrfare,
                           t_oddfare,
                           t_opfare,
                           t_discountfare,
                           n_acccode,
                           v_accdscrp,
                           prmbusid,
                           prmposcode,
                           prmsamcardno,
                           prmtac,
                           prmdriverid,
                           prmbuslineid,
                           prmdeptcode,
                           prmdealtype,
                           prmtradetype,
                           prmcollectdt,
                           prmtotalrecno,
                           prmtraderecno,
                           prmsamtradeno,
                           prmwallettype,
                           i_badrectype,
                           --cpu卡加入字段------------
                           prmcardasn,
                           prmtradecitycode,
                           prmownercitycode,
                           n_islocal, --是否是本地消费 0异地消费 1本地消费
                           prmmaincardtype,
                           prmassocardtype,
                           prmcardversion,
                           prmtradekind,
                           prmtestflag,
                           prmcollectpoint,
                           prmoperatorpoint,
                           prmcustunitcode,
                           0,
                           0,
                           0,
                           0,
                           0,
                           prmbadid,
                           out_result,
                           out_msg);
        return;
    exception
        when custom_exception -----先处理自定义异常
        then
            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;
        when others
        then
            out_result := -1000;
            out_msg :=
                   '记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
    end;

    procedure proc_insertbadrec ( --客户基本信息-------------
                                 prmcustomerid      in     number, --客户编号
                                 prmcardno          in     number, --卡号
                                 prmcardsn          in     number, --持卡序号
                                 prmopcount         in     number, --操作计数
                                 prmcardkind        in     number, --卡类型 1：m1卡 2：cpu卡
                                 prmcardtype        in     number, --卡类型，普通卡，月卡，老年卡等
                                 prmopdt            in     varchar2, --操作时间
                                 --客户金额信息-------------
                                 prmsumelecfare     in     number, --卡总额
                                 prmoddfare         in     number, --消费后余额根据钱包类型判断钱包
                                 prmopfare          in     number, --消费金额，根据钱包类型判断钱包
                                 prmdiscountfare    in     number, --打折金额
                                 --终端交易信息-------------
                                 prmacccode         in     number, --消费科目
                                 prmaccdscrp        in     varchar2, --科目描述
                                 prmbusid           in     number, --车辆id
                                 prmposcode         in     number,
                                 --设备唯一运营编号
                                 prmsamcardno       in     number,
                                 prmtac             in     number, --tac验证码
                                 prmempid           in     number, --司机编号
                                 prmbuslineid       in     number, --线路编号
                                 prmlinedeptcode    in     varchar2, --线路所属部门
                                 prmdealtype        in     number, --记录类型
                                 prmtradetype       in     number, --交易应用类型
                                 prmcollectdt       in     varchar2, --记录采集时间
                                 prmtotalrecno      in     number,
                                 --总交易流水号包含交易流水和日志流水
                                 prmtraderecno      in     number, --终端交易流水号
                                 prmsamtradeno      in     number, --pasm卡交易流水号
                                 prmwallettype      in     number, --钱包类型 1电子 2月票
                                 prmbadrectype      in     number, --坏账类型
                                 --cpu卡加入字段------------
                                 prmcardasn         in     number, --卡应用序列号
                                 prmtradecitycode   in     varchar2, --交易地城市代码
                                 prmownercitycode   in     varchar2, --所属地城市代码
                                 prmislocaltrade    in     number, --是否是本地消费 0异地消费 1本地消费
                                 prmmaincardtype    in     number, --主卡类型
                                 prmassocardtype    in     number, --子卡类型
                                 prmcardversion     in     number, --卡内版本
                                 prmtradekind       in     number, --交易性质
                                 prmtestflag        in     number, --测试标记
                                 prmcollectpoint    in     varchar2, --采集点编号
                                 prmoperatorpoint   in     varchar2, --营运单位编号
                                 prmcustunitcode    in     varchar2, --客户代码
                                 --增加分段计费内容
                                 prmrecordtype      in     number,
                                 --记录类型 0 普通消费记录 1 分段计费记录
                                 prmflag            in     number, --逃票标记 0-无逃票 1-逃票记录
                                 prmtposcode        in     number, --逃票设备编号
                                 prmstopid          in     number, --上车站点编号
                                 prmestopid         in     number, --下车站点编号
                                 --坏账处理---
                                 prmbadid           in     number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                 --返回值-------------------
                                 out_result            out number,
                                 out_msg               out varchar2)
    as
        i_count     number;
        n_badtype   number;
        n_status    number;
        i_factor    number; --最小货币单位和通用货币单位之间的转换因子
         n_sumelecfare number(10,2);
                             n_oddfare number(10,2);
                             n_opfare number(10,2);
                              n_discountfare number(10,2);
    /*
    ----------------------------------------------------------------------------
    --存储过程：proc_insertbadrec
    --作　　者：朱鹏飞
    --时　　间：2009-05-26
    --说　　明：处理各种坏帐记录(入坏账金额均未进行转换)
    --输入参数：
    --输出参数：
    --out_result：100 ：异常记录处理成功，其他失败
    --返回值定义：
    ----------------------------------------------
    --坏账记录类型：
       --1 重复上传记录
       --2 账外卡
       --3 违反明细表约束
       --4 非当前卡，下一张为补卡，但没有对应的冻结金额记录
       --5 非当前卡，没有下一张卡发卡记录
       --6 转冻结金额后消费
       --7 psam卡挂失后消费
       --8 终端不存在
       --9 psam卡号不存在
       --10 使用此终端的车辆不存在
       --11 tac验证不通过
       --12 交易金额异常（交易金额或者打折金额大于10元）
       --13 线路部门不存在或者已删除
       --14 线路不存在或者已删除
       --15 分段计费记录中逃票终端不存在
       --16 分段计费记录中上车或者下车站点不存在
       --17 终端上传的灰色记录
       --18 终端上传的mac校验不通过记录
       --19 电子现金消费科目不存在
       --20 thirdcardno长度必须在13到19之间
       --21 m1复制卡记录
       --23 获取货币转换因子失败！
       --24 钱包类型无效！
       --25 获取交易科目描述信息失败！
       --26 设置的消费科目不存在
       --27 终端验证时发生未知错误
       --30 入坏账时重复
       --99 客户代码不存在
    --------------------------------------------------------------------------
    */
    begin
        n_badtype := prmbadrectype;
        n_status := 0;
        i_factor := 100;

        --获取最小货币单位和通用货币单位间的转换因子
        out_result := -3001;
        out_msg := '获取货币转换因子失败！';

        select a.paramvalue
          into i_factor
          from base_param a
         where a.paramname = 'hexadecimal' and a.paramgroupid = 1002;

        --当钱包类型是电子钱包并且是异地消费时，回写本地卡异地消费记录cl原始信息
        if prmwallettype = 1 /* and prmcustomerid<>0*/
                            and prmislocaltrade = 0
        then
            update rec_city_localcardconsume_cl
               set customerid = prmcustomerid,
                   updatedate = sysdate,
                   status = 1, --0 未处理 1已处理
                   dealtype = prmbadrectype
             where     cstaccfc = to_number (prmcollectpoint)
                   and customerunitcode = prmcustunitcode
                   and cardno = prmcardno
                   and opcount = prmopcount
                   and wallettype = prmwallettype
                   and opdt = to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss')
                   and ownercitycode = prmownercitycode
                   and operatorcode = prmoperatorpoint;

            commit;
            return;
        end if;

        --坏账处理依然是坏账时，二次坏账类型 是17,18的情况不可能
        if prmbadid <> 0
        then
            --坏账类型3或21时坏账记录入重复表，原坏账记录删除,插入新的重复记录
            if prmbadrectype = 3 or prmbadrectype = 21
            then
                delete from rec_consumeacc_bad
                      where cstaccfc = prmbadid;
            else
                n_badtype := 0;

                --查询原坏账类型
                select badtype
                  into n_badtype
                  from rec_consumeacc_bad
                 where cstaccfc = prmbadid;

                --坏账类型和原坏账不一致，修改原坏账类型为最新的,坏账类型一致时不做处理
                if n_badtype <> prmbadrectype
                then
                    update rec_consumeacc_bad
                       set badtype = prmbadrectype
                     where cstaccfc = prmbadid;

                    commit;
                end if;

                out_result := 100;
                out_msg := '异常记录坏账处理成功';
                return;
            end if;
        end if;

        --当坏账类型为消费未决时，当前会坏账终端状态直接设置为系统置坏，不显示亦不在进行处理，
        if prmbadrectype = 17 or prmbadrectype = 18
        then
            n_status := 3;
        end if;

        --坏账类型为重复或复制卡时，记录入坏账重复表
        if prmbadrectype = 3 or prmbadrectype = 21
        then
            out_result := -3001;
            out_msg := '入坏账表rec_consumeacc_bad_repeat';

            i_count := 1;
        else
            i_count := 0;

            --查询坏账表中是否已存在该坏账记录
            select count (cstaccfc)
              into i_count
              from rec_consumeacc_bad
             where     customerid = prmcustomerid
                   and cardno = prmcardno
                   and opcount = prmopcount
                   and cardsn = prmcardsn
                   and customerunitcode = prmcustunitcode
                   and badtype = prmbadrectype;

            if i_count > 0
            then
                n_badtype := 30;
            end if;
        end if;

        --坏账记录在坏账表中已经存在，插入到坏账重复表中
        if i_count > 0
        then
            out_result := -3002;
            out_msg := '插入重复账rec_consumeacc_bad_repeat失败！';

            if prmwallettype = 3
            then
             n_sumelecfare:=prmsumelecfare ;
                           n_oddfare:=prmoddfare;
                           n_opfare:=prmopfare ;
                           n_discountfare:=prmdiscountfare;
                           else
                            n_sumelecfare:=prmsumelecfare / i_factor;
                           n_oddfare:=prmoddfare / i_factor;
                           n_opfare:=prmopfare / i_factor;
                           n_discountfare:=prmdiscountfare / i_factor;
                           end if;

                insert into rec_consumeacc_bad_repeat (customerid,
                                                       cardno,
                                                       cardtype,
                                                       opdt,
                                                       sumfare,
                                                       oddfare,
                                                       opfare,
                                                       acccode,
                                                       dscrp,
                                                       cardsn,
                                                       opcount,
                                                       dealtype,
                                                       tradetype,
                                                       collectdt,
                                                       uploaddate,
                                                       busid,
                                                       driverid,
                                                       poscode,
                                                       samcardno,
                                                       cardkind,
                                                       traderecno,
                                                       tac,
                                                       samtradeno,
                                                       wallettype,
                                                       badtype,
                                                       totalrecno,
                                                       buslineid,
                                                       linedeptcode,
                                                       discount,
                                                       cardasn,
                                                       tradecitycode,
                                                       ownercitycode,
                                                       maincardtype,
                                                       assocardtype,
                                                       cardversion,
                                                       tradekind,
                                                       testflag,
                                                       collectpoint,
                                                       operatorpoint,
                                                       customerunitcode)
                     values (prmcustomerid,
                             prmcardno,
                             prmcardtype,
                             to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                             n_sumelecfare,
                             n_oddfare,
                             n_opfare,
                             prmacccode,
                             prmaccdscrp,
                             prmcardsn,
                             prmopcount,
                             prmdealtype,
                             prmtradetype,
                             to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                             sysdate,
                             prmbusid,
                             prmempid,
                             prmposcode,
                             prmsamcardno,
                             prmcardkind,
                             prmtraderecno,
                             prmtac,
                             prmsamtradeno,
                             prmwallettype,
                             n_badtype,
                             prmtotalrecno,
                             prmbuslineid,
                             prmlinedeptcode,
                             n_discountfare,
                             prmcardasn,
                             prmtradecitycode,
                             prmownercitycode,
                             prmmaincardtype,
                             prmassocardtype,
                             prmcardversion,
                             prmtradekind,
                             prmtestflag,
                             prmcollectpoint,
                             prmoperatorpoint,
                             prmcustunitcode);

        else
            out_result := -3003;
            out_msg := '入坏账表rec_consumeacc_bad失败';

                insert into rec_consumeacc_bad (customerid,
                                                cardno,
                                                cardtype,
                                                opdt,
                                                sumfare,
                                                oddfare,
                                                opfare,
                                                acccode,
                                                dscrp,
                                                cardsn,
                                                opcount,
                                                dealtype,
                                                tradetype,
                                                collectdt,
                                                uploaddate,
                                                busid,
                                                driverid,
                                                poscode,
                                                samcardno,
                                                cardkind,
                                                traderecno,
                                                tac,
                                                samtradeno,
                                                wallettype,
                                                badtype,
                                                totalrecno,
                                                buslineid,
                                                linedeptcode,
                                                discount,
                                                cardasn,
                                                tradecitycode,
                                                ownercitycode,
                                                maincardtype,
                                                assocardtype,
                                                cardversion,
                                                tradekind,
                                                testflag,
                                                collectpoint,
                                                operatorpoint,
                                                customerunitcode,
                                                recordtype,
                                                flag,
                                                fleeposcode,
                                                upstopid,
                                                downstopid,
                                                status)
                     values (prmcustomerid,
                             prmcardno,
                             prmcardtype,
                             to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                             n_sumelecfare,
                              n_oddfare,
                              n_opfare,
                             prmacccode,
                             prmaccdscrp,
                             prmcardsn,
                             prmopcount,
                             prmdealtype,
                             prmtradetype,
                             to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                             sysdate,
                             prmbusid,
                             prmempid,
                             prmposcode,
                             prmsamcardno,
                             prmcardkind,
                             prmtraderecno,
                             prmtac,
                             prmsamtradeno,
                             prmwallettype,
                             n_badtype,
                             prmtotalrecno,
                             prmbuslineid,
                             prmlinedeptcode,
                              n_discountfare,
                             prmcardasn,
                             prmtradecitycode,
                             prmownercitycode,
                             prmmaincardtype,
                             prmassocardtype,
                             prmcardversion,
                             prmtradekind,
                             prmtestflag,
                             prmcollectpoint,
                             prmoperatorpoint,
                             prmcustunitcode,
                             prmrecordtype,
                             prmflag,
                             prmtposcode,
                             prmstopid,
                             prmestopid,
                             n_status);
        end if;

        out_result := 100;
        out_msg := '异常记录坏账处理成功';
        commit;
        return;
    exception
        when others
        then
            rollback;
            out_result := -1;

            out_msg :=
                   '记录上传入坏账失败，'
                || out_msg
                || '异常，具体原因为：'
                || sqlerrm;

            return;
    end;

    procedure proc_uploadelecconsumerec ( --客户基本信息-------------
                                         prmcustomerid      in     number, --客户编号
                                         prmcardno          in     number, --卡号
                                         prmcardsn          in     number, --持卡序号
                                         prmcardkind        in     number, --卡种类 1：m1卡 2：cpu卡
                                         prmcardtype        in     number, --卡类型 普通卡 月卡 老年卡等
                                         prmopdt            in     varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                         prmwallettype      in     number, --钱包类型 1：电子钱包 4电子现金
                                         prmopcount         in     number, --消费操作计数，根据钱包判断
                                         prmisnullopcount   in     number, --消费操作计数是否赋值 0已赋值 1未赋值
                                         prmacccode         in     number, --消费科目类型
                                         prmaccdesc         in     varchar2, --科目描述
                                         --客户金额信息-------------
                                         prmsumelectrfare   in     number, --卡总额
                                         prmoddfare         in     number, --消费后余额，根据钱包类型判断钱包
                                         prmopfare          in     number, --消费金额，根据钱包类型判断钱包
                                         prmdiscountfare    in     number, --打折金额
                                         --终端交易信息-------------
                                         prmbusid           in     number, --车辆id
                                         prmposcode         in     number, --设备唯一运营编号
                                         prmsamcardno       in     number, --pasm卡卡号
                                         prmtac             in     number, --tac验证码
                                         prmdriverid        in     number, --司机编号
                                         prmbuslineid       in     number, --线路编号
                                         prmdeptcode        in     varchar2, --线路所属部门
                                         prmdealtype        in     number, --记录类型，用于确定科目
                                         prmtradetype       in     number, --交易应用类型
                                         prmcollectdt       in     varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                         prmtotalrecno      in     number, --总交易流水号包含交易流水和日志流水
                                         prmtraderecno      in     number, --终端交易流水号
                                         prmsamtradeno      in     number, --pasm卡交易流水号
                                         --cpu卡加入字段------------
                                         prmcardasn         in     number, --卡应用序列号
                                         prmtradecitycode   in     varchar2, --交易地城市代码
                                         prmownercitycode   in     varchar2, --所属地城市代码
                                         prmmaincardtype    in     number, --主卡类型
                                         prmassocardtype    in     number, --子卡类型
                                         prmcardversion     in     number, --卡内版本
                                         prmtradekind       in     number, --交易性质
                                         prmtestflag        in     number, --测试标记
                                         prmcollectpoint    in     varchar2, --采集点编号
                                         prmoperatorpoint   in     varchar2, --营运单位编号
                                         prmcustunitcode    in     varchar2, --客户代码
                                         prmiscurcard       in     number, --1当前卡  0非当前卡
                                         prmisnewconsume    in     number, --1新消费    0老消费
                                         --坏账处理---
                                         prmbadid           in     number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                         --返回值-------------------
                                         out_result            out number,
                                         out_msg               out varchar2)
    as
        /*
        ---------------------------------------------------------------------------
        --存储过程：proc_uploadelecconsumerec
        --过程类型：内部过程
        --作　　者：朱鹏飞
        --时　　间：2009-05-26
        --说　　明：电子钱包消费记录上传处理过程
        --应用场景：处理电子钱包消费时，此过程为内部过程，直接在内部判断是提交还是回滚
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：记录上传成功，帐目统计成功，其他失败
        --200:入坏账成功
        --其他异常
        --------------------------------------------------------------------------
        */

        --变量定义
        i_count            integer; --计数
        n_acccode          number := 201; --电子钱包消费科目
        v_accdesc          varchar2 (50);
        n_busid            number; --车辆id

        custom_exception   exception; --自定义错误
        v_dptcode          varchar2 (20); --线路所属部门

        n_cashaccfc        number; --形成消费明细的原始流水号
        n_lineid           number; --车辆对应的线路编号
    begin
        --赋初始值
        i_count := 0;
        n_acccode := prmacccode;
        v_accdesc := prmaccdesc;
        n_busid := prmbusid;
        n_lineid := prmbuslineid;
        v_dptcode := prmdeptcode;

        ------------------------电子钱包未决处理------------------------------------
        if (prmwallettype = 1)
        then
            out_result := -2002;
            out_msg := '钱包未决处理失败';

            --处理充值未决信息
            select count (*)
              into i_count
              from rec_electtron_cash_plan a
             where     a.customerid = prmcustomerid
                   and a.cardsn = prmcardsn
                   and a.cardno = prmcardno
                   and a.opdt < sysdate - (5 / 24 / 60)
                   and a.customerunitcode = prmcustunitcode;

            --存在未决并且钱包类型为电子钱包时才进行未决的处理
            if (i_count = 1)
            then
                proc_handdeal_eleunsetcash (prmcardno,
                                            prmcardsn,
                                            prmcustomerid,
                                            prmmaincardtype,
                                            prmopcount,
                                            prmisnullopcount,
                                            prmopdt,
                                            prmoddfare,
                                            prmopfare,
                                            prmcustunitcode,
                                            out_result,
                                            out_msg);

                --未决处理失败的时候直接回滚，否则继续执行同步提交
                if out_result <> 100
                then
                    rollback;
                end if;
            end if;
        end if;

        ------------------------当前卡账户信息处理--------------------------------
        if prmiscurcard = 1
        then
            out_result := -2012;
            out_msg := '当前卡账户信息处理失败';

            --更新系统账户余额
            if prmisnewconsume = 0
            then
                update base_customers a
                   set a.electroddfareacc = electroddfareacc - prmopfare
                 where     customerid = prmcustomerid
                       and a.cardno = prmcardno
                       and a.customerunitcode = prmcustunitcode;
            end if;

            --新消费，更新卡上当前余额和消费计数
            if prmisnewconsume = 1
            then
                --电子钱包
                if (prmwallettype = 1)
                then
                    update base_customers a
                       set a.electroddfare = prmoddfare,
                           a.electropcount = prmopcount,
                           a.electroddfareacc = electroddfareacc - prmopfare
                     where     customerid = prmcustomerid
                           and a.cardno = prmcardno
                           and a.customerunitcode = prmcustunitcode;
                end if;

                --电子现金
                if (prmwallettype = 4)
                then
                    update base_customers a
                       set a.electroddfare = prmoddfare,
                           a.ecopcount = prmopcount,
                           a.electroddfareacc = electroddfareacc - prmopfare
                     where     customerid = prmcustomerid
                           and a.cardno = prmcardno
                           and a.customerunitcode = prmcustunitcode;
                end if;
            end if;
        end if;

        ---------------------------------------记录入库-------------------------------------------
        out_result := -2013;
        out_msg :=
               'customerid:'
            || prmcustomerid
            || ',cardno:'
            || prmcardno
            || ',cardsn:'
            || prmcardsn
            || ',opcount:'
            || prmopcount
            || ',入rec_electtron_consume失败';

        --获取消费记录流水号
        select seq_rec_electtron_consume.nextval into n_cashaccfc from dual;

        --形成电子钱包消费记录
        insert into rec_electtron_consume (cstaccfc,
                                           customerid,
                                           cardno,
                                           cardtype,
                                           opdt,
                                           sumelectraddfare,
                                           electronoddfare,
                                           electronopfare,
                                           acccode,
                                           dscrp,
                                           cardsn,
                                           opcount,
                                           dealtype,
                                           collectdt,
                                           uploaddate,
                                           busid,
                                           driverid,
                                           poscode,
                                           samcardno,
                                           cardkind,
                                           traderecno,
                                           tac,
                                           samtradeno,
                                           buslineid,
                                           totalrecno,
                                           discount,
                                           tradetype,
                                           linedept,
                                           cardasn,
                                           tradecitycode,
                                           ownercitycode,
                                           maincardtype,
                                           assocardtype,
                                           cardversion,
                                           tradekind,
                                           testflag,
                                           collectpoint,
                                           operatorpoint,
                                           customerunitcode,
                                           wallettype)
             values (n_cashaccfc,
                     prmcustomerid,
                     prmcardno,
                     prmcardtype,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     prmsumelectrfare,
                     prmoddfare,
                     prmopfare,
                     n_acccode,
                     v_accdesc,
                     prmcardsn,
                     prmopcount,
                     prmdealtype,
                     to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                     sysdate,
                     n_busid,
                     prmdriverid,
                     prmposcode,
                     prmsamcardno,
                     prmcardkind,
                     prmtraderecno,
                     prmtac,
                     prmsamtradeno,
                     n_lineid,
                     prmtotalrecno,
                     prmdiscountfare,
                     prmtradetype,
                     v_dptcode,
                     prmcardasn,
                     prmtradecitycode,
                     prmownercitycode,
                     prmmaincardtype,
                     prmassocardtype,
                     prmcardversion,
                     prmtradekind,
                     prmtestflag,
                     prmcollectpoint,
                     prmoperatorpoint,
                     prmcustunitcode,
                     prmwallettype);

        out_result := -2014;
        out_msg := '消费记录即时统计失败';
        --消费记录即时统计
        pkg_st_payment.proc_custdataaccount_online (prmopdt,
                                                    prmopfare,
                                                    n_acccode,
                                                    prmdiscountfare,
                                                    prmcardkind,
                                                    prmcardtype,
                                                    prmdriverid,
                                                    prmposcode,
                                                    prmsamcardno,
                                                    n_lineid,
                                                    v_dptcode,
                                                    n_busid,
                                                    prmwallettype, --1, --钱包类型 电子钱包
                                                    0, --0正常 1回滚统计操作
                                                    prmcustunitcode,
                                                    out_msg,
                                                    out_result,
                                                    prmmaincardtype); --2017-12-26  新增主卡类型

        if out_result <> 100
        then
            rollback;
            out_msg :=
                   '记录上传统计失败！错误代码：'
                || out_result
                || ' 错误信息：'
                || out_msg;
            out_result := 101;
            return;
        end if;

        --如果是处理坏账的记录，修改坏账的最终处理状态为已入正常账
        if prmbadid <> 0
        then
            update rec_consumeacc_bad
               set status = 1
             where cstaccfc = prmbadid;
        end if;

        commit;
        out_msg := '记录上传成功';
        return;
    exception
        when custom_exception -----先处理自定义异常
        then
            rollback;
            out_msg := out_msg;

            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;
        when others
        then
            out_result := -1;
            out_msg :=
                   '记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
            rollback;
    end;

    --本地卡异地消费电子钱包消费记录上传
    procedure proc_upcitylocalcardconsumecl (
        --客户基本信息-------------
        prmcustomerid      in     number, --客户编号
        prmcardno          in     number, --卡号
        prmcardsn          in     number, --持卡序号
        prmcardkind        in     number, --卡种类 1：m1卡 2：cpu卡
        prmcardtype        in     number, --卡类型 普通卡 月卡 老年卡等
        prmopdt            in     varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
        prmopcount         in     number, --消费操作计数，根据钱包判断
        prmsaveopcount     in     number, --充值计数
        prmacccode         in     number, --消费科目类型 201电子钱包，201电子现金
        prmaccdesc         in     varchar2, --科目描述
        --客户金额信息-------------
        prmsumelectrfare   in     number, --卡总额
        prmoddfare         in     number, --消费后余额，根据钱包类型判断钱包
        prmopfare          in     number, --消费金额，根据钱包类型判断钱包
        prmdiscountfare    in     number, --打折金额
        --终端交易信息-------------
        prmbusid           in     number, --车辆id
        prmposcode         in     number, --设备唯一运营编号
        prmsamcardno       in     number, --pasm卡卡号
        prmtac             in     number, --tac验证码
        prmdriverid        in     number, --司机编号
        prmbuslineid       in     number, --线路编号
        prmdeptcode        in     varchar2, --线路所属部门
        prmdealtype        in     number, --记录类型，用于确定科目
        prmtradetype       in     number, --交易应用类型
        prmcollectdt       in     varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
        prmtotalrecno      in     number, --总交易流水号包含交易流水和日志流水
        prmtraderecno      in     number, --终端交易流水号
        prmsamtradeno      in     number, --pasm卡交易流水号
        --cpu卡加入字段------------
        prmcardasn         in     number, --卡应用序列号
        prmtradecitycode   in     varchar2, --交易地城市代码
        prmownercitycode   in     varchar2, --所属地城市代码
        prmmaincardtype    in     number, --主卡类型
        prmassocardtype    in     number, --子卡类型
        prmcardversion     in     number, --卡内版本
        prmtradekind       in     number, --交易性质
        prmtestflag        in     number, --测试标记
        prmwallettype      in     number,
        prmcollectpoint    in     varchar2, --采集点编号
        prmoperatorpoint   in     varchar2, --营运单位编号
        prmcustunitcode    in     varchar2, --客户代码
        prmextentvalue     in     varchar2, --扩展域
        ---------清算加入字段---------
        prmfilename        in     varchar2, --清算文件名称
        prmclearresult     in     varchar2, --清算机构清算结构
        prmiscurcard       in     number, --1当前卡  0非当前卡
        prmisnewconsume    in     number, --1新消费    0老消费
        --返回值-------------------
        out_result            out number,
        out_msg               out varchar2)
    as
        /*
        ---------------------------------------------------------------------------
        --存储过程：proc_uploadnolocalconsumerec
        --过程类型：内部过程
        --作　　者：黎会芳
        --时　　间：2016-05-26
        --说　　明：本地卡异地消费电子钱包消费记录上传处理过程
        --应用场景：处理本地卡异地消费电子钱包消费记录上传时，此过程为内部过程，直接在内部确定数据是提交还是回滚
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：记录上传成功，帐目统计成功，其他失败
        --200:入坏账成功
        --其他异常
        --------------------------------------------------------------------------
        */

        --变量定义
        n_acccode          number := 221; --电子钱包消费科目
        v_accdesc          varchar2 (100);
        n_busid            number; --车辆id
        n_lineid           number; --车辆对应的线路编号
        v_dptcode          varchar2 (20); --线路所属部门
        n_cashaccfc        number; --形成消费明细的原始流水号
        custom_exception   exception; --自定义错误

        d_settlementdate   date; --清算日期
        d_filecreatedate   date; --文件创建日期
        d_accountdate      date; --结算日期
    begin
        --赋初始值
        n_busid := prmbusid;
        n_lineid := prmbuslineid;
        v_dptcode := prmdeptcode;
        n_acccode := prmacccode;
        v_accdesc := prmaccdesc;
        d_settlementdate := sysdate;
        d_filecreatedate := sysdate;
        d_accountdate := sysdate;

        --文件名中的日期 + 文件头中的本批次结算日期+文件头中的清算日期
        --settlementdate 清算日期  filecreatedate 文件创建日期  accountdate 结算日期
        --本地卡异地消费
        d_filecreatedate :=
            to_date (substr (prmextentvalue, 0, 14), 'yyyy-mm-dd hh24:mi:ss');
        d_accountdate :=
            to_date (substr (prmextentvalue, 15, 14),
                     'yyyy-mm-dd hh24:mi:ss');
        d_settlementdate :=
            to_date (substr (prmextentvalue, 29, 14),
                     'yyyy-mm-dd hh24:mi:ss');

        --------------------本地验证通过，清分清算机构未验证通过------------------------------
        if prmclearresult <> '000000'
        then
            out_result := -2001;
            out_msg := '回写本地卡异地消费记录cl原始信息失败';

            update rec_city_localcardconsume_cl
               set customerid = prmcustomerid,
                   updatedate = sysdate,
                   dealtype = '1', --1 成功交易
                   status = 1 --状态 0：未处理 1：已处理
             where     cstaccfc = to_number (prmcollectpoint)
                   and customerunitcode = prmcustunitcode
                   and cardno = prmcardno
                   and opcount = prmopcount
                   and wallettype = prmwallettype --本地卡异地消费包含电子钱包和电子现金，添加钱包类型判断字段
                   and opdt = to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss')
                   and ownercitycode = prmownercitycode
                   and operatorcode = prmoperatorpoint;

            out_result := 100;
            out_msg := '处理成功';
            commit;
            return;
        end if;

        --------------------------------当前卡账目信息处理--------------------------------
        out_result := -2002;
        out_msg := '当前卡账目信息处理失败';

        if (prmiscurcard = 1)
        then
            update base_customers a
               set a.electroddfareacc = electroddfareacc - prmopfare
             where     customerid = prmcustomerid
                   and a.cardno = prmcardno
                   and a.customerunitcode = prmcustunitcode;
        end if;

        out_result := -2003;
        out_msg :=
               'customerid:'
            || prmcustomerid
            || ',cardno:'
            || prmcardno
            || ',cardsn:'
            || prmcardsn
            || ',opcount:'
            || prmopcount
            || ',入rec_electtron_consume';

        --获取消费记录流水号
        select seq_city_localcardconsume.nextval into n_cashaccfc from dual;

        --形成电子钱包消费记录
        insert into rec_city_localcardconsume (cstaccfc,
                                               customerid,
                                               cardno,
                                               cardtype,
                                               opdt,
                                               sumelectraddfare,
                                               electronoddfare,
                                               electronopfare,
                                               acccode,
                                               dscrp,
                                               cardsn,
                                               opcount,
                                               dealtype,
                                               collectdt,
                                               uploaddate,
                                               busid,
                                               driverid,
                                               poscode,
                                               samcardno,
                                               cardkind,
                                               traderecno,
                                               tac,
                                               samtradeno,
                                               buslineid,
                                               totalrecno,
                                               discount,
                                               tradetype,
                                               linedept,
                                               cardasn,
                                               tradecitycode,
                                               ownercitycode,
                                               maincardtype,
                                               assocardtype,
                                               cardversion,
                                               tradekind,
                                               testflag,
                                               collectpoint,
                                               operatorpoint,
                                               customerunitcode,
                                               saveopcount,
                                               accountdate,
                                               settlementdate,
                                               filecreatedate,
                                               filename)
             values (n_cashaccfc,
                     prmcustomerid,
                     prmcardno,
                     prmcardtype,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     prmsumelectrfare,
                     prmoddfare,
                     prmopfare,
                     n_acccode,
                     v_accdesc,
                     prmcardsn,
                     prmopcount,
                     1,
                     to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                     sysdate,
                     n_busid,
                     prmdriverid,
                     prmposcode,
                     prmsamcardno,
                     prmcardkind,
                     prmtraderecno,
                     prmtac,
                     prmsamtradeno,
                     n_lineid,
                     prmtotalrecno,
                     prmdiscountfare,
                     prmtradetype,
                     v_dptcode,
                     prmcardasn,
                     prmtradecitycode,
                     prmownercitycode,
                     prmmaincardtype,
                     prmassocardtype,
                     prmcardversion,
                     prmtradekind,
                     prmtestflag,
                     prmcollectpoint,
                     prmoperatorpoint,
                     prmcustunitcode,
                     prmsaveopcount,
                     d_accountdate,
                     d_settlementdate,
                     d_filecreatedate,
                     prmfilename);

        out_result := -2004;
        out_msg := '回写本地卡异地消费记录cl原始信息失败';

        --回写本地卡异地消费记录cl原始信息
        update rec_city_localcardconsume_cl
           set customerid = prmcustomerid,
               updatedate = sysdate,
               dealtype = '1', --1 成功交易
               status = 1 --状态 0：未处理 1：已处理
         where     cstaccfc = to_number (prmcollectpoint)
               and customerunitcode = prmcustunitcode
               and cardno = prmcardno
               and opcount = prmopcount
               and wallettype = prmwallettype --本地卡异地消费包含电子钱包和电子现金，添加钱包类型判断字段
               and opdt = to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss')
               and ownercitycode = prmownercitycode
               and operatorcode = prmoperatorpoint;

        out_result := -2005;
        out_msg := '消费记录即时统计失败';
        --消费记录即时统计
        pkg_st_payment.proc_nolocalaccount_online (
            prmopdt,
            prmopfare,
            n_acccode,
            prmdiscountfare,
            prmcardkind,
            prmcardtype,
            prmdriverid,
            prmposcode,
            prmsamcardno,
            n_lineid,
            v_dptcode, --prmdeptcode,
            n_busid,
            prmwallettype, --钱包类型 电子钱包
            0, --0正常 1回滚统计操作
            prmcustunitcode,
            to_char (d_accountdate, 'yyyy-mm-dd hh24:mi:ss'),
            to_char (d_settlementdate, 'yyyy-mm-dd hh24:mi:ss'),
            to_char (d_filecreatedate, 'yyyy-mm-dd hh24:mi:ss'),
            out_msg,
            out_result,
            prmmaincardtype); --2017-12-26 新增主卡类型

        if (out_result <> 100)
        then
            rollback;
            out_msg :=
                   '记录上传统计失败！错误代码：'
                || out_result
                || ' 错误信息：'
                || out_msg;
            out_result := 101;
            return;
        end if;

        out_msg := '记录上传成功';
        commit;
        return;
    exception
        when custom_exception -----先处理自定义异常
        then
            rollback;

            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;
        when others
        then
            rollback;
            out_result := -1;
            out_msg :=
                   '记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
    end;

    procedure proc_uploadmonconsumerec ( --客户基本信息-------------
                                        prmcustomerid      in     number, --客户编号
                                        prmcardno          in     number, --卡号
                                        prmcardsn          in     number, --持卡序号
                                        prmcardkind        in     number, --卡种类 1：m1卡 2：cpu卡
                                        prmcardtype        in     number, --卡类型 普通卡 月卡 老年卡等
                                        prmopdt            in     varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                        prmopcount         in     number, --消费操作计数，根据钱包判断
                                        prmisnullopcount   in     number, --消费操作计数是否赋值 0已赋值 1未赋值
                                        prmacccode         in     number, --消费科目类型
                                        prmaccdesc         in     varchar2, --科目描述
                                        --客户金额信息-------------
                                        prmsumvicefare     in     number, --卡总额
                                        prmoddfare         in     number, --消费后余额，根据钱包类型判断钱包
                                        prmopfare          in     number, --消费金额，根据钱包类型判断钱包
                                        prmdiscountfare    in out number, -- 打折金额（如果为清零记录，此字段代表每月充值金额）
                                        --终端交易信息-------------
                                        prmbusid           in     number, --车辆id
                                        prmposcode         in     number, --设备唯一运营编号
                                        prmsamcardno       in     number, --pasm卡卡号
                                        prmtac             in     number, --tac验证码
                                        prmdriverid        in     number, --司机编号
                                        prmbuslineid       in     number, --线路编号
                                        prmdeptcode        in     varchar2, --线路所属部门
                                        prmdealtype        in     number, --记录类型，用于确定科目
                                        prmtradetype       in     number, --交易应用类型
                                        prmcollectdt       in     varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                        prmtotalrecno      in     number,
                                        --总交易流水号包含交易流水和日志流水
                                        prmtraderecno      in     number, --终端交易流水号
                                        prmsamtradeno      in     number, --pasm卡交易流水号
                                        --cpu卡加入字段------------
                                        prmcardasn         in     number, --卡应用序列号
                                        prmtradecitycode   in     varchar2, --交易地城市代码
                                        prmownercitycode   in     varchar2, --所属地城市代码
                                        prmmaincardtype    in     number, --主卡类型
                                        prmassocardtype    in     number, --子卡类型
                                        prmcardversion     in     number, --卡内版本
                                        prmtradekind       in     number, --交易性质
                                        prmtestflag        in     number, --测试标记
                                        prmcollectpoint    in     varchar2, --采集点编号
                                        prmoperatorpoint   in     varchar2, --营运单位编号
                                        prmcustunitcode    in     varchar2, --客户代码
                                        prmiscurcard       in     number, --1当前卡  0非当前卡
                                        prmisnewconsume    in     number, --1新消费    0老消费
                                        --坏账处理---
                                        prmbadid           in     number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                        --返回值-------------------
                                        out_result            out number,
                                        out_msg               out varchar2)
    as
        /*
        -------------------------------------------------------------------------------
        --存储过程：processconsumerec
        --过程类型：内部过程
        --应用场景：确实是月票消费记录，月票冲零记录上传时处理，正常流程直接在内部提交
        --作　　者：朱鹏飞
        --时　　间：2009-05-26
        --说　　明：月票钱包消费，月票冲零消费记录上传处理过程
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：记录上传成功，帐目统计成功，其他失败
        --------------------------------------------------------------------------
        */

        --变量定义
        i_count            integer; --计数
        n_acccode          number; --消费科目
        v_accdesc          varchar2 (50);
        n_busid            number; --车辆id
        v_dptcode          varchar2 (20); --线路所属部门
        n_lineid           number; --车辆对应的线路编号
        n_cashaccfc        number; --形成消费明细的原始流水号

        d_opdt             date; --交易时间年月日
        d_month            date; --清零开始月份
        d_monthend         date; --清零结束月份

        custom_exception   exception; --自定义错误
    begin
        --赋初始值
        i_count := 0;
        d_opdt := trunc (to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), 'mm');
        d_month := trunc (to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), 'mm');
        d_monthend := trunc (to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), 'mm');
        n_busid := prmbusid;
        n_lineid := prmbuslineid;
        v_dptcode := prmdeptcode;
        n_acccode := prmacccode;
        v_accdesc := prmaccdesc;

        ----------------------------------充值未决处埋-----------------------------------------------
        out_result := -2002;
        out_msg := '钱包未决处理失败';

        select count (*)
          into i_count
          from rec_monticket_cash_plan a
         where     a.customerid = prmcustomerid
               and a.cardsn = prmcardsn
               and a.opdt < sysdate - (5 / 24 / 60)
               and a.cardno = prmcardno
               and a.customerunitcode = prmcustunitcode;

        if (i_count = 1)
        then
            proc_handdeal_monunsetcash (prmcardno,
                                        prmcardsn,
                                        prmcustomerid,
                                        prmmaincardtype,
                                        prmopcount,
                                        prmisnullopcount,
                                        prmopdt,
                                        prmoddfare,
                                        prmopfare,
                                        prmcustunitcode,
                                        out_result,
                                        out_msg);

            --未决处理失败的时候直接回滚，否则继续执行同步提交
            if out_result <> 100
            then
                rollback;
            end if;
        end if;

        ------------------------------------冲零记录修改账本信息--------------------------------------
        if prmtradetype = 9
        then
            --获取清零的月份
            --1、根据清零的金额和单位充值的金额对比，获取冲零的月份个数
            --2、根据当前清零的交易时间，向前面推算清零的月份
            select ceil (prmopfare / prmdiscountfare) into i_count from dual;

            --清零起始月份
            select add_months (d_opdt, -i_count) into d_month from dual;

            --清零最后月份
            select add_months (d_opdt, -1) into d_monthend from dual;

            out_result := -2008;
            out_msg := '冲零记录修改账本信息！';

            --更新增账本中月票冲零累计值
            update base_customers
               set summonrushfare = summonrushfare + prmopfare
             where     customerid = prmcustomerid
                   and cardno = prmcardno
                   and customerunitcode = prmcustunitcode;
        end if;

        ------------------------------------------当前卡账务信息处理--------------------------------------
        if prmtradetype <> 9 and prmiscurcard = 1
        then
            out_result := -2010;
            out_msg := '当前卡账务信息处理失败';

            if prmisnewconsume = 0 --老消费
            then
                update base_customers a
                   set a.summonthoddfareacc = summonthoddfareacc - prmopfare
                 where     customerid = prmcustomerid
                       and asn = prmcardno
                       and customerunitcode = prmcustunitcode;
            end if;

            if prmisnewconsume = 1 --新消费
            then
                update base_customers a
                   set a.monoddfare = prmoddfare,
                       a.monopcount = prmopcount,
                       a.summonthoddfareacc = summonthoddfareacc - prmopfare
                 where     customerid = prmcustomerid
                       and asn = prmcardno
                       and customerunitcode = prmcustunitcode;
            end if;
        end if;

        -------------------------------记录入库---------------------------------------------------
        out_result := -2011;
        out_msg :=
               'customerid:'
            || prmcustomerid
            || ',cardno:'
            || prmcardno
            || ',cardsn:'
            || prmcardsn
            || ',opcount:'
            || prmopcount
            || ',rec_monticket_consum';

        if prmtradetype = 9
        then
            --获取交易记录流水号
            select seq_rec_poscode_reset.nextval into n_cashaccfc from dual;

            out_result := -2012;
            out_msg := '形成清零记录失败！';

            --形成终端清零记录
            insert into rec_poscode_reset (cstaccfc,
                                           customerid,
                                           cardno,
                                           cardtype,
                                           opdt,
                                           rushfare,
                                           hangdatemonth,
                                           acccode,
                                           dscrp,
                                           cardsn,
                                           opcount,
                                           dealtype,
                                           collectdt,
                                           uploaddate,
                                           busid,
                                           driverid,
                                           poscode,
                                           samcardno,
                                           cardkind,
                                           traderecno,
                                           tac,
                                           samtradeno,
                                           buslineid,
                                           totalrecno,
                                           tradetype,
                                           linedept,
                                           operatorpoint,
                                           collectpoint,
                                           customerunitcode,
                                           wallettype,
                                           monsaveopfare,
                                           hangdatemonthend,
                                           oddfare)
                 values (n_cashaccfc,
                         prmcustomerid,
                         prmcardno,
                         prmcardtype,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                         prmopfare,
                         d_month,
                         n_acccode,
                         v_accdesc,
                         prmcardsn,
                         prmopcount,
                         prmdealtype,
                         to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                         sysdate,
                         prmbusid,
                         prmdriverid,
                         prmposcode,
                         prmsamcardno,
                         prmcardkind,
                         prmtraderecno,
                         prmtac,
                         prmsamtradeno,
                         prmbuslineid,
                         prmtotalrecno,
                         prmtradetype,
                         prmdeptcode,
                         prmoperatorpoint,
                         prmcollectpoint,
                         prmcustunitcode,
                         2,
                         prmdiscountfare,
                         d_monthend,
                         prmoddfare);

            prmdiscountfare := 0; --冲零记录中打折金额为0
        else
            --获取交易记录流水号
            select seq_rec_monticket_consum.nextval
              into n_cashaccfc
              from dual;

            out_result := -2012;
            out_msg := '形成月票记录失败！';

            --形成月票钱包消费记录
            insert into rec_monticket_consum (cstaccfc,
                                              customerid,
                                              cardno,
                                              cardtype,
                                              opdt,
                                              sumviceaddfare,
                                              viceonoddfare,
                                              viceonopfare,
                                              acccode,
                                              dscrp,
                                              cardsn,
                                              opcount,
                                              dealtype,
                                              collectdt,
                                              uploaddate,
                                              busid,
                                              driverid,
                                              poscode,
                                              samcardno,
                                              cardkind,
                                              traderecno,
                                              tac,
                                              samtradeno,
                                              buslineid,
                                              totalrecno,
                                              discount,
                                              tradetype,
                                              linedept,
                                              cardasn,
                                              tradecitycode,
                                              ownercitycode,
                                              maincardtype,
                                              assocardtype,
                                              cardversion,
                                              tradekind,
                                              testflag,
                                              collectpoint,
                                              operatorpoint,
                                              customerunitcode)
                 values (n_cashaccfc,
                         prmcustomerid,
                         prmcardno,
                         prmcardtype,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                         prmsumvicefare,
                         prmoddfare,
                         prmopfare,
                         n_acccode,
                         v_accdesc,
                         prmcardsn,
                         prmopcount,
                         prmdealtype,
                         to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                         sysdate,
                         n_busid,
                         prmdriverid,
                         prmposcode,
                         prmsamcardno,
                         prmcardkind,
                         prmtraderecno,
                         prmtac,
                         prmsamtradeno,
                         n_lineid,
                         prmtotalrecno,
                         prmdiscountfare,
                         prmtradetype,
                         v_dptcode,
                         prmcardasn,
                         prmtradecitycode,
                         prmownercitycode,
                         prmmaincardtype,
                         prmassocardtype,
                         prmcardversion,
                         prmtradekind,
                         prmtestflag,
                         prmcollectpoint,
                         prmoperatorpoint,
                         prmcustunitcode);
        end if;

        out_result := -2012;
        out_msg := '消费记录即时统计失败';
        --消费记录即时统计
        pkg_st_payment.proc_custdataaccount_online (prmopdt,
                                                    prmopfare,
                                                    n_acccode,
                                                    prmdiscountfare,
                                                    prmcardkind,
                                                    prmcardtype,
                                                    prmdriverid,
                                                    prmposcode,
                                                    prmsamcardno,
                                                    n_lineid,
                                                    v_dptcode,
                                                    n_busid,
                                                    --i_cardareaid,
                                                    --i_dptareaid,
                                                    2, --钱包类型 次卡钱包
                                                    0, --0正常 1回滚统计操作
                                                    prmcustunitcode,
                                                    out_msg,
                                                    out_result,
                                                    prmmaincardtype); --2017-12-26 新增主卡类型

        if (out_result <> 100)
        then
            out_result := out_result;
            out_msg := '记录上传统计失败,' || out_msg;
            rollback;
            return;
        end if;

        --如果是处理坏账的记录，修改坏账的最终处理状态为已入正常账
        if prmbadid <> 0
        then
            update rec_consumeacc_bad
               set status = 1
             where cstaccfc = prmbadid;
        end if;

        out_msg := '记录上传成功';
        commit;
        return;
    exception
        when custom_exception -----先处理自定义异常
        then
            rollback;

            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;

            out_msg := out_msg;
        when others
        then
            rollback;
            out_result := -1;
            out_msg :=
                   '记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
    end;

    procedure proc_upload_badconsumrec ( --客户基本信息-------------
                                        prmcustomerid      in     number, --客户编号
                                        prmcardno          in     number, --卡号
                                        prmcardsn          in     number, --持卡序号
                                        prmopcount         in     number, --操作计数
                                        prmcardkind        in     number, --卡类型 1：m1卡 2：cpu卡
                                        prmcardtype        in     number,
                                        --卡类型，普通卡，月卡，老年卡等
                                        prmopdt            in     varchar2, --操作时间
                                        --客户金额信息-------------
                                        prmsumelectrfare   in     number, --卡总额
                                        prmoddfare         in     number, --消费后余额根据钱包类型判断钱包
                                        prmopfare          in     number, --消费金额，根据钱包类型判断钱包
                                        prmdiscountfare    in     number, --打折金额
                                        --终端交易信息-------------
                                        prmacccode         in     number, --消费科目
                                        prmaccdscrp        in     varchar2, --科目描述
                                        prmbusid           in     number, --车辆id
                                        prmposcode         in     number,
                                        --设备唯一运营编号
                                        prmsamcardno       in     number,
                                        prmtac             in     number, --tac验证码
                                        prmempid           in     number, --司机编号
                                        prmbuslineid       in     number, --线路编号
                                        prmlinedeptcode    in     varchar2,
                                        --线路所属部门
                                        prmdealtype        in     number, --记录类型
                                        prmtradetype       in     number, --交易应用类型
                                        prmcollectdt       in     varchar2,
                                        --记录采集时间
                                        prmtotalrecno      in     number,
                                        --总交易流水号包含交易流水和日志流水
                                        prmtraderecno      in     number,
                                        --终端交易流水号
                                        prmsamtradeno      in     number,
                                        --pasm卡交易流水号
                                        prmwallettype      in     number,
                                        --钱包类型 1电子 2月票
                                        prmbadrectype      in     number,
                                        ----坏账类型
                                        --cpu卡加入字段------------
                                        prmcardasn         in     number, --卡应用序列号
                                        prmtradecitycode   in     varchar2, --交易地城市代码
                                        prmownercitycode   in     varchar2, --所属地城市代码
                                        prmislocaltrade    in     number, --是否是本地消费 0异地消费 1本地消费
                                        prmmaincardtype    in     number, --主卡类型
                                        prmassocardtype    in     number, --子卡类型
                                        prmcardversion     in     number, --卡内版本
                                        prmtradekind       in     number, --交易性质
                                        prmtestflag        in     number, --测试标记
                                        prmcollectpoint    in     varchar2, --采集点编号
                                        prmoperatorpoint   in     varchar2, --营运单位编号
                                        prmcustunitcode    in     varchar2, --客户代码
                                        --增加分段计费内容
                                        prmrecordtype      in     number,
                                        --记录类型 0 普通消费记录 1 分段计费记录
                                        prmflag            in     number, --逃票标记 0-无逃票 1-逃票记录
                                        prmtposcode        in     number, --逃票设备编号
                                        prmstopid          in     number, --上车站点编号
                                        prmestopid         in     number, --下车站点编号
                                        --坏账处理---
                                        prmbadid           in     number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                        --返回值-------------------
                                        out_result            out number,
                                        out_msg               out varchar2)
    as
        /*
        --------------------------------------------------------------------------
        --存储过程：proc_upload_badconsumrec
        --作　　者：朱鹏飞
        --时　　间：2009-05-26
        --说　　明：处理各种坏帐记录
        --输入参数：
        --输出参数：
        --out_result：100 ：异常记录处理成功，其他失败
        --返回值定义：
        --------------------------------------------------------------------------
        */
        n_acccode    number; --坏账科目
        v_accdscrp   varchar (20); --坏账科目描述
    begin
        out_result := -1001;
        out_msg := '根据钱包类型确定异常账科目';

        if prmwallettype = 1
        then
            n_acccode := 201; --电子钱包消费
        elsif prmwallettype = 2
        then
            n_acccode := 202; --月票消费
        elsif prmwallettype = 3
        then
            n_acccode := 203; --次卡消费
        else
            n_acccode := 0;
        end if;

        select nvl (max (a.accdscrp), '未知')
          into v_accdscrp
          from base_acc_type a
         where a.acccode = n_acccode;

        out_result := -1002;
        out_msg := '异常账入库';

        proc_insertbadrec (prmcustomerid,
                           prmcardno,
                           prmcardsn,
                           prmopcount,
                           prmcardkind,
                           prmcardtype,
                           prmopdt,
                           prmsumelectrfare,
                           prmoddfare,
                           prmopfare,
                           prmdiscountfare,
                           n_acccode,
                           v_accdscrp,
                           prmbusid,
                           prmposcode,
                           prmsamcardno,
                           prmtac,
                           prmempid,
                           prmbuslineid,
                           prmlinedeptcode,
                           prmdealtype,
                           prmtradetype,
                           prmcollectdt,
                           prmtotalrecno,
                           prmtraderecno,
                           prmsamtradeno,
                           prmwallettype,
                           prmbadrectype,
                           --cpu卡加入字段------------
                           prmcardasn,
                           prmtradecitycode,
                           prmownercitycode,
                           prmislocaltrade,
                           prmmaincardtype,
                           prmassocardtype,
                           prmcardversion,
                           prmtradekind,
                           prmtestflag,
                           prmcollectpoint,
                           prmoperatorpoint,
                           prmcustunitcode,
                           prmrecordtype,
                           prmflag,
                           prmtposcode,
                           prmstopid,
                           prmestopid,
                           prmbadid,
                           out_result,
                           out_msg);
        return;
    exception
        when others
        then
            out_result := -10001;
            out_msg :=
                   '记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
    end;

    --次卡钱包消费记录上传
    procedure proc_uploadvicecardconsumerec (
        --客户基本信息-------------
        prmcustomerid      in     number, --客户编号
        prmcardno          in     number, --卡号
        prmcardsn          in     number, --持卡序号
        prmcardkind        in     number, --卡种类 1：m1卡 2：cpu卡
        prmcardtype        in     number, --卡类型 普通卡 月卡 老年卡等
        prmopdt            in     varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
        prmopcount         in     number, --消费操作计数，根据钱包判断
        prmisnullopcount   in     number, --消费操作计数是否赋值 0已赋值 1未赋值
        prmacccode         in     number, --消费科目类型
        prmaccdesc         in     varchar2, --科目描述
        --客户金额信息-------------
        prmsumvicefare     in     number, --卡总额
        prmoddfare         in     number, --消费后余额，根据钱包类型判断钱包
        prmopfare          in     number, --消费金额，根据钱包类型判断钱包
        prmdiscountfare    in out number, -- 打折金额（如果为清零记录，此字段代表每月充值金额）
        --终端交易信息-------------
        prmbusid           in     number, --车辆id
        prmposcode         in     number, --设备唯一运营编号
        prmsamcardno       in     number, --pasm卡卡号
        prmtac             in     number, --tac验证码
        prmdriverid        in     number, --司机编号
        prmbuslineid       in     number, --线路编号
        prmdeptcode        in     varchar2, --线路所属部门
        prmdealtype        in     number, --记录类型，用于确定科目
        prmtradetype       in     number, --交易应用类型
        prmcollectdt       in     varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
        prmtotalrecno      in     number,
        --总交易流水号包含交易流水和日志流水
        prmtraderecno      in     number, --终端交易流水号
        prmsamtradeno      in     number, --pasm卡交易流水号
        --cpu卡加入字段------------
        prmcardasn         in     number, --卡应用序列号
        prmtradecitycode   in     varchar2, --交易地城市代码
        prmownercitycode   in     varchar2, --所属地城市代码
        prmmaincardtype    in     number, --主卡类型
        prmassocardtype    in     number, --子卡类型
        prmcardversion     in     number, --卡内版本
        prmtradekind       in     number, --交易性质
        prmtestflag        in     number, --测试标记
        prmcollectpoint    in     varchar2, --采集点编号
        prmoperatorpoint   in     varchar2, --营运单位编号
        prmcustunitcode    in     varchar2, --客户代码
        prmiscurcard       in     number, --1当前卡  0非当前卡
        prmisnewconsume    in     number, --1新消费    0老消费
        --坏账处理---
        prmbadid           in     number, --处理坏账时，坏账流水号，正常消费记录上传为0
        --返回值-------------------
        out_result            out number,
        out_msg               out varchar2)
    as
        /*
        ---------------------------------------------------------------------------
        --存储过程：proc_uploadvicecardconsumerec
        --过程类型：内部过程
        --作　　者：周晓娜
        --时　　间：2011-07-22
        --说　　明：次卡钱包消费，次卡冲零消费记录上传处理过程
        --应用场景：处理次卡钱包消费，次卡冲零消费时，此过程为内部过程，正常流程直接在内部提交
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：记录上传成功，帐目统计成功，其他失败
        --200:入坏账成功
        --其他异常
        --------------------------------------------------------------------------
        */

        --变量定义
        i_count            integer; --计数
        n_acccode          number; --消费科目
        v_accdesc          varchar2 (50);
        n_busid            number; --车辆id
        n_lineid           number; --车辆对应的线路编号
        v_dptcode          varchar2 (20); --线路所属部门
        n_cashaccfc        number; --形成消费明细的原始流水号

        d_opdt             date; --交易时间年月日
        d_month            date; --清零开始月份
        d_monthend         date; --清零结束月份

        custom_exception   exception; --自定义错误
    begin
        i_count := 0;
        d_opdt := trunc (to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), 'mm');
        d_month := trunc (to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), 'mm');
        d_monthend := trunc (to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), 'mm');
        n_busid := prmbusid;
        n_lineid := prmbuslineid;
        v_dptcode := prmdeptcode;
        n_acccode := prmacccode;
        v_accdesc := prmaccdesc;

        -----------------------------------------充值未决处理----------------------------------------------
        out_result := -2002;
        out_msg := '充值未决处理失败';

        select count (*)
          into i_count
          from rec_vicecard_cash_plan a
         where     a.customerid = prmcustomerid
               and a.cardsn = prmcardsn
               and a.opdt < sysdate - (5 / 24 / 60)
               and a.cardno = prmcardno
               and a.customerunitcode = prmcustunitcode;

        --存在未决时才进行未决的处理
        if (i_count = 1)
        then
            proc_handdeal_viceunsetcash (prmcardno,
                                         prmcardsn,
                                         prmcustomerid,
                                         prmmaincardtype,
                                         prmopcount,
                                         prmisnullopcount,
                                         prmopdt,
                                         prmoddfare,
                                         prmopfare,
                                         prmcustunitcode,
                                         out_result,
                                         out_msg);

            --未决处理失败的时候直接回滚，否则继续执行同步提交
            if out_result <> 100
            then
                rollback;
            end if;
        end if;

        ------------------------------------冲零记录修改账本信息--------------------------------------
        if prmtradetype = 9
        then
            --获取清零的月份
            --1、根据清零的金额和单位充值的金额对比，获取冲零的月份个数
            --2、根据当前清零的交易时间，向前面推算清零的月份
            select ceil (prmopfare / prmdiscountfare) into i_count from dual;

            --清零起始月份
            select add_months (d_opdt, -i_count) into d_month from dual;

            --清零最后月份
            select add_months (d_opdt, -1) into d_monthend from dual;

            out_result := -2008;
            out_msg := '冲零记录修改账本信息！';

            --如更新增账本中次卡冲零累计值
            update base_customers
               set sumvicerushfare = sumvicerushfare + prmopfare
             where     customerid = prmcustomerid
                   and cardno = prmcardno
                   and customerunitcode = prmcustunitcode;
        end if;

        -----------------------------------------当前卡处理账目信息----------------------------------------
        if prmtradetype <> 9 and prmiscurcard = 1
        then
            out_result := -2010;
            out_msg := '当前卡账务处理失败';

            if prmisnewconsume = 0 --老消费
            then
                update base_customers a
                   set a.numberoddfareacc = numberoddfareacc - prmopfare
                 where     customerid = prmcustomerid
                       and asn = prmcardno
                       and customerunitcode = prmcustunitcode;
            end if;

            if prmisnewconsume = 1 --新消费
            then
                update base_customers a
                   set a.numberoddfare = prmoddfare,
                       a.numberopcount = prmopcount,
                       a.numberoddfareacc = numberoddfareacc - prmopfare
                 where     customerid = prmcustomerid
                       and asn = prmcardno
                       and customerunitcode = prmcustunitcode;
            end if;
        end if;

        --记录入库--------------------------------------------------------------------
        out_result := -2011;
        out_msg :=
               'customerid:'
            || prmcustomerid
            || ',cardno:'
            || prmcardno
            || ',cardsn:'
            || prmcardsn
            || ',opcount:'
            || prmopcount
            || ',入rec_vicecard_consume';

        if prmtradetype = 9
        then
            --获取交易记录流水号
            select seq_rec_poscode_reset.nextval into n_cashaccfc from dual;

            out_result := -2012;
            out_msg := '形成清零记录失败！';

            --形成终端清零记录
            insert into rec_poscode_reset (cstaccfc,
                                           customerid,
                                           cardno,
                                           cardtype,
                                           opdt,
                                           rushfare,
                                           hangdatemonth,
                                           acccode,
                                           dscrp,
                                           cardsn,
                                           opcount,
                                           dealtype,
                                           collectdt,
                                           uploaddate,
                                           busid,
                                           driverid,
                                           poscode,
                                           samcardno,
                                           cardkind,
                                           traderecno,
                                           tac,
                                           samtradeno,
                                           buslineid,
                                           totalrecno,
                                           tradetype,
                                           linedept,
                                           operatorpoint,
                                           collectpoint,
                                           customerunitcode,
                                           wallettype,
                                           monsaveopfare,
                                           hangdatemonthend,
                                           oddfare)
                 values (n_cashaccfc,
                         prmcustomerid,
                         prmcardno,
                         prmcardtype,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                         prmopfare,
                         d_month,
                         n_acccode,
                         v_accdesc,
                         prmcardsn,
                         prmopcount,
                         prmdealtype,
                         to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                         sysdate,
                         prmbusid,
                         prmdriverid,
                         prmposcode,
                         prmsamcardno,
                         prmcardkind,
                         prmtraderecno,
                         prmtac,
                         prmsamtradeno,
                         prmbuslineid,
                         prmtotalrecno,
                         prmtradetype,
                         prmdeptcode,
                         prmoperatorpoint,
                         prmcollectpoint,
                         prmcustunitcode,
                         3,
                         prmdiscountfare, --每月充值金额
                         d_monthend,
                         prmoddfare);

            prmdiscountfare := 0; --冲零记录中打折金额为0
        else
            --获取消费记录流水号
            select seq_rec_vicecard_consume.nextval
              into n_cashaccfc
              from dual;

            out_result := -2012;
            out_msg := '形成次卡钱包记录失败！';

            --形成次卡钱包消费记录
            insert into rec_vicecard_consume (cstaccfc,
                                              customerid,
                                              cardno,
                                              cardtype,
                                              opdt,
                                              sumviceaddfare,
                                              viceonoddfare,
                                              viceonopfare,
                                              acccode,
                                              dscrp,
                                              cardsn,
                                              opcount,
                                              dealtype,
                                              collectdt,
                                              uploaddate,
                                              busid,
                                              driverid,
                                              poscode,
                                              samcardno,
                                              cardkind,
                                              traderecno,
                                              tac,
                                              samtradeno,
                                              buslineid,
                                              totalrecno,
                                              discount,
                                              tradetype,
                                              linedept,
                                              cardasn,
                                              tradecitycode,
                                              ownercitycode,
                                              maincardtype,
                                              assocardtype,
                                              cardversion,
                                              tradekind,
                                              testflag,
                                              collectpoint,
                                              operatorpoint,
                                              customerunitcode)
                 values (n_cashaccfc,
                         prmcustomerid,
                         prmcardno,
                         prmcardtype,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                         prmsumvicefare,
                         prmoddfare,
                         prmopfare,
                         n_acccode,
                         v_accdesc,
                         prmcardsn,
                         prmopcount,
                         prmdealtype,
                         to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                         sysdate,
                         n_busid,
                         prmdriverid,
                         prmposcode,
                         prmsamcardno,
                         prmcardkind,
                         prmtraderecno,
                         prmtac,
                         prmsamtradeno,
                         n_lineid,
                         prmtotalrecno,
                         prmdiscountfare,
                         prmtradetype,
                         v_dptcode,
                         prmcardasn,
                         prmtradecitycode,
                         prmownercitycode,
                         prmmaincardtype,
                         prmassocardtype,
                         prmcardversion,
                         prmtradekind,
                         prmtestflag,
                         prmcollectpoint,
                         prmoperatorpoint,
                         prmcustunitcode);
        end if;

        out_result := -2013;
        out_msg := '消费记录即时统计失败';
        --及时统计
        pkg_st_payment.proc_custdataaccount_online (prmopdt,
                                                    prmopfare,
                                                    n_acccode,
                                                    prmdiscountfare,
                                                    prmcardkind,
                                                    prmcardtype,
                                                    prmdriverid,
                                                    prmposcode,
                                                    prmsamcardno,
                                                    n_lineid,
                                                    v_dptcode,
                                                    n_busid,
                                                    3, --钱包类型 次卡钱包
                                                    0, --0正常 1回滚统计操作
                                                    prmcustunitcode,
                                                    out_msg,
                                                    out_result,
                                                    prmmaincardtype); --2017-12-26 新增主卡类型

        if (out_result <> 100)
        then
            out_result := out_result;
            out_msg := '记录上传统计失败,' || out_msg;
            rollback;
            return;
        end if;

        --如果是处理坏账的记录，修改坏账的最终处理状态为已入正常账
        if prmbadid <> 0
        then
            update rec_consumeacc_bad
               set status = 1
             where cstaccfc = prmbadid;
        end if;

        out_msg := '记录上传成功';
        commit;
        return;
    exception
        when custom_exception -----先处理自定义异常
        then
            rollback;

            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;

            out_msg := out_msg;
        when others
        then
            rollback;
            out_result := -1;
            out_msg :=
                   '记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
    end;

    procedure proc_uploadthirdcardconsumerec ( --客户基本信息-------------
        prmthirdcardno     in     varchar2,
        prmwallettype      in     number,
        prmcardkind        in     number, --卡种类 1：m1卡 2：cpu卡
        prmcardtype        in     number, --卡类型 普通卡 月卡 老年卡等
        prmopdt            in     varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
        prmopcount         in     number, --消费操作计数，根据钱包判断
        --客户金额信息-------------
        prmsumelectrfare   in out number, --卡总额
        prmoddfare         in out number, --消费后余额，根据钱包类型判断钱包
        prmopfare          in out number, --消费金额，根据钱包类型判断钱包
        prmdiscountfare    in out number, --打折金额
        --终端交易信息-------------
        prmbusid           in out number, --车辆id
        prmposcode         in     number, --设备唯一运营编号
        prmsamcardno       in     number, --pasm卡卡号
        prmtac             in     number, --tac验证码
        prmdriverid        in     number, --司机编号
        prmbuslineid       in out number, --线路编号
        prmdeptcode        in out varchar2, --线路所属部门
        prmdealtype        in     number, --记录类型，用于确定科目
        prmtradetype       in     number, --交易应用类型
        prmcollectdt       in     varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
        prmtotalrecno      in     number,
        --总交易流水号包含交易流水和日志流水
        prmtraderecno      in     number, --终端交易流水号
        prmsamtradeno      in     number, --pasm卡交易流水号
        --cpu卡加入字段------------
        prmcardasn         in     number, --卡应用序列号
        prmtradecitycode   in     varchar2, --交易地城市代码
        prmownercitycode   in     varchar2, --所属地城市代码
        prmmaincardtype    in     number, --主卡类型
        prmassocardtype    in     number, --子卡类型
        prmcardversion     in     number, --卡内版本
        prmtradekind       in     number, --交易性质
        prmtestflag        in     number, --测试标记
        prmcollectpoint    in     varchar2, --采集点编号
        prmoperatorpoint   in     varchar2, --营运单位编号
        prmmerchantcode    in     varchar2, --商户编号
        prmuniontermid     in     varchar2, --银联终端编号
        prmunionbatchno    in     varchar2, --批次号
        prmunionappkey     in     varchar2, --应用密文
        prmbackup          in     varchar2, --预留字段
        prmcustunitcode    in     varchar2,
        --增加分段计费内容
        prmisuseflag       in     number, --统一票价启用标示，0 不启用 1 启用
        prmflag            in     number, --逃票标记 1-上车记录 2-下车记录 3-逃票记录
        prmtposcode        in     number, --逃票设备编号
        prmstopid          in     number, --上车站点编号
        prmestopid         in     number, --下车站点编号
        --坏账处理---
        prmbadid           in     number, --处理坏账时，坏账流水号，正常消费记录上传为0
        --返回值-------------------
        out_result            out number,
        out_msg               out varchar2)
    as
        i_count              integer; --计数
        n_acccode   constant number := 204; --电子现金消费科目
        i_factor             number; --最小货币单位和通用货币单位之间的转换因子
        v_accdesc            varchar2 (50);
        i_dptareaid          integer; --线路营业部门所属分区
        i_cardareaid         integer; --客户卡所属分区
        i_badrectype         integer; --坏账类型
        n_poscode            number; --临时终端编号
        n_psamno             number; --临时psam卡号

        i_unset_cardsn       integer;
        v_merchantcode       varchar2 (20); --商户编号
        v_uniontermid        varchar2 (10); --银联终端编号
        d_opdt               date;
        v_custunitcode       varchar2 (12); --客户代码
        v_termthirdno        number; --银联对账终端序列号

        t_sumelectrfare      number (10, 2); --卡总额
        t_oddfare            number (10, 2); --消费后余额，根据钱包类型判断钱包
        t_opfare             number (10, 2); --消费金额，根据钱包类型判断钱包
        t_discountfare       number (10, 2); --打折金额

        custom_exception     exception; --自定义错误
    /*
    --------------------------------------------------------------------------
    --修改标记：周晓娜 20131029
    --修改说明： 1、增加分段计费业务处理
                 2、修改坏账的处理，在此过程中执行判断条件不通过的记录，全部入
                    rec_consumeacc_bad 表，rec_thirdcard_unsettled表只存对账之后
                    不通过的记录
    --------------------------------------------------------------------------
    */

    begin
        out_result := -1000;
        out_msg := '开始上传第三方系统发卡消费记录异常';
        i_dptareaid := 0;
        i_cardareaid := 0;
        i_factor := 100;
        d_opdt := to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss');
        i_unset_cardsn := prmmaincardtype;
        v_merchantcode := prmmerchantcode; --银联商户编号
        v_uniontermid := prmuniontermid; --银联终端编号

        t_sumelectrfare := prmsumelectrfare;
        t_oddfare := prmoddfare;
        t_opfare := prmopfare;
        t_discountfare := prmdiscountfare;

        ------------------------------获取转换因子----------------------------------------------
        --获取最小货币单位和通用货币单位间的转换因子
        out_result := -1001;
        out_msg := '获取货币转换因子失败！';

        select nvl (max (a.paramvalue), -1)
          into i_factor
          from base_param a
         where a.paramname = 'hexadecimal' and a.paramgroupid = 1002;

        if (i_factor < 0)
        then
            out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
            out_msg := '获取转换因子失败！factor：' || i_factor;

            return;
        end if;

        -----------------------------判断科目及科目描述是否正确------------------------------------
        out_result := -1002;
        out_msg := '电子现金消费科目不存在！';

        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = n_acccode;

        if (i_count <> 1)
        then
            i_badrectype := 19;
            goto insert_err_third_consumrec;
        end if;

        out_result := -1002;
        out_msg := '电子钱包消费科目描述不正确';

        select nvl (max (a.accdscrp), '未知')
          into v_accdesc
          from base_acc_type a
         where a.acccode = n_acccode;

        if (v_accdesc = '未知')
        then
            i_badrectype := 25; --取交易科目描述信息失败！
            goto insert_err_third_consumrec;
        end if;

        --------------------------------判断账号长度是否正确-----------------------------------
        out_result := -1003;
        out_msg := 'thirdcardno长度必须在13到19之间！';

        select length (prmthirdcardno) into i_count from dual;

        if (i_count < 13 or i_count > 19)
        then
            i_badrectype := 20;
            goto insert_err_third_consumrec;
        end if;

        ------------------------本地消费验证psam卡信息是否正确-------------------------------------
        out_result := -1004;
        out_msg := '本地消费验证psam卡信息失败！';

        proc_validatesamcard (prmsamcardno,
                              prmcustunitcode,
                              i_badrectype,
                              prmopdt,
                              out_result,
                              out_msg);

        if (out_result <> 100)
        then
            goto insert_err_third_consumrec;
        end if;

        ---------------分段计费记录 坚持是否是逃票记录 如果逃票校验逃票车辆的合法性-----------------
        out_result := -1005;
        out_msg := '判断分段计费记录';

        n_poscode := prmposcode;
        n_psamno := prmsamcardno;

        if prmisuseflag = 1
        then
            -------检查分段计费相关内容--逃跑记录检查逃票终端是否存在
            --逃票终端换成车辆编号，检查车辆编号是否存在
            if prmflag = 3
            then
                out_msg :=
                       '判断分段计费记录：'
                    || prmisuseflag
                    || '-'
                    || prmtposcode;

                select count (*)
                  into i_count
                  from base_bus a
                 where     a.busno = prmtposcode
                       and a.customerunitcode = prmcustunitcode
                       and a.isdelete = 0;

                if (i_count != 1)
                then
                    --车辆信息不存在
                    i_badrectype := 10;
                    goto insert_err_third_consumrec;
                end if;

                --获取逃票车辆对应的终端编号
                get_bus_poscode (prmtposcode, --逃票车辆
                                 prmcustunitcode,
                                 n_poscode,
                                 out_result,
                                 out_msg);

                if out_result != 100
                then
                    i_badrectype := 11;
                    goto insert_err_third_consumrec;
                end if;
            end if;
        end if;

        -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
        out_result := -1006;
        out_msg := '验证终端,车辆，线路，部门是否正确';
        proc_validatetermbusline (n_poscode,
                                  prmcustunitcode,
                                  prmbusid,
                                  prmbuslineid,
                                  prmdeptcode,
                                  i_badrectype,
                                  out_result,
                                  out_msg);

        if (out_result <> 100)
        then
            goto insert_err_third_consumrec;
        end if;

        ---------------------------------转换金额------------------------------------

        prmsumelectrfare := prmsumelectrfare / i_factor;
        prmoddfare := prmoddfare / i_factor;
        prmopfare := prmopfare / i_factor;
        prmdiscountfare := prmdiscountfare / i_factor;

        ---------------------------------消费记录判重------------------------------------------
        out_result := -1007;
        out_msg := '上传消费记录是否重复！';

        select count (*)
          into i_count
          from rec_thirdcard_consume a
         where     a.thirdcardno = prmthirdcardno
               and a.opcount = prmopcount
               and a.opdt = to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss') --为解决保号换卡的情况，索引中添加此字段
               and a.customerunitcode = prmcustunitcode;

        if i_count > 0
        then
            i_badrectype := 3;
            goto insert_err_third_consumrec;
        end if;

        ---------------------------------从平台重新获取银联终端的编号-----------------------------
        --从库中读取银联对账序列号。
        select unionposcode, unionmerchantcode, termthridseqno
          into v_uniontermid, v_merchantcode, v_termthirdno
          from base_term_union
         where poscode = n_poscode and customerunitcode = prmcustunitcode;

        if v_termthirdno >= 999999
        then
            v_termthirdno := 1;
        else
            v_termthirdno := v_termthirdno + 1;
        end if;

        --------------------------------------消费记录入库-------------------------------------------
        out_result := -1008;
        out_msg := '记录入库失败';

        --形成电子钱包消费记录
        insert into rec_thirdcard_consume (thirdcardno,
                                           cardtype,
                                           opdt,
                                           sumelectraddfare,
                                           electronoddfare,
                                           electronopfare,
                                           acccode,
                                           dscrp,
                                           opcount,
                                           dealtype,
                                           collectdt,
                                           uploaddate,
                                           busid,
                                           driverid,
                                           poscode,
                                           samcardno,
                                           cardkind,
                                           traderecno,
                                           tac,
                                           samtradeno,
                                           buslineid,
                                           totalrecno,
                                           discount,
                                           tradetype,
                                           linedept,
                                           tradecitycode,
                                           ownercitycode,
                                           maincardtype,
                                           assocardtype,
                                           cardversion,
                                           tradekind,
                                           testflag,
                                           collectpoint,
                                           operatorpoint,
                                           cardownbusiness,
                                           wallettype,
                                           merchantcode,
                                           uniontermid,
                                           localcstaccfc,
                                           batchno,
                                           unionbatchno,
                                           unionappkey,
                                           extentvalue,
                                           recordtype,
                                           flag,
                                           freeposcode,
                                           upstopid,
                                           downstopid,
                                           customerunitcode,
                                           termthridseqno)
             values (prmthirdcardno,
                     prmcardtype,
                     d_opdt,
                     prmsumelectrfare,
                     prmoddfare,
                     prmopfare,
                     n_acccode,
                     v_accdesc,
                     prmopcount,
                     prmdealtype,
                     to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                     sysdate,
                     prmbusid,
                     prmdriverid,
                     n_poscode,
                     n_psamno,
                     prmcardkind,
                     prmtraderecno,
                     prmtac,
                     prmsamtradeno,
                     prmbuslineid,
                     prmtotalrecno,
                     prmdiscountfare,
                     prmtradetype,
                     prmdeptcode,
                     prmtradecitycode,
                     prmownercitycode,
                     prmmaincardtype,
                     prmassocardtype,
                     prmcardversion,
                     prmtradekind,
                     prmtestflag,
                     prmcollectpoint,
                     prmoperatorpoint,
                     prmmaincardtype,
                     prmwallettype,
                     v_merchantcode,
                     v_uniontermid,
                     0,
                     0,
                     prmunionbatchno,
                     prmunionappkey,
                     prmbackup,
                     prmisuseflag,
                     prmflag,
                     prmtposcode,
                     prmstopid,
                     prmestopid,
                     prmcustunitcode,
                     v_termthirdno);

        --更新银联对账序列号的最新值
        update base_term_union
           set termthridseqno = v_termthirdno
         where poscode = n_poscode and customerunitcode = prmcustunitcode;

        --如果是处理坏账的记录，修改坏账的最终处理状态为已入正常账
        if prmbadid <> 0
        then
            update rec_consumeacc_bad
               set status = 1
             where cstaccfc = prmbadid;
        end if;

        commit;
        out_result := 100;
        out_msg := '记录上传成功';
        return;

       -----------------------------------------异常消费入坏账表------------------------------------
       <<insert_err_third_consumrec>>
        out_result := -1009;
        out_msg := '入坏账表rec_consumeacc_bad';

        select nvl (customerunitcode, '08600000000')
          into v_custunitcode
          from base_term_union
         where     poscode = n_poscode
               and unionposcode = prmuniontermid
               and unionmerchantcode = prmmerchantcode;

        proc_insertbadrec (0,
                           prmthirdcardno,
                           0,
                           prmopcount,
                           prmcardkind,
                           prmcardtype,
                           prmopdt,
                           t_sumelectrfare,
                           t_oddfare,
                           t_opfare,
                           t_discountfare,
                           n_acccode,
                           v_accdesc,
                           prmbusid,
                           n_poscode,
                           n_psamno,
                           prmtac,
                           prmdriverid,
                           prmbuslineid,
                           prmdeptcode,
                           prmdealtype,
                           prmtradetype,
                           prmcollectdt,
                           prmtotalrecno,
                           prmtraderecno,
                           prmsamtradeno,
                           1, --prmwallettype 1表示电子钱包 2：月票钱包
                           i_badrectype,
                           --cpu卡加入字段------------
                           prmcardasn,
                           prmtradecitycode,
                           prmownercitycode,
                           1, --1 本地消费
                           prmmaincardtype,
                           prmassocardtype,
                           prmcardversion,
                           prmtradekind,
                           prmtestflag,
                           prmcollectpoint,
                           prmoperatorpoint,
                           v_custunitcode,
                           1,
                           prmflag,
                           prmtposcode,
                           prmstopid,
                           prmestopid,
                           prmbadid,
                           out_result,
                           out_msg);
        return;
    exception
        when custom_exception
        -----先处理自定义异常
        then
            rollback;

            --统一异常，为后续版本在异常部分增加某种异常处理，如报警，记录日志等功能
            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;

            out_msg := out_msg;
        when others
        then
            rollback;
            out_result := -1;
            out_msg :=
                   to_char (prmmaincardtype)
                || '_main__记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
    end;

    --分段计费接口

    procedure proc_uploadsubchargeconsumerec ( --客户基本信息-------------
        prmcustomerid      in out number, --客户编号
        prmcardno          in     number, --卡号
        prmcardsn          in out number, --持卡序号
        prmcardkind        in     number, --卡种类 1：m1卡 2：cpu卡
        prmcardtype        in     number, --卡类型 普通卡 月卡 老年卡等
        prmopdt            in     varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
        prmopcount         in     number, --消费操作计数，根据钱包判断
        prmisnullopcount   in     number, --消费操作计数是否赋值 0已赋值 1未赋值
        --客户金额信息-------------
        prmsumelectrfare   in out number, --卡总额
        prmoddfare         in out number, --消费后余额，根据钱包类型判断钱包
        prmopfare          in out number, --消费金额，根据钱包类型判断钱包
        prmdiscountfare    in out number, --打折金额
        --终端交易信息-------------
        prmbusid           in out number, --车辆id
        prmposcode         in     number, --设备唯一运营编号
        prmsamcardno       in     number, --pasm卡卡号
        prmtac             in     number, --tac验证码
        prmdriverid        in     number, --司机编号
        prmbuslineid       in out number, --线路编号
        prmdeptcode        in out varchar2, --线路所属部门
        prmdealtype        in     number, --记录类型，用于确定科目
        prmtradetype       in     number, --交易应用类型
        prmcollectdt       in     varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
        prmtotalrecno      in     number, --总交易流水号包含交易流水和日志流水
        prmtraderecno      in     number, --终端交易流水号
        prmsamtradeno      in     number, --pasm卡交易流水号
        --cpu卡加入字段------------
        prmcardasn         in     number, --卡应用序列号
        prmtradecitycode   in     varchar2, --交易地城市代码
        prmownercitycode   in     varchar2, --所属地城市代码
        prmmaincardtype    in     number, --主卡类型
        prmassocardtype    in     number, --子卡类型
        prmcardversion     in     number, --卡内版本
        prmtradekind       in     number, --交易性质
        prmtestflag        in     number, --测试标记
        prmcollectpoint    in     varchar2, --采集点编号
        prmoperatorpoint   in     varchar2, --营运单位编号
        --增加分段计费内容
        prmflag            in     number, --逃票标记 0-无逃票 1-逃票记录
        prmtposcode        in     number, --逃票设备编号
        prmstopid          in     number, --上车站点编号
        prmestopid         in     number, --下车站点编号
        prmcustunitcode    in     varchar2, --客户代码
        --坏账处理---
        prmbadid           in     number, --处理坏账时，坏账流水号，正常消费记录上传为0
        --返回值-------------------
        out_result            out number,
        out_msg               out varchar2)
    as
        /*
        ---------------------------------------------------------------------------
        --存储过程：proc_uploadsubchargeconsumerec
        --过程类型：内部过程
        --作　　者：周晓娜
        --时　　间：2012-03-27
        --说　　明：电子钱包消费记录上传处理过程（分段计费记录）
        --应用场景：处理电子钱包消费时，此过程为内部过程，不包含提交和回滚，由外层过程判断结果
        --后决定是否提交和回滚，通常成功要提交，失败要回滚
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：记录上传成功，帐目统计成功，其他失败
        --200:入坏账成功
        --其他异常
        --------------------------------------------------------------------------
        */

        --变量定义
        i_count              integer; --计数
        n_acccode   constant number := 201; --电子钱包消费科目
        v_accdesc            varchar2 (50);
        i_badrectype         integer; --坏账类型
        n_cashaccfc          number; --形成消费明细的原始流水号

        t_sumelectrfare      number (10, 2);
        t_oddfare            number (10, 2);
        t_opfare             number (10, 2);
        t_discountfare       number (10, 2);

        i_factor             number; --最小货币单位和通用货币单位之间的转换因子
        n_chargetype         number; --计费方式
        n_tposcode           number; --逃票终端编号
        n_psamno             number; --临时终端psam卡号

        n_iscurcard          number; --1当前卡  0非当前卡
        n_isnewconsume       number; --1新消费    0老消费
        custom_exception     exception; --自定义错误
    begin
        t_sumelectrfare := prmsumelectrfare;
        t_oddfare := prmoddfare;
        t_opfare := prmopfare;
        t_discountfare := prmdiscountfare;
        i_count := 0;
        n_chargetype := 0;
        n_iscurcard := 0;
        n_isnewconsume := 0;

        --------------------------------检查是否正在数据结算----------------------------
        out_result := -1001;
        out_msg := '检查当前是否正在结算';
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_msg := '判断账目结算状态异常，' || out_msg;
            out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
            return;
        end if;

        ------------------------先验证客户信息是否合法-----------------------------------
        out_result := -1002;
        out_msg := '验证客户信息是否合法';

        select count (a.id)
          into i_count
          from base_legal_person a
         where a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
            out_msg :=
                   '客户法人信息不合法！customerunitcode：'
                || to_char (prmcustunitcode);

            return;
        end if;

        -----------------------------获取转换因子----------------------------------------
        --获取最小货币单位和通用货币单位间的转换因子
        out_result := -1003;
        out_msg := '获取货币转换因子失败！';

        select nvl (max (a.paramvalue), -1)
          into i_factor
          from base_param a
         where a.paramname = 'hexadecimal' and a.paramgroupid = 1002;

        if (i_factor < 0)
        then
            out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
            out_msg := '获取转换因子失败！factor：' || i_factor;

            return;
        end if;

        ------------------获取最小货币单位和通用货币单位间的转换因子----------------------

        prmsumelectrfare := prmsumelectrfare / i_factor;
        prmoddfare := prmoddfare / i_factor;
        prmopfare := prmopfare / i_factor;
        prmdiscountfare := prmdiscountfare / i_factor;

        --------------------------检查科目,科目描述是否存在--------------------------------------
        out_result := -1006;
        out_msg := '电子钱包消费科目不存在';

        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = n_acccode;

        if (i_count <> 1)
        then
            i_badrectype := 26; --设置的消费科目不存在
            goto insert_err_consumrec;
        end if;

        out_result := -1007;
        out_msg := '电子钱包消费科目描述不正确';

        select nvl (max (a.accdscrp), '未知')
          into v_accdesc
          from base_acc_type a
         where a.acccode = n_acccode;

        if (v_accdesc = '未知')
        then
            i_badrectype := 25; --取交易科目描述信息失败！
            goto insert_err_consumrec;
        end if;

        ------------------------检查记录是否重复上传-------------------------------------
        out_result := -1005;
        out_msg := '检查记录是否重复上传';

        select count (*)
          into i_count
          from rec_electtron_consume a
         where     a.customerid = prmcustomerid
               and a.cardsn = prmcardsn
               and a.opcount = prmopcount
               and a.cardasn = prmcardasn
               and a.wallettype = 1
               and a.traderecno = prmtraderecno --为解决老卡操作计数终端部进行赋值，秒级消费的问题
               and a.customerunitcode = prmcustunitcode;

        if i_count > 0
        then
            out_result := -1005;
            out_msg := '重复记录';
            i_badrectype := 3;
            goto insert_err_consumrec;
        end if;

        ------------------------本地消费验证psam卡信息是否正确-------------------------------------
        out_result := -1008;
        out_msg := '本地消费验证psam卡信息失败！';
        proc_validatesamcard (prmsamcardno,
                              prmcustunitcode,
                              i_badrectype,
                              prmopdt,
                              out_result,
                              out_msg);

        if (out_result <> 100)
        then
            goto insert_err_consumrec;
        end if;

        n_tposcode := prmposcode;
        n_psamno := prmsamcardno;

        ------------------检查分段计费相关内容--逃跑记录检查逃票终端是否存在-------------------------
        --逃票终端换成车辆编号，检查车辆编号是否存在
        if prmflag = 1
        then
            select count (*)
              into i_count
              from base_bus a
             where     a.busno = prmtposcode
                   and a.customerunitcode = prmcustunitcode
                   and a.isdelete = 0;

            if (i_count != 1)
            then
                --车辆信息不存在
                i_badrectype := 10;
                goto insert_err_consumrec;
            else
                --获取逃票车辆对应的终端编号
                get_bus_poscode (prmtposcode, --逃票车辆id
                                 prmcustunitcode,
                                 n_tposcode, --逃票车辆的终端编号
                                 out_result,
                                 out_msg);

                if out_result = 100
                then
                    n_psamno := n_tposcode; --如果逃票，则默认psam卡号和poscode一样
                    out_msg := '获取车辆绑定的终端信息成功，程序继续向下进行';
                else
                    i_badrectype := 10;
                    goto insert_err_consumrec;
                end if;
            end if;
        end if;

        -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
        out_result := -1009;
        out_msg := '验证终端,车辆，线路，部门是否正确';
        proc_validatetermbusline (n_tposcode,
                                  prmcustunitcode,
                                  prmbusid,
                                  prmbuslineid,
                                  prmdeptcode,
                                  i_badrectype,
                                  out_result,
                                  out_msg);

        if (out_result <> 100)
        then
            goto insert_err_consumrec;
        end if;

        -------------------------------账号信息验证和取值----------------------------------
        out_result := -1010;
        out_msg := '获取账户信息失败';
        proc_get_customer (prmcardno,
                           prmcardsn,
                           prmcustomerid,
                           prmopdt,
                           prmcustunitcode,
                           prmopcount,
                           1,
                           i_badrectype,
                           prmmaincardtype,
                           n_iscurcard,
                           n_isnewconsume,
                           out_result,
                           out_msg);

        if (out_result <> 100)
        then
            goto insert_err_consumrec;
        end if;

        ------------------------------钱包未决处理-------------------------------------------
        out_result := -1011;
        out_msg := '钱包未决处理失败';

        --处理充值未决信息
        select count (*)
          into i_count
          from rec_electtron_cash_plan a
         where     a.customerid = prmcustomerid
               and a.cardsn = prmcardsn
               and a.cardno = prmcardno
               and a.opdt < sysdate - (5 / 24 / 60)
               and a.customerunitcode = prmcustunitcode;

        --存在未决并且钱包类型为电子钱包时才进行未决的处理
        if (i_count = 1)
        then
            proc_handdeal_eleunsetcash (prmcardno,
                                        prmcardsn,
                                        prmcustomerid,
                                        prmmaincardtype,
                                        prmopcount,
                                        prmisnullopcount,
                                        prmopdt,
                                        prmoddfare,
                                        prmopfare,
                                        prmcustunitcode,
                                        out_result,
                                        out_msg);

            --未决处理失败的时候直接回滚，否则继续执行同步提交
            if out_result <> 100
            then
                rollback;
            end if;
        end if;

        ------------------------当前卡账户信息处理-------------------------------- -----
        if n_iscurcard = 1
        then
            out_msg := '当前卡账户信息处理失败';
            out_result := -1015;

            --更新系统账户余额
            if n_isnewconsume = 0
            then
                update base_customers a
                   set a.electroddfareacc = electroddfareacc - prmopfare
                 where     customerid = prmcustomerid
                       and a.cardno = prmcardno
                       and a.customerunitcode = prmcustunitcode;
            end if;

            --新消费，更新卡上当前余额和消费计数
            if n_isnewconsume = 1
            then
                update base_customers a
                   set a.electroddfare = prmoddfare,
                       a.electropcount = prmopcount,
                       a.electroddfareacc = electroddfareacc - prmopfare
                 where     customerid = prmcustomerid
                       and a.cardno = prmcardno
                       and a.customerunitcode = prmcustunitcode;
            end if;
        end if;

        ------------------------记录入库-----------------------------------------------

        out_result := -1016;
        out_msg :=
               'customerid:'
            || prmcustomerid
            || ',cardno:'
            || prmcardno
            || ',cardsn:'
            || prmcardsn
            || ',opcount:'
            || prmopcount
            || ',入rec_electtron_consume';

        --获取消费记录流水号
        select seq_rec_electtron_consume.nextval into n_cashaccfc from dual;

        --形成电子钱包消费记录
        insert into rec_electtron_consume (cstaccfc,
                                           customerid,
                                           cardno,
                                           cardtype,
                                           opdt,
                                           sumelectraddfare,
                                           electronoddfare,
                                           electronopfare,
                                           acccode,
                                           dscrp,
                                           cardsn,
                                           opcount,
                                           dealtype,
                                           collectdt,
                                           uploaddate,
                                           busid,
                                           driverid,
                                           poscode,
                                           samcardno,
                                           cardkind,
                                           traderecno,
                                           tac,
                                           samtradeno,
                                           buslineid,
                                           totalrecno,
                                           discount,
                                           tradetype,
                                           linedept,
                                           cardasn,
                                           tradecitycode,
                                           ownercitycode,
                                           maincardtype,
                                           assocardtype,
                                           cardversion,
                                           tradekind,
                                           testflag,
                                           collectpoint,
                                           operatorpoint,
                                           flag,
                                           fleeposcode,
                                           upstopid,
                                           downstopid,
                                           recordtype,
                                           customerunitcode)
             values (n_cashaccfc,
                     prmcustomerid,
                     prmcardno,
                     prmcardtype,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     prmsumelectrfare,
                     prmoddfare,
                     prmopfare,
                     n_acccode,
                     v_accdesc,
                     prmcardsn,
                     prmopcount,
                     prmdealtype,
                     to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                     sysdate,
                     prmbusid,
                     prmdriverid,
                     n_tposcode,
                     n_psamno,
                     prmcardkind,
                     prmtraderecno,
                     prmtac,
                     prmsamtradeno,
                     prmbuslineid,
                     prmtotalrecno,
                     prmdiscountfare,
                     prmtradetype,
                     prmdeptcode,
                     prmcardasn,
                     prmtradecitycode,
                     prmownercitycode,
                     prmmaincardtype,
                     prmassocardtype,
                     prmcardversion,
                     prmtradekind,
                     prmtestflag,
                     prmcollectpoint,
                     prmoperatorpoint,
                     prmflag,
                     prmtposcode,
                     prmstopid,
                     prmestopid,
                     1,
                     prmcustunitcode);

        if prmflag = 0 --正常消费记录
        then
            --消费记录即时统计
            pkg_st_payment.proc_custdataaccount_online (prmopdt,
                                                        prmopfare,
                                                        n_acccode,
                                                        prmdiscountfare,
                                                        prmcardkind,
                                                        prmcardtype,
                                                        prmdriverid,
                                                        n_tposcode,
                                                        n_psamno,
                                                        prmbuslineid,
                                                        prmdeptcode,
                                                        prmbusid,
                                                        -- i_cardareaid,
                                                        --i_dptareaid,
                                                        1, --钱包类型 电子钱包
                                                        0, --0正常 1回滚统计操作
                                                        prmcustunitcode,
                                                        out_msg,
                                                        out_result,
                                                        prmmaincardtype); --2017-12-26 新增主卡类型

            if (out_result <> 100)
            then
                rollback;
                out_msg :=
                       '记录上传统计失败！错误代码：'
                    || out_result
                    || ' 错误信息：'
                    || out_msg;
                out_result := 101;
                return;
            end if;

            --如果是处理坏账的记录，修改坏账的最终处理状态为已入正常账
            if prmbadid <> 0
            then
                update rec_consumeacc_bad
                   set status = 1
                 where cstaccfc = prmbadid;
            end if;

            commit;
            out_result := 100;
            out_msg := '记录上传成功';
            return;
        else
            --逃票消费记录即时统计（逃票记录统计到逃票车辆）
            pkg_st_payment.proc_custdataaccount_online (prmopdt,
                                                        prmopfare,
                                                        n_acccode,
                                                        prmdiscountfare,
                                                        prmcardkind,
                                                        prmcardtype,
                                                        prmdriverid,
                                                        n_tposcode, --逃票终端编号
                                                        n_psamno,
                                                        prmbuslineid,
                                                        prmdeptcode,
                                                        prmtposcode, --逃票车辆编号
                                                        -- i_cardareaid,
                                                        --i_dptareaid,
                                                        1, --钱包类型 电子钱包
                                                        0, --0正常 1回滚统计操作
                                                        prmcustunitcode,
                                                        out_msg,
                                                        out_result,
                                                        prmmaincardtype); --2017-12-26 新增主卡类型

            if (out_result <> 100)
            then
                rollback;
                out_msg :=
                       '记录上传统计失败！错误代码：'
                    || out_result
                    || ' 错误信息：'
                    || out_msg;
                out_result := 101;
                return;
            end if;

            --如果是处理坏账的记录，修改坏账的最终处理状态为已入正常账
            if prmbadid <> 0
            then
                update rec_consumeacc_bad
                   set status = 1
                 where cstaccfc = prmbadid;
            end if;

            commit;
            out_result := 100;
            out_msg := '记录上传成功';
            return;
        end if;

       -----------------------------------坏账记录入坏账表---------------------------------------
       --坏帐记录入坏帐表
       <<insert_err_consumrec>>
        out_result := -10;
        out_msg := '插入异常账失败！';
        proc_insertbadrec (prmcustomerid,
                           prmcardno,
                           prmcardsn,
                           prmopcount,
                           prmcardkind,
                           prmcardtype,
                           prmopdt,
                           t_sumelectrfare,
                           t_oddfare,
                           t_opfare,
                           t_discountfare,
                           n_acccode,
                           v_accdesc,
                           prmbusid,
                           n_tposcode,
                           n_psamno,
                           prmtac,
                           prmdriverid,
                           prmbuslineid,
                           prmdeptcode,
                           prmdealtype,
                           prmtradetype,
                           prmcollectdt,
                           prmtotalrecno,
                           prmtraderecno,
                           prmsamtradeno,
                           1, --prmwallettype 1表示电子钱包 2：月票钱包
                           i_badrectype,
                           --cpu卡加入字段------------
                           prmcardasn,
                           prmtradecitycode,
                           prmownercitycode,
                           1, --1 本地消费
                           prmmaincardtype,
                           prmassocardtype,
                           prmcardversion,
                           prmtradekind,
                           prmtestflag,
                           prmcollectpoint,
                           prmoperatorpoint,
                           prmcustunitcode,
                           1,
                           prmflag,
                           prmtposcode,
                           prmstopid,
                           prmestopid,
                           prmbadid,
                           out_result,
                           out_msg);

        return;
    exception
        when custom_exception
        -----先处理自定义异常
        then
            rollback;

            --统一异常，为后续版本在异常部分增加某种异常处理，如报警，记录日志等功能
            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;

            out_msg := out_msg;
        when others
        then
            rollback;
            out_result := -1;
            out_msg :=
                   '记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
    end;

    --上传银联对账结果

    procedure proc_uploadthirdcardresult ( --客户基本信息-------------
                                          prmthirdcardno    in     varchar2, --第三方卡号
                                          prmposcode        in     number, --设备唯一运营编号
                                          prmtraderecno     in     number, --终端交易流水号
                                          prmopcount        in     number, --消费操作计数，卡片交易流水
                                          prmanswercode     in     varchar2,
                                          --应答码
                                          prmsellcarddate   in     varchar2,
                                          --售卡方所在地时间 yyyy-mm-dd hh24:mi:ss
                                          prmsquaredate     in     varchar2, --清算日期 yyyy-mm-dd hh24:mi:ss
                                          prmindexcode      in     varchar2, --索引号
                                          prmunionbatchno   in     varchar2, --批次号
                                          prmuploaddate     in     varchar2,
                                          --终端上传时间 yyyy-mm-dd hh24:mi:ss
                                          --返回值-------------------
                                          out_result           out number,
                                          out_msg              out varchar2)
    as
        i_count               number;
        sell_opdt             date; --售卡方所在地时间
        square_opdt           date; --清算日期
        upload_opdt           date; --采集上传时间
        prmopdt               varchar2 (30); --交易时间
        prmopfare             number (10, 2); --交易金额
        prmmerchantcode       varchar2 (15); --商户编号
        prmuniontermid        varchar2 (8); --银联终端编号
        tempposcode           number;
        temptraderecno        number;
        tempcstaccfc          number;
        prmunioncstaccfc      varchar2 (4); --应答码临时变量
        prmcustomerunitcode   varchar2 (12); --客户法人代码
    begin
        i_count := 0;
        tempcstaccfc := 0;
        sell_opdt := to_date (prmsellcarddate, 'yyyy-mm-dd hh24:mi:ss');
        square_opdt := to_date (prmsquaredate, 'yyyy-mm-dd hh24:mi:ss');
        upload_opdt := to_date (prmuploaddate, 'yyyy-mm-dd hh24:mi:ss');

        ----------------------------判断账号长度----------------------------------------------
        select length (prmthirdcardno) into i_count from dual;

        if (i_count < 13 or i_count > 19)
        then
            out_msg := '第三方卡号thirdcardno长度必须在13到19之间';
            out_result := 20;
            goto insert_err_third_result;
        end if;

        -----------------------------查询是否存在原始消费记录----------------------------------
        select count (*)
          into i_count
          from rec_thirdcard_consume
         where thirdcardno = prmthirdcardno and opcount = prmopcount;

        if (i_count = 0)
        then
            out_msg := '在第三方消费记录表中没有找到消费记录';
            out_result := 23;
            goto insert_err_third_result;
        end if;

        if (i_count > 1)
        then
            out_msg := '在第三方消费记录表中找到多个消费记录';
            out_result := 24;
            goto insert_err_third_result;
        end if;

        select customerunitcode,
               cstaccfc,
               poscode,
               traderecno,
               to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'),
               electronopfare,
               merchantcode,
               uniontermid
          into prmcustomerunitcode,
               tempcstaccfc,
               tempposcode,
               temptraderecno,
               prmopdt,
               prmopfare,
               prmmerchantcode,
               prmuniontermid
          from rec_thirdcard_consume
         where thirdcardno = prmthirdcardno and opcount = prmopcount;

        if (tempposcode <> prmposcode)
        then
            out_msg := '在第三方消费记录表中找到的poscode和现有poscode不一致';
            out_result := 25;
            goto insert_err_third_result;
        end if;

        if (temptraderecno <> prmtraderecno)
        then
            out_msg :=
                '在第三方消费记录表中找到的终端交易流水号和现有终端交易流水号不一致';
            out_result := 26;
            goto insert_err_third_result;
        end if;

        -------------------------------验证终端编号------------------------------------------
        select count (*)
          into i_count
          from base_term
         where     poscode = prmposcode
               and isdelete = 0
               and customerunitcode = prmcustomerunitcode;

        if (i_count = 0)
        then
            out_msg := '终端编号在系统中不存在';
            out_result := 21;
            goto insert_err_third_result;
        end if;

        if (i_count > 1)
        then
            out_msg := '终端编号在系统中存在多个';
            out_result := 22;
            goto insert_err_third_result;
        end if;

        ---------------------------------消费记录结果判重-----------------------------------
        select count (*)
          into i_count
          from rec_thirdcard_consume_result
         where     thirdcardno = prmthirdcardno
               and opcount = prmopcount
               and sellcarddate =
                       to_date (prmsellcarddate, 'yyyy-mm-dd hh24:mi:ss') --添加此约束为解决保号换卡的情况
               and customerunitcode = prmcustomerunitcode;

        if (i_count > 0)
        then
            out_msg := '第三方消费记录结果重复';
            out_result := 27;
            goto insert_err_third_result;
        end if;

        ---------------------------------消费记录结果入库处理-------------------------------
        select customerunitcode,
               cstaccfc,
               poscode,
               traderecno,
               to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'),
               electronopfare,
               merchantcode,
               uniontermid
          into prmcustomerunitcode,
               tempcstaccfc,
               tempposcode,
               temptraderecno,
               prmopdt,
               prmopfare,
               prmmerchantcode,
               prmuniontermid
          from rec_thirdcard_consume
         where thirdcardno = prmthirdcardno and opcount = prmopcount;

        out_msg := '上传成功';
        out_result := 100;

        --------------------------消费记录结果入库处理--------------------------------------
        if (prmanswercode = '00')
        then
            prmunioncstaccfc := '800';
        else
            prmunioncstaccfc := prmanswercode;
        end if;

        pkg_union_account.proc_unionconsume_result (
            prmthirdcardno,
            prmmerchantcode,
            prmuniontermid,
            prmopcount,
            prmopdt,
            prmopfare,
            prmunioncstaccfc,
            to_char (to_date (prmsquaredate, 'yyyy-mm-dd hh24:mi:ss'),
                     'yyyy-mm-dd'),
            out_msg,
            out_result);

        if (out_result = 100)
        then
            commit;
            out_result := 100;
            out_msg := '记录上传成功';
            return;
        end if;

        rollback;
        return;

       ----------------------------------------异常记录入坏账表----------------------------
       <<insert_err_third_result>>
        out_result := -100;
        out_msg := '入坏账表rec_thirdcard_consume_result';

        insert into rec_thirdcard_consume_result (poscode,
                                                  traderecno,
                                                  thirdcardno,
                                                  opcount,
                                                  answercode,
                                                  sellcarddate,
                                                  squaredate,
                                                  indexcode,
                                                  isfind,
                                                  findmsg,
                                                  cstaccfc,
                                                  unionbatchno,
                                                  uploaddate,
                                                  customerunitcode)
             values (prmposcode,
                     prmtraderecno,
                     prmthirdcardno,
                     prmopcount,
                     prmanswercode,
                     sell_opdt,
                     square_opdt,
                     prmindexcode,
                     out_result,
                     out_msg,
                     tempcstaccfc,
                     prmunionbatchno,
                     upload_opdt,
                     prmcustomerunitcode);

        out_result := 100;
        out_msg := '入坏账表rec_thirdcard_consume_result成功';
        commit;
        return;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := '第三方消费记录结果上传失败，异常原因为：' || sqlerrm;
    end;
end;/
create or replace package        pkg_cust_consume_bad
as
   procedure proc_reuploadbadrec (
      prmid        in       number,
      out_msg      out      varchar2,
      out_result   out      number
   );
end;


 
 
 
 /
create or replace package body        pkg_cust_consume_bad
as
   procedure proc_reuploadbadrec (
      prmid        in       number,
      out_msg      out      varchar2,
      out_result   out      number
   )
   as
         /*
      --------------------------------------------------------------------------
      --存储过程：proc_reuploadbadrec
      --作　　者：朱鹏飞
      --时　　间：2009-06-24
      --说　　明：重新上传一笔坏账记录
      --输入参数：
      --输出参数：
      ------------------------------------------------------------------
      */
      vcount        integer;
      vid           integer;
      vsourceip     varchar (20);
      vsourcetype   integer;
      vnousedate    date;
   begin
      out_result := -1;
      out_msg := '处理失败';
      vid := 0;
      vsourceip := '127.0.0.1';
      vsourcetype := 0;
      vnousedate := sysdate;
      out_result := 100;
      out_msg := '处理成功';
      commit;
      return;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := to_char (sqlcode) || '_+_' || sqlerrm;
   end;
end;

/
create or replace package pkg_cust_consume_city is
  ----------------------------账目处理-------------------------------------
  procedure proc_cityconsumerec_upload( --客户基本信息-------------
                                       prmcustomerid    in out number, --客户编号
                                       prmcardno        in number, --卡号
                                       prmcardsn        in out number, --持卡序号
                                       prmcardkind      in number, --卡种类 1：m1卡 2：cpu卡
                                       prmcardtype      in number, --卡类型 普通卡 月卡 老年卡等
                                       prmopdt          in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                       prmopcount       in number, --消费操作计数，根据钱包判断
                                       prmisnullopcount in number, --消费操作计数是否赋值 0已赋值 1未赋值
                                       prmsaveopcount   in number, --充值操作计数，根据钱包判断
                                       --客户金额信息-------------
                                       prmsumelectrfare in out number, --卡总额
                                       prmoddfare       in out number, --消费后余额，根据钱包类型判断钱包
                                       prmopfare        in out number, --消费金额，根据钱包类型判断钱包
                                       prmdiscountfare  in out number, -- 打折金额（如果为清零记录，此字段代表每月充值金额）
                                       --终端交易信息-------------
                                       prmbusid      in out number, --车辆id
                                       prmposcode    in number, --设备唯一运营编号
                                       prmsamcardno  in number, --pasm卡卡号
                                       prmtac        in number, --tac验证码
                                       prmdriverid   in number, --司机编号
                                       prmbuslineid  in out number, --线路编号
                                       prmdeptcode   in out varchar2, --终端部门代码
                                       prmdealtype   in number, --记录类型，用于确定科目
                                       prmtradetype  in number, --交易应用类型
                                       prmcollectdt  in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                       prmtotalrecno in number,
                                       --总交易流水号包含交易流水和日志流水
                                       prmtraderecno in number, --终端交易流水号
                                       prmsamtradeno in number, --pasm卡交易流水号
                                       prmwallettype in number, --钱包类型 1电子钱包 2月票
                                       --cpu卡加入字段------------
                                       prmcardasn       in number, --卡应用序列号
                                       prmtradecitycode in varchar2, --交易地城市代码
                                       prmownercitycode in out varchar2, --所属地城市代码
                                       prmmaincardtype  in number, --主卡类型
                                       prmassocardtype  in number, --子卡类型
                                       prmcardversion   in number, --卡内版本
                                       prmtradekind     in number, --交易性质
                                       prmtestflag      in number, --测试标记
                                       prmcollectpoint  in varchar2, --采集点编号
                                       prmoperatorpoint in out varchar2, --营运单位编号
                                       prmcustunitcode  in varchar2, --客户代码
                                       prmextentvalue   in varchar2, --扩展域
                                       --------清算加入字段------------
                                       prmfilename    in varchar2, --清算文件名称
                                       prmclearresult in varchar2, --清算机构清算结构
                                       --坏账处理---
                                       prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                       --返回值-------------------
                                       out_result out number,
                                       out_msg    out varchar2);

   --城市通入账
   procedure proc_cityconsume_result(prmcstaccfc in number, --记录流水号
                                    prmrespcode in varchar2,--清算返回结果码
                                    prmrespdesc in varchar2,--清算返回结果描述
                                    out_msg     out varchar2,
                                    out_result  out integer);

   --同步电子现金数据到城市一卡通
   procedure proc_getthirdcardconsumerec(prmcustomerunitcode in varchar2, --客户代码
                                        prmver              in number, --版本号
                                        prmcount            in number, --获取数据条数
                                        prmcursor           out sys_refcursor);
end;
 
 
 
 
/
create or replace package body pkg_cust_consume_city is

  ----------------------------账目处理-------------------------------------
  procedure proc_cityconsumerec_upload( --客户基本信息-------------
                                       prmcustomerid    in out number, --客户编号
                                       prmcardno        in number, --卡号
                                       prmcardsn        in out number, --持卡序号
                                       prmcardkind      in number, --卡种类 1：m1卡 2：cpu卡
                                       prmcardtype      in number, --卡类型 普通卡 月卡 老年卡等
                                       prmopdt          in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                       prmopcount       in number, --消费操作计数，根据钱包判断
                                       prmisnullopcount in number, --消费操作计数是否赋值 0已赋值 1未赋值
                                       prmsaveopcount   in number, --充值操作计数，根据钱包判断
                                       --客户金额信息-------------
                                       prmsumelectrfare in out number, --卡总额
                                       prmoddfare       in out number, --消费后余额，根据钱包类型判断钱包
                                       prmopfare        in out number, --消费金额，根据钱包类型判断钱包
                                       prmdiscountfare  in out number, -- 打折金额（如果为清零记录，此字段代表每月充值金额）
                                       --终端交易信息-------------
                                       prmbusid      in out number, --车辆id
                                       prmposcode    in number, --设备唯一运营编号
                                       prmsamcardno  in number, --pasm卡卡号
                                       prmtac        in number, --tac验证码
                                       prmdriverid   in number, --司机编号
                                       prmbuslineid  in out number, --线路编号
                                       prmdeptcode   in out varchar2, --终端部门代码
                                       prmdealtype   in number, --记录状态（正常、灰色）
                                       prmtradetype  in number, --交易应用类型
                                       prmcollectdt  in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                       prmtotalrecno in number,
                                       --总交易流水号包含交易流水和日志流水
                                       prmtraderecno in number, --终端交易流水号
                                       prmsamtradeno in number, --pasm卡交易流水号
                                       prmwallettype in number, --钱包类型 1电子钱包 2月票
                                       --cpu卡加入字段------------
                                       prmcardasn       in number, --卡应用序列号
                                       prmtradecitycode in varchar2, --交易地城市代码
                                       prmownercitycode in out varchar2, --所属地城市代码
                                       prmmaincardtype  in number, --主卡类型 7 兼容第三方系统卡   8 交通部秘钥卡 0 自建秘钥卡
                                       prmassocardtype  in number, --子卡类型
                                       prmcardversion   in number, --卡内版本
                                       prmtradekind     in number, --交易性质
                                       prmtestflag      in number, --测试标记
                                       prmcollectpoint  in varchar2, --采集点编号
                                       prmoperatorpoint in out varchar2, --营运单位编号
                                       prmcustunitcode  in varchar2, --客户代码
                                       prmextentvalue   in varchar2, --扩展域
                                       --------清算加入字段------------
                                       prmfilename    in varchar2, --清算文件名称
                                       prmclearresult in varchar2, --清算机构清算结构
                                       --坏账处理---
                                       prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                       --返回值-------------------
                                       out_result out number,
                                       out_msg    out varchar2) as
    /*
    --------------------------------------------------------------------------
    --存储过程：proc_cityconsumerec_upload
    --过程类型：接口过程（外层过程）
    --应用场景：第三方卡消费记录上传（许都通卡）
    --作　　者：闫丽平
    --时　　间：2017-07-26
    --说　　明：消费记录上传（包含许都通卡，主卡类型为11）
    --输入参数：
    --输出参数：
    --备注：许都通主卡类型为11，但是老卡中部分卡终端对opcount进行赋值，有些则不赋值。
           终端opcount不赋值的情况，在webservice中赋值为当前的消费时间，充值未决的条件根据时间判断
           终端opcount赋值的情况，充值未决的条件根据操作计数判断
           由于在webservice中对opcount进行了赋值操作，因此在存储过程中只根据opcount判断不出来终端有没有对操作计数赋值，
           所以添加prmisnullopcount参数
    --返回值和返回信息定义：
    --100 ：记录上传成功，帐目统计成功， 其他失败
    --------------------------------------------------------------------------
    */

    --变量定义
    i_count      integer;
    i_badrectype integer; --坏账类型
    custom_exception exception; --自定义错误
    i_factor   number; --最小货币单位和通用货币单位之间的转换因子
    n_acccode  number; --坏账科目
    v_accdscrp varchar(20); --坏账科目描述
    ---------------------------------------------------------------
    i_customerid  number; --账号
    i_cardsn      number; -- 卡序号
    n_islocal     int; --本地卡异地消费标识 1本地，0异地
    n_islocalcard int; --本地卡 1本地，0异地
    ---------------------------------------------------------------
    t_sumelectrfare number(10, 2);
    t_oddfare       number(10, 2);
    t_opfare        number(10, 2);
    t_discountfare  number(10, 2);

    v_opdt         date; --操作时间yyyy-mm-dd hh24:mi:ss
    i_flag         int;
    n_iscurcard    number; --1当前卡  0非当前卡
    n_isnewconsume number; --1新消费    0老消费
    n_cardtype     number; --卡类型，当主卡类型为11时，卡类型需要赋值为21表示城市通卡
    n_cashaccfc number; --形成消费明细的原始流水号
  begin
    out_result      := -1000;
    out_msg         := '初始化变量';
    t_sumelectrfare := prmsumelectrfare;
    t_oddfare       := prmoddfare;
    t_opfare        := prmopfare;
    t_discountfare  := prmdiscountfare;
    i_badrectype    := 0;
    i_factor        := 100; --根据分和元之间的转换（100）赋默认值
    i_customerid    := 0;
    i_cardsn        := 0;
    i_flag          := 0;
    n_iscurcard     := 0;
    n_isnewconsume  := 0;
    n_cardtype      := prmcardtype;

    ------------------------检查是否正在数据结算-------------------------
    out_result := -1001;
    out_msg    := '检查当前是否正在结算';

    proc_validateisbalance(out_result, out_msg);

    if (out_result <> 0) --0当前系统未进行结算
     then
      out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
      out_msg    := '判断账目结算状态异常，' || out_msg;
      return;
    end if;

    ------------------------先验证客户信息是否合法------------------------
    out_result := -1002;
    out_msg    := '检查客户法人信息是否合法';

    select count(a.id)
      into i_count
      from base_legal_person a
     where a.customerunitcode = prmcustunitcode;

    if i_count <> 1 then
      out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
      out_msg    := '客户法人信息不合法！customerunitcode：' ||
                    to_char(prmcustunitcode);

      return;
    end if;
    ---------------------------获取转换因子-----------------------------------
    --获取最小货币单位和通用货币单位间的转换因子
    out_result := -1003;
    out_msg    := '获取货币转换因子失败！';

    select nvl(max(a.paramvalue), -1)
      into i_factor
      from base_param a
     where a.paramname = 'hexadecimal'
       and a.paramgroupid = 1002;

    if (i_factor < 0) then
      out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
      out_msg    := '获取转换因子失败！factor：' || i_factor;

      return;
    end if;

    ------------------------------发卡地收单方判断-----------------------------------------
    out_result := -1004;
    out_msg    := '发卡地收单方判断！';

    proc_getcard_info(prmcustunitcode,
                      prmmaincardtype, --7 兼容第三方系统卡   8 交通部秘钥卡 0 自建秘钥卡
                      prmownercitycode,
                      prmoperatorpoint,
                      n_islocalcard, --本地卡 1本地，0异地
                      n_islocal, --本地卡异地消费标识 1本地，0异地
                      out_result,
                      out_msg);

    if out_result = 101 then
      return;
    end if;

    ---------------------------账号信息验证和取值--------------------------------------------
    out_result := -1005;
    out_msg    := '获取账户信息失败';

    if (n_islocalcard = 1) then
      proc_get_customer(prmcardno,
                        prmcardsn,
                        prmcustomerid,
                        prmopdt,
                        prmcustunitcode,
                        prmopcount,
                        prmwallettype,
                        i_badrectype,
                        prmmaincardtype,
                        n_iscurcard,
                        n_isnewconsume,
                        out_result,
                        out_msg);

      if (out_result <> 100) then
        goto insert_err_consumrec;
      end if;
    end if;

    ------------------------本地消费验证psam卡信息是否正确-------------------------------------
    out_result := -1006;
    out_msg    := '本地消费验证psam卡信息失败！';

    if (n_islocal = 1) then
      proc_validatesamcard(prmsamcardno,
                           prmcustunitcode,
                           i_badrectype,
                           prmopdt,
                           out_result,
                           out_msg);

      if (out_result <> 100) then
        goto insert_err_consumrec;
      end if;
    end if;

    -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
    out_result := -1007;
    out_msg    := '验证终端,车辆，线路，部门是否正确';
    proc_validatetermbusline(prmposcode,
                             prmcustunitcode,
                             prmbusid,
                             prmbuslineid,
                             prmdeptcode,
                             i_badrectype,
                             out_result,
                             out_msg);

    if (out_result <> 100) then
      goto insert_err_consumrec;
    end if;

    ---------------------------科目赋值，金额转换---------------------------------------------

    --钱包类型 1：电子钱包 2:月票 3：次卡钱包  4:交通部电子现金
    if (not (prmwallettype = 1 or prmwallettype = 2 or prmwallettype = 3 or prmwallettype = 4)) then
      out_msg      := '钱包类型无效！无效的钱包类型为：' || prmwallettype;
      i_badrectype := 24; --钱包类型无效！
      goto insert_err_consumrec;
    end if;

    if (prmmaincardtype = 11) then
        n_cardtype := 21; --21表示城市通卡
        n_acccode  := 206; --206标识科目是第三方电子钱包
    else
        out_msg      := '主卡类型无效！无效的主卡类型为：' || prmmaincardtype;
        i_badrectype := 24; --钱包类型无效！
        goto insert_err_consumrec;
    end if;

    if (prmwallettype = 1 or prmwallettype = 2 or prmwallettype = 4) then
      prmsumelectrfare := prmsumelectrfare / i_factor;
      prmoddfare       := prmoddfare / i_factor;
      prmopfare        := prmopfare / i_factor;
      prmdiscountfare  := prmdiscountfare / i_factor;
    end if;

    ------------------------消费未决记录处理-----------------------------
    if (prmdealtype = 2 and prmtradetype <> 9) then
      i_badrectype := 17; --终端上传的灰色记录
      goto insert_err_consumrec;
    elsif (prmdealtype = 3 and prmtradetype <> 9) then
      i_badrectype := 18; --终端上传的mac校验不通过记录
      goto insert_err_consumrec;
    end if;

    out_result := -1008;
    out_msg    := '取交易科目描述信息失败！';

    select nvl(max(a.accdscrp), '未知')
      into v_accdscrp
      from base_acc_type a
     where a.acccode = n_acccode;

    if (v_accdscrp = '未知') then
      i_badrectype := 25; --取交易科目描述信息失败！
      goto insert_err_consumrec;
    end if;

    ---------------------------------------消费记录入账处理----------------------------------------
    out_result := -1009;
    out_msg    := '消费记录入账失败！';

    --第三方卡的消费记录上传
    if (prmmaincardtype = 11) then

      --第三方卡城市通卡消费记录上传
      select count(*)
       into i_count
       from rec_electtron_consume_city a
      where a.cardno = prmcardno
       and a.cardsn = prmcardsn
       and a.opcount = prmopcount
       and a.cardasn = prmcardasn
       and a.customerunitcode = prmcustunitcode;

      if i_count > 0 then
        out_result   := -1010;
        out_msg      := '重复记录';
        i_badrectype := 3;
        goto insert_err_consumrec;
      else
        out_result := -1010;
        out_msg    := '第三方电子钱包消费记录上传';

        --获取消费记录流水号
        select seq_rec_electtron_consume_city.nextval
          into n_cashaccfc
          from dual;

        --形成电子钱包消费记录
        insert into rec_electtron_consume_city
          (cstaccfc,
           customerid,
           cardno,
           cardtype,
           opdt,
           sumelectraddfare,
           electronoddfare,
           electronopfare,
           acccode,
           dscrp,
           cardsn,
           opcount,
           dealtype,
           collectdt,
           uploaddate,
           busid,
           driverid,
           poscode,
           samcardno,
           cardkind,
           traderecno,
           tac,
           samtradeno,
           buslineid,
           totalrecno,
           discount,
           tradetype,
           linedept,
           cardasn,
           tradecitycode,
           ownercitycode,
           maincardtype,
           assocardtype,
           cardversion,
           tradekind,
           testflag,
           collectpoint,
           operatorpoint,
           customerunitcode,
           status)
        values
          (n_cashaccfc,
           prmcustomerid,
           prmcardno,
           n_cardtype,
           to_date(prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
           prmsumelectrfare,
           prmoddfare,
           prmopfare,
           n_acccode,
           v_accdscrp,
           prmcardsn,
           prmopcount,
           prmdealtype,
           to_date(prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
           sysdate,
           prmbusid,
           prmdriverid,
           prmposcode,
           prmsamcardno,
           prmcardkind,
           prmtraderecno,
           prmtac,
           prmsamtradeno,
           prmbuslineid,
           prmtotalrecno,
           prmdiscountfare,
           prmtradetype,
           prmdeptcode,
           prmcardasn,
           prmtradecitycode,
           prmownercitycode,
           prmmaincardtype,
           prmassocardtype,
           prmcardversion,
           prmtradekind,
           prmtestflag,
           prmcollectpoint,
           prmoperatorpoint,
           prmcustunitcode,
           0);

        out_result := 100;
        out_msg    := '记录上传成功';
        commit;
        return;
      end if;
    else
        out_msg      := '主卡类型无效！无效的主卡类型为：' || prmmaincardtype;
        i_badrectype := 24; --钱包类型无效！
        goto insert_err_consumrec;
    end if;
    ------------------------------------坏帐记录入坏帐表----------------------------------------
    --坏帐记录入坏帐表
    <<insert_err_consumrec>>
    out_result := -1016;
    out_msg    := '处理坏账记录失败';

    pkg_cust_consume.proc_insertbadrec(prmcustomerid,
                      prmcardno,
                      prmcardsn,
                      prmopcount,
                      prmcardkind,
                      n_cardtype,
                      prmopdt,
                      t_sumelectrfare,
                      t_oddfare,
                      t_opfare,
                      t_discountfare,
                      n_acccode,
                      v_accdscrp,
                      prmbusid,
                      prmposcode,
                      prmsamcardno,
                      prmtac,
                      prmdriverid,
                      prmbuslineid,
                      prmdeptcode,
                      prmdealtype,
                      prmtradetype,
                      prmcollectdt,
                      prmtotalrecno,
                      prmtraderecno,
                      prmsamtradeno,
                      prmwallettype,
                      i_badrectype,
                      --cpu卡加入字段------------
                      prmcardasn,
                      prmtradecitycode,
                      prmownercitycode,
                      n_islocal, --是否是本地消费 0异地消费 1本地消费
                      prmmaincardtype,
                      prmassocardtype,
                      prmcardversion,
                      prmtradekind,
                      prmtestflag,
                      prmcollectpoint,
                      prmoperatorpoint,
                      prmcustunitcode,
                      0,
                      0,
                      0,
                      0,
                      0,
                      prmbadid,
                      out_result,
                      out_msg);
    return;
  exception
    when custom_exception -----先处理自定义异常
     then
      if out_result > 0 then
        out_result := out_result * -1;
      else
        out_result := out_result;
      end if;
    when others then
      out_result := -1000;
      out_msg    := '记录上传失败，处理[' || out_msg || ']异常，具体原因为：' || sqlerrm;
  end;

  --城市通卡清算后入账
  procedure proc_cityconsume_result(prmcstaccfc in number, --记录流水号
                                    prmrespcode in varchar2,--清算返回结果码
                                    prmrespdesc in varchar2,--清算返回结果描述
                                    out_msg     out varchar2,
                                    out_result  out integer) as
    n_count        number;
    d_opdt         date;
    n_opfare       number(10, 2);
    n_acccode      number;
    n_discount     number(10, 2);
    n_cardkind     number;
    n_cardtype     number;
    n_driverid     number;
    n_poscode      number;
    n_samcardno    number;
    n_buslineid    number;
    v_linedept     varchar2(10);
    n_busid        number;
    v_custunitcode varchar2(12);
  begin
    out_result := -1001;
    out_msg    := '开始形成银联电子现金交易记录';

    select count(*)
      into n_count
      from rec_electtron_consume_city a
     where a.cstaccfc = prmcstaccfc;

    if n_count > 0 then
       if prmrespcode = '00000' then --清算成功
          --获取统计过程参数
          out_result := -1002;
          out_msg    := '获取统计过程参数';
          select a.opdt,
                 a.electronopfare,
                 a.acccode,
                 a.discount,
                 a.cardkind,
                 a.cardtype,
                 a.driverid,
                 a.poscode,
                 a.samcardno,
                 a.buslineid,
                 a.linedept,
                 a.busid,
                 a.customerunitcode
            into d_opdt,
                 n_opfare,
                 n_acccode,
                 n_discount,
                 n_cardkind,
                 n_cardtype,
                 n_driverid,
                 n_poscode,
                 n_samcardno,
                 n_buslineid,
                 v_linedept,
                 n_busid,
                 v_custunitcode
            from rec_electtron_consume_city a
           where a.cstaccfc = prmcstaccfc;

          out_result := -1003;
          out_msg    := '开始入及时统计';
          --消费记录即时统计
          pkg_st_payment.proc_custdataaccount_online(to_char(d_opdt,
                                                             'yyyy-mm-dd hh24:mi:ss'),
                                                     n_opfare,
                                                     n_acccode,
                                                     n_discount,
                                                     n_cardkind,
                                                     n_cardtype,
                                                     n_driverid,
                                                     n_poscode,
                                                     n_samcardno,
                                                     n_buslineid,
                                                     v_linedept, --prmdeptcode,
                                                     n_busid,
                                                     1, --钱包类型 电子钱包
                                                     0, --0正常 1回滚统计操作
                                                     v_custunitcode,
                                                     out_msg,
                                                     out_result);

          if (out_result <> 100) then
            rollback;
            out_result := 101;
            out_msg    := '记录上传统计失败,' || out_msg;
            return;
          end if;

          --插入成功表
          insert into rec_electtron_consume_city_suc
            select cstaccfc,
                   customerid,
                   cardno,
                   cardtype,
                   opdt,
                   sumelectraddfare,
                   electronoddfare,
                   electronopfare,
                   acccode,
                   dscrp,
                   cardsn,
                   opcount,
                   dealtype,
                   collectdt,
                   uploaddate,
                   busid,
                   driverid,
                   poscode,
                   samcardno,
                   cardkind,
                   traderecno,
                   tac,
                   samtradeno,
                   buslineid,
                   totalrecno,
                   discount,
                   tradetype,
                   linedept,
                   repealempid,
                   electrdummyopfare,
                   cardasn,
                   tradecitycode,
                   ownercitycode,
                   maincardtype,
                   assocardtype,
                   cardversion,
                   tradekind,
                   testflag,
                   operatorpoint,
                   collectpoint,
                   accountdate,
                   recordtype,
                   flag,
                   fleeposcode,
                   upstopid,
                   downstopid,
                   customerunitcode,
                   returncode,
                   errorreason
            from rec_electtron_consume_city
            where cstaccfc = prmcstaccfc;

          if (sql%rowcount != 1)
          then
             rollback;
             out_result := 101;
             out_msg    := '城市通清算成功记录入库失败';
             return;
          end if;

          --删除临时表中的记录
          delete from rec_electtron_consume_city
           where cstaccfc = prmcstaccfc;

          if (sql%rowcount != 1)
          then
             rollback;
             out_result := 101;
             out_msg    := '城市通清算成功记录删除失败';
             return;
          end if;

          out_result := 100;
          out_msg    := '城市通记录入正常账目表成功';
          commit;
          return;
       else --清算失败
          --更新临时记录表
          update rec_electtron_consume_city
             set status = 1, accountdate = sysdate,returncode = prmrespcode, errorreason = prmrespdesc
           where cstaccfc = prmcstaccfc;

          if (sql%rowcount != 1)
          then
             rollback;
             out_result := 101;
             out_msg    := '城市通清算失败记录入处理失败';
             return;
          end if;

          out_result := 100;
          out_msg    := '城市通清算失败记录入处理成功';
          commit;
          return;
       end if;
    end if;
  exception
    when others then
      rollback;
      out_result := out_result;
      out_msg    := out_msg || '异常_+_' || sqlerrm;
  end;

  --同步电子现金数据到城市一卡通
  procedure proc_getthirdcardconsumerec(prmcustomerunitcode in varchar2, --客户代码
                                        prmver              in number, --版本号
                                        prmcount            in number, --获取数据条数
                                        prmcursor           out sys_refcursor)
  as
  begin
    open prmcursor for
      select cstaccfc,
             thirdcardno,
             opdt,
             sumelectraddfare,
             electronoddfare,
             electronopfare,
             acccode,
             dscrp,
             cardtype,
             opcount,
             dealtype,
             collectdt,
             uploaddate,
             busid,
             driverid,
             poscode,
             samcardno,
             cardkind,
             traderecno,
             tac,
             samtradeno,
             buslineid,
             totalrecno,
             discount,
             tradetype,
             linedept,
             repealempid,
             electrdummyopfare,
             tradecitycode,
             ownercitycode,
             maincardtype,
             assocardtype,
             cardversion,
             tradekind,
             testflag,
             operatorpoint,
             collectpoint,
             accountdate,
             wallettype,
             cardownbusiness,
             bankcode,
             batchno,
             uniontermid,
             unionbatchno,
             unionappkey,
             status,
             extentvalue,
             merchantcode,
             localcstaccfc,
             ticketcharge,
             recordtype,
             flag,
             freeposcode,
             upstopid,
             downstopid,
             customerunitcode,
             termthridseqno,
             '' as customerid,
             '' as longitude,
             '' as latitude
        from rec_thirdcard_consume a
        where a.customerunitcode=prmcustomerunitcode
              and a.cstaccfc > prmver
              and a.cstaccfc <= prmver+prmcount;
  end;

 end;
/
create or replace package pkg_freezefare is
  type refcursortype is ref cursor; --游标类型定义，用于返回数据集

  procedure proc_addfreezefare_elec(prmcustomerid        in number, --客户编号
                                    prmcardno            in number, --客户卡号
                                    prmcardsn            in number, --客户持卡序号
                                    prmelectrsaveopcount in number, --电子钱包充值计数
                                    prmelectropcount     in number, --电子钱包交易计数
                                    prmcardkind          in number, --卡种类 1：m1卡 2：cpu卡
                                    prmcardtypedetailid  in number, --卡类型 普通卡 月卡 老年卡等
                                    --
                                    prmsumelectrfare  in number, --卡总额
                                    prmelectroddfare  in number, --卡余额
                                    prmelecfreezefare in out number, --电子钱包冻结金额
                                    prmposcode        in number, --终端唯一编号
                                    prmpsamcardno     in number, --终端psam卡号
                                    prmempid          in integer, --操作职员编号
                                    prmcustunitcode   in varchar2, --客户代码
                                    out_planid        out integer, --领款事务号
                                    out_msg           out varchar2,
                                    out_result        out integer);

  procedure proc_getfreezefare_acc(prmcustomerid in integer, --客户编号
                                   --
                                   prmposcode      in number, --终端唯一编号
                                   prmpsamcardno   in number, --终端psam卡号
                                   prmempid        in integer, --操作职员编号
                                   prmcardno       in number, --客户卡号
                                   prmcustunitcode in varchar2, --客户代码
                                   out_msg         out varchar2,
                                   out_result      out integer,
                                   out_cursor      out refcursortype);

  procedure proc_addfreezefare_mon(prmcustomerid       in number, --客户编号
                                   prmcardno           in number, --客户卡号
                                   prmcardsn           in number, --客户持卡序号
                                   prmvicesaveopcount  in number, --次钱包充值计数
                                   prmviceopcount      in number, --次钱包交易计数
                                   prmcardkind         in number, --卡种类 1：m1卡 2：cpu卡
                                   prmcardtypedetailid in number, --卡类型 普通卡 月卡 老年卡等
                                   --
                                   prmviceoddfare    in number, --卡余额
                                   prmvicefreezefare in out number, --次钱包冻结金额
                                   prmposcode        in number, --终端唯一编号
                                   prmpsamcardno     in number, --终端psam卡号
                                   prmempid          in integer, --操作职员编号
                                   prmcustunitcode   in varchar2, --客户代码
                                   out_planid        out integer, --领款事务号
                                   prmlimittimes     in number, --每月消费限制次数
                                   prmmonthnum       in number, --充值月数
                                   prmvalidtimestart in varchar2, --有效起日
                                   prmvalidtimeend   in varchar2, --有效止日
                                   out_msg           out varchar2,
                                   out_result        out integer);

  procedure proc_addfreezefare_vice(prmcustomerid       in number, --客户编号
                                    prmcardno           in number, --客户卡号
                                    prmcardsn           in number, --客户持卡序号
                                    prmvicesaveopcount  in number, --次钱包充值计数
                                    prmviceopcount      in number, --次钱包交易计数
                                    prmcardkind         in number, --卡种类 1：m1卡 2：cpu卡
                                    prmcardtypedetailid in number, --卡类型 普通卡 月卡 老年卡等
                                    --
                                    prmviceoddfare    in number, --卡余额
                                    prmvicefreezefare in out number, --次钱包冻结金额
                                    prmposcode        in number, --终端唯一编号
                                    prmpsamcardno     in number, --终端psam卡号
                                    prmempid          in integer, --操作职员编号
                                    prmcustunitcode   in varchar2, --客户代码
                                    out_planid        out integer, --领款事务号
                                    prmlimittimes     in number, --每月消费限制次数
                                    prmmonthnum       in number, --充值月数
                                    prmvalidtimestart in varchar2, --有效起日
                                    prmvalidtimeend   in varchar2, --有效止日
                                    out_msg           out varchar2,
                                    out_result        out integer);
end;


 
 
 
 
/
create or replace package body pkg_freezefare is
  /*
  ----------------------------------------------------------------------------
  --copyright (c) 1992-2007 郑州新开普电子股份有限公司 版权所有。
  --
  -- 存储过程名称：pkg_freezefare
  -- 功能描述：冻结金额处理
  ---------------------------------------------------------------------------
  */
  procedure proc_addfreezefare_elec(prmcustomerid        in number, --客户编号
                                    prmcardno            in number, --客户卡号
                                    prmcardsn            in number, --客户持卡序号
                                    prmelectrsaveopcount in number, --电子钱包充值计数
                                    prmelectropcount     in number, --电子钱包交易计数
                                    prmcardkind          in number, --卡种类 1：m1卡 2：cpu卡
                                    prmcardtypedetailid  in number, --卡类型 普通卡 月卡 老年卡等
                                    --
                                    prmsumelectrfare  in number, --卡总额
                                    prmelectroddfare  in number, --卡余额
                                    prmelecfreezefare in out number, --电子钱包冻结金额
                                    prmposcode        in number, --终端唯一编号
                                    prmpsamcardno     in number, --终端psam卡号
                                    prmempid          in integer, --操作职员编号
                                    prmcustunitcode   in varchar2, --客户代码
                                    out_planid        out integer, --领款事务号
                                    out_msg           out varchar2,
                                    out_result        out integer) as
    /*
    --------------------------------------------------------------------------
    --存储过程：proc_addfreezefare_elec
    --作　　者：朱鹏飞
    --时　　间：2009-07-03
    --说　　明：电子钱包冻结金额领取
    -- 电子钱包冻结金额领取处理过程
    --1、调用未决处理过程。

    --2、读卡获取冻结金额

    --3、领取，先领电子钱包，再按月领取。
    --返回值和返回信息定义：
    --100 ：申请成功，冻结金额传入一致。
    --101：申请成功，传入冻结金额与库不符
    --102：没有冻结金额领取
    --------------------------------------------------------------------------
    --修改人：周晓娜
    --修改时间： 20121212
    --修改说明：根据冻结金额表结构调整，重新处理账目流程
    -------------------------------------------------------------------------
    */
    i_count           integer;
    i_acccode         number; --冻结金额科目
    i_unsettleacccode number; --未决记录科目代码
    v_accdscrp        varchar2(20); -- 冻结金额科目描述
    n_planid          number;
    n_sumfreezefare   number(10, 2);
    i_custareaid      integer; --客户所属分区
    n_elecsaveopcount number;
  begin
    out_result := -1002;
    out_msg    := '初始化变量';
    --
    i_acccode  := 500; --电子钱包冻结金额领取科目
    out_planid := -10;

    select count(*)
      into i_count
      from base_acc_type a
     where a.acccode = 500;

    if i_count <> 1 then
      out_msg    := '基础数据错误，电子钱包冻结金额科目不存在。';
      out_result := -1002;
      return;
    end if;

    --获取电子钱包冻结金额领取科目描述
    select a.accdscrp
      into v_accdscrp
      from base_acc_type a
     where a.acccode = 500;

    select count(*)
      into i_count
      from base_customers
     where customerid = prmcustomerid
       and cardno = prmcardno
       and customerunitcode = prmcustunitcode;

    if i_count = 0 then
      out_msg    := '账户不存在或者已注销customerid=' || to_char(prmcustomerid);
      out_result := -1002;
      return;
    end if;

    --2016-09-23 plan表中存在status=1的才认为是未决记录
    --添加条件:and a.status = 1
    select count(*)
      into i_count
      from rec_electtron_cash_plan a
     where a.customerid = prmcustomerid
       and a.cardno = prmcardno
       and a.status = 1
       and a.customerunitcode = prmcustunitcode;

    --如果已经存在冻结金额的领款初始记录，则直接返回
    if i_count > 0 then
      out_msg    := '存在未决记录，请先读卡处理未决或者在管理中心手工处理';
      out_result := -1003;
      commit;
      return;
    end if;

    --检查冻结金额表中是否有未决状态的记录，如果有则为异常
    select count(*)
      into i_count
      from rec_freezefare_acc a
     where a.customerid = prmcustomerid
       and a.freezefareflag = 2
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    if i_count > 0 then
      out_msg    := '存在未决状态的冻结金额记录等非法数据，无法继续操作。' ||
                    '可能为某次异常中断造成数据不一致，请联系管理员处理';
      out_result := -1005;
      return;
    end if;

    --未决处理完毕或者没有未决记录或者有非当前卡未决
    select count(*)
      into i_count
      from rec_freezefare_acc a
     where a.customerid = prmcustomerid
       and a.freezefareflag = 0
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    if i_count = 0 then
      out_msg    := '账户电子钱包没有冻结金额可领取';
      out_result := 102;
      return;
    end if;

    out_result := -1027;
    out_msg    := '计算电子钱包未领冻结金额';

    select sum(nvl(a.freezefare, 0))
      into n_sumfreezefare
      from rec_freezefare_acc a
     where a.customerid = prmcustomerid
       and a.freezefareflag = 0
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    --如果冻结金额为零，则直接更新为已领取
    if n_sumfreezefare = 0 then
      --更新冻结金额为申请状态
      update rec_freezefare_acc a
         set a.freezefareflag = 1
       where a.customerid = prmcustomerid
         and a.freezefareflag = 0
         and a.customerunitcode = prmcustunitcode
         and cardid in
             (select id
                from base_customers
               where customerid = prmcustomerid
                 and cardno = prmcardno
                 and customerunitcode = prmcustunitcode);

      prmelecfreezefare := 0;
      out_msg           := '账户电子钱包没有冻结金额为零';
      out_result        := 102;
      return;
    end if;

    --------------------------------------------------------------------------------
    --领款申请
    --获取申请流水号
    select seq_cash_plan.nextval into n_planid from dual;

    out_result := -1027;
    out_msg    := '形成领款申请记录';

    --形成领款记录时，以数据库金额为准
    --zxn 20121107 去掉分区字段
    insert into rec_electtron_cash_plan
      (planid,
       customerid,
       cardno,
       cardsn,
       cardtypedetailid,
       sumelectraddfare,
       electroddfare,
       electroddfarepre,
       electropfare,
       electrdummyopfare,
       electrsaveopcount,
       electropcount,
       status,
       acccode,
       opdt,
       description,
       cardkind,
       poscode,
       psamcardno,
       empid,
       dealtype,
       wallettype,
       tac,
       samtradeno,
       ver,
       customerunitcode)
    values
      (n_planid,
       prmcustomerid,
       prmcardno,
       prmcardsn,
       prmcardtypedetailid,
       prmsumelectrfare,
       0,
       prmelectroddfare,
       n_sumfreezefare,
       0,
       prmelectrsaveopcount,
       prmelectropcount,
       1,
       i_acccode,
       sysdate,
       v_accdscrp,
       prmcardkind,
       prmposcode,
       prmpsamcardno,
       prmempid,
       0,
       0,
       0,
       0,
       0,
       prmcustunitcode);

    --------------------------------------------------------------------------------
    out_result := -1028;
    out_msg    := '形成领款申请记录日志';

    --zxn 20121107 去掉分区字段
    insert into rec_electtron_cash_plan_log
      (planid,
       customerid,
       cardno,
       cardsn,
       cardtypedetailid,
       sumelectraddfare,
       electroddfare,
       electroddfarepre,
       electropfare,
       electrsaveopcount,
       electropcount,
       status,
       acccode,
       opdt,
       description,
       cardkind,
       poscode,
       psamcardno,
       empid,
       dealtype,
       wallettype,
       tac,
       samtradeno,
       ver,
       customerunitcode)
    values
      (n_planid,
       prmcustomerid,
       prmcardno,
       prmcardsn,
       prmcardtypedetailid,
       prmsumelectrfare,
       0,
       prmelectroddfare,
       n_sumfreezefare,
       prmelectrsaveopcount,
       prmelectropcount,
       0,
       i_acccode,
       sysdate,
       v_accdscrp,
       prmcardkind,
       prmposcode,
       prmpsamcardno,
       prmempid,
       0,
       0,
       0,
       0,
       0,
       prmcustunitcode);

    --更新冻结金额为申请状态
    update rec_freezefare_acc a
       set a.freezefareflag = 2
     where a.customerid = prmcustomerid
       and a.freezefareflag = 0
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    out_planid := n_planid;
    out_msg    := '冻结金额申请成功';

    if prmelecfreezefare = n_sumfreezefare then
      out_result := 100;
    else
      --如果读卡时冻结金额与领取时不符，则以领取时库返回金额为准
      prmelecfreezefare := n_sumfreezefare;
      out_result        := 101;
    end if;

    commit;
  exception
    when others then
      rollback;
      out_result := out_result;
      out_msg    := out_msg || '异常，具体原因为：' || sqlerrm;
  end;

  procedure proc_addfreezefare_mon(prmcustomerid       in number, --客户编号
                                   prmcardno           in number, --客户卡号
                                   prmcardsn           in number, --客户持卡序号
                                   prmvicesaveopcount  in number, --次钱包充值计数
                                   prmviceopcount      in number, --次钱包交易计数
                                   prmcardkind         in number, --卡种类 1：m1卡 2：cpu卡
                                   prmcardtypedetailid in number, --卡类型 普通卡 月卡 老年卡等
                                   --
                                   prmviceoddfare    in number, --卡余额
                                   prmvicefreezefare in out number, --次钱包冻结金额
                                   prmposcode        in number, --终端唯一编号
                                   prmpsamcardno     in number, --终端psam卡号
                                   prmempid          in integer, --操作职员编号
                                   prmcustunitcode   in varchar2, --客户代码
                                   out_planid        out integer, --领款事务号
                                   prmlimittimes     in number, --每月消费限制次数
                                   prmmonthnum       in number, --充值月数
                                   prmvalidtimestart in varchar2, --有效起日
                                   prmvalidtimeend   in varchar2, --有效止日
                                   out_msg           out varchar2,
                                   out_result        out integer) as
    /*
       --------------------------------------------------------------------------
       --存储过程：proc_addfreezefare_vice
       --作　　者：朱鹏飞
       --时　　间：2009-07-03
       --说　　明：次钱包冻结金额领取
       -- 次钱包冻结金额领取处理过程
       --1、调用未决处理过程。

       --2、读卡获取冻结金额

       --3、领取，先领次钱包，再按月领取。
       --返回值和返回信息定义：
       --100 ：申请成功，冻结金额传入一致。
       --101：申请成功，传入冻结金额与库不符
       --102：没有冻结金额领取
       --------------------------------------------------------------------------
       --修改人：周晓娜
    --修改时间： 20121212
    --修改说明：根据冻结金额表结构调整，重新处理账目流程
    -------------------------------------------------------------------------
       */
    i_count           integer;
    i_acccode         number; --冻结金额科目
    i_unsettleacccode number; --未决记录科目代码
    v_accdscrp        varchar2(20); -- 冻结金额科目描述
    n_planid          number;
    n_sumfreezefare   number(10, 2);
    i_custareaid      integer; --客户所属分区
    n_vicesaveopcount number;
  begin
    out_result := -1002;
    out_msg    := '初始化变量';
    --
    i_acccode  := 501; --次钱包冻结金额领取科目
    out_planid := -10;

    select count(*)
      into i_count
      from base_acc_type a
     where a.acccode = i_acccode;

    if i_count <> 1 then
      out_msg    := '基础数据错误，次钱包冻结金额科目不存在。';
      out_result := -1002;
      return;
    end if;

    --获取次钱包冻结金额领取科目描述
    select a.accdscrp
      into v_accdscrp
      from base_acc_type a
     where a.acccode = i_acccode;

    select count(*)
      into i_count
      from base_customers
     where customerid = prmcustomerid
       and cardno = prmcardno
       and customerunitcode = prmcustunitcode;

    if i_count = 0 then
      out_msg    := '账户不存在或者已注销customerid=' || to_char(prmcustomerid);
      out_result := -1002;
      return;
    end if;

    --2016-09-23 plan表中存在status=1的才认为是未决记录
    --添加条件:and a.status = 1
    select count(*)
      into i_count
      from rec_monticket_cash_plan a
     where a.customerid = prmcustomerid
       and a.cardno = prmcardno
       and a.status = 1
       and a.customerunitcode = prmcustunitcode;

    --如果已经存在冻结金额的领款初始记录，则直接返回
    if i_count > 0 then
      out_msg    := '存在未决记录，请先读卡处理未决或者在管理中心手工处理';
      out_result := -1003;
      commit;
      return;
    end if;

    --检查冻结金额表中是否有未决状态的记录，如果有则为异常
    select count(*)
      into i_count
      from rec_freezefare_acc a
     where a.customerid = prmcustomerid
       and a.monthfreezefareflag = 2
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    if i_count > 0 then
      out_msg    := '存在未决状态的冻结金额记录等非法数据，无法继续操作。' ||
                    '可能为某次异常中断造成数据不一致，请联系管理员处理';
      out_result := -1005;
      return;
    end if;

    --未决处理完毕或者没有未决记录或者有非当前卡未决
    select count(*)
      into i_count
      from rec_freezefare_acc a
     where a.customerid = prmcustomerid
       and a.monthfreezefareflag = 0
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    if i_count = 0 then
      out_msg    := '账户次钱包没有冻结金额可领取';
      out_result := 102;
      return;
    end if;

    out_result := -1027;
    out_msg    := '计算次钱包未领冻结金额';

    select nvl(sum(a.monthfreezefare), 0)
      into n_sumfreezefare
      from rec_freezefare_acc a
     where a.customerid = prmcustomerid
       and a.monthfreezefareflag = 0
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    --如果冻结金额为零，则直接更新为已领取
    if n_sumfreezefare = 0 then
      --更新冻结金额为申请状态
      update rec_freezefare_acc a
         set a.freezefareflag = 1
       where a.customerid = prmcustomerid
         and a.monthfreezefareflag = 0
         and a.customerunitcode = prmcustunitcode
         and cardid in
             (select id
                from base_customers
               where customerid = prmcustomerid
                 and cardno = prmcardno
                 and customerunitcode = prmcustunitcode);

      prmvicefreezefare := 0;
      out_msg           := '账户次钱包没有冻结金额';
      out_result        := 102;
      return;
    end if;

    --------------------------------------------------------------------------------
    --领款申请
    --获取申请流水号
    select seq_cash_plan.nextval into n_planid from dual;

    out_result := -1027;
    out_msg    := '形成领款申请记录';

    --形成领款记录时，以数据库金额为准
    insert into rec_monticket_cash_plan
      (planid,
       customerid,
       cardno,
       cardsn,
       cardtypedetailid,
       sumviceaddfare,
       viceoddfare,
       viceoddfarepre,
       viceopfare,
       vicedummyopfare,
       vicesaveopcount,
       viceopcount,
       status,
       acccode,
       opdt,
       description,
       cardkind,
       poscode,
       psamcardno,
       empid,
       dealtype,
       wallettype,
       tac,
       samtradeno,
       ver,
       customerunitcode,
       validtimestart,
       validtimeend,
       limittimes,
       monthnum)
    values
      (n_planid,
       prmcustomerid,
       prmcardno,
       prmcardsn,
       prmcardtypedetailid,
       0,
       0,
       prmviceoddfare,
       n_sumfreezefare,
       0,
       prmvicesaveopcount,
       prmviceopcount,
       1,
       i_acccode,
       sysdate,
       v_accdscrp,
       prmcardkind,
       prmposcode,
       prmpsamcardno,
       prmempid,
       0,
       0,
       0,
       0,
       0,
       prmcustunitcode,
       to_date(prmvalidtimestart, 'yyyy-mm-dd hh24:mi:ss'),
       to_date(prmvalidtimeend, 'yyyy-mm-dd hh24:mi:ss'),
       prmlimittimes,
       prmmonthnum);

    --------------------------------------------------------------------------------
    out_result := -1028;
    out_msg    := '形成领款申请记录日志';

    insert into rec_monticket_cash_plan_log
      (planid,
       customerid,
       cardno,
       cardsn,
       cardtypedetailid,
       sumviceaddfare,
       viceoddfare,
       viceoddfarepre,
       viceopfare,
       vicesaveopcount,
       viceopcount,
       status,
       acccode,
       opdt,
       description,
       cardkind,
       poscode,
       psamcardno,
       empid,
       dealtype,
       wallettype,
       tac,
       samtradeno,
       ver,
       customerunitcode)
    values
      (n_planid,
       prmcustomerid,
       prmcardno,
       prmcardsn,
       prmcardtypedetailid,
       0,
       0,
       prmviceoddfare,
       n_sumfreezefare,
       prmvicesaveopcount,
       prmviceopcount,
       0,
       i_acccode,
       sysdate,
       v_accdscrp,
       prmcardkind,
       prmposcode,
       prmpsamcardno,
       prmempid,
       0,
       0,
       0,
       0,
       0,
       prmcustunitcode);

    --更新冻结金额为申请状态
    update rec_freezefare_acc a
       set a.monthfreezefareflag = 2
     where a.customerid = prmcustomerid
       and a.monthfreezefareflag = 0
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    out_planid := n_planid;
    out_msg    := '冻结金额申请成功';

    if prmvicefreezefare = n_sumfreezefare then
      out_result := 100;
    else
      --如果读卡时冻结金额与领取时不符，则以领取时库返回金额为准
      prmvicefreezefare := n_sumfreezefare;
      out_result        := 101;
    end if;

    commit;
  exception
    when others then
      rollback;
      out_result := out_result;
      out_msg    := out_msg || '异常，具体原因为：' || sqlerrm;
  end;

  procedure proc_getfreezefare_acc(prmcustomerid   in integer, --客户编号
                                   prmposcode      in number, --终端唯一编号
                                   prmpsamcardno   in number, --终端psam卡号
                                   prmempid        in integer, --操作职员编号
                                   prmcardno       in number, --客户卡号
                                   prmcustunitcode in varchar2, --客户代码
                                   out_msg         out varchar2,
                                   out_result      out integer,
                                   out_cursor      out refcursortype) as
    /*
    --------------------------------------------------------------------------
    --存储过程：proc_getfreezefare_acc
    --作　　者：朱鹏飞
    --时　　间：2009-07-06
    --说　　明：获取未领冻结金额记录
    --    调用之前，先调用一次处理未决
    --输入参数：
    --输出参数：
    --out_result：100 ：查询冻结金额成功成功，其他失败
    --    101：没有可以领取的冻结金额
    --    其他失败
    --返回值定义：
    --------------------------------------------------------------------------
    --修改人：周晓娜
    --修改时间： 20121107
    --修改说明：增加客户代码和去掉分区的业务处理
    -------------------------------------------------------------------------
    --修改人：周晓娜
    --修改时间： 20121210
    --修改说明：根据冻结金额表结构调整，重新处理账目流程
    -------------------------------------------------------------------------
    --修改标记：周晓娜 20130114
    --修改说明： 针对领取冻结金额时判断冲零时间而
                 形成的冲零记录增加资产负债账目-收支账目处理
    --------------------------------------------------------------------------
    --修改标记：周晓娜 20130409
    --修改说明： 领取冻结金额不在判断月票和次卡的冲零情况，可以直接全部领取，在终端
                 上面做清零形成清零记录
    --------------------------------------------------------------------------
    */
    i_custareaid      integer; --客户所属分区
    i_count           integer; --
    n_planid          number;
    n_elecsaveopcount number;
    v_deptcode        varchar2(9);
    i_deptareaid      integer;
    i_month           integer; --月份
    --
    n_unsettleopfare     number(10, 2); --未决记录操作金额
    n_unsettledumpfare   number(10, 2); --未决记录虚充金额
    i_unsettleacccode    number; --未决记录科目代码
    v_unsettleopdt       varchar(20); --未决记录操作时间
    n_unsettlepsamcardno number;
    n_unsettleposcode    number;
    n_unsettleempid      number;
    n_unsettlecardtype   number;
    n_unsettlecardkind   number;
    ---------
    n_elecfreezefare number(10, 2); --电子钱包冻结金额
    n_monfreezefare  number(10, 2); --月票钱包当月冻结金额
    d_monhangdate    date; --月票钱包当月冲零日期
    --
    v_sql varchar(1000);
    custom_exception exception; --自定义异常
    n_vicefreezefare number(10, 2); --次卡钱包当月冻结金额
    d_vicehangdate   date; --次卡当月钱包冲零日期
    --账户类型（收支账户使用）
    v_codeid    varchar2(50); --获取该客户法人的账户信息
    n_cashaccfc number; --形成消费明细的原始流水号
  begin
    out_msg    := '初始化变量';
    out_result := -1000;
    --变量初始化
    n_elecfreezefare := 0;
    n_monfreezefare  := 0;
    n_vicefreezefare := 0;
    d_monhangdate    := to_date('1800-01-01', 'yyyy-mm-dd');
    d_vicehangdate   := to_date('1800-01-01', 'yyyy-mm-dd');

    --1、判断账户是否存在
    select count(*)
      into i_count
      from base_customers a
     where customerid = prmcustomerid
       and a.customerunitcode = prmcustunitcode
       and cardno = prmcardno;

    if i_count <> 1 then
      out_msg    := '账户不存在或者已注销customerid：' || to_char(prmcustomerid);
      out_result := -1001;
      raise custom_exception;
    end if;

    --领未决之前，须先调用未决处理过程，将此人次张卡所有未决都处理掉，领冻结金额之时
    --    要保证没有未决记录。

    --2016-09-23 plan表中存在status=1的才认为是未决记录
    --添加条件:and a.status = 1
    select count(*)
      into i_count
      from rec_electtron_cash_plan a
     where a.customerid = prmcustomerid
       and a.cardno = prmcardno
       and a.status = 1
       and a.customerunitcode = prmcustunitcode;

    --如果已经存在冻结金额的领款初始记录，则直接返回
    if i_count > 0 then
      out_msg    := '电子钱包存在未决记录，请先读卡处理未决或者在管理中心手工处理';
      out_result := -1003;
      raise custom_exception;
    end if;

    --2016-09-23 plan表中存在status=1的才认为是未决记录
    --添加条件:and a.status = 1
    select count(*)
      into i_count
      from rec_vicecard_cash_plan a
     where a.customerid = prmcustomerid
       and a.cardno = prmcardno
       and a.status = 1
       and a.customerunitcode = prmcustunitcode;

    --如果已经存在冻结金额的领款初始记录，则直接返回
    if i_count > 0 then
      out_msg    := '次卡钱包存在未决记录，请先读卡处理未决或者在管理中心手工处理';
      out_result := -1003;
      raise custom_exception;
    end if;

    --2016-09-23 plan表中存在status=1的才认为是未决记录
    --添加条件:and a.status = 1
    select count(*)
      into i_count
      from rec_monticket_cash_plan a
     where a.customerid = prmcustomerid
       and a.cardno = prmcardno
       and a.status = 1
       and a.customerunitcode = prmcustunitcode;

    --如果已经存在冻结金额的领款初始记录，则直接返回
    if i_count > 0 then
      out_msg    := '月票钱包存在未决记录，请先读卡处理未决或者在管理中心手工处理';
      out_result := -1003;
      raise custom_exception;
    end if;

    --2、判断职员信息是否正确(状态为正常，部门信息正常)
    select count(*)
      into i_count
      from base_emp a, base_dept b
     where a.dptcode = b.dptcode
       and a.empid = prmempid
       and a.status = 1
       and a.customerunitcode = b.customerunitcode
       and a.customerunitcode = prmcustunitcode;

    if i_count <> 1 then
      out_msg    := '职员信息异常empid：' || to_char(prmempid);
      out_result := -1002;
      raise custom_exception;
    end if;

    select a.dptcode
      into v_deptcode
      from base_emp a, base_dept b
     where a.dptcode = b.dptcode
       and a.empid = prmempid
       and a.status = 1
       and a.customerunitcode = b.customerunitcode
       and a.customerunitcode = prmcustunitcode;

    -------一、返回可领冻结金额------------------------------------------------

    --返回汇总后的冻结金额结果集
    open out_cursor for
      select a.id,
             a.customerid,
             a.cardno,
             a.cardtype,
             a.cardsn,
             a.cardkind,
             a.opcount,
             a.saveopcount,
             a.freezefare,
             a.empid,
             a.freezefareflag,
             a.createdate,
             a.ver,
             a.customerunitcode,
             a.wallettype,
             a.opdt,
             a.validtimestart,
             a.validtimeend,
             monthfreezefare,
             monthfreezefareflag,
             vicefreezefare,
             vicefreezefareflag,
             vicevalidtimestart,
             vicevalidtimeend
        from rec_freezefare_acc a
       where a.customerid = prmcustomerid
         and a.customerunitcode = prmcustunitcode
         --2017-08-17 领取冻结金额条件修改
         and a.newcardno = prmcardno;


    out_msg    := '查询成功';
    out_result := 100;
    commit;
    return;
  exception
    when custom_exception then
      rollback;
      out_result := out_result;
      out_msg    := out_msg;

      --保证在异常时， 仍然能结果集返回
      open out_cursor for
        select a.id,
               a.customerid,
               a.cardno,
               a.cardtype,
               a.cardsn,
               a.cardkind,
               a.opcount,
               a.saveopcount,
               a.freezefare,
               a.empid,
               a.freezefareflag,
               a.createdate,
               a.ver,
               a.customerunitcode,
               a.wallettype,
               a.opdt,
               a.limittimes,
               a.monthnum,
               a.validtimestart,
               a.validtimeend
          from rec_freezefare_acc a
         where a.customerid = prmcustomerid
           and a.cardno = prmcardno
           and a.freezefareflag = 0
           and a.customerunitcode = prmcustunitcode;
    when others then
      rollback;
      out_result := out_result;
      out_msg    := out_msg || '异常，具体原因为：' || sqlerrm;

      --保证在异常时， 仍然能结果集返回
      open out_cursor for
        select a.id,
               a.customerid,
               a.cardno,
               a.cardtype,
               a.cardsn,
               a.cardkind,
               a.opcount,
               a.saveopcount,
               a.freezefare,
               a.empid,
               a.freezefareflag,
               a.createdate,
               a.ver,
               a.customerunitcode,
               a.wallettype,
               a.opdt,
               a.limittimes,
               a.monthnum,
               a.validtimestart,
               a.validtimeend
          from rec_freezefare_acc a
         where a.customerid = prmcustomerid
           and a.cardno = prmcardno
           and a.freezefareflag = 0
           and a.customerunitcode = prmcustunitcode;
  end;

  procedure proc_addfreezefare_vice(prmcustomerid       in number, --客户编号
                                    prmcardno           in number, --客户卡号
                                    prmcardsn           in number, --客户持卡序号
                                    prmvicesaveopcount  in number, --次钱包充值计数
                                    prmviceopcount      in number, --次钱包交易计数
                                    prmcardkind         in number, --卡种类 1：m1卡 2：cpu卡
                                    prmcardtypedetailid in number, --卡类型 普通卡 月卡 老年卡等
                                    --
                                    prmviceoddfare    in number, --卡余额
                                    prmvicefreezefare in out number, --次钱包冻结金额
                                    prmposcode        in number, --终端唯一编号
                                    prmpsamcardno     in number, --终端psam卡号
                                    prmempid          in integer, --操作职员编号
                                    prmcustunitcode   in varchar2, --客户代码
                                    out_planid        out integer, --领款事务号
                                    prmlimittimes     in number, --每月消费限制次数
                                    prmmonthnum       in number, --充值月数
                                    prmvalidtimestart in varchar2, --有效起日
                                    prmvalidtimeend   in varchar2, --有效止日
                                    out_msg           out varchar2,
                                    out_result        out integer) as
    /*
       --------------------------------------------------------------------------
       --存储过程：proc_addfreezefare_vice
       --作　　者：朱鹏飞
       --时　　间：2009-07-03
       --说　　明：次钱包冻结金额领取
       -- 次钱包冻结金额领取处理过程
       --1、调用未决处理过程。

       --2、读卡获取冻结金额

       --3、领取，先领次钱包，再按月领取。
       --返回值和返回信息定义：
       --100 ：申请成功，冻结金额传入一致。
       --101：申请成功，传入冻结金额与库不符
       --102：没有冻结金额领取
       --------------------------------------------------------------------------
       --修改人：周晓娜
    --修改时间： 20121212
    --修改说明：根据冻结金额表结构调整，重新处理账目流程
    -------------------------------------------------------------------------
       */
    i_count           integer;
    i_acccode         number; --冻结金额科目
    i_unsettleacccode number; --未决记录科目代码
    v_accdscrp        varchar2(20); -- 冻结金额科目描述
    n_planid          number;
    n_sumfreezefare   number(10, 2);
    i_custareaid      integer; --客户所属分区
    n_vicesaveopcount number;
  begin
    out_result := -1002;
    out_msg    := '初始化变量';
    --
    i_acccode  := 502; --次钱包冻结金额领取科目
    out_planid := -10;

    select count(*)
      into i_count
      from base_acc_type a
     where a.acccode = i_acccode;

    if i_count <> 1 then
      out_msg    := '基础数据错误，次钱包冻结金额科目不存在。';
      out_result := -1002;
      return;
    end if;

    --获取次钱包冻结金额领取科目描述
    select a.accdscrp
      into v_accdscrp
      from base_acc_type a
     where a.acccode = i_acccode;

    select count(*)
      into i_count
      from base_customers
     where customerid = prmcustomerid
       and cardno = prmcardno
       and customerunitcode = prmcustunitcode;

    if i_count = 0 then
      out_msg    := '账户不存在或者已注销customerid=' || to_char(prmcustomerid);
      out_result := -1002;
      return;
    end if;

    --2016-09-23 plan表中存在status=1的才认为是未决记录
    --添加条件:and a.status = 1
    select count(*)
      into i_count
      from rec_vicecard_cash_plan a
     where a.customerid = prmcustomerid
       and a.cardno = prmcardno
       and a.status = 1
       and a.customerunitcode = prmcustunitcode;

    --如果已经存在冻结金额的领款初始记录，则直接返回
    if i_count > 0 then
      out_msg    := '存在未决记录，请先读卡处理未决或者在管理中心手工处理';
      out_result := -1003;
      commit;
      return;
    end if;

    --检查冻结金额表中是否有未决状态的记录，如果有则为异常
    select count(*)
      into i_count
      from rec_freezefare_acc a
     where a.customerid = prmcustomerid
       and a.vicefreezefareflag = 2
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    if i_count > 0 then
      out_msg    := '存在未决状态的冻结金额记录等非法数据，无法继续操作。' ||
                    '可能为某次异常中断造成数据不一致，请联系管理员处理';
      out_result := -1005;
      return;
    end if;

    --未决处理完毕或者没有未决记录或者有非当前卡未决
    select count(*)
      into i_count
      from rec_freezefare_acc a
     where a.customerid = prmcustomerid
       and a.vicefreezefareflag = 0
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    if i_count = 0 then
      out_msg    := '账户次钱包没有冻结金额可领取';
      out_result := 102;
      return;
    end if;

    out_result := -1027;
    out_msg    := '计算次钱包未领冻结金额';

    select nvl(sum(a.vicefreezefare), 0)
      into n_sumfreezefare
      from rec_freezefare_acc a
     where a.customerid = prmcustomerid
       and a.vicefreezefareflag = 0
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    --如果冻结金额为零，则直接更新为已领取
    if n_sumfreezefare = 0 then
      --更新冻结金额为申请状态
      update rec_freezefare_acc a
         set a.vicefreezefareflag = 1
       where a.customerid = prmcustomerid
         and a.vicefreezefareflag = 0
         and a.customerunitcode = prmcustunitcode
         and cardid in
             (select id
                from base_customers
               where customerid = prmcustomerid
                 and cardno = prmcardno
                 and customerunitcode = prmcustunitcode);

      prmvicefreezefare := 0;
      out_msg           := '账户次钱包没有冻结金额';
      out_result        := 102;
      return;
    end if;

    --------------------------------------------------------------------------------
    --领款申请
    --获取申请流水号
    select seq_cash_plan.nextval into n_planid from dual;

    out_result := -1027;
    out_msg    := '形成领款申请记录';

    --形成领款记录时，以数据库金额为准
    insert into rec_vicecard_cash_plan
      (planid,
       customerid,
       cardno,
       cardsn,
       cardtypedetailid,
       sumviceaddfare,
       viceoddfare,
       viceoddfarepre,
       viceopfare,
       vicedummyopfare,
       vicesaveopcount,
       viceopcount,
       status,
       acccode,
       opdt,
       description,
       areaid,
       cardkind,
       poscode,
       psamcardno,
       empid,
       dealtype,
       wallettype,
       tac,
       samtradeno,
       ver,
       customerunitcode,
       validtimestart,
       validtimeend,
       limittimes,
       monthnum)
    values
      (n_planid,
       prmcustomerid,
       prmcardno,
       prmcardsn,
       prmcardtypedetailid,
       0,
       0,
       prmviceoddfare,
       n_sumfreezefare,
       0,
       prmvicesaveopcount,
       prmviceopcount,
       1,
       i_acccode,
       sysdate,
       v_accdscrp,
       i_custareaid,
       prmcardkind,
       prmposcode,
       prmpsamcardno,
       prmempid,
       0,
       0,
       0,
       0,
       0,
       prmcustunitcode,
       to_date(prmvalidtimestart, 'yyyy-mm-dd hh24:mi:ss'),
       to_date(prmvalidtimeend, 'yyyy-mm-dd hh24:mi:ss'),
       prmlimittimes,
       prmmonthnum);

    --------------------------------------------------------------------------------
    out_result := -1028;
    out_msg    := '形成领款申请记录日志';

    insert into rec_vicecard_cash_plan_log
      (planid,
       customerid,
       cardno,
       cardsn,
       cardtypedetailid,
       sumviceaddfare,
       viceoddfare,
       viceoddfarepre,
       viceopfare,
       vicesaveopcount,
       viceopcount,
       status,
       acccode,
       opdt,
       description,
       cardkind,
       poscode,
       psamcardno,
       empid,
       dealtype,
       wallettype,
       tac,
       samtradeno,
       ver,
       customerunitcode)
    values
      (n_planid,
       prmcustomerid,
       prmcardno,
       prmcardsn,
       prmcardtypedetailid,
       0,
       0,
       prmviceoddfare,
       n_sumfreezefare,
       prmvicesaveopcount,
       prmviceopcount,
       0,
       i_acccode,
       sysdate,
       v_accdscrp,
       prmcardkind,
       prmposcode,
       prmpsamcardno,
       prmempid,
       0,
       0,
       0,
       0,
       0,
       prmcustunitcode);

    --更新冻结金额为申请状态
    update rec_freezefare_acc a
       set a.vicefreezefareflag = 2
     where a.customerid = prmcustomerid
       and a.vicefreezefareflag = 0
       and a.customerunitcode = prmcustunitcode
       and cardid in (select id
                        from base_customers
                       where customerid = prmcustomerid
                         and cardno = prmcardno
                         and customerunitcode = prmcustunitcode);

    out_planid := n_planid;
    out_msg    := '冻结金额申请成功';

    if prmvicefreezefare = n_sumfreezefare then
      out_result := 100;
    else
      --如果读卡时冻结金额与领取时不符，则以领取时库返回金额为准
      prmvicefreezefare := n_sumfreezefare;
      out_result        := 101;
    end if;

    commit;
  exception
    when others then
      rollback;
      out_result := out_result;
      out_msg    := out_msg || '异常，具体原因为：' || sqlerrm;
  end;
end;/
create or replace package pkg_gis
is
   type mycursor is ref cursor;

   type buscollect is table of base_bus%rowtype;

   type termcollect is table of base_term%rowtype;

   type drivercollect is table of rec_drivecard_record%rowtype;

   type ty_str_split is table of varchar2 (4000);

   procedure devicedriverbyline (
      cur                 out      mycursor,
      linecode            in       number,
      customerunitcodes   in       varchar2,
      errormsg            out      varchar2
   );

   procedure devicedriverbybuss (
      cur                 out      mycursor,
      buscodes            in       varchar2,
      customerunitcodes   in       varchar2,
      errormsg            out      varchar2
   );

   procedure devicedriverbybus (
      cur                 out      mycursor,
      buscode             in       number,
      customerunitcodes   in       varchar2,
      errormsg            out      varchar2
   );

   function fn_split (p_str in varchar2, p_delimiter in varchar2)
      return ty_str_split;
end;                                                           -- package spec/
create or replace package body pkg_gis
is
   procedure devicedriverbyline (
      cur                 out      mycursor,
      linecode            in       number,
      customerunitcodes   in       varchar2,
      errormsg            out      varchar2
   )
   is
      buss         buscollect;
      terms        termcollect;
      i            number         := 1;
      j            number         := 1;
      delist       ty_str_split;
      out_result   number;
      out_msg      varchar2 (200);
      lineid       number;
      busno        number;
      poscodes     number;
   begin
      delete from gis_temptable;

      select t.*
      bulk collect into buss
        from base_bus t
       where t.lineid = linecode and t.customerunitcode = customerunitcodes;

      for i in 1 .. buss.count ()
      loop
         lineid := buss (i).lineid;
         busno := buss (i).busno;

         if (buss (i).isflag = 1)
         then
            begin
               delist := fn_split (buss (i).poscodelist, '|');

               for j in 1 .. delist.count ()
               loop
                  poscodes := delist (j);

                  insert into gis_temptable
                              (lineid, busno, termname, poscode, driverid,
                               drivercardno, optype, opdt)
                     select lineid, busno, bt.termname, bt.poscode,
                            rdr.driverid, rdr.drivercardno, rdr.optype,
                            rdr.opdt
                       from base_term bt
                            left join
                            (select *
                               from rec_drivecard_record rec
                              where rec.opdt
                                       between to_date
                                                    (   to_char (sysdate,
                                                                 'yyyy-mm-dd'
                                                                )
                                                     || '00:00:00',
                                                     'yyyy-mm-dd hh24:mi:ss'
                                                    )
                                           and to_date
                                                     (   to_char (sysdate,
                                                                  'yyyy-mm-dd'
                                                                 )
                                                      || '23:59:59',
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     )
                                and rec.customerunitcode = customerunitcodes) rdr
                            on bt.poscode = rdr.poscode
                      where bt.poscode = poscodes
                        and bt.customerunitcode = customerunitcodes;
               --null;
               end loop;
            end;
         else
            begin
               poscodes := buss (i).poscode;

               insert into gis_temptable
                           (lineid, busno, termname, poscode, driverid,
                            drivercardno, optype, opdt)
                  select buss (i).lineid, buss (i).busno, bt.termname,
                         bt.poscode, rdr.driverid, rdr.drivercardno,
                         rdr.optype, rdr.opdt
                    from base_term bt
                         left join
                         (select *
                            from rec_drivecard_record rec
                           where rec.opdt
                                    between to_date (   to_char (sysdate,
                                                                 'yyyy-mm-dd'
                                                                )
                                                     || '00:00:00',
                                                     'yyyy-mm-dd hh24:mi:ss'
                                                    )
                                        and to_date (   to_char (sysdate,
                                                                 'yyyy-mm-dd'
                                                                )
                                                     || '23:59:59',
                                                     'yyyy-mm-dd hh24:mi:ss'
                                                    )
                             and rec.customerunitcode = customerunitcodes) rdr
                         on bt.poscode = rdr.poscode
                       and bt.customerunitcode = rdr.customerunitcode
                   where bt.poscode = poscodes
                     and bt.customerunitcode = customerunitcodes;
            --null;
            end;
         end if;
      end loop;

      open cur for
         select *
           from gis_temptable;
   exception
      when others
      then
         null;
   end;

   procedure devicedriverbybuss (
      cur                 out      mycursor,
      buscodes            in       varchar2,
      customerunitcodes   in       varchar2,
      errormsg            out      varchar2
   )
   is
      flag      buscollect;
      poscode   varchar2 (4000);
      delist    ty_str_split;
      i         number;
      buslist    ty_str_split;
      j         number;
   begin
      delete from gis_temptable;

      buslist := fn_split (buscodes, ',');

      if (buslist.count () > 0)
      then
          for j in 1 .. buslist.count ()
          loop
            select *
              bulk collect into flag
                from base_bus t
               where t.busno = buslist (j) and t.customerunitcode = customerunitcodes;

              if (flag.count () > 0)
              then
                 begin
                    if (flag (1).isflag = 1)
                    then
                       begin
                          select t.poscodelist
                            into poscode
                            from base_bus t
                           where t.busno = buslist (j)
                             and t.customerunitcode = customerunitcodes;

                          delist := fn_split (poscode, '|');

                          for i in 1 .. delist.count ()
                          loop
                             begin
                                insert into gis_temptable
                                            (lineid, busno, termname, poscode,
                                             driverid, drivercardno, optype, opdt)
                                   select flag (1).lineid, flag (1).busno,
                                          bt.termname, bt.poscode, rdr.driverid,
                                          rdr.drivercardno, rdr.optype, rdr.opdt
                                     from base_term bt
                                          left join
                                          (select *
                                             from rec_drivecard_record rec
                                            where rec.opdt
                                                     between to_date
                                                               (   to_char
                                                                         (sysdate,
                                                                          'yyyy-mm-dd'
                                                                         )
                                                                || '00:00:00',
                                                                'yyyy-mm-dd hh24:mi:ss'
                                                               )
                                                         and to_date
                                                               (   to_char
                                                                         (sysdate,
                                                                          'yyyy-mm-dd'
                                                                         )
                                                                || '23:59:59',
                                                                'yyyy-mm-dd hh24:mi:ss'
                                                               )
                                              and rec.customerunitcode =
                                                                     customerunitcodes) rdr
                                          on bt.poscode = rdr.poscode
                                        and bt.customerunitcode = rdr.customerunitcode
                                    where bt.poscode = delist (i)
                                      and bt.customerunitcode = customerunitcodes;
                             end;
                          end loop;
                       end;
                    else
                       if (flag (1).isflag = 0)
                       then
                          begin
                             insert into gis_temptable
                                         (lineid, busno, termname, poscode, driverid,
                                          drivercardno, optype, opdt)
                                select flag (1).lineid, flag (1).busno, bt.termname,
                                       bt.poscode, rdr.driverid, rdr.drivercardno,
                                       rdr.optype, rdr.opdt
                                  from base_term bt
                                       left join
                                       (select *
                                          from rec_drivecard_record rec
                                         where rec.opdt
                                                  between to_date
                                                            (   to_char (sysdate,
                                                                         'yyyy-mm-dd'
                                                                        )
                                                             || '00:00:00',
                                                             'yyyy-mm-dd hh24:mi:ss'
                                                            )
                                                      and to_date
                                                             (   to_char (sysdate,
                                                                          'yyyy-mm-dd'
                                                                         )
                                                              || '23:59:59',
                                                              'yyyy-mm-dd hh24:mi:ss'
                                                             )
                                           and rec.customerunitcode =
                                                                     customerunitcodes) rdr
                                       on bt.poscode = rdr.poscode
                                     and bt.customerunitcode = rdr.customerunitcode
                                 where bt.poscode = flag (1).poscode
                                   and bt.customerunitcode = customerunitcodes;
                          end;
                       end if;
                    end if;
                 end;
              end if;
          end loop;
      else
         begin
            errormsg := '';
         end;
      end if;

      open cur for
         select *
           from gis_temptable;
   exception
      when others
      then
         null;
   end devicedriverbybuss;

   procedure devicedriverbybus (
      cur                 out      mycursor,
      buscode             in       number,
      customerunitcodes   in       varchar2,
      errormsg            out      varchar2
   )
   is
      flag      buscollect;
      poscode   varchar2 (4000);
      delist    ty_str_split;
      i         number;
   begin
      delete from gis_temptable;

      select *
      bulk collect into flag
        from base_bus t
       where t.busno = buscode and t.customerunitcode = customerunitcodes;

      if (flag.count () > 0)
      then
         begin
            if (flag (1).isflag = 1)
            then
               begin
                  select t.poscodelist
                    into poscode
                    from base_bus t
                   where t.busno = buscode
                     and t.customerunitcode = customerunitcodes;

                  delist := fn_split (poscode, '|');

                  for i in 1 .. delist.count ()
                  loop
                     begin
                        insert into gis_temptable
                                    (lineid, busno, termname, poscode,
                                     driverid, drivercardno, optype, opdt)
                           select flag (1).lineid, flag (1).busno,
                                  bt.termname, bt.poscode, rdr.driverid,
                                  rdr.drivercardno, rdr.optype, rdr.opdt
                             from base_term bt
                                  left join
                                  (select *
                                     from rec_drivecard_record rec
                                    where rec.opdt
                                             between to_date
                                                       (   to_char
                                                                 (sysdate,
                                                                  'yyyy-mm-dd'
                                                                 )
                                                        || '00:00:00',
                                                        'yyyy-mm-dd hh24:mi:ss'
                                                       )
                                                 and to_date
                                                       (   to_char
                                                                 (sysdate,
                                                                  'yyyy-mm-dd'
                                                                 )
                                                        || '23:59:59',
                                                        'yyyy-mm-dd hh24:mi:ss'
                                                       )
                                      and rec.customerunitcode =
                                                             customerunitcodes) rdr
                                  on bt.poscode = rdr.poscode
                                and bt.customerunitcode = rdr.customerunitcode
                            where bt.poscode = delist (i)
                              and bt.customerunitcode = customerunitcodes;
                     end;
                  end loop;
               end;
            else
               if (flag (1).isflag = 0)
               then
                  begin
                     insert into gis_temptable
                                 (lineid, busno, termname, poscode, driverid,
                                  drivercardno, optype, opdt)
                        select flag (1).lineid, flag (1).busno, bt.termname,
                               bt.poscode, rdr.driverid, rdr.drivercardno,
                               rdr.optype, rdr.opdt
                          from base_term bt
                               left join
                               (select *
                                  from rec_drivecard_record rec
                                 where rec.opdt
                                          between to_date
                                                    (   to_char (sysdate,
                                                                 'yyyy-mm-dd'
                                                                )
                                                     || '00:00:00',
                                                     'yyyy-mm-dd hh24:mi:ss'
                                                    )
                                              and to_date
                                                     (   to_char (sysdate,
                                                                  'yyyy-mm-dd'
                                                                 )
                                                      || '23:59:59',
                                                      'yyyy-mm-dd hh24:mi:ss'
                                                     )
                                   and rec.customerunitcode =
                                                             customerunitcodes) rdr
                               on bt.poscode = rdr.poscode
                             and bt.customerunitcode = rdr.customerunitcode
                         where bt.poscode = flag (1).poscode
                           and bt.customerunitcode = customerunitcodes;
                  end;
               end if;
            end if;
         end;
      else
         begin
            errormsg := '';
         end;
      end if;

      open cur for
         select *
           from gis_temptable;
   exception
      when others
      then
         null;
   end devicedriverbybus;

   function fn_split (p_str in varchar2, p_delimiter in varchar2)
      return ty_str_split
   is
      j           int             := 0;
      i           int             := 1;
      len         int             := 0;
      len1        int             := 0;
      str         varchar2 (4000);
      str_split   ty_str_split    := ty_str_split ();
   begin
      len := length (p_str);
      len1 := length (p_delimiter);

      while j < len
      loop
         j := instr (p_str, p_delimiter, i);

         if j = 0
         then
            j := len;
            str := substr (p_str, i);
            str_split.extend;
            str_split (str_split.count) := str;

            if i >= len
            then
               exit;
            end if;
         else
            str := substr (p_str, i, j - i);
            i := j + len1;
            str_split.extend;
            str_split (str_split.count) := str;
         end if;
      end loop;

      return str_split;
   end fn_split;
end;/
create or replace package pkg_handdeal_unsetcash
is
    type refcursortype is ref cursor; --游标类型定义，用于返回数据集

    procedure proc_getelectr_unsetcashconsum (
        prmcsutomerid     in     number, --账号
        prmcardsn         in     number, --持卡序号
        prmopcount        in     number, --消费操作计数
        prmsaveopcount    in     number, --充值操作计数
        prmcustunitcode   in     varchar2, --客户代码
        prmcardasn        in     number, --卡号
        prmopdt           in     date, --充值时间
        out_cursor           out refcursortype);

    procedure repeal_vicecard_commit (prmplanid             in     number, --计划id
                                      prmcustomerid         in     number,
                                      prmtac                in     varchar2,
                                      prmcustomerunitcode   in     varchar2, --客户代码
                                      out_result               out number,
                                      out_msg                  out varchar2);

    procedure repeal_monticket_commit (prmplanid             in     number, --计划id
                                       prmcustomerid         in     number,
                                       prmtac                in     varchar2,
                                       prmcustomerunitcode   in     varchar2, --客户代码
                                       out_result               out number,
                                       out_msg                  out varchar2);

    --获取当前时间5分钟以前的电子钱包充值未决记录记录
    procedure proc_getelectr_unsetcash (
        prmcustunitcode   in     varchar2, --客户代码
        out_cursor           out refcursortype);

    procedure proc_handelectr_unsetcash (prmplanid         in     number, --计划id
                                         prmopertype       in     number,
                                         --处理类型 0：处理为失败 1：处理为成功
                                         prmcustomerid     in     number,
                                         prmcustunitcode   in     varchar2, --客户代码
                                         out_result           out number,
                                         out_msg              out varchar2);

    procedure proc_getmon_unsetcash (prmcustunitcode   in     varchar2, --客户代码
                                     out_cursor           out refcursortype);

    procedure proc_getmon_unsetcashconsum (
        prmcustomerid     in     number,
        prmcardsn         in     number,
        prmopcount        in     number, --消费操作计数
        prmsaveopcount    in     number, --充值操作计数
        prmcustunitcode   in     varchar2, --客户代码
        prmcardasn        in     number, --卡号
        prmopdt           in     date, --充值时间
        out_cursor           out refcursortype);

    procedure proc_handmon_unsetcash (prmplanid         in     number, --计划id
                                      prmopertype       in     number,
                                      --处理类型 0：处理为失败 1：处理为成功
                                      prmcustomerid     in     number,
                                      prmcustunitcode   in     varchar2, --客户代码
                                      out_result           out number,
                                      out_msg              out varchar2);

    procedure module_electrcash_commit (prmplanid         in     number, --计划id
                                        prmcustomerid     in     number,
                                        prmtac            in     varchar2,
                                        prmcustunitcode   in     varchar2, --客户代码
                                        out_result           out number,
                                        out_msg              out varchar2);

    procedure module_electrcash_rollback (prmplanid         in     number, --计划id
                                          prmcustomerid     in     number,
                                          prmbadcode        in     number,
                                          prmbaddesc        in     varchar2,
                                          prmcustunitcode   in     varchar2, --客户代码
                                          out_result           out number,
                                          out_msg              out varchar2);

    procedure module_montrcash_commit (prmplanid         in     number, --计划id
                                       prmcustomerid     in     number,
                                       prmtac            in     varchar2,
                                       prmcustunitcode   in     varchar2, --客户代码
                                       out_result           out number,
                                       out_msg              out varchar2);

    procedure module_montrcash_rollback (prmplanid         in     number, --计划id
                                         prmcustomerid     in     number,
                                         prmbadcode        in     number,
                                         prmbaddesc        in     varchar2,
                                         prmcustunitcode   in     varchar2, --客户代码
                                         out_result           out number,
                                         out_msg              out varchar2);

    procedure repeal_electrcash_commit (prmplanid         in     number, --计划id
                                        prmcustomerid     in     number,
                                        prmtac            in     varchar2,
                                        prmcustunitcode   in     varchar2, --客户代码
                                        out_result           out number,
                                        out_msg              out varchar2);

    ---------------------------次卡钱包充值业务操作---------------------------
    --次卡钱包充值提交
    procedure module_vicecardcash_commit (prmplanid         in     number, --计划id
                                          prmcustomerid     in     number,
                                          prmtac            in     varchar2,
                                          prmcustunitcode   in     varchar2, --客户代码
                                          out_result           out number,
                                          out_msg              out varchar2);

    --次卡钱包充值回滚
    procedure module_vicecardcash_rollback (
        prmplanid         in     number, --计划id
        prmcustomerid     in     number,
        prmbadcode        in     number,
        prmbaddesc        in     varchar2,
        prmcustunitcode   in     varchar2, --客户代码
        out_result           out number,
        out_msg              out varchar2);

    ----------------------次卡钱包充值未决---------------------------------------
    --获取未决记录充值和消费opount左右相差5的记录信息
    procedure proc_getvice_unsetcashconsum (
        prmcsutomerid     in     number, --账号
        prmcardsn         in     number, --持卡序号
        prmopcount        in     number, --消费操作计数
        prmsaveopcount    in     number, --充值操作计数
        prmcustunitcode   in     varchar2, --客户代码
        prmcardasn        in     number, --卡号
        prmopdt           in     date, --充值时间
        out_cursor           out refcursortype);

    --获取当前时间5分钟以前的次卡钱包充值未决记录记录
    procedure proc_getvice_unsetcash (prmcustunitcode   in     varchar2, --客户代码
                                      out_cursor           out refcursortype);

    --手工处理次卡充值未决记录
    procedure proc_handvice_unsetcash (prmplanid         in     number, --计划id
                                       prmopertype       in     number,
                                       --处理类型 0：处理为失败 1：处理为成功
                                       prmcustomerid     in     number,
                                       prmcustunitcode   in     varchar2, --客户代码
                                       out_result           out number,
                                       out_msg              out varchar2);
end;
/
create or replace package body pkg_handdeal_unsetcash
is
    procedure proc_getelectr_unsetcashconsum (
        prmcsutomerid     in     number, --账号
        prmcardsn         in     number, --持卡序号
        prmopcount        in     number, --消费交易操作计数
        prmsaveopcount    in     number, --充值操作计数
        prmcustunitcode   in     varchar2, --客户代码
        prmcardasn        in     number, --卡号
        prmopdt           in     date, --充值时间
        out_cursor           out refcursortype)
    as
    /*
    ------------------------------------------------------------------------
    --存储过程： proc_getelectr_unsetcashconsum
    --作　　者：朱鹏飞
    --时　　间：2009-06-19
    --说　　明： 获取充值未决记录前后的消费记录
    ------------------------------------------------------------------------
    --作　　者：周晓娜
    --时　　间：2012-09-13
    --说　　明： 兼容多客户和一人多卡的情况处理
    ------------------------------------------------------------------------
    */
    begin
        open out_cursor for
            select rownum as id, c.*
              from (select a.customerid,
                           a.cardsn,
                           a.cardno,
                           a.opdt,
                           a.acccode,
                           a.dscrp,
                           a.electropcount,
                           a.electrsaveopcount,
                           a.electroddfare,
                           a.electropfare
                      from rec_electtron_cash a
                     where     a.customerid = prmcsutomerid
                           and a.cardsn = prmcardsn
                           and (a.electrsaveopcount between   prmsaveopcount
                                                            - 5
                                                        and   prmsaveopcount
                                                            + 5)
                           and a.cardno = prmcardasn
                           and a.customerunitcode = prmcustunitcode
                    union
                    select *
                      from (  select a.customerid,
                                     a.cardsn,
                                     a.cardno,
                                     a.opdt,
                                     a.acccode,
                                     a.dscrp,
                                     a.opcount,
                                     0 as electrsaveopcount,
                                     a.electronoddfare,
                                     a.electronopfare as electropfare
                                from rec_electtron_consume a
                               where     a.customerid = prmcsutomerid
                                     and a.cardsn = prmcardsn
                                     -- and (a.opcount between prmopcount - 5 and prmopcount + 5)
                                     and a.cardasn = prmcardasn
                                     and a.customerunitcode = prmcustunitcode
                                     and a.opdt <= prmopdt
                            order by opdt desc)
                     where rownum <= 10
                    union
                    select *
                      from (  select a.customerid,
                                     a.cardsn,
                                     a.cardno,
                                     a.opdt,
                                     a.acccode,
                                     a.dscrp,
                                     a.opcount,
                                     0 as electrsaveopcount,
                                     a.electronoddfare,
                                     a.electronopfare as electropfare
                                from rec_electtron_consume a
                               where     a.customerid = prmcsutomerid
                                     and a.cardsn = prmcardsn
                                     -- and (a.opcount between prmopcount - 5 and prmopcount + 5)
                                     and a.cardasn = prmcardasn
                                     and a.customerunitcode = prmcustunitcode
                                     and a.opdt > prmopdt
                            order by opdt)
                     where rownum <= 10) c;
    end;

    procedure proc_getelectr_unsetcash (
        prmcustunitcode   in     varchar2,
        out_cursor           out refcursortype)
    as
    /*
    ------------------------------------------------------------------------
    --存储过程： proc_getelectr_unsetcash
    --作　　者：朱鹏飞
    --时　　间：2009-06-19
    --说　　明： 获取当前时间5分钟以前的电子钱包充值未决记录记录
    ------------------------------------------------------------------------
    --作　　者：周晓娜
    --时　　间：2012-09-13
    --说　　明： 兼容多客户处理
    ------------------------------------------------------------------------
    */
    begin
        open out_cursor for
              --zxn 20121107 去掉分区字段
              select a.planid,
                     a.customerid,
                     d.idcardno,
                     d.name,
                     a.cardno,
                     a.cardsn,
                     a.opdt,
                     a.acccode,
                     a.description,
                     a.sumelectraddfare,
                     a.electroddfare,
                     a.electroddfarepre,
                     a.electrdummyopfare,
                     a.electropfare,
                     a.electrsaveopcount,
                     a.electropcount,
                     case a.status
                         when 1 then '申请'
                         when 2 then '提交'
                         when 3 then '回滚'
                         else '未知'
                     end
                         as status,
                     a.cardkind,
                     a.poscode,
                     a.psamcardno,
                     a.empid,
                     a.cardtypedetailid,
                     a.dealtype,
                     a.wallettype,
                     a.tac,
                     a.samtradeno
                from rec_electtron_cash_plan a
                     left join base_customers c
                         on     a.customerid = c.customerid
                            and a.cardno = c.cardno
                            and a.customerunitcode = c.customerunitcode
                     left join base_customers_info d
                         on     a.customerid = d.customerid
                            and a.customerunitcode = d.customerunitcode
                     left join base_legal_person e
                         on a.customerunitcode = e.customerunitcode
               where     a.opdt <= sysdate - (5 / 24 / 60)
                     and a.customerunitcode = prmcustunitcode
            order by a.opdt;
    end;

    procedure proc_handelectr_unsetcash (prmplanid         in     number, --计划id
                                         prmopertype       in     number,
                                         --处理类型 0：处理为失败 1：处理为成功
                                         prmcustomerid     in     number,
                                         prmcustunitcode   in     varchar2, --客户代码
                                         out_result           out number,
                                         out_msg              out varchar2)
    as
        /*
        --------------------------------------------------------------------------
        --存储过程： proc_handelectr_unsetcash
        --作　　者：朱鹏飞
        --时　　间：2009-05-26
        --说　　明： 手工处理电子钱包存款未决记录。
        --    未决存款记录的操作计数和余额都是未提交前的，
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：成功，帐目统计成功，其他失败
        --------------------------------------------------------------------------
        --修改标示：朱鹏飞 2009-07-27
        --修改说明：修改未决处理采用模块处理
        --------------------------------------------------------------------------
        --修改标示：周晓娜 2012-04-25
        --修改说明：增加充值撤销的未决处理判断
        --------------------------------------------------------------------------
        --修改标示：周晓娜 2012-09-11
        --修改说明：兼容多客户处理
        --------------------------------------------------------------------------
        */
        i_count     integer;
        t_acccode   number;
        t_accdesc   varchar2 (30);
        t_empid     number; --科目大类
    begin
        out_result := -1008;
        out_msg := '处理未决记录开始';

        if (prmopertype <> 0 and prmopertype <> 1)
        then
            out_result := -1001;
            out_msg := '操作类型错误opertype' || to_char (prmopertype);
            return;
        end if;

        select count (*)
          into i_count
          from rec_electtron_cash_plan a
         where     a.planid = prmplanid
               and a.customerid = prmcustomerid
               and a.customerunitcode = prmcustunitcode;

        if (i_count <> 1)
        then
            out_result := -1001;
            out_msg := '未决记录可能已处理，请刷新页面后重试';
            return;
        end if;

        --获取信息
        select acccode, description, empid
          into t_acccode, t_accdesc, t_empid
          from rec_electtron_cash_plan a
         where a.planid = prmplanid and a.customerunitcode = prmcustunitcode;

        --增加科目校验
        --根据科目大类判断是否更新冻结金额
        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = t_acccode;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select count (*)
          into i_count
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常';
            return;
        end if;

        if prmopertype = 0 --回滚
        then
            module_electrcash_rollback (prmplanid,
                                        prmcustomerid,
                                        -99,
                                        '人工判断为写卡失败',
                                        prmcustunitcode,
                                        out_result,
                                        out_msg);

            if out_result <> 100
            then
                rollback;
                out_result := out_result;
                out_msg := out_msg;
                return;
            end if;

            out_result := 100;
            out_msg := '未决记录回滚处理完毕';
            commit;
            return;
        --------------------------------------------------------------------------------
        --处理为写卡成功
        else
            --提交
            out_result := -1006;
            out_msg := '提交未决开始';

            if t_acccode = 240 --如果是充值撤销记录调充值撤销提交的流程
            then
                repeal_electrcash_commit (prmplanid,
                                          prmcustomerid,
                                          '888888',
                                          prmcustunitcode,
                                          out_result,
                                          out_msg);
            else
                module_electrcash_commit (prmplanid,
                                          prmcustomerid,
                                          '888888',
                                          prmcustunitcode,
                                          out_result,
                                          out_msg);
            end if;

            if out_result <> 100
            then
                rollback;
                out_result := out_result;
                out_msg := out_msg;
                return;
            end if;

            --------------------------------------------------------------------------------
            out_result := 100;
            out_msg := '未决记录提交处理成功';
            commit;
            return;
        end if;
    exception
        when others
        then
            rollback;
            out_result := out_result;
            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;

    ----------------------次卡钱包充值未决---------------------------------------
    --获取未决记录充值和消费opount左右相差5的记录信息
    procedure proc_getvice_unsetcashconsum (
        prmcsutomerid     in     number, --账号
        prmcardsn         in     number, --持卡序号
        prmopcount        in     number, --消费操作计数
        prmsaveopcount    in     number, --充值操作计数
        prmcustunitcode   in     varchar2, --客户代码
        prmcardasn        in     number, --卡号
        prmopdt           in     date, --充值时间
        out_cursor           out refcursortype)
    as
    /*
    ------------------------------------------------------------------------
    --存储过程： proc_getvice_unsetcashconsum
    --作　　者：周晓娜
    --时　　间：2012-09-13
    --说　　明： 获取充值未决记录前后的消费记录
    ------------------------------------------------------------------------
    */
    begin
        open out_cursor for
            select rownum as id, c.*
              from (select a.customerid,
                           a.cardsn,
                           a.cardno,
                           a.opdt,
                           a.acccode,
                           a.dscrp,
                           a.viceopcount,
                           a.vicesaveopcount,
                           a.viceoddfare,
                           a.viceopfare
                      from rec_vicecard_cash a
                     where     a.customerid = prmcsutomerid
                           and a.cardsn = prmcardsn
                           and (a.vicesaveopcount between prmsaveopcount - 5
                                                      and prmsaveopcount + 5)
                           and a.cardno = prmcardasn
                           and a.customerunitcode = prmcustunitcode
                    union
                    select *
                      from (  select a.customerid,
                                     a.cardsn,
                                     a.cardno,
                                     a.opdt,
                                     a.acccode,
                                     a.dscrp,
                                     a.opcount,
                                     0 as vicesaveopcount,
                                     a.viceonoddfare,
                                     a.viceonopfare
                                from rec_vicecard_consume a
                               where     a.customerid = prmcsutomerid
                                     and a.cardsn = prmcardsn
                                     --and (a.opcount between prmopcount - 5 and prmopcount + 5)
                                     and a.cardasn = prmcardasn
                                     and a.customerunitcode = prmcustunitcode
                                     and a.opdt <= prmopdt
                            order by opdt desc)
                     where rownum <= 10
                    union
                    select *
                      from (  select a.customerid,
                                     a.cardsn,
                                     a.cardno,
                                     a.opdt,
                                     a.acccode,
                                     a.dscrp,
                                     a.opcount,
                                     0 as vicesaveopcount,
                                     a.viceonoddfare,
                                     a.viceonopfare
                                from rec_vicecard_consume a
                               where     a.customerid = prmcsutomerid
                                     and a.cardsn = prmcardsn
                                     --and (a.opcount between prmopcount - 5 and prmopcount + 5)
                                     and a.cardasn = prmcardasn
                                     and a.customerunitcode = prmcustunitcode
                                     and a.opdt > prmopdt
                            order by opdt)
                     where rownum <= 10) c;
    end;

    --获取当前时间5分钟以前的次卡钱包充值未决记录记录
    procedure proc_getvice_unsetcash (prmcustunitcode   in     varchar2, --客户代码
                                      out_cursor           out refcursortype)
    as
    /*
    ------------------------------------------------------------------------
    --存储过程： proc_getvice_unsetcash
    --作　　者：周晓娜
    --时　　间：2012-09-13
    --说　　明： 获取当前时间5分钟以前的次卡钱包充值未决记录记录
    ------------------------------------------------------------------------
    */
    begin
        open out_cursor for
              select a.planid,
                     a.customerid,
                     d.idcardno,
                     d.name,
                     a.cardno,
                     a.cardsn,
                     a.opdt,
                     a.acccode,
                     a.description,
                     a.sumviceaddfare,
                     a.viceoddfare,
                     a.viceoddfarepre,
                     a.vicedummyopfare,
                     a.viceopfare,
                     a.vicesaveopcount,
                     a.viceopcount,
                     case a.status
                         when 1 then '申请'
                         when 2 then '提交'
                         when 3 then '回滚'
                         else '未知'
                     end
                         as status,
                     a.cardkind,
                     a.poscode,
                     a.psamcardno,
                     a.empid,
                     a.cardtypedetailid,
                     a.dealtype,
                     a.wallettype,
                     a.tac,
                     a.samtradeno,
                     a.areaid
                from rec_vicecard_cash_plan a
                     left join base_customers c
                         on     a.customerid = c.customerid
                            and a.cardno = c.cardno
                            and a.customerunitcode = c.customerunitcode
                     left join base_customers_info d
                         on     a.customerid = d.customerid
                            and a.customerunitcode = d.customerunitcode
                     left join base_legal_person e
                         on a.customerunitcode = e.customerunitcode
               where     a.opdt <= sysdate - (5 / 24 / 60)
                     and a.customerunitcode = prmcustunitcode
            order by a.opdt;
    end;

    --手工处理次卡充值未决记录
    procedure proc_handvice_unsetcash (prmplanid         in     number, --计划id
                                       prmopertype       in     number,
                                       --处理类型 0：处理为失败 1：处理为成功
                                       prmcustomerid     in     number,
                                       prmcustunitcode   in     varchar2, --客户代码
                                       out_result           out number,
                                       out_msg              out varchar2)
    as
        /*
        --------------------------------------------------------------------------
        --存储过程： proc_handvice_unsetcash
        --作    者：周晓娜
        --时　　间：2012-09-13
        --说　　明： 手工处理次卡钱包存款未决记录。
        --    未决存款记录的操作计数和余额都是未提交前的，
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：成功，帐目统计成功，其他失败
        --------------------------------------------------------------------------

        */
        i_count     integer;
        t_acccode   number;
        t_accdesc   varchar2 (30);
        t_empid     number; --科目大类
    begin
        out_result := -1008;
        out_msg := '处理未决记录开始';

        if (prmopertype <> 0 and prmopertype <> 1)
        then
            out_result := -1001;
            out_msg := '操作类型错误opertype' || to_char (prmopertype);
            return;
        end if;

        --再次确认未决记录
        select count (*)
          into i_count
          from rec_vicecard_cash_plan a
         where     a.planid = prmplanid
               and a.customerid = prmcustomerid
               and a.customerunitcode = prmcustunitcode;

        if (i_count <> 1)
        then
            out_result := -1001;
            out_msg := '未决记录可能已处理，请刷新页面后重试';
            return;
        end if;

        select acccode, description, empid
          into t_acccode, t_accdesc, t_empid
          from rec_vicecard_cash_plan a
         where a.planid = prmplanid and a.customerunitcode = prmcustunitcode;

        --增加科目校验
        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = t_acccode;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select count (*)
          into i_count
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常';
            return;
        end if;

        if prmopertype = 0 --回滚
        then
            module_vicecardcash_rollback (prmplanid,
                                          prmcustomerid,
                                          -99,
                                          '手工处理成未决账',
                                          prmcustunitcode,
                                          out_result,
                                          out_msg);

            if out_result <> 100
            then
                rollback;
                out_result := out_result;
                out_msg := out_msg;
                return;
            end if;

            out_result := 100;
            out_msg := '未决记录回滚处理完毕';
            commit;
            return;
        --------------------------------------------------------------------------------
        --处理为写卡成功
        else
            --提交
            out_result := -1006;
            out_msg := '提交未决开始';

            if t_acccode = 241 --次卡钱包充值撤销
            then
                repeal_vicecard_commit (prmplanid,
                                        prmcustomerid,
                                        '888888',
                                        prmcustunitcode,
                                        out_result,
                                        out_msg);
            else
                module_vicecardcash_commit (prmplanid,
                                            prmcustomerid,
                                            '888888',
                                            prmcustunitcode,
                                            out_result,
                                            out_msg);
            end if;

            if out_result <> 100
            then
                rollback;
                out_result := out_result;
                out_msg := out_msg;
                return;
            end if;

            --------------------------------------------------------------------------------
            out_result := 100;
            out_msg := '未决记录提交处理成功';
            commit;
            return;
        end if;
    exception
        when others
        then
            rollback;
            out_result := out_result;
            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;

    -----------------------------------------------------------------------------
    procedure proc_getmon_unsetcash (prmcustunitcode   in     varchar2, --客户代码
                                     out_cursor           out refcursortype)
    as
    /*
    ----------------------------------------------------------------------------
    --存储过程：  proc_getmonticket_unsetcash
    --作者：      程文平
    --创建日期：  2009-07-21
    --说明：      获取5分钟以前的月票钱包充值未决记录
    ----------------------------------------------------------------------------
    --作者：      周晓娜
    --创建日期：  2012-09-13
    --说明：      兼容多客户处理
    ----------------------------------------------------------------------------
       */
    begin
        open out_cursor for
              select a.planid,
                     a.customerid,
                     d.idcardno,
                     d.name,
                     a.cardno,
                     a.cardsn,
                     a.opdt,
                     a.acccode,
                     a.description,
                     a.sumviceaddfare,
                     a.viceoddfare,
                     a.viceoddfarepre,
                     a.vicedummyopfare,
                     a.viceopfare,
                     a.vicesaveopcount,
                     a.viceopcount,
                     case a.status
                         when 1 then '申请'
                         when 2 then '提交'
                         when 3 then '回滚'
                         else '未知'
                     end
                         as status,
                     a.cardkind,
                     a.poscode,
                     a.psamcardno,
                     a.empid,
                     a.cardtypedetailid,
                     a.dealtype,
                     a.wallettype,
                     a.tac,
                     a.samtradeno
                from rec_monticket_cash_plan a
                     left join base_customers c
                         on     a.customerid = c.customerid
                            and a.cardno = c.cardno
                            and a.customerunitcode = c.customerunitcode
                     left join base_customers_info d
                         on     a.customerid = d.customerid
                            and a.customerunitcode = d.customerunitcode
                     left join base_legal_person e
                         on a.customerunitcode = e.customerunitcode
               where     a.opdt <= sysdate - (5 / 24 / 60)
                     and a.customerunitcode = prmcustunitcode
            order by a.opdt;
    end;

    procedure proc_getmon_unsetcashconsum (
        prmcustomerid     in     number,
        prmcardsn         in     number,
        prmopcount        in     number, --消费操作计数
        prmsaveopcount    in     number, --充值操作计数
        prmcustunitcode   in     varchar2, --客户代码
        prmcardasn        in     number, --卡号
        prmopdt           in     date, --充值时间
        out_cursor           out refcursortype)
    as
    /*
    ------------------------------------------------------------------------
    --存储过程：  proc_getmonticket_unsetcashconsum
    --作者：      程文平
    --创建日期：  2009-07-21
    --说明：      获取未决记录前后的消费记录
    ------------------------------------------------------------------------
    --作　　者：周晓娜
    --时　　间：2012-09-13
    --说　　明： 兼容多客户和一人多卡的情况处理
    ------------------------------------------------------------------------
       */
    begin
        open out_cursor for
            select rownum as id, c.*
              from (select a.customerid,
                           a.cardsn,
                           a.cardno,
                           a.opdt,
                           a.acccode,
                           a.dscrp,
                           a.viceopcount,
                           a.vicesaveopcount,
                           a.viceoddfare,
                           a.viceopfare
                      from rec_monticket_cash a
                     where     a.customerid = prmcustomerid
                           and a.cardsn = prmcardsn
                           and (a.vicesaveopcount between prmsaveopcount - 5
                                                      and prmsaveopcount + 5)
                           and a.cardno = prmcardasn
                           and a.customerunitcode = prmcustunitcode
                    union
                    select *
                      from (  select a.customerid,
                                     a.cardsn,
                                     a.cardno,
                                     a.opdt,
                                     a.acccode,
                                     a.dscrp,
                                     a.opcount,
                                     0 as vicesaveopcount,
                                     a.viceonoddfare,
                                     a.viceonopfare
                                from rec_monticket_consum a
                               where     a.customerid = prmcustomerid
                                     and a.cardsn = prmcardsn
                                     -- and (a.opcount between prmopcount - 5 and prmopcount + 5)
                                     and a.cardasn = prmcardasn
                                     and a.customerunitcode = prmcustunitcode
                                     and a.opdt <= prmopdt
                            order by opdt desc)
                     where rownum <= 10
                    union
                    select *
                      from (  select a.customerid,
                                     a.cardsn,
                                     a.cardno,
                                     a.opdt,
                                     a.acccode,
                                     a.dscrp,
                                     a.opcount,
                                     0 as vicesaveopcount,
                                     a.viceonoddfare,
                                     a.viceonopfare
                                from rec_monticket_consum a
                               where     a.customerid = prmcustomerid
                                     and a.cardsn = prmcardsn
                                     -- and (a.opcount between prmopcount - 5 and prmopcount + 5)
                                     and a.cardasn = prmcardasn
                                     and a.customerunitcode = prmcustunitcode
                                     and a.opdt > prmopdt
                            order by opdt)
                     where rownum <= 10) c;
    end;

    procedure proc_handmon_unsetcash (prmplanid         in     number,
                                      prmopertype       in     number,
                                      prmcustomerid     in     number,
                                      prmcustunitcode   in     varchar2, --客户代码
                                      out_result           out number,
                                      out_msg              out varchar2)
    /*
      -------------------------------------------------------------------------------
      --存储过程： proc_handmon_unsetcash
      --作　　者：程文平
      --时　　间：2009-07-22
      --说　　明：手工处理月票钱包充值、领取冻结金额未决，
      -- prmopertype=1 处理成已领
      -- prmopertype=0 处理成未领
      --输入参数：
      --输出参数：
      --返回值和返回信息定义：
      --100 ：成功，手工处理成功，其他失败
      --------------------------------------------------------------------------
      --修改标示：周晓娜 2012-09-13
      --修改说明：兼容多客户处理
      --------------------------------------------------------------------------
      */
    as
        t_acccode            number;
        t_accdesc            varchar2 (30);
        t_empid              number;
        vacccodegroupid      number; --科目大类
        vcount               number;
        vtac                 varchar2 (20);
        customer_exception   exception;
    begin
        out_result := -1000;
        out_msg := '手工处理月票钱包未决记录';

        if prmopertype not in (0, 1)
        then
            out_result := -1001;
            out_msg := '操作类型错误opertype' || to_char (prmopertype);
            raise customer_exception;
        end if;

        select count (*)
          into vcount
          from rec_monticket_cash_plan a
         where     a.planid = prmplanid
               and a.customerid = prmcustomerid
               and a.customerunitcode = prmcustunitcode;

        if vcount <> 1
        then
            out_result := -1002;
            out_msg := '未决记录可能已经处理，请刷新页面后重试';
            raise customer_exception;
        end if;

        select a.empid, a.acccode, a.description
          into t_empid, t_acccode, t_accdesc
          from rec_monticket_cash_plan a
         where     a.planid = prmplanid
               and a.customerid = prmcustomerid
               and a.customerunitcode = prmcustunitcode;

        --增加科目校验
        select count (*)
          into vcount
          from base_acc_type a
         where a.acccode = t_acccode;

        if vcount <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select count (*)
          into vcount
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        if vcount <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常';
            return;
        end if;

        if prmopertype = 0
        then
            out_result := -1003;
            out_msg := '未决记录处理成未领';
            --手工处理领款未决为未领
            module_montrcash_rollback (prmplanid,
                                       prmcustomerid,
                                       -101,
                                       '手工处理成未领',
                                       prmcustunitcode,
                                       out_result,
                                       out_msg);

            if out_result <> 100
            then
                out_result := -1004;
                out_msg := '手工处理未决为未领失败' || out_msg;
                raise customer_exception;
            end if;
        else
            out_result := -1005;
            out_msg := '未决记录处理为已领';
            vtac := '888888';

            --手工处理领款未决记录为已领
            if t_acccode = 242 --月票充值撤销
            then
                repeal_monticket_commit (prmplanid,
                                         prmcustomerid,
                                         vtac,
                                         prmcustunitcode,
                                         out_result,
                                         out_msg);
            else
                --月票充值未决
                module_montrcash_commit (prmplanid,
                                         prmcustomerid,
                                         vtac,
                                         prmcustunitcode,
                                         out_result,
                                         out_msg);
            end if;

            if out_result <> 100
            then
                out_result := -1006;
                out_msg := '手工处理未决为已领失败' || out_msg;
                raise customer_exception;
            end if;
        end if;

        out_result := 100;
        out_msg := '手工处理未决成功！';
        commit;
    exception
        when customer_exception
        then
            rollback;
        when others
        then
            rollback;
            out_result := out_result;
            out_msg := out_msg || '' || sqlerrm;
    end;

    procedure module_electrcash_commit (prmplanid         in     number, --计划id
                                        prmcustomerid     in     number,
                                        prmtac            in     varchar2,
                                        prmcustunitcode   in     varchar2, --客户代码
                                        out_result           out number,
                                        out_msg              out varchar2)
    as
        /*
        -------------------------------------------------------------------------------
        --存储过程： module_electrcash_commit
        --作　　者：朱鹏飞
        --时　　间：2009-05-26
        --说　　明： 提交电子钱包领款记录模块
        --    未决存款记录的操作计数和余额都是未提交前的，
        --    此过程为统一处理电子钱包领款提交，过程内没有提交和回滚操作，由外层判断结果
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：成功，帐目统计成功，其他失败

        --作者：党杰 2011-11-21
        --修改说明：提交成功修改账本表和形成充值记录表记录时 根据卡种类判断opcount m1加1，cpu不加
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20120910
        --修改说明： 增加客户代码、充值授权额度处理
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20121107
        --修改说明： 去掉分区相关业务的处理
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20121224
        --修改说明： 增加资产负债账目-收支、会计账目处理
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20130422
        --修改说明： m1卡充值时原有流程充值交易计数和消费交易计数同时增加
                     现修改为充值时只改变充值交易计数，消费交易计数不再改变，保证cpu和m1处理流程一致
        --------------------------------------------------------------------------
        */
        i_count                   integer;
        --账本信息
        i_curcardsn               integer; --账本当前卡序号
        i_curelecopcount          integer; --账本当前卡交易计数
        i_curelecsaveopcount      integer; --账本当前存款计数
        --
        i_pty                     integer;
        --非当前卡下一张卡操作类型（补卡，换卡等）
        i_freezeflag              integer; --非当前卡下一张卡冻结金额是否领取
        i_freeopcount             number; --冻结金额交易计数
        --充值未决记录
        vplanid                   number;
        t_acccode                 number;
        t_accdesc                 varchar (20);
        t_electrsaveopcount       number;
        t_elecopcount             number;
        t_sumfare                 number;
        t_cardno                  number;
        t_cardsn                  number;
        t_electrdummyopfare       number;
        t_electropfare            number;
        t_elecoddfarepre          number;
        t_opdt                    varchar2 (30);
        t_customerid              number;
        t_cardtypedetailid        number;
        t_empid                   number;
        t_poscode                 number;
        t_cardkind                number;
        t_samcardno               number;
        t_areaid                  number;
        t_sumelectrfare           number (10, 2);
        --
        v_deptcode                varchar2 (20); --充值职员所属营业部门
        i_deptareaid              integer; --充值职员营业部门所属分区
        vacccodegroupid           number; --科目大类
        --
        n_totalconsumfare         number (20, 2); --电子钱包累计消费金额
        n_refunddumpfare          number (10, 2); --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2); --最低消费限额
        v_isexcepyive             number; --是否为特殊记录
        --充值授权额度--
        v_netsite                 varchar2 (12); --充值网点编号
        n_curoddfare              number (20, 2); --可用充值额度
        n_isuse                   number; --是否启用充值授权
        d_opdt                    date;
        n_workstatus              number; --状态：0正常状态，1透支状态
        n_allowoverdraftfare      number (20, 2); --允许透支金额
        --账户类型（收支账户使用）
        n_custaccountype          number; --持卡人账户类型
        n_empaccountype           number; --出纳员账户类型
        n_cashaccfc               number; --形成充值明细的原始流水号
        v_empname                 varchar2 (30); --出纳名称
        n_empoddfare              number (20, 2); --出纳账户余额
        n_cardid                  number;
    begin
        out_result := -1008;
        out_msg := '处理未决记录开始';
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        --zxn 20130618 增加状态判断条件，存在状态为2的记录也可以处理
        select count (*)
          into i_count
          from rec_electtron_cash_plan a
         where a.planid = prmplanid and a.customerid = prmcustomerid --and status = 1
               and a.customerunitcode = prmcustunitcode;

        if (i_count <> 1)
        then
            out_result := -1001;
            out_msg := '参数信息不匹配，请重新操作';
            return;
        end if;

        --zxn  20121107 去掉分区字段
        select a.customerid,
               electrsaveopcount,
               electropcount,
               cardno,
               cardsn,
               electrdummyopfare,
               electropfare,
               electroddfarepre,
               to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'),
               cardtypedetailid,
               acccode,
               description,
               empid,
               poscode,
               cardkind,
               psamcardno,
               sumelectraddfare
          into t_customerid,
               t_electrsaveopcount,
               t_elecopcount,
               t_cardno,
               t_cardsn,
               t_electrdummyopfare,
               t_electropfare,
               t_elecoddfarepre,
               t_opdt,
               t_cardtypedetailid,
               t_acccode,
               t_accdesc,
               t_empid,
               t_poscode,
               t_cardkind,
               t_samcardno,
               t_sumelectrfare
          from rec_electtron_cash_plan a
         where a.planid = prmplanid and a.customerunitcode = prmcustunitcode;

        --增加科目校验
        --根据科目大类判断是否更新冻结金额
        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = t_acccode;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select a.groupid
          into vacccodegroupid
          from base_acc_type a
         where a.acccode = t_acccode;

        select count (*)
          into i_count
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常empid：' || to_char (t_empid);
            return;
        end if;

        --提交
        out_result := -1006;
        out_msg := '提交未决开始';

        -------------充值的提交更新充值授权额度信息----------------------------
        if vacccodegroupid = 1 or vacccodegroupid = 11
        then
            begin
                --根据职员编号获取职员所属网点
                select a.dptcode
                  into v_netsite
                  from base_emp a, base_dept b
                 where     a.dptcode = b.dptcode
                       and a.customerunitcode = b.customerunitcode
                       and a.empid = t_empid
                       and a.customerunitcode = prmcustunitcode;

                select a.curoddfare,
                       a.allowoverdraftfare,
                       a.isuse,
                       a.workstatus
                  into n_curoddfare,
                       n_allowoverdraftfare,
                       n_isuse,
                       n_workstatus
                  from base_chargeauth a
                 where     a.businesspoint = v_netsite
                       and a.customerunitcode = prmcustunitcode;

                --该充值网点启用充值授权额度
                if n_isuse = 1
                then
                    --当前状态为正常状态
                    if n_workstatus = 0
                    then
                        update base_chargeauth
                           set curoddfare =
                                     curoddfare
                                   - (t_electropfare - t_electrdummyopfare)
                         where     businesspoint = v_netsite
                               and customerunitcode = prmcustunitcode;
                    --当前状态为透支状态
                    else
                        --充值额度没有使用完
                        if n_curoddfare > 0
                        then
                            if n_curoddfare >
                                   (t_electropfare - t_electrdummyopfare)
                            then
                                update base_chargeauth
                                   set curoddfare =
                                             curoddfare
                                           - (  t_electropfare
                                              - t_electrdummyopfare)
                                 where     businesspoint = v_netsite
                                       and customerunitcode = prmcustunitcode;
                            else
                                --zxn 20130426
                                --当使用透支金额时，修改原来的流程，
                                --1、透支金额在平台重新设置之前不改变
                                --2、此时更新当前的剩余额度，可能会更新成负数
                                --3、平台再次授权的时候，本次授权额度+当前授权额度（目的是为了在平台再次授权的时候把使用的透支金额去掉）
                                update base_chargeauth
                                   set curoddfare =
                                             n_curoddfare
                                           - (  t_electropfare
                                              - t_electrdummyopfare),
                                       allowoverdraftfare =
                                             allowoverdraftfare
                                           - (  t_electropfare
                                              - t_electrdummyopfare)
                                           + n_curoddfare,
                                       allowoverdraftsumfare =
                                             allowoverdraftsumfare
                                           + (  t_electropfare
                                              - t_electrdummyopfare)
                                           - n_curoddfare --网点使用透支额度累计
                                 where     businesspoint = v_netsite
                                       and customerunitcode = prmcustunitcode;
                            end if;
                        else
                            --zxn 20130426
                            --当使用透支金额时，修改原来的流程，
                            --1、透支金额在平台重新设置之前不改变
                            --2、此时更新当前的剩余额度，可能会更新成负数
                            --3、平台再次授权的时候，本次授权额度+当前授权额度（目的是为了在平台再次授权的时候把使用的透支金额去掉）
                            update base_chargeauth
                               set curoddfare =
                                         n_curoddfare
                                       - (  t_electropfare
                                          - t_electrdummyopfare),
                                   allowoverdraftfare =
                                         allowoverdraftfare
                                       - (  t_electropfare
                                          - t_electrdummyopfare),
                                   allowoverdraftsumfare =
                                         allowoverdraftsumfare
                                       + (  t_electropfare
                                          - t_electrdummyopfare)
                                       - n_curoddfare --网点使用透支额度累计
                             where     businesspoint = v_netsite
                                   and customerunitcode = prmcustunitcode;
                        end if;
                    end if;
                end if;
            exception
                when others
                then
                    out_result := -1017;
                    out_msg := '获取充值授权额度信息异常';
                    return;
            end;
        end if;

        -------------------------------------------------------------------------
        select count (*)
          into i_count
          from base_customers a
         where     a.customerid = t_customerid
               and a.cardno = t_cardno
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1007;
            out_msg := '用户不存在或者已退卡';
            return;
        end if;

        --用户存在，则获取用户当前信息
        --zxn 增加客户账户类型信息处理
        select a.cardsn,
               a.electropcount,
               a.electrsaveopcount,
               a.sumelectrconsumfare,
               a.refundlimitconsumfare,
               a.accounttype
          into i_curcardsn,
               i_curelecopcount,
               i_curelecsaveopcount,
               n_totalconsumfare,
               n_refundlimitconsumfare,
               n_custaccountype
          from base_customers a
         where     a.customerid = t_customerid
               and a.cardno = t_cardno
               and a.customerunitcode = prmcustunitcode;

        --判断是否为处理充值金额记录
        if vacccodegroupid = 1 or vacccodegroupid = 11 --充值
        then
            if t_cardsn > i_curcardsn
            then
                --未决卡序号比账本卡序号大，说明未决记录异常
                out_result := -1009;
                out_msg := '未决记录信息异常';
                return;
            elsif t_cardsn = i_curcardsn --充值未决为当前卡
            then
                --账本表交易计数大于未决交易计数，账本余额已经最新
                if i_curelecopcount > t_elecopcount + 1
                then
                    update base_customers a
                       set electroddfareacc =
                               electroddfareacc + t_electropfare,
                           sumelectraddfareacc =
                               sumelectraddfareacc + t_electropfare,
                           sumelectrdummyfare =
                               sumelectrdummyfare + t_electrdummyopfare,
                           elesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and a.cardno = t_cardno
                           and a.customerunitcode = prmcustunitcode;
                else
                    if t_cardkind = 1
                    --（m1卡充值的时候saveopcount和opcount都变,消费的时候只变opcount，改处理流程放弃）
                    --zxn 20130422 m1卡充值交易计数只改变充值交易计数，消费交易计数不在改变
                    then
                        update base_customers a
                           set electroddfare =
                                   t_elecoddfarepre + t_electropfare,
                               electroddfareacc =
                                   electroddfareacc + t_electropfare,
                               sumelectraddfareacc =
                                   sumelectraddfareacc + t_electropfare,
                               sumelectraddfare =
                                   sumelectraddfare + t_electropfare,
                               --a.electropcount = t_elecopcount + 1,\
                               a.electropcount = t_elecopcount,
                               a.electrsaveopcount = t_electrsaveopcount + 1,
                               sumelectrdummyfare =
                                   sumelectrdummyfare + t_electrdummyopfare,
                               elesaveplanid = prmplanid
                         where     a.customerid = t_customerid
                               and a.cardno = t_cardno
                               and a.customerunitcode = prmcustunitcode;
                    else
                        update base_customers a
                           set electroddfare =
                                   t_elecoddfarepre + t_electropfare,
                               electroddfareacc =
                                   electroddfareacc + t_electropfare,
                               sumelectraddfareacc =
                                   sumelectraddfareacc + t_electropfare,
                               sumelectraddfare =
                                   sumelectraddfare + t_electropfare,
                               a.electropcount = t_elecopcount,
                               a.electrsaveopcount = t_electrsaveopcount + 1,
                               sumelectrdummyfare =
                                   sumelectrdummyfare + t_electrdummyopfare,
                               elesaveplanid = prmplanid
                         where     a.customerid = t_customerid
                               and a.cardno = t_cardno
                               and a.customerunitcode = prmcustunitcode;
                    end if;
                end if;

                --修改人：梁小凯 20090724
                --修改说明：虚充金额大于0时，对虚充总加款额的修改
                --修改标示：2009-08-10 朱鹏飞 增加退卡有效虚充金额累计
                --在申请时已经判断如果累计消费达到最低限额，虚充已经清零，此处只累计
                if t_electrdummyopfare > 0
                then
                    update base_customers
                       set sumelectradddummyfare =
                                 sumelectradddummyfare
                               + (t_electropfare - t_electrdummyopfare),
                           refunddumpfare =
                               refunddumpfare + t_electrdummyopfare
                     where     customerid = prmcustomerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;
                end if;

                --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
                --如果用卡余额计算的累计消费金额大，则说明卡上软准确
                --如果库里大，则说明库里可能正确，卡上总额可能错误
                if t_sumelectrfare - t_elecoddfarepre > n_totalconsumfare
                then
                    n_totalconsumfare := t_sumelectrfare - t_elecoddfarepre;
                else
                    n_totalconsumfare := n_totalconsumfare;
                end if;

                --比较累计消费比最低消费限额
                if (n_totalconsumfare > n_refundlimitconsumfare)
                then
                    --如果累计消费比最低限额大，
                    --有虚充，则用累计消费重新计算最低限额
                    --没有虚充，则用累计消费更新最大限额
                    if t_electrdummyopfare > 0
                    then
                        update base_customers
                           set refundlimitconsumfare =
                                   n_totalconsumfare + t_electropfare
                         where     customerid = prmcustomerid
                               and cardno = t_cardno
                               and customerunitcode = prmcustunitcode;
                    else
                        update base_customers
                           set refundlimitconsumfare = n_totalconsumfare
                         where     customerid = prmcustomerid
                               and cardno = t_cardno
                               and customerunitcode = prmcustunitcode;
                    end if;
                else
                    --如果累计消费比最低限额小
                    --有虚充，则用最低限额重新计算最低限额
                    --没有虚充，则还是原来的最低限额
                    if t_electrdummyopfare > 0
                    then
                        update base_customers
                           set refundlimitconsumfare =
                                   n_refundlimitconsumfare + t_electropfare
                         where     customerid = prmcustomerid
                               and cardno = t_cardno
                               and customerunitcode = prmcustunitcode;
                    else
                        update base_customers
                           set refundlimitconsumfare = n_refundlimitconsumfare
                         where     customerid = prmcustomerid
                               and cardno = t_cardno
                               and customerunitcode = prmcustunitcode;
                    end if;
                end if;
            else
                --非当前卡未决记录,判断冻结金额

                --2016-09-23 若当前记录的plan表cardsn小于账本表中的cardsn，
                --并且vacccodegroupid = 11，
                --则是圈存领款流程中 【新补办卡/新换卡 领取老卡圈存未领款记录(status=0)】
                if (vacccodegroupid = 11 and t_cardsn > 0)
                then
                    update base_customers a
                       set electroddfare = electroddfare + t_electropfare,
                           electroddfareacc =
                               electroddfareacc + t_electropfare,
                           sumelectraddfareacc =
                               sumelectraddfareacc + t_electropfare,
                           sumelectraddfare =
                               sumelectraddfare + t_electropfare,
                           a.electropcount = a.electropcount,
                           --a.uploaddate        = sysdate,
                           a.electrsaveopcount = a.electrsaveopcount + 1,
                           sumelectrdummyfare =
                               sumelectrdummyfare + t_electrdummyopfare,
                           elesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and a.cardno = t_cardno
                           and a.customerunitcode = prmcustunitcode;
                else
                    --是否存在下一和卡的制卡记录
                    select count (*)
                      into i_count
                      from rec_card_make_acc a
                     where     a.customerid = t_customerid
                           and a.cardsn = t_cardsn + 1
                           and a.pty not in (10, 11, 12)
                           and a.oldcardno = t_cardno
                           and a.customerunitcode = prmcustunitcode;

                    if (i_count <> 1)
                    then
                        out_result := -1012;
                        out_msg :=
                            '未决记录异常，非当前卡下一张制卡记录不存在';
                        rollback;
                        return;
                    end if;

                    select a.pty
                      into i_pty
                      from rec_card_make_acc a
                     where     a.customerid = t_customerid
                           and a.cardsn = t_cardsn + 1
                           and a.pty not in (10, 11, 12)
                           and a.oldcardno = t_cardno
                           and a.customerunitcode = prmcustunitcode;

                    if (i_pty = 1) --非当前卡下一张卡是补卡
                    then
                        out_result := -1012;
                        out_msg := '非当前卡下一张卡是补卡，考虑处理冻结金额';

                        select count (*)
                          into i_count
                          from rec_freezefare_acc a
                         where     a.customerid = t_customerid
                               and a.cardsn = t_cardsn
                               and a.cardno = t_cardno
                               --and a.wallettype = 1
                               and a.customerunitcode = prmcustunitcode;

                        if (i_count = 1)
                        then
                            --存在冻结金额
                            --判断下一张卡冻结金额是否领取
                            select a.freezefareflag, a.opcount
                              into i_freezeflag, i_freeopcount
                              from rec_freezefare_acc a
                             where     a.customerid = t_customerid
                                   and a.cardsn = t_cardsn
                                   and a.cardno = t_cardno
                                   --and a.wallettype = 1
                                   and a.customerunitcode = prmcustunitcode;

                            if (i_freezeflag = 0) --冻结金额未领
                            then
                                if (t_elecopcount + 1 > i_freeopcount)
                                then
                                    --冻结金额未领，则更新冻结金额
                                    update rec_freezefare_acc a
                                       set opcount = opcount + 1,
                                           saveopcount = saveopcount + 1,
                                           freezefare =
                                                 t_elecoddfarepre
                                               + t_electropfare
                                     where     a.customerid = t_customerid
                                           and a.cardsn = t_cardsn
                                           and a.cardno = t_cardno
                                           --and a.wallettype = 1
                                           and a.customerunitcode =
                                                   prmcustunitcode;
                                else
                                    out_msg :=
                                        '冻结金额已经更新，充值非最后交易记录';
                                end if;
                            else
                                out_msg := '冻结金额已领';
                            end if;
                        else
                            out_msg := '不存在冻结金额记录';
                        end if;
                    else
                        out_msg := '下一张卡不是补卡';
                    end if;
                end if;
            end if;
        elsif vacccodegroupid = 5 --冻结金额
        then
            select id
              into n_cardid
              from base_customers a
             where     a.customerid = t_customerid
                   and a.cardno = t_cardno
                   and a.customerunitcode = prmcustunitcode;

            if t_cardsn > i_curcardsn
            then
                --未决卡序号比账本卡序号大，说明未决记录异常
                out_result := -1012;
                out_msg := '未决记录信息异常';
                return;
            elsif t_cardsn = i_curcardsn --充值未决为当前卡
            then
                --账本表交易计数大于未决交易计数，账本余额已经最新
                if i_curelecopcount > t_elecopcount + 1
                then
                    update rec_freezefare_acc a
                       set freezefareflag = 1
                     where     customerid = t_customerid
                           and freezefareflag = 2
                           and cardid = n_cardid
                           --and wallettype = 1
                           and customerunitcode = prmcustunitcode;

                    update base_customers a
                       set elesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;
                else
                    --冻结金额记录为最新记录
                    update rec_freezefare_acc a
                       set freezefareflag = 1
                     where     customerid = t_customerid
                           and freezefareflag = 2
                           and cardid = n_cardid
                           --and wallettype = 1
                           and customerunitcode = prmcustunitcode;

                    if t_cardkind = 1
                    then
                        --zxn 20130422 m1卡充值操作时，消费的交易记录不在随着改变
                        update base_customers a
                           set electroddfare =
                                   t_elecoddfarepre + t_electropfare,
                               --a.electropcount = t_elecopcount + 1,
                               a.electropcount = t_elecopcount,
                               a.electrsaveopcount = t_electrsaveopcount + 1,
                               elesaveplanid = prmplanid
                         where     a.customerid = t_customerid
                               and a.cardno = t_cardno
                               and a.customerunitcode = prmcustunitcode;
                    else
                        update base_customers a
                           set electroddfare =
                                   t_elecoddfarepre + t_electropfare,
                               a.electropcount = t_elecopcount,
                               a.electrsaveopcount = t_electrsaveopcount + 1,
                               elesaveplanid = prmplanid
                         where     a.customerid = t_customerid
                               and a.cardno = t_cardno
                               and a.customerunitcode = prmcustunitcode;
                    end if;
                end if;
            else
                --未决记录卡序号比账本卡序号小
                update rec_freezefare_acc a
                   set freezefareflag = 1
                 where     customerid = t_customerid
                       and freezefareflag = 2
                       and cardid = n_cardid
                       --and wallettype = 1
                       and customerunitcode = prmcustunitcode;
            end if;
        else
            out_result := -1013;
            out_msg := '未决科目信息错误acccode:' || to_char (t_acccode);
            return;
        end if;

        -- 形成充值明细记录
        out_result := -1012;
        out_msg := '形成电子钱包充值明细';

        if t_cardkind = 1
        then
            t_elecopcount := t_elecopcount + 1;
        end if;

        --获取交易记录流水号
        select seq_electtron_cash.nextval into n_cashaccfc from dual;

        --zxn 20121107 去掉分区字段
        insert into rec_electtron_cash (cashaccfc,
                                        opdt,
                                        customerid,
                                        cardno,
                                        cardsn,
                                        cardtypedetailid,
                                        cardkind,
                                        electropcount,
                                        electrsaveopcount,
                                        electroddfare,
                                        electroddfarepre,
                                        electrdummyopfare,
                                        electropfare,
                                        acccode,
                                        dscrp,
                                        poscode,
                                        dealtype,
                                        samcardno,
                                        samtradeno,
                                        planid,
                                        uploaddate,
                                        empid,
                                        wallettype,
                                        tac,
                                        customerunitcode,
                                        sumelectraddfare)
             values (n_cashaccfc,
                     to_date (t_opdt, 'yyyy-mm-dd hh24:mi:ss'),
                     t_customerid,
                     t_cardno,
                     t_cardsn,
                     t_cardtypedetailid,
                     t_cardkind,
                     t_elecopcount,
                     t_electrsaveopcount + 1,
                     t_elecoddfarepre + t_electropfare,
                     t_elecoddfarepre,
                     t_electrdummyopfare,
                     t_electropfare,
                     t_acccode,
                     t_accdesc,
                     t_poscode,
                     1,
                     t_samcardno,
                     -1,
                     prmplanid,
                     sysdate,
                     t_empid,
                     1,
                     prmtac,
                     prmcustunitcode,
                     t_sumelectrfare);

        out_result := -1019;
        out_msg := '形成充值发放记录';

        --形成申请发放记录，手工处理写卡成功时tac为77777
        --zxn 20121107 去掉分区字段
        insert into rec_electtron_cash_plan_putout (planid,
                                                    customerid,
                                                    cardno,
                                                    cardsn,
                                                    cardtypedetailid,
                                                    electroddfare,
                                                    electroddfarepre,
                                                    electrdummyopfare,
                                                    electropfare,
                                                    electrsaveopcount,
                                                    electropcount,
                                                    status,
                                                    acccode,
                                                    opdt,
                                                    description,
                                                    cardkind,
                                                    poscode,
                                                    psamcardno,
                                                    empid,
                                                    dealtype,
                                                    wallettype,
                                                    tac,
                                                    samtradeno,
                                                    ver,
                                                    customerunitcode)
            (select planid,
                    customerid,
                    cardno,
                    cardsn,
                    cardtypedetailid,
                    t_elecoddfarepre + t_electropfare,
                    t_elecoddfarepre,
                    electrdummyopfare,
                    electropfare,
                    t_electrsaveopcount + 1,
                    t_elecopcount,
                    2,
                    acccode,
                    opdt,
                    description,
                    cardkind,
                    poscode,
                    psamcardno,
                    empid,
                    1,
                    1,
                    prmtac,
                    samtradeno,
                    ver,
                    customerunitcode
               from rec_electtron_cash_plan
              where planid = prmplanid and customerunitcode = prmcustunitcode);

        --删除申请明细
        delete from rec_electtron_cash_plan
              where planid = prmplanid and customerunitcode = prmcustunitcode;

        if (sql%rowcount != 1)
        then
            --如果发放表和日志表没有记录，也没有日志，说明人为删除了发入记录
            insert into log_operation (stationid,
                                       systemid,
                                       empid,
                                       outid,
                                       name,
                                       message,
                                       logtype,
                                       recordlevel,
                                       createdate,
                                       customerunitcode)
                 values (
                            0,
                            0,
                            to_char (t_empid),
                            to_char (t_customerid),
                            to_char (prmplanid),
                               '删除充值申请记录planid：['
                            || to_char (prmplanid)
                            || ']时影响0行',
                            0,
                            0,
                            sysdate,
                            prmcustunitcode);
        end if;

        out_result := -1013;
        out_msg := '获取充值员部门和账户类型';

        --获取充值员部门及分区编号
        --zxn 20121224 增加获取出纳员账户类型
        select a.dptcode, a.accounttype, a.empname
          into v_deptcode, n_empaccountype, v_empname
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        --当电子钱包充值金额大于0时进行及时统计
        if t_electropfare > 0
        then
            out_result := -1013;
            out_msg := '充值金额账目及时统计';
            pkg_st_payment.proc_custdataaccount_online (
                t_opdt,
                t_electropfare - t_electrdummyopfare,
                t_acccode,
                0,
                t_cardkind, --卡类型 1：m1卡 2：cpu卡
                t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                t_empid, --充值员或者司机id
                t_poscode, --设备唯一运营编号
                t_samcardno, --sam卡号
                0, --线路id
                v_deptcode,
                0, --车辆编号
                1, --钱包类型 1电子 2月票
                0, --操作类型 0：正常 1：回滚\
                prmcustunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                out_result := -1014;
                out_msg := '充值金额账目及时统计失败，' || out_msg;
                return;
            end if;
        end if;

        --当电子钱包虚充金额大于0时进行及时统计
        if t_electrdummyopfare > 0
        then
            --账目及时统计
            out_result := -1015;
            out_msg := '虚充金额账目及时统计';
            pkg_st_payment.proc_custdataaccount_online (t_opdt,
                                                        t_electrdummyopfare,
                                                        800,
                                                        0,
                                                        t_cardkind,
                                                        --卡类型 1：m1卡 2：cpu卡
                                                        t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                                                        t_empid, --充值员或者司机id
                                                        t_poscode, --设备唯一运营编号
                                                        t_samcardno, --sam卡号
                                                        0,
                                                        --线路id
                                                        v_deptcode,
                                                        0,
                                                        --车辆编号
                                                        1,
                                                        --钱包类型 1电子 2月票
                                                        0, --操作类型 0：正常 1：回滚
                                                        prmcustunitcode,
                                                        out_msg,
                                                        out_result);

            if out_result <> 100
            then
                out_msg := '虚充金额账目及时统计' || out_msg;
                out_result := -1016;
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := '未决记录提交处理成功';
        return;
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;

    procedure module_electrcash_rollback (prmplanid         in     number, --计划id
                                          prmcustomerid     in     number,
                                          prmbadcode        in     number,
                                          prmbaddesc        in     varchar2,
                                          prmcustunitcode   in     varchar2, --客户代码
                                          out_result           out number,
                                          out_msg              out varchar2)
    as
        /*
        -------------------------------------------------------------------------------
        --存储过程： module_electrcash_rollback
        --作　　者：朱鹏飞
        --时　　间：2009-05-26
        --说　　明： 手工处理电子钱包存款未决记录。
        --    未决存款记录的操作计数和余额都是未提交前的，
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：成功，帐目统计成功，其他失败

        --作者：党杰 2011-11-21
        --修改说明：回滚时根据科目判断 如果是圈存，回滚修改申请明细状态，而不是直接删除充值申请
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20120912
        --修改说明： 兼容多客户处理
        --------------------------------------------------------------------------
        */
        i_count                integer;
        --账本信息
        i_curcardsn            integer; --账本当前卡序号
        i_curelecopcount       integer; --账本当前卡交易计数
        i_curelecsaveopcount   integer; --账本当前存款计数
        --
        i_pty                  integer;
        --非当前卡下一张卡操作类型（补卡，换卡等）
        i_freezeflag           integer; --非当前卡下一张卡冻结金额是否领取
        i_freeopcount          number; --冻结金额交易计数
        --充值未决记录
        vplanid                number;
        t_acccode              number;
        t_accdesc              varchar (20);
        t_electrsaveopcount    number;
        t_elecopcount          number;
        t_sumfare              number;
        t_cardno               number;
        t_cardsn               number;
        t_electrdummyopfare    number;
        t_electropfare         number;
        t_elecoddfarepre       number;
        t_opdt                 varchar2 (30);
        t_customerid           number;
        t_cardtypedetailid     number;
        t_empid                number;
        t_poscode              number;
        t_cardkind             number;
        t_samcardno            number;
        t_areaid               number;
        t_sumelectrfare        number (10, 2);
        --
        v_deptcode             varchar2 (20); --充值职员所属营业部门
        i_deptareaid           integer; --充值职员营业部门所属分区
        vacccodegroupid        number; --科目大类
        vcardid                number;
    begin
        out_result := -1008;
        out_msg := '处理未决记录开始';

        select count (*)
          into i_count
          from rec_electtron_cash_plan a
         where     a.planid = prmplanid
               and a.customerid = prmcustomerid
               and status = 1
               and a.customerunitcode = prmcustunitcode;

        if (i_count <> 1)
        then
            out_result := -1001;
            out_msg := '未决记录可能已处理，请刷新页面后重试';
            return;
        end if;

        --zxn 20121107 去掉分区字段
        select a.customerid,
               electrsaveopcount,
               electropcount,
               cardno,
               cardsn,
               electrdummyopfare,
               electropfare,
               electroddfarepre,
               to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'),
               cardtypedetailid,
               acccode,
               description,
               empid,
               poscode,
               cardkind,
               psamcardno,
               sumelectraddfare
          into t_customerid,
               t_electrsaveopcount,
               t_elecopcount,
               t_cardno,
               t_cardsn,
               t_electrdummyopfare,
               t_electropfare,
               t_elecoddfarepre,
               t_opdt,
               t_cardtypedetailid,
               t_acccode,
               t_accdesc,
               t_empid,
               t_poscode,
               t_cardkind,
               t_samcardno,
               t_sumelectrfare
          from rec_electtron_cash_plan a
         where a.planid = prmplanid and a.customerunitcode = prmcustunitcode;

        --增加科目校验
        --根据科目大类判断是否更新冻结金额
        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = t_acccode;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select a.groupid
          into vacccodegroupid
          from base_acc_type a
         where a.acccode = t_acccode;

        select count (*)
          into i_count
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常';
            return;
        end if;

        --判断是否为处理冻结金额记录
        if vacccodegroupid = 5
        then
            select id
              into vcardid
              from base_customers
             where     customerunitcode = prmcustunitcode
                   and customerid = t_customerid
                   and cardno = t_cardno;

            out_result := -1004;
            out_msg := '处理冻结金额为未领！';

            --更新冻结金额为未领
            update rec_freezefare_acc
               set freezefareflag = 0
             where     customerid = t_customerid
                   and freezefareflag = 2
                   and cardid = vcardid
                   --and wallettype = 1
                   and customerunitcode = prmcustunitcode;
        end if;

        out_result := -1005;
        out_msg := '设置写卡状态为失败状态！';

        --zxn 20121107 去掉分区字段
        insert into rec_electtron_cash_plan_bad (planid,
                                                 customerid,
                                                 cardno,
                                                 cardsn,
                                                 cardtypedetailid,
                                                 electroddfare,
                                                 electroddfarepre,
                                                 electrdummyopfare,
                                                 electropfare,
                                                 electrsaveopcount,
                                                 electropcount,
                                                 status,
                                                 acccode,
                                                 opdt,
                                                 description,
                                                 cardkind,
                                                 poscode,
                                                 psamcardno,
                                                 empid,
                                                 dealtype,
                                                 wallettype,
                                                 tac,
                                                 samtradeno,
                                                 badcode,
                                                 baddesc,
                                                 ver,
                                                 customerunitcode)
            select planid,
                   customerid,
                   cardno,
                   cardsn,
                   cardtypedetailid,
                   electroddfare,
                   electroddfarepre,
                   electrdummyopfare,
                   electropfare,
                   electrsaveopcount,
                   electropcount,
                   status,
                   acccode,
                   opdt,
                   description,
                   cardkind,
                   poscode,
                   psamcardno,
                   empid,
                   dealtype,
                   wallettype,
                   tac,
                   samtradeno,
                   prmbadcode,
                   prmbaddesc,
                   ver,
                   prmcustunitcode
              from rec_electtron_cash_plan a
             where     a.planid = prmplanid
                   and a.customerunitcode = prmcustunitcode;

        if (vacccodegroupid = 11)
        then
            --圈存回滚修改申请明细状态
            update rec_electtron_cash_plan
               set status = 0
             where planid = prmplanid and customerunitcode = prmcustunitcode;
        else
            --充值回滚删除申请明细
            delete from rec_electtron_cash_plan
                  where     planid = prmplanid
                        and customerunitcode = prmcustunitcode;
        end if;

        if (sql%rowcount != 1)
        then
            --如果发放表和日志表没有记录，也没有日志，说明人为删除了发入记录
            insert into log_operation (stationid,
                                       systemid,
                                       empid,
                                       outid,
                                       name,
                                       message,
                                       logtype,
                                       recordlevel,
                                       createdate,
                                       customerunitcode)
                 values (
                            0,
                            0,
                            to_char (t_empid),
                            to_char (t_customerid),
                            to_char (prmplanid),
                               '删除充值申请记录planid：['
                            || to_char (prmplanid)
                            || ']时影响0行',
                            0,
                            0,
                            sysdate,
                            prmcustunitcode);
        end if;

        out_result := 100;
        out_msg := '未决记录回滚处理完毕';
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;

    procedure module_montrcash_commit (prmplanid         in     number, --计划id
                                       prmcustomerid     in     number,
                                       prmtac            in     varchar2,
                                       prmcustunitcode   in     varchar2, --客户代码
                                       out_result           out number,
                                       out_msg              out varchar2)
    as
        /*
        ------------------------------------------------------------------------
        --存储过程： module_montrcash_commit
        --作　　者：朱鹏飞
        --时　　间：2009-06-19
        --说　　明：月票充值提交模块
        ------------------------------------------------------------------------
        --修改标记：周晓娜 20120910
        --修改说明： 增加客户代码、充值授权额度处理
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20121224
        --修改说明： 增加资产负债账目-收支账目处理
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20130422
        --修改说明： m1卡充值时原有流程充值交易计数和消费交易计数同时增加
                    现修改为充值时只改变充值交易计数，消费交易计数不再改变，保证cpu和m1处理流程一致
        --------------------------------------------------------------------------
              */
        i_count                   integer;
        --账本信息
        i_curcardsn               integer; --账本当前卡序号
        i_curviceopcount          integer; --账本当前卡交易计数
        i_curvicesaveopcount      integer; --账本当前存款计数
        --
        i_pty                     integer;
        --非当前卡下一张卡操作类型（补卡，换卡等）
        i_freezeflag              integer; --非当前卡下一张卡冻结金额是否领取
        i_freeopcount             number; --冻结金额交易计数
        --充值未决记录
        vplanid                   number;
        t_acccode                 number;
        t_accdesc                 varchar (20);
        t_vicesaveopcount         number;
        t_viceopcount             number;
        t_sumfare                 number;
        t_cardno                  number;
        t_cardsn                  number;
        t_vicedummyopfare         number;
        t_viceopfare              number;
        t_viceoddfarepre          number;
        t_opdt                    varchar2 (30);
        t_customerid              number;
        t_cardtypedetailid        number;
        t_empid                   number;
        t_poscode                 number;
        t_cardkind                number;
        t_samcardno               number;
        t_areaid                  number;
        t_sumvicefare             number (10, 2);
        --
        v_deptcode                varchar2 (20); --充值职员所属营业部门
        i_deptareaid              integer; --充值职员营业部门所属分区
        vacccodegroupid           number; --科目大类
        --
        n_totalconsumfare         number (20, 2); --电子钱包累计消费金额
        n_refunddumpfare          number (10, 2); --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2); --最低消费限额
        --充值授权额度--
        v_netsite                 varchar2 (12); --充值网点编号
        n_curoddfare              number (20, 2); --可用充值额度
        n_isuse                   number; --是否启用充值授权
        d_opdt                    date;
        n_workstatus              number; --状态：0正常状态，1透支状态
        n_allowoverdraftfare      number (20, 2); --允许透支金额
        --连充设置
        t_limittimes              number;
        t_monthnum                number;
        t_validtimestart          date;
        t_validtimeend            date;
        --账户类型（收支账户使用）
        n_custaccountype          number; --持卡人账户类型
        n_empaccountype           number; --出纳员账户类型
        n_cashaccfc               number; --形成充值明细的原始流水号
        v_empname                 varchar2 (30); --出纳名称
        n_empoddfare              number (20, 2); --出纳账户余额
        n_cardid                  number;
    begin
        out_result := -1008;
        out_msg := '处理未决记录开始';
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        select count (*)
          into i_count
          from rec_monticket_cash_plan a
         where a.planid = prmplanid and a.customerunitcode = prmcustunitcode;

        if (i_count <> 1)
        then
            out_result := -1001;
            out_msg := '参数信息不匹配，请重新操作';
            return;
        end if;

        select a.customerid,
               vicesaveopcount,
               viceopcount,
               cardno,
               cardsn,
               vicedummyopfare,
               viceopfare,
               viceoddfarepre,
               to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'),
               cardtypedetailid,
               acccode,
               description,
               empid,
               poscode,
               cardkind,
               psamcardno,
               sumviceaddfare,
               validtimestart,
               validtimeend,
               limittimes,
               monthnum
          into t_customerid,
               t_vicesaveopcount,
               t_viceopcount,
               t_cardno,
               t_cardsn,
               t_vicedummyopfare,
               t_viceopfare,
               t_viceoddfarepre,
               t_opdt,
               t_cardtypedetailid,
               t_acccode,
               t_accdesc,
               t_empid,
               t_poscode,
               t_cardkind,
               t_samcardno,
               t_sumvicefare,
               t_validtimestart,
               t_validtimeend,
               t_limittimes,
               t_monthnum
          from rec_monticket_cash_plan a
         where a.planid = prmplanid and a.customerunitcode = prmcustunitcode;

        --增加科目校验
        --根据科目大类判断是否更新冻结金额
        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = t_acccode;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select a.groupid
          into vacccodegroupid
          from base_acc_type a
         where a.acccode = t_acccode;

        select count (*)
          into i_count
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常empid：' || to_char (t_empid);
            return;
        end if;

        --提交
        out_result := -1006;
        out_msg := '提交未决开始';

        -------------充值的提交更新充值授权额度信息----------------------------
        if vacccodegroupid = 1 or vacccodegroupid = 11
        then
            begin
                --根据职员编号获取职员所属网点
                select a.dptcode
                  into v_netsite
                  from base_emp a, base_dept b
                 where     a.dptcode = b.dptcode
                       and a.customerunitcode = b.customerunitcode
                       and a.empid = t_empid
                       and a.customerunitcode = prmcustunitcode;

                select a.curoddfare,
                       a.allowoverdraftfare,
                       a.isuse,
                       a.workstatus
                  into n_curoddfare,
                       n_allowoverdraftfare,
                       n_isuse,
                       n_workstatus
                  from base_chargeauth a
                 where     a.businesspoint = v_netsite
                       and a.customerunitcode = prmcustunitcode;

                --该充值网点启用充值授权额度
                if n_isuse = 1
                then
                    --当前状态为正常状态
                    if n_workstatus = 0
                    then
                        update base_chargeauth
                           set curoddfare =
                                     curoddfare
                                   - (t_viceopfare - t_vicedummyopfare)
                         where     businesspoint = v_netsite
                               and customerunitcode = prmcustunitcode;
                    --当前状态为透支状态
                    else
                        --充值额度没有使用完
                        if n_curoddfare > 0
                        then
                            if n_curoddfare >
                                   (t_viceopfare - t_vicedummyopfare)
                            then
                                update base_chargeauth
                                   set curoddfare =
                                             curoddfare
                                           - (  t_viceopfare
                                              - t_vicedummyopfare)
                                 where     businesspoint = v_netsite
                                       and customerunitcode = prmcustunitcode;
                            else
                                --zxn 20130426
                                --当使用透支金额时，修改原来的流程，
                                --1、透支金额在平台重新设置之前不改变
                                --2、此时更新当前的剩余额度，可能会更新成负数
                                --3、平台再次授权的时候，本次授权额度+当前授权额度（目的是为了在平台再次授权的时候把使用的透支金额去掉）
                                update base_chargeauth
                                   set curoddfare =
                                             n_curoddfare
                                           - (  t_viceopfare
                                              - t_vicedummyopfare),
                                       allowoverdraftfare =
                                             allowoverdraftfare
                                           - (  t_viceopfare
                                              - t_vicedummyopfare)
                                           + n_curoddfare,
                                       allowoverdraftsumfare =
                                             allowoverdraftsumfare
                                           + (  t_viceopfare
                                              - t_vicedummyopfare)
                                           - n_curoddfare --网点使用透支额度累计
                                 where     businesspoint = v_netsite
                                       and customerunitcode = prmcustunitcode;
                            /*update base_chargeauth
                              set curoddfare = 0,
                                  allowoverdraftfare =
                                       allowoverdraftfare
                                     - t_electropfare
                                     + n_curoddfare,
                                  allowoverdraftsumfare =
                                       allowoverdraftsumfare
                                     + t_electropfare
                                     - n_curoddfare            --允许透支金额累计
                            where businesspoint = v_netsite
                              and customerunitcode = prmcustunitcode;*/
                            end if;
                        else
                            /* update base_chargeauth
                              set allowoverdraftfare =
                                                 allowoverdraftfare - t_electropfare,
                                  allowoverdraftsumfare =
                                       allowoverdraftsumfare
                                     + t_electropfare             --允许透支金额累计
                            where businesspoint = v_netsite
                              and customerunitcode = prmcustunitcode;*/

                            --zxn 20130426
                            --当使用透支金额时，修改原来的流程，
                            --1、透支金额在平台重新设置之前不改变
                            --2、此时更新当前的剩余额度，可能会更新成负数
                            --3、平台再次授权的时候，本次授权额度+当前授权额度（目的是为了在平台再次授权的时候把使用的透支金额去掉）
                            update base_chargeauth
                               set curoddfare =
                                         n_curoddfare
                                       - (t_viceopfare - t_vicedummyopfare),
                                   allowoverdraftfare =
                                         allowoverdraftfare
                                       - (t_viceopfare - t_vicedummyopfare),
                                   allowoverdraftsumfare =
                                         allowoverdraftsumfare
                                       + (t_viceopfare - t_vicedummyopfare)
                                       - n_curoddfare --网点使用透支额度累计
                             where     businesspoint = v_netsite
                                   and customerunitcode = prmcustunitcode;
                        end if;
                    end if;
                end if;
            exception
                when others
                then
                    out_result := -1017;
                    out_msg := '获取充值授权额度信息异常';
                    return;
            end;
        end if;

        -------------------------------------------------------------------------
        select count (*)
          into i_count
          from base_customers a
         where     a.customerid = t_customerid
               and a.cardno = t_cardno
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1007;
            out_msg := '用户不存在或者已退卡';
            return;
        end if;

        --用户存在，则获取用户当前信息
        select a.cardsn,
               a.monopcount,
               a.monsaveopcount,
               a.accounttype
          into i_curcardsn,
               i_curviceopcount,
               i_curvicesaveopcount,
               n_custaccountype
          from base_customers a
         where     a.customerid = t_customerid
               and a.cardno = t_cardno
               and a.customerunitcode = prmcustunitcode;

        --获取月票钱包消费累计总额、最低消费限额
        select a.sumconsumefare, a.refundlimitconsumfare
          into n_totalconsumfare, n_refundlimitconsumfare
          from base_customers_monticket a
         where     a.customerid = t_customerid
               and a.cardasn = t_cardno
               and a.customerunitcode = prmcustunitcode;

        --判断是否为处理充值金额记录
        if vacccodegroupid = 1 or vacccodegroupid = 11 --充值
        then
            if t_cardsn > i_curcardsn
            then
                --未决卡序号比账本卡序号大，说明未决记录异常
                out_result := -1009;
                out_msg := '未决记录信息异常';
                return;
            elsif t_cardsn = i_curcardsn --充值未决为当前卡
            then
                --账本表交易计数大于未决交易计数，账本余额已经最新
                if i_curviceopcount > t_viceopcount
                then
                    --更新账本表系统余额,和加款额
                    update base_customers a
                       set summonaddfareacc = summonaddfareacc + t_viceopfare,
                           --该字段和 base_customers_monticket表字段sumaddfareacc含义一致
                           summonthoddfareacc =
                               summonthoddfareacc + t_viceopfare,
                           monvalidtimestart = t_validtimestart,
                           monvalidtimeend = t_validtimeend,
                           monsaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;

                    --更新月票钱包加款额,加款额系统值
                    update base_customers_monticket a
                       set sumaddfareacc = sumaddfareacc + t_viceopfare,
                           sumrdummyfare = sumrdummyfare + t_vicedummyopfare,
                           sumaddfare = sumaddfare + t_viceopfare
                     where     a.customerid = t_customerid
                           and cardasn = t_cardno
                           and customerunitcode = prmcustunitcode;
                else
                    --更新账本卡余额、卡余额系统余额、加款额、加款额系统值和交易计数
                    update base_customers a
                       set monoddfare = t_viceoddfarepre + t_viceopfare,
                           summonthoddfareacc =
                               summonthoddfareacc + t_viceopfare,
                           summonaddfareacc = summonaddfareacc + t_viceopfare,
                           a.monopcount = t_viceopcount,
                           a.monsaveopcount = t_vicesaveopcount + 1,
                           monvalidtimestart = t_validtimestart,
                           monvalidtimeend = t_validtimeend,
                           monsaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;

                    --更新月票钱包总加款额、系统总额、虚充总额
                    update base_customers_monticket a
                       set sumaddfareacc = sumaddfareacc + t_viceopfare,
                           sumaddfare = sumaddfare + t_viceopfare,
                           sumrdummyfare = sumrdummyfare + t_vicedummyopfare
                     where     a.customerid = t_customerid
                           and cardasn = t_cardno
                           and customerunitcode = prmcustunitcode;
                end if;

                --修改人：梁小凯 200907247
                --修改说明：虚充金额大于0时，对虚充总加款额的修改
                --修改标示：2009-08-10 朱鹏飞 增加退卡有效虚充金额累计
                --在申请时已经判断如果累计消费达到最低限额，虚充已经清零，此处只累计
                if t_vicedummyopfare > 0
                then
                    update base_customers_monticket
                       set sumadddummyfare =
                                 sumadddummyfare
                               + (t_viceopfare - t_vicedummyopfare),
                           refunddumpfare = refunddumpfare + t_vicedummyopfare
                     where     customerid = prmcustomerid
                           and cardasn = t_cardno
                           and customerunitcode = prmcustunitcode;
                end if;

                --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
                --如果用卡余额计算的累计消费金额大，则说明卡上软准确
                --如果库里大，则说明库里可能正确，卡上总额可能错误
                if t_sumvicefare - t_viceoddfarepre > n_totalconsumfare
                then
                    n_totalconsumfare := t_sumvicefare - t_viceoddfarepre;
                else
                    n_totalconsumfare := n_totalconsumfare;
                end if;

                --比较累计消费比最低消费限额
                if (n_totalconsumfare > n_refundlimitconsumfare)
                then
                    --如果累计消费比最低限额大，
                    --有虚充，则用累计消费重新计算最低限额
                    --没有虚充，则用累计消费更新最大限额
                    if t_vicedummyopfare > 0
                    then
                        update base_customers_monticket
                           set refundlimitconsumfare =
                                   n_totalconsumfare + t_viceopfare
                         where     customerid = prmcustomerid
                               and cardasn = t_cardno
                               and customerunitcode = prmcustunitcode;
                    else
                        update base_customers_monticket
                           set refundlimitconsumfare = n_totalconsumfare
                         where     customerid = prmcustomerid
                               and cardasn = t_cardno
                               and customerunitcode = prmcustunitcode;
                    end if;
                else
                    --如果累计消费比最低限额小
                    --有虚充，则用最低限额重新计算最低限额
                    --没有虚充，则还是原来的最低限额
                    if t_vicedummyopfare > 0
                    then
                        update base_customers_monticket
                           set refundlimitconsumfare =
                                   n_refundlimitconsumfare + t_viceopfare
                         where     customerid = prmcustomerid
                               and cardasn = t_cardno
                               and customerunitcode = prmcustunitcode;
                    else
                        update base_customers_monticket
                           set refundlimitconsumfare = n_refundlimitconsumfare
                         where     customerid = prmcustomerid
                               and cardasn = t_cardno
                               and customerunitcode = prmcustunitcode;
                    end if;
                end if;
            else
                --非当前卡未决记录,判断冻结金额

                --2016-09-23 若当前记录的plan表cardsn小于账本表中的cardsn，
                --并且vacccodegroupid = 11，
                --则是圈存领款流程中 【新补办卡/新换卡 领取老卡圈存未领款记录(status=0)】
                if (vacccodegroupid = 11 and t_cardsn > 0)
                then
                    --更新账本卡余额、卡余额系统余额、加款额、加款额系统值和交易计数
                    update base_customers a
                       set monoddfare = monoddfare + t_viceopfare,
                           summonthoddfareacc =
                               summonthoddfareacc + t_viceopfare,
                           summonaddfareacc = summonaddfareacc + t_viceopfare,
                           a.monopcount = a.monopcount,
                           a.monsaveopcount = a.monsaveopcount + 1,
                           monvalidtimestart = t_validtimestart,
                           monvalidtimeend = t_validtimeend,
                           monsaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;

                    --更新月票钱包总加款额、系统总额、虚充总额
                    update base_customers_monticket a
                       set sumaddfareacc = sumaddfareacc + t_viceopfare,
                           sumaddfare = sumaddfare + t_viceopfare,
                           sumrdummyfare = sumrdummyfare + t_vicedummyopfare
                     where     a.customerid = t_customerid
                           and cardasn = t_cardno
                           and customerunitcode = prmcustunitcode;
                else
                    --是否存在下一和卡的制卡记录
                    select count (*)
                      into i_count
                      from rec_card_make_acc a
                     where     a.customerid = t_customerid
                           and a.cardsn = t_cardsn + 1
                           and pty not in (10, 11, 12)
                           and a.oldcardno = t_cardno
                           and a.customerunitcode = prmcustunitcode;

                    if (i_count <> 1)
                    then
                        out_result := -1012;
                        out_msg :=
                            '未决记录异常，非当前卡下一张制卡记录不存在';
                        rollback;
                        return;
                    end if;

                    select a.pty
                      into i_pty
                      from rec_card_make_acc a
                     where     a.customerid = t_customerid
                           and a.cardsn = t_cardsn + 1
                           and pty not in (10, 11, 12)
                           and a.oldcardno = t_cardno
                           and a.customerunitcode = prmcustunitcode;

                    if (i_pty = 1) --非当前卡下一张卡是补卡
                    then
                        out_result := -1012;
                        out_msg := '非当前卡下一张卡是补卡，考虑处理冻结金额';

                        select count (*)
                          into i_count
                          from rec_freezefare_acc a
                         where     a.customerid = t_customerid
                               and a.cardsn = t_cardsn
                               and cardno = t_cardno
                               --and wallettype = 2
                               and customerunitcode = prmcustunitcode;

                        if (i_count = 1)
                        then
                            --存在冻结金额
                            --判断下一张卡冻结金额是否领取
                            select a.monthfreezefare, a.monthopcount
                              into i_freezeflag, i_freeopcount
                              from rec_freezefare_acc a
                             where     a.customerid = t_customerid
                                   and a.cardsn = t_cardsn
                                   and cardno = t_cardno
                                   --and wallettype = 2
                                   and customerunitcode = prmcustunitcode;

                            if (i_freezeflag = 0) --冻结金额未领
                            then
                                if (t_viceopcount > i_freeopcount)
                                then
                                    --冻结金额未领，则更新冻结金额
                                    update rec_freezefare_acc a
                                       set monthopcount = opcount,
                                           monthsaveopcount = saveopcount + 1,
                                           monthfreezefare =
                                                 t_vicedummyopfare
                                               + t_viceopfare
                                     where     a.customerid = t_customerid
                                           and a.cardsn = t_cardsn
                                           and cardno = t_cardno
                                           --and wallettype = 2
                                           and customerunitcode =
                                                   prmcustunitcode;
                                else
                                    out_msg :=
                                        '冻结金额已经更新，充值非最后交易记录';
                                end if;
                            else
                                out_msg := '冻结金额已领';
                            end if;
                        else
                            out_msg := '不存在冻结金额记录';
                        end if;
                    else
                        out_msg := '下一张卡不是补卡';
                    end if;
                end if;
            end if;
        elsif vacccodegroupid = 5
        --冻结金额（需增加多条的判断条件，一次只能处理一条）
        then
            select id
              into n_cardid
              from base_customers a
             where     a.customerid = t_customerid
                   and cardno = t_cardno
                   and customerunitcode = prmcustunitcode;

            if t_cardsn > i_curcardsn
            then
                --未决卡序号比账本卡序号大，说明未决记录异常
                out_result := -1012;
                out_msg := '未决记录信息异常';
                return;
            elsif t_cardsn = i_curcardsn --充值未决为当前卡
            then
                --账本表交易计数大于未决交易计数，账本余额已经最新
                if i_curviceopcount > t_viceopcount
                then
                    update rec_freezefare_acc a
                       set monthfreezefareflag = 1
                     where     customerid = t_customerid
                           and monthfreezefareflag = 2
                           and cardid = n_cardid
                           --and wallettype = 2
                           and customerunitcode = prmcustunitcode;

                    update base_customers a
                       set a.monvalidtimestart = t_validtimestart,
                           a.monvalidtimeend = t_validtimeend,
                           monsaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;
                else
                    --冻结金额记录为最新记录
                    update rec_freezefare_acc a
                       set monthfreezefareflag = 1
                     where     customerid = t_customerid
                           and monthfreezefareflag = 2
                           and cardid = n_cardid
                           --and wallettype = 2
                           and customerunitcode = prmcustunitcode;

                    update base_customers a
                       set monoddfare = t_vicedummyopfare + t_viceopfare,
                           a.monopcount = t_viceopcount,
                           a.monsaveopcount = t_vicesaveopcount + 1,
                           a.monvalidtimestart = t_validtimestart,
                           a.monvalidtimeend = t_validtimeend,
                           monsaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;
                end if;
            else
                --未决记录卡序号比账本卡序号小
                update rec_freezefare_acc a
                   set monthfreezefareflag = 1
                 where     customerid = t_customerid
                       and monthfreezefareflag = 2
                       and cardid = n_cardid
                       --and wallettype = 2
                       and customerunitcode = prmcustunitcode;
            end if;
        else
            out_result := -1013;
            out_msg := '未决科目信息错误acccode:' || to_char (t_acccode);
            return;
        end if;

        -- 形成充值明细记录
        out_result := -1012;
        out_msg := '形成月票钱包充值明细';

        --获取交易流水号
        select seq_monticket_cash.nextval into n_cashaccfc from dual;

        --增加月票连充信息
        insert into rec_monticket_cash (cashaccfc,
                                        opdt,
                                        customerid,
                                        cardno,
                                        cardsn,
                                        cardtypedetailid,
                                        cardkind,
                                        viceopcount,
                                        vicesaveopcount,
                                        viceoddfare,
                                        viceoddfarepre,
                                        vicedummyopfare,
                                        viceopfare,
                                        acccode,
                                        dscrp,
                                        poscode,
                                        dealtype,
                                        samcardno,
                                        samtradeno,
                                        planid,
                                        uploaddate,
                                        empid,
                                        wallettype,
                                        tac,
                                        customerunitcode,
                                        limittimes,
                                        monthnum,
                                        validtimestart,
                                        validtimeend,
                                        sumviceaddfare)
             values (n_cashaccfc,
                     to_date (t_opdt, 'yyyy-mm-dd hh24:mi:ss'),
                     t_customerid,
                     t_cardno,
                     t_cardsn,
                     t_cardtypedetailid,
                     t_cardkind,
                     t_viceopcount,
                     t_vicesaveopcount + 1,
                     t_viceoddfarepre + t_viceopfare,
                     t_viceoddfarepre,
                     t_vicedummyopfare,
                     t_viceopfare,
                     t_acccode,
                     t_accdesc,
                     t_poscode,
                     1,
                     t_samcardno,
                     -1,
                     prmplanid,
                     sysdate,
                     t_empid,
                     3,
                     prmtac,
                     prmcustunitcode,
                     t_limittimes,
                     t_monthnum,
                     t_validtimestart,
                     t_validtimeend,
                     t_sumvicefare);

        out_result := -1019;
        out_msg := '形成充值发放记录';

        --形成申请发放记录，手工处理写卡成功时tac为77777
        insert into rec_monticket_cash_plan_putout (planid,
                                                    customerid,
                                                    cardno,
                                                    cardsn,
                                                    cardtypedetailid,
                                                    viceoddfare,
                                                    viceoddfarepre,
                                                    vicedummyopfare,
                                                    viceopfare,
                                                    vicesaveopcount,
                                                    viceopcount,
                                                    status,
                                                    acccode,
                                                    opdt,
                                                    description,
                                                    cardkind,
                                                    poscode,
                                                    psamcardno,
                                                    empid,
                                                    dealtype,
                                                    wallettype,
                                                    tac,
                                                    samtradeno,
                                                    ver,
                                                    customerunitcode,
                                                    limittimes,
                                                    monthnum,
                                                    validtimestart,
                                                    validtimeend)
            (select planid,
                    customerid,
                    cardno,
                    cardsn,
                    cardtypedetailid,
                    t_viceoddfarepre + t_viceopfare,
                    t_viceoddfarepre,
                    vicedummyopfare,
                    viceopfare,
                    t_vicesaveopcount + 1,
                    t_viceopcount,
                    2,
                    acccode,
                    opdt,
                    description,
                    cardkind,
                    poscode,
                    psamcardno,
                    empid,
                    1,
                    3,
                    prmtac,
                    samtradeno,
                    ver,
                    customerunitcode,
                    limittimes,
                    monthnum,
                    validtimestart,
                    validtimeend
               from rec_monticket_cash_plan
              where planid = prmplanid and customerunitcode = prmcustunitcode);

        --删除申请明细
        delete from rec_monticket_cash_plan
              where planid = prmplanid and customerunitcode = prmcustunitcode;

        if (sql%rowcount != 1)
        then
            --如果发放表和日志表没有记录，也没有日志，说明人为删除了发入记录
            insert into log_operation (stationid,
                                       systemid,
                                       empid,
                                       outid,
                                       name,
                                       message,
                                       logtype,
                                       recordlevel,
                                       createdate,
                                       customerunitcode)
                 values (
                            0,
                            0,
                            to_char (t_empid),
                            to_char (t_customerid),
                            to_char (prmplanid),
                               '删除月票钱包充值申请记录planid：['
                            || to_char (prmplanid)
                            || ']时影响0行',
                            0,
                            0,
                            sysdate,
                            prmcustunitcode);
        end if;

        out_result := -1013;
        out_msg := '获取职员部门和账户类型';

        --获取充值员部门及分区编号
        --zxn 20121107 去掉分区字段
        select a.dptcode, a.accounttype, a.empname
          into v_deptcode, n_empaccountype, v_empname
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        --当次卡钱包充值金额大于0时进行及时统计
        if t_viceopfare > 0
        then
            out_result := -1013;
            out_msg := '充值金额账目及时统计';
            --zxn 20121107 去掉分区字段
            pkg_st_payment.proc_custdataaccount_online (
                t_opdt,
                t_viceopfare - t_vicedummyopfare,
                t_acccode,
                0,
                t_cardkind, --卡类型 1：m1卡 2：cpu卡
                t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                t_empid, --充值员或者司机id
                t_poscode, --设备唯一运营编号
                t_samcardno, --sam卡号
                0, --线路id
                v_deptcode,
                0, --车辆编号
                2, --钱包类型 1电子 2月票 3次卡钱包
                0, --操作类型 0：正常 1：回滚
                prmcustunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                out_result := -1014;
                out_msg := '充值金额账目及时统计失败，' || out_msg;
                return;
            end if;
        end if;

        --当电子钱包虚充金额大于0时进行及时统计
        if t_vicedummyopfare > 0
        then
            --账目及时统计
            out_result := -1015;
            out_msg := '虚充金额账目及时统计';
            --zxn 20121107 去掉分区字段
            pkg_st_payment.proc_custdataaccount_online (t_opdt,
                                                        t_vicedummyopfare,
                                                        801, --月票钱包虚充
                                                        0,
                                                        t_cardkind,
                                                        --卡类型 1：m1卡 2：cpu卡
                                                        t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                                                        t_empid, --充值员或者司机id
                                                        t_poscode, --设备唯一运营编号
                                                        t_samcardno, --sam卡号
                                                        0,
                                                        --线路id
                                                        v_deptcode,
                                                        0,
                                                        --车辆编号
                                                        2,
                                                        --钱包类型 1电子 2月票 3 次卡钱包
                                                        0, --操作类型 0：正常 1：回滚
                                                        prmcustunitcode,
                                                        out_msg,
                                                        out_result);

            if out_result <> 100
            then
                out_msg := '虚充金额账目及时统计' || out_msg;
                out_result := -1016;
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := '未决记录提交处理成功';
        return;
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;

    procedure module_montrcash_rollback (prmplanid         in     number, --计划id
                                         prmcustomerid     in     number,
                                         prmbadcode        in     number,
                                         prmbaddesc        in     varchar2,
                                         prmcustunitcode   in     varchar2, --客户代码
                                         out_result           out number,
                                         out_msg              out varchar2)
    ----------------------------------------------------------------------------
    --修改标记：周晓娜 20120912
    --修改说明： 兼容多客户处理
    --------------------------------------------------------------------------
    as
        i_count                integer;
        --账本信息
        i_curcardsn            integer; --账本当前卡序号
        i_curviceopcount       integer; --账本当前卡交易计数
        i_curvicesaveopcount   integer; --账本当前存款计数
        --
        i_pty                  integer;
        --非当前卡下一张卡操作类型（补卡，换卡等）
        i_freezeflag           integer; --非当前卡下一张卡冻结金额是否领取
        i_freeopcount          number; --冻结金额交易计数
        --充值未决记录
        vplanid                number;
        t_acccode              number;
        t_accdesc              varchar (20);
        t_vicesaveopcount      number;
        t_viceopcount          number;
        t_sumfare              number;
        t_cardno               number;
        t_cardsn               number;
        t_vicedummyopfare      number;
        t_viceopfare           number;
        t_viceoddfarepre       number;
        t_opdt                 varchar2 (30);
        t_customerid           number;
        t_cardtypedetailid     number;
        t_empid                number;
        t_poscode              number;
        t_cardkind             number;
        t_samcardno            number;
        t_areaid               number;
        t_sumvicefare          number (10, 2);
        --
        v_deptcode             varchar2 (20); --充值职员所属营业部门
        i_deptareaid           integer; --充值职员营业部门所属分区
        vacccodegroupid        number; --科目大类
        --连充设置
        t_limittimes           number;
        t_monthnum             number;
        t_validtimestart       date;
        t_validtimeend         date;
        vcardid                number;
    begin
        out_result := -1008;
        out_msg := '处理未决记录开始';

        select count (*)
          into i_count
          from rec_monticket_cash_plan a
         where     a.planid = prmplanid
               and a.customerid = prmcustomerid
               and a.customerunitcode = prmcustunitcode;

        if (i_count <> 1)
        then
            out_result := -1001;
            out_msg := '未决记录可能已处理，请刷新页面后重试';
            return;
        end if;

        select a.customerid,
               vicesaveopcount,
               viceopcount,
               cardno,
               cardsn,
               vicedummyopfare,
               viceopfare,
               viceoddfarepre,
               to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'),
               cardtypedetailid,
               acccode,
               description,
               empid,
               poscode,
               cardkind,
               psamcardno,
               sumviceaddfare,
               validtimestart,
               validtimeend,
               limittimes,
               monthnum
          into t_customerid,
               t_vicesaveopcount,
               t_viceopcount,
               t_cardno,
               t_cardsn,
               t_vicedummyopfare,
               t_viceopfare,
               t_viceoddfarepre,
               t_opdt,
               t_cardtypedetailid,
               t_acccode,
               t_accdesc,
               t_empid,
               t_poscode,
               t_cardkind,
               t_samcardno,
               t_sumvicefare,
               t_validtimestart,
               t_validtimeend,
               t_limittimes,
               t_monthnum
          from rec_monticket_cash_plan a
         where a.planid = prmplanid and a.customerunitcode = prmcustunitcode;

        --增加科目校验
        --根据科目大类判断是否更新冻结金额
        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = t_acccode;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select a.groupid
          into vacccodegroupid
          from base_acc_type a
         where a.acccode = t_acccode;

        select count (*)
          into i_count
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常';
            return;
        end if;

        --判断是否为处理冻结金额记录
        if vacccodegroupid = 5
        then
            select id
              into vcardid
              from base_customers
             where     customerunitcode = prmcustunitcode
                   and customerid = t_customerid
                   and cardno = t_cardno;

            out_result := -1004;
            out_msg := '处理冻结金额为未领！';

            --更新冻结金额为未领
            update rec_freezefare_acc
               set monthfreezefareflag = 0
             where     customerid = t_customerid
                   and monthfreezefareflag = 2
                   and cardid = vcardid
                   --and wallettype = 2
                   and customerunitcode = prmcustunitcode;
        end if;

        out_result := -1005;
        out_msg := '设置写卡状态为失败状态！';

        --zxn 20121107 去掉分区字段
        insert into rec_monticket_cash_plan_bad (planid,
                                                 customerid,
                                                 cardno,
                                                 cardsn,
                                                 cardtypedetailid,
                                                 viceoddfare,
                                                 viceoddfarepre,
                                                 vicedummyopfare,
                                                 viceopfare,
                                                 vicesaveopcount,
                                                 viceopcount,
                                                 status,
                                                 acccode,
                                                 opdt,
                                                 description,
                                                 cardkind,
                                                 poscode,
                                                 psamcardno,
                                                 empid,
                                                 dealtype,
                                                 wallettype,
                                                 tac,
                                                 samtradeno,
                                                 badcode,
                                                 baddesc,
                                                 ver,
                                                 customerunitcode,
                                                 limittimes,
                                                 monthnum,
                                                 validtimestart,
                                                 validtimeend)
            select planid,
                   customerid,
                   cardno,
                   cardsn,
                   cardtypedetailid,
                   viceoddfare,
                   viceoddfarepre,
                   vicedummyopfare,
                   viceopfare,
                   vicesaveopcount,
                   viceopcount,
                   status,
                   acccode,
                   opdt,
                   description,
                   cardkind,
                   poscode,
                   psamcardno,
                   empid,
                   dealtype,
                   wallettype,
                   tac,
                   samtradeno,
                   prmbadcode,
                   prmbaddesc,
                   ver,
                   prmcustunitcode,
                   limittimes,
                   monthnum,
                   validtimestart,
                   validtimeend
              from rec_monticket_cash_plan a
             where     a.planid = prmplanid
                   and a.customerunitcode = prmcustunitcode;

        if (vacccodegroupid = 11)
        then
            --圈存回滚修改申请明细状态
            update rec_monticket_cash_plan
               set status = 0
             where planid = prmplanid and customerunitcode = prmcustunitcode;
        else
            --充值回滚删除申请明细
            delete from rec_monticket_cash_plan
                  where     planid = prmplanid
                        and customerunitcode = prmcustunitcode;
        end if;

        -- --删除申请明细
        --delete from rec_monticket_cash_plan
        --      where planid = prmplanid and customerunitcode = prmcustunitcode;

        if (sql%rowcount != 1)
        then
            --如果发放表和日志表没有记录，也没有日志，说明人为删除了发入记录
            insert into log_operation (stationid,
                                       systemid,
                                       empid,
                                       outid,
                                       name,
                                       message,
                                       logtype,
                                       recordlevel,
                                       createdate,
                                       customerunitcode)
                 values (
                            0,
                            0,
                            to_char (t_empid),
                            to_char (t_customerid),
                            to_char (prmplanid),
                               '删除月票钱包充值申请记录planid：['
                            || to_char (prmplanid)
                            || ']时影响0行',
                            0,
                            0,
                            sysdate,
                            prmcustunitcode);
        end if;

        out_result := 100;
        out_msg := '未决记录回滚处理完毕';
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;

    procedure repeal_vicecard_commit (prmplanid             in     number, --计划id
                                      prmcustomerid         in     number,
                                      prmtac                in     varchar2,
                                      prmcustomerunitcode   in     varchar2, --客户代码
                                      out_result               out number,
                                      out_msg                  out varchar2)
    as
        /*
        -------------------------------------------------------------------------------
        --存储过程： module_electrcash_commit
        --作　　者：赵军强
        --时　　间：20101023
        --说　　明： 提交电子钱包撤销领款记录模块
        --    未决存款记录的操作计数和余额都是未提交前的，
        --    此过程为统一处理电子钱包领款提交，过程内没有提交和回滚操作，由外层判断结果
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：成功，帐目统计成功，其他失败

         从module_electrcash_commit 移植
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20130529
        --修改说明： 授权额度的更新时增加是否透支的判断，如果有透支金额，更新额度时，把透支的额度也更新正常
        --------------------------------------------------------------------------
        */
        i_count                   integer;
        --账本信息
        i_curcardsn               integer; --账本当前卡序号
        i_curviceopcount          integer; --账本当前卡交易计数
        i_curvicesaveopcount      integer; --账本当前存款计数
        --
        i_pty                     integer;
        --非当前卡下一张卡操作类型（补卡，换卡等）
        i_freezeflag              integer; --非当前卡下一张卡冻结金额是否领取
        i_freeopcount             number; --冻结金额交易计数
        --充值未决记录
        vplanid                   number;
        t_acccode                 number;
        t_accdesc                 varchar (20);
        t_vicesaveopcount         number;
        t_viceopcount             number;
        t_sumfare                 number;
        t_cardno                  number;
        t_cardsn                  number;
        t_vicedummyopfare         number;
        t_viceopfare              number;
        t_viceoddfarepre          number;
        t_opdt                    varchar2 (30);
        t_customerid              number;
        t_cardtypedetailid        number;
        t_empid                   number;
        t_poscode                 number;
        t_cardkind                number;
        t_samcardno               number;
        t_areaid                  number;
        t_sumelectrfare           number (10, 2);
        t_repealempid             number;
        --
        t_sumviceaddfare          number (10, 2);
        v_deptcode                varchar2 (20); --充值职员所属营业部门
        i_deptareaid              integer; --充值职员营业部门所属分区
        vacccodegroupid           number; --科目大类
        --
        n_totalconsumfare         number (20, 2); --电子钱包累计消费金额
        n_refunddumpfare          number (10, 2); --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2); --最低消费限额
        n_vicesaveopcount         number;
        n_cashaccfc               number;
        v_netsite                 varchar2 (12); --网点编号
        n_isuse                   number; --是否启用网点授权额度
        --账户类型（收支账户使用）
        n_custaccountype          number; --持卡人账户类型
        n_empaccountype           number; --出纳员账户类型
        v_empname                 varchar2 (30); --出纳名称
        n_empoddfare              number (20, 2); --出纳账户余额
        n_workstatus              number; --透支状态
        n_curroddfare             number; --当前剩余额度
        t_oldplanid               number;
        t_validtimestart          date;
        t_validtimeend            date;
        t_monthnum                number;
    begin
        out_result := -1008;
        out_msg := '处理未决记录开始';
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        select count (*)
          into i_count
          from rec_vicecard_cash_plan a
         where     a.planid = prmplanid
               and a.customerid = prmcustomerid
               and a.customerunitcode = prmcustomerunitcode;

        if (i_count <> 1)
        then
            out_result := -1001;
            out_msg := '参数信息不匹配，请重新操作';
            return;
        end if;

        select a.customerid,
               vicesaveopcount,
               viceopcount,
               cardno,
               cardsn,
               vicedummyopfare,
               viceopfare,
               viceoddfarepre,
               to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'),
               cardtypedetailid,
               acccode,
               description,
               empid,
               poscode,
               cardkind,
               psamcardno,
               areaid,
               sumviceaddfare,
               cardtypedetailid,
               sumviceaddfare,
               repealempid,
               oldplanid,
               a.validtimestart,
               a.validtimeend,
               a.monthnum
          into t_customerid,
               t_vicesaveopcount,
               t_viceopcount,
               t_cardno,
               t_cardsn,
               t_vicedummyopfare,
               t_viceopfare,
               t_viceoddfarepre,
               t_opdt,
               t_cardtypedetailid,
               t_acccode,
               t_accdesc,
               t_empid,
               t_poscode,
               t_cardkind,
               t_samcardno,
               t_areaid,
               t_sumviceaddfare,
               t_cardtypedetailid,
               t_sumviceaddfare,
               t_repealempid,
               t_oldplanid,
               t_validtimestart,
               t_validtimeend,
               t_monthnum
          from rec_vicecard_cash_plan a
         where     a.planid = prmplanid
               and a.customerunitcode = prmcustomerunitcode;

        t_validtimeend :=
            add_months (trunc (t_validtimeend, 'mm'), 1 - t_monthnum) - 1;

        if t_validtimeend <= t_validtimestart
        then
            t_validtimestart := trunc (t_validtimeend, 'mm');
        end if;

        --增加科目校验
        --根据科目大类判断是否更新冻结金额
        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = t_acccode;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select a.groupid
          into vacccodegroupid
          from base_acc_type a
         where a.acccode = t_acccode;

        select count (*)
          into i_count
          from base_emp a
         where a.empid = t_empid and customerunitcode = prmcustomerunitcode;

        if i_count <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常empid：' || to_char (t_empid);
            return;
        end if;

        --提交
        out_result := -1006;
        out_msg := '提交未决开始';

        ------充值撤销更新充值授权额度-------------------------------
        if t_acccode = 241 --如果是充值撤销的话更新回授权额度
        then
            begin
                --根据职员编号获取网点
                select a.dptcode
                  into v_netsite
                  from base_emp a
                 where     a.empid = t_empid
                       and a.customerunitcode = prmcustomerunitcode;

                select a.isuse, a.workstatus, a.curoddfare
                  into n_isuse, n_workstatus, n_curroddfare
                  from base_chargeauth a
                 where     a.businesspoint = v_netsite
                       and a.customerunitcode = prmcustomerunitcode;

                --启用充值授权
                if n_isuse = 1
                then
                    if n_workstatus = 0
                    then
                        update base_chargeauth
                           set curoddfare =
                                     curoddfare
                                   + t_viceopfare
                                   - t_vicedummyopfare
                         where     businesspoint = v_netsite
                               and customerunitcode = prmcustomerunitcode;
                    else
                        if n_curroddfare + t_viceopfare - t_vicedummyopfare >=
                               0
                        --透支状态时更新透支金额
                        then
                            update base_chargeauth
                               set curoddfare =
                                         curoddfare
                                       + t_viceopfare
                                       - t_vicedummyopfare,
                                   allowoverdraftfare =
                                       allowoverdraftfare - curoddfare
                             where     businesspoint = v_netsite
                                   and customerunitcode = prmcustomerunitcode;
                        else
                            update base_chargeauth
                               set curoddfare =
                                         curoddfare
                                       + t_viceopfare
                                       - t_vicedummyopfare,
                                   allowoverdraftfare =
                                         allowoverdraftfare
                                       + t_viceopfare
                                       - t_vicedummyopfare
                             where     businesspoint = v_netsite
                                   and customerunitcode = prmcustomerunitcode;
                        end if;
                    end if;
                end if;
            exception
                when others
                then
                    out_result := -1017;
                    out_msg := '获取充值授权额度信息异常';
                    return;
            end;
        end if;

        --------------------------------------------------------------------------------
        select count (*)
          into i_count
          from base_customers a
         where     a.customerid = t_customerid
               and cardno = t_cardno
               and a.customerunitcode = prmcustomerunitcode;

        if i_count <> 1
        then
            out_result := -1007;
            out_msg := '用户不存在或者已退卡';
            return;
        end if;

        --用户存在，则获取用户当前信息
        select a.cardsn,
               a.numberopcount,
               a.numbersaveopcount,
               a.accounttype
          into i_curcardsn,
               i_curviceopcount,
               i_curvicesaveopcount,
               n_custaccountype
          from base_customers a
         where     a.customerid = t_customerid
               and cardno = t_cardno
               and a.customerunitcode = prmcustomerunitcode;

        --判断是否为处理充值金额记录
        if vacccodegroupid = 1 --撤销充值
        then
            if t_cardsn > i_curcardsn
            then
                --未决卡序号比账本卡序号大，说明未决记录异常
                out_result := -1009;
                out_msg := '未决记录信息异常';
                return;
            elsif t_cardsn = i_curcardsn --充值未决为当前卡
            then
                --账本表交易计数大于未决交易计数，账本余额已经最新
                if i_curviceopcount > t_viceopcount + 1
                then
                    update base_customers a
                       set numberoddfareacc = numberoddfareacc - t_viceopfare,
                           vicevalidtimestart = t_validtimestart,
                           videvalidtimeend = t_validtimeend,
                           vicesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and a.customerunitcode = prmcustomerunitcode;
                else
                    update base_customers a
                       set numberoddfare = t_viceoddfarepre - t_viceopfare,
                           numberoddfareacc = numberoddfareacc - t_viceopfare,
                           a.numberopcount = t_viceopcount + 1,
                           vicevalidtimestart = t_validtimestart,
                           videvalidtimeend = t_validtimeend,
                           vicesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and a.customerunitcode = prmcustomerunitcode;
                end if;
            else
                --非当前卡未决记录,判断冻结金额
                --是否存在下一和卡的制卡记录
                select count (*)
                  into i_count
                  from rec_card_make_acc a
                 where     a.customerid = t_customerid
                       and a.cardsn = t_cardsn + 1
                       and pty not in (10, 11, 12)
                       and a.customerunitcode = prmcustomerunitcode;

                if (i_count <> 1)
                then
                    out_result := -1012;
                    out_msg := '未决记录异常，非当前卡下一张制卡记录不存在';
                    rollback;
                    return;
                end if;
            end if;
        end if;

        --获取充值员部门及分区编号
        select a.dptcode, a.accounttype, a.empname
          into v_deptcode, n_empaccountype, v_empname
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.empid = t_empid
               and a.customerunitcode = prmcustomerunitcode;

        --获取消费记录流水号
        select seq_rec_vicecard_consume.nextval into n_cashaccfc from dual;

        -- 形成充值明细记录
        out_result := -1012;
        out_msg := '形成次卡钱包撤销充值明细';

        insert into rec_vicecard_consume (cstaccfc,
                                          customerid,
                                          cardno,
                                          cardtype,
                                          opdt,
                                          sumviceaddfare,
                                          viceonoddfare,
                                          viceonopfare,
                                          acccode,
                                          dscrp,
                                          cardsn,
                                          opcount,
                                          dealtype,
                                          collectdt,
                                          uploaddate,
                                          busid,
                                          driverid,
                                          poscode,
                                          samcardno,
                                          cardkind,
                                          traderecno,
                                          tac,
                                          samtradeno,
                                          buslineid,
                                          totalrecno,
                                          discount,
                                          tradetype,
                                          linedept,
                                          repealempid,
                                          vicedummyopfare,
                                          customerunitcode,
                                          cardasn)
             values (n_cashaccfc,
                     t_customerid,
                     t_cardno,
                     t_cardtypedetailid,
                     to_date (t_opdt, 'yyyy-mm-dd hh24:mi:ss'),
                     t_sumviceaddfare,
                     t_viceoddfarepre - t_viceopfare,
                     t_viceopfare,
                     t_acccode,
                     t_accdesc,
                     t_cardsn,
                     t_viceopcount + 1,
                     1,
                     to_date (t_opdt, 'yyyy-mm-dd hh24:mi:ss'),
                     sysdate,
                     0,
                     t_empid,
                     t_poscode,
                     t_samcardno,
                     t_cardkind,
                     1,
                     to_number (prmtac, 'xxxxxxxx'),
                     1,
                     0,
                     prmplanid,
                     0,
                     1,
                     v_deptcode,
                     t_repealempid,
                     t_vicedummyopfare,
                     prmcustomerunitcode,
                     t_cardno);

        out_result := -1006;
        out_msg := '撤销记录进入撤销表失败!';

        insert into rec_vicecard_cash1 (customerid, planid, customerunitcode)
             values (t_customerid, t_oldplanid, prmcustomerunitcode);

        --删除申请明细
        delete from rec_vicecard_cash_plan
              where planid = prmplanid;

        if (sql%rowcount != 1)
        then
            --如果发放表和日志表没有记录，也没有日志，说明人为删除了发入记录
            insert into log_operation (stationid,
                                       systemid,
                                       empid,
                                       outid,
                                       name,
                                       message,
                                       logtype,
                                       recordlevel,
                                       createdate)
                 values (
                            0,
                            0,
                            to_char (t_empid),
                            to_char (t_customerid),
                            to_char (prmplanid),
                               '删除撤销充值申请记录planid：['
                            || to_char (prmplanid)
                            || ']时影响0行',
                            0,
                            0,
                            sysdate);
        end if;

        --当次卡钱包充值金额大于0时进行及时统计
        if t_viceopfare > 0
        then
            out_result := -1013;
            out_msg := '充值金额账目及时统计';
            pkg_st_payment.proc_custdataaccount_online (
                t_opdt,
                t_viceopfare - t_vicedummyopfare,
                t_acccode,
                0,
                t_cardkind, --卡类型 1：m1卡 2：cpu卡
                t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                t_empid, --充值员或者司机id
                t_poscode, --设备唯一运营编号
                t_samcardno, --sam卡号
                0, --线路id
                v_deptcode,
                0,
                3, --钱包类型 1电子 2月票
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                out_result := -1014;
                out_msg := '充值金额账目及时统计失败，' || out_msg;
                return;
            end if;
        end if;

        --当次卡钱包虚充红冲金额大于0时进行及时统计
        if t_vicedummyopfare > 0
        then
            --账目及时统计
            out_result := -1015;
            out_msg := '虚充金额账目及时统计';
            pkg_st_payment.proc_custdataaccount_online (t_opdt,
                                                        t_vicedummyopfare,
                                                        842,
                                                        0,
                                                        t_cardkind,
                                                        --卡类型 1：m1卡 2：cpu卡
                                                        t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                                                        t_empid, --充值员或者司机id
                                                        t_poscode, --设备唯一运营编号
                                                        t_samcardno, --sam卡号
                                                        0,
                                                        --线路id
                                                        v_deptcode,
                                                        0,
                                                        --车辆编号
                                                        3,
                                                        --钱包类型 1电子 2月票
                                                        0, --操作类型 0：正常 1：回滚
                                                        prmcustomerunitcode,
                                                        out_msg,
                                                        out_result);

            if out_result <> 100
            then
                out_msg := '虚充金额账目及时统计' || out_msg;
                out_result := -1016;
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := '未决记录提交处理成功';
        return;
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;

    procedure repeal_monticket_commit (prmplanid             in     number, --计划id
                                       prmcustomerid         in     number,
                                       prmtac                in     varchar2,
                                       prmcustomerunitcode   in     varchar2, --客户代码
                                       out_result               out number,
                                       out_msg                  out varchar2)
    as
        /*
        -------------------------------------------------------------------------------
        --存储过程： module_electrcash_commit
        --作　　者：赵军强
        --时　　间：20101023
        --说　　明： 提交电子钱包撤销领款记录模块
        --    未决存款记录的操作计数和余额都是未提交前的，
        --    此过程为统一处理电子钱包领款提交，过程内没有提交和回滚操作，由外层判断结果
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：成功，帐目统计成功，其他失败

         从module_electrcash_commit 移植
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20121224
        --修改说明： 增加资产负债账目-收支账目处理
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20130529
        --修改说明： 授权额度的更新时增加是否透支的判断，如果有透支金额，更新额度时，把透支的额度也更新正常
        --------------------------------------------------------------------------
        */
        i_count                   integer;
        --账本信息
        i_curcardsn               integer; --账本当前卡序号
        i_curviceopcount          integer; --账本当前卡交易计数
        i_curvicesaveopcount      integer; --账本当前存款计数
        --
        i_pty                     integer;
        --非当前卡下一张卡操作类型（补卡，换卡等）
        i_freezeflag              integer; --非当前卡下一张卡冻结金额是否领取
        i_freeopcount             number; --冻结金额交易计数
        --充值未决记录
        vplanid                   number;
        t_acccode                 number;
        t_accdesc                 varchar (20);
        t_vicesaveopcount         number;
        t_viceopcount             number;
        t_sumfare                 number;
        t_cardno                  number;
        t_cardsn                  number;
        t_vicedummyopfare         number;
        t_viceopfare              number;
        t_viceoddfarepre          number;
        t_opdt                    varchar2 (30);
        t_customerid              number;
        t_cardtypedetailid        number;
        t_empid                   number;
        t_poscode                 number;
        t_cardkind                number;
        t_samcardno               number;
        t_areaid                  number;
        t_sumelectrfare           number (10, 2);
        t_repealempid             number;
        --
        t_sumviceaddfare          number (10, 2);
        v_deptcode                varchar2 (20); --充值职员所属营业部门
        i_deptareaid              integer; --充值职员营业部门所属分区
        vacccodegroupid           number; --科目大类
        --
        n_totalconsumfare         number (20, 2); --电子钱包累计消费金额
        n_refunddumpfare          number (10, 2); --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2); --最低消费限额
        n_vicesaveopcount         number;
        n_cashaccfc               number;
        v_netsite                 varchar2 (12); --网点编号
        n_isuse                   number; --是否启用网点授权额度
        --账户类型（收支账户使用）
        n_custaccountype          number; --持卡人账户类型
        n_empaccountype           number; --出纳员账户类型
        v_empname                 varchar2 (30); --出纳名称
        n_empoddfare              number (20, 2); --出纳账户余额
        n_workstatus              number; --透支状态
        n_curroddfare             number; --当前剩余额度
        t_oldplanid               number;
        t_validtimestart          date;
        t_validtimeend            date;
        t_monthnum                number; --撤销月数
    begin
        out_result := -1008;
        out_msg := '处理未决记录开始';
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        select count (*)
          into i_count
          from rec_monticket_cash_plan a
         where     a.planid = prmplanid
               and a.customerid = prmcustomerid
               and a.customerunitcode = prmcustomerunitcode;

        if (i_count <> 1)
        then
            out_result := -1001;
            out_msg := '参数信息不匹配，请重新操作';
            return;
        end if;

        select a.customerid,
               vicesaveopcount,
               viceopcount,
               cardno,
               cardsn,
               vicedummyopfare,
               viceopfare,
               viceoddfarepre,
               to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'),
               cardtypedetailid,
               acccode,
               description,
               empid,
               poscode,
               cardkind,
               psamcardno,
               sumviceaddfare,
               cardtypedetailid,
               sumviceaddfare,
               repealempid,
               oldplanid,
               a.validtimestart,
               a.validtimeend,
               a.monthnum
          into t_customerid,
               t_vicesaveopcount,
               t_viceopcount,
               t_cardno,
               t_cardsn,
               t_vicedummyopfare,
               t_viceopfare,
               t_viceoddfarepre,
               t_opdt,
               t_cardtypedetailid,
               t_acccode,
               t_accdesc,
               t_empid,
               t_poscode,
               t_cardkind,
               t_samcardno,
               t_sumviceaddfare,
               t_cardtypedetailid,
               t_sumviceaddfare,
               t_repealempid,
               t_oldplanid,
               t_validtimestart,
               t_validtimeend,
               t_monthnum
          from rec_monticket_cash_plan a
         where     a.planid = prmplanid
               and a.customerunitcode = prmcustomerunitcode;

        --计算新止日
        t_validtimeend :=
            add_months (trunc (t_validtimeend, 'mm'), 1 - t_monthnum) - 1;

        if t_validtimeend <= t_validtimestart
        then
            t_validtimestart := trunc (t_validtimeend, 'mm');
        end if;

        --增加科目校验
        --根据科目大类判断是否更新冻结金额
        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = t_acccode;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select a.groupid
          into vacccodegroupid
          from base_acc_type a
         where a.acccode = t_acccode;

        select count (*)
          into i_count
          from base_emp a
         where a.empid = t_empid and customerunitcode = prmcustomerunitcode;

        if i_count <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常empid：' || to_char (t_empid);
            return;
        end if;

        --提交
        out_result := -1006;
        out_msg := '提交未决开始';

        ------充值撤销更新充值授权额度-------------------------------
        if t_acccode = 242 --如果是充值撤销的话更新回授权额度
        then
            begin
                --根据职员编号获取网点
                select a.dptcode
                  into v_netsite
                  from base_emp a
                 where     a.empid = t_empid
                       and a.customerunitcode = prmcustomerunitcode;

                select a.isuse, a.workstatus, a.curoddfare
                  into n_isuse, n_workstatus, n_curroddfare
                  from base_chargeauth a
                 where     a.businesspoint = v_netsite
                       and a.customerunitcode = prmcustomerunitcode;

                --启用充值授权
                if n_isuse = 1
                then
                    if n_workstatus = 0
                    then
                        update base_chargeauth
                           set curoddfare =
                                     curoddfare
                                   + t_viceopfare
                                   - t_vicedummyopfare
                         where     businesspoint = v_netsite
                               and customerunitcode = prmcustomerunitcode;
                    else
                        if n_curroddfare + t_viceopfare - t_vicedummyopfare >=
                               0
                        --透支状态时更新透支金额
                        then
                            update base_chargeauth
                               set curoddfare =
                                         curoddfare
                                       + t_viceopfare
                                       - t_vicedummyopfare,
                                   allowoverdraftfare =
                                       allowoverdraftfare - curoddfare
                             where     businesspoint = v_netsite
                                   and customerunitcode = prmcustomerunitcode;
                        else
                            update base_chargeauth
                               set curoddfare =
                                         curoddfare
                                       + t_viceopfare
                                       - t_vicedummyopfare,
                                   allowoverdraftfare =
                                         allowoverdraftfare
                                       + t_viceopfare
                                       - t_vicedummyopfare
                             where     businesspoint = v_netsite
                                   and customerunitcode = prmcustomerunitcode;
                        end if;
                    end if;
                end if;
            exception
                when others
                then
                    out_result := -1017;
                    out_msg := '获取充值授权额度信息异常';
                    return;
            end;
        end if;

        --------------------------------------------------------------------------------
        select count (*)
          into i_count
          from base_customers a
         where     a.customerid = t_customerid
               and cardno = t_cardno
               and a.customerunitcode = prmcustomerunitcode;

        if i_count <> 1
        then
            out_result := -1007;
            out_msg := '用户不存在或者已退卡';
            return;
        end if;

        --用户存在，则获取用户当前信息
        select a.cardsn,
               a.monopcount,
               a.monsaveopcount,
               a.accounttype
          into i_curcardsn,
               i_curviceopcount,
               i_curvicesaveopcount,
               n_custaccountype
          from base_customers a
         where     a.customerid = t_customerid
               and cardno = t_cardno
               and a.customerunitcode = prmcustomerunitcode;

        --判断是否为处理充值金额记录
        if vacccodegroupid = 1 --撤销充值
        then
            if t_cardsn > i_curcardsn
            then
                --未决卡序号比账本卡序号大，说明未决记录异常
                out_result := -1009;
                out_msg := '未决记录信息异常';
                return;
            elsif t_cardsn = i_curcardsn --充值未决为当前卡
            then
                --账本表交易计数大于未决交易计数，账本余额已经最新
                if i_curviceopcount > t_viceopcount + 1
                then
                    update base_customers a
                       set summonaddfareacc = summonaddfareacc - t_viceopfare,
                           monvalidtimestart = t_validtimestart,
                           monvalidtimeend = t_validtimeend,
                           monsaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and a.customerunitcode = prmcustomerunitcode;
                else
                    update base_customers a
                       set monoddfare = t_viceoddfarepre - t_viceopfare,
                           summonaddfareacc = summonaddfareacc - t_viceopfare,
                           a.monopcount = t_viceopcount + 1,
                           monvalidtimestart = t_validtimestart,
                           monvalidtimeend = t_validtimeend,
                           monsaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and a.customerunitcode = prmcustomerunitcode;
                end if;
            else
                --非当前卡未决记录,判断冻结金额
                --是否存在下一和卡的制卡记录
                select count (*)
                  into i_count
                  from rec_card_make_acc a
                 where     a.customerid = t_customerid
                       and a.cardsn = t_cardsn + 1
                       and pty not in (10, 11, 12)
                       and a.customerunitcode = prmcustomerunitcode;

                if (i_count <> 1)
                then
                    out_result := -1012;
                    out_msg := '未决记录异常，非当前卡下一张制卡记录不存在';
                    rollback;
                    return;
                end if;
            end if;
        end if;

        --获取充值员部门及分区编号
        select a.dptcode, a.accounttype, a.empname
          into v_deptcode, n_empaccountype, v_empname
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.empid = t_empid
               and a.customerunitcode = prmcustomerunitcode;

        --获取交易记录流水号
        select seq_rec_monticket_consum.nextval into n_cashaccfc from dual;

        -- 形成充值明细记录
        out_result := -1012;
        out_msg := '形成月票钱包撤销充值明细';

        insert into rec_monticket_consum (cstaccfc,
                                          customerid,
                                          cardno,
                                          cardtype,
                                          opdt,
                                          sumviceaddfare,
                                          viceonoddfare,
                                          viceonopfare,
                                          acccode,
                                          dscrp,
                                          cardsn,
                                          opcount,
                                          dealtype,
                                          collectdt,
                                          uploaddate,
                                          busid,
                                          driverid,
                                          poscode,
                                          samcardno,
                                          cardkind,
                                          traderecno,
                                          tac,
                                          samtradeno,
                                          buslineid,
                                          totalrecno,
                                          discount,
                                          tradetype,
                                          linedept,
                                          repealempid,
                                          vicedummyopfare,
                                          customerunitcode,
                                          cardasn)
             values (n_cashaccfc,
                     t_customerid,
                     t_cardno,
                     t_cardtypedetailid,
                     to_date (t_opdt, 'yyyy-mm-dd hh24:mi:ss'),
                     t_sumviceaddfare,
                     t_viceoddfarepre - t_viceopfare,
                     t_viceopfare,
                     t_acccode,
                     t_accdesc,
                     t_cardsn,
                     t_viceopcount + 1,
                     1,
                     to_date (t_opdt, 'yyyy-mm-dd hh24:mi:ss'),
                     sysdate,
                     0,
                     t_empid,
                     t_poscode,
                     t_samcardno,
                     t_cardkind,
                     1,
                     to_number (prmtac, 'xxxxxxxx'),
                     1,
                     0,
                     prmplanid,
                     0,
                     1,
                     v_deptcode,
                     t_repealempid,
                     t_vicedummyopfare,
                     prmcustomerunitcode,
                     t_cardno);

        out_result := -1006;
        out_msg := '撤销记录进入撤销表失败!';

        insert
          into rec_monticket_cash1 (customerid, planid, customerunitcode)
        values (t_customerid, t_oldplanid, prmcustomerunitcode);

        --删除申请明细
        delete from rec_monticket_cash_plan
              where     planid = prmplanid
                    and customerunitcode = prmcustomerunitcode;

        if (sql%rowcount != 1)
        then
            --如果发放表和日志表没有记录，也没有日志，说明人为删除了发入记录
            insert into log_operation (stationid,
                                       systemid,
                                       empid,
                                       outid,
                                       name,
                                       message,
                                       logtype,
                                       recordlevel,
                                       createdate)
                 values (
                            0,
                            0,
                            to_char (t_empid),
                            to_char (t_customerid),
                            to_char (prmplanid),
                               '删除撤销充值申请记录planid：['
                            || to_char (prmplanid)
                            || ']时影响0行',
                            0,
                            0,
                            sysdate);
        end if;

        --当月票钱包充值金额大于0时进行及时统计
        if t_viceopfare > 0
        then
            out_result := -1013;
            out_msg := '充值金额账目及时统计';
            pkg_st_payment.proc_custdataaccount_online (
                t_opdt,
                t_viceopfare - t_vicedummyopfare,
                t_acccode,
                0,
                t_cardkind, --卡类型 1：m1卡 2：cpu卡
                t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                t_empid, --充值员或者司机id
                t_poscode, --设备唯一运营编号
                t_samcardno, --sam卡号
                0, --线路id
                v_deptcode,
                0,
                2, --钱包类型 1电子 2月票
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                out_result := -1014;
                out_msg := '充值金额账目及时统计失败，' || out_msg;
                return;
            end if;
        end if;

        --当月票钱包虚充红冲金额大于0时进行及时统计
        if t_vicedummyopfare > 0
        then
            --账目及时统计
            out_result := -1015;
            out_msg := '虚充金额账目及时统计';
            pkg_st_payment.proc_custdataaccount_online (t_opdt,
                                                        t_vicedummyopfare,
                                                        841,
                                                        0,
                                                        t_cardkind,
                                                        --卡类型 1：m1卡 2：cpu卡
                                                        t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                                                        t_empid, --充值员或者司机id
                                                        t_poscode, --设备唯一运营编号
                                                        t_samcardno, --sam卡号
                                                        0,
                                                        --线路id
                                                        v_deptcode,
                                                        0,
                                                        --车辆编号
                                                        2,
                                                        --钱包类型 1电子 2月票
                                                        0, --操作类型 0：正常 1：回滚
                                                        prmcustomerunitcode,
                                                        out_msg,
                                                        out_result);

            if out_result <> 100
            then
                out_msg := '虚充金额账目及时统计' || out_msg;
                out_result := -1016;
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := '未决记录提交处理成功';
        return;
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;

    procedure repeal_electrcash_commit (prmplanid         in     number, --计划id
                                        prmcustomerid     in     number,
                                        prmtac            in     varchar2,
                                        prmcustunitcode   in     varchar2, --客户代码
                                        out_result           out number,
                                        out_msg              out varchar2)
    as
        /*
        -------------------------------------------------------------------------------
        --存储过程： module_electrcash_commit
        --作　　者：赵军强
        --时　　间：20101023
        --说　　明： 提交电子钱包撤销领款记录模块
        --    未决存款记录的操作计数和余额都是未提交前的，
        --    此过程为统一处理电子钱包领款提交，过程内没有提交和回滚操作，由外层判断结果
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：成功，帐目统计成功，其他失败

         从module_electrcash_commit 移植
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20120914
        --修改说明： 增加客户代码、充值授权额度处理
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20121224
        --修改说明： 增加资产负债账目-收支账目处理
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20130529
        --修改说明： 授权额度的更新时增加是否透支的判断，如果有透支金额，更新额度时，把透支的额度也更新正常
        --------------------------------------------------------------------------
        */
        i_count                   integer;
        --账本信息
        i_curcardsn               integer; --账本当前卡序号
        i_curelecopcount          integer; --账本当前卡交易计数
        i_curelecsaveopcount      integer; --账本当前存款计数
        --
        i_pty                     integer;
        --非当前卡下一张卡操作类型（补卡，换卡等）
        i_freezeflag              integer; --非当前卡下一张卡冻结金额是否领取
        i_freeopcount             number; --冻结金额交易计数
        --充值未决记录
        vplanid                   number;
        t_acccode                 number;
        t_accdesc                 varchar (20);
        t_electrsaveopcount       number;
        t_elecopcount             number;
        t_sumfare                 number;
        t_cardno                  number;
        t_cardsn                  number;
        t_electrdummyopfare       number;
        t_electropfare            number;
        t_elecoddfarepre          number;
        t_opdt                    varchar2 (30);
        t_customerid              number;
        t_cardtypedetailid        number;
        t_empid                   number;
        t_poscode                 number;
        t_cardkind                number;
        t_samcardno               number;
        t_areaid                  number;
        t_sumelectrfare           number (10, 2);
        t_repealempid             number;
        --
        t_sumelectraddfare        number (10, 2);
        v_deptcode                varchar2 (20); --充值职员所属营业部门
        i_deptareaid              integer; --充值职员营业部门所属分区
        vacccodegroupid           number; --科目大类
        --
        n_totalconsumfare         number (20, 2); --电子钱包累计消费金额
        n_refunddumpfare          number (10, 2); --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2); --最低消费限额
        v_netsite                 varchar2 (12); --网点编号
        n_isuse                   number; --是否启用网点授权额度
        --账户类型（收支账户使用）
        n_custaccountype          number; --持卡人账户类型
        n_empaccountype           number; --出纳员账户类型
        n_cashaccfc               number; --形成充值明细的原始流水号
        v_empname                 varchar2 (30); --出纳名称
        n_empoddfare              number (20, 2); --出纳账户余额
        n_workstatus              number; --透支状态
        n_curroddfare             number; --当前剩余额度
        t_oldplanid               number;
    begin
        out_result := -1008;
        out_msg := '处理未决记录开始';
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        select count (*)
          into i_count
          from rec_electtron_cash_plan a
         where     a.planid = prmplanid
               and a.customerid = prmcustomerid
               and a.customerunitcode = prmcustunitcode;

        if (i_count <> 1)
        then
            out_result := -1001;
            out_msg := '参数信息不匹配，请重新操作';
            return;
        end if;

        --zxn 20121107 去掉分区字段
        select a.customerid,
               electrsaveopcount,
               electropcount,
               cardno,
               cardsn,
               electrdummyopfare,
               electropfare,
               electroddfarepre,
               to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'),
               cardtypedetailid,
               acccode,
               description,
               empid,
               poscode,
               cardkind,
               psamcardno,
               sumelectraddfare,
               cardtypedetailid,
               sumelectraddfare,
               repealempid,
               oldplanid
          into t_customerid,
               t_electrsaveopcount,
               t_elecopcount,
               t_cardno,
               t_cardsn,
               t_electrdummyopfare,
               t_electropfare,
               t_elecoddfarepre,
               t_opdt,
               t_cardtypedetailid,
               t_acccode,
               t_accdesc,
               t_empid,
               t_poscode,
               t_cardkind,
               t_samcardno,
               t_sumelectrfare,
               t_cardtypedetailid,
               t_sumelectraddfare,
               t_repealempid,
               t_oldplanid
          from rec_electtron_cash_plan a
         where a.planid = prmplanid and a.customerunitcode = prmcustunitcode;

        --增加科目校验
        --根据科目大类判断是否更新冻结金额
        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = t_acccode;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select a.groupid
          into vacccodegroupid
          from base_acc_type a
         where a.acccode = t_acccode;

        select count (*)
          into i_count
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.empid = t_empid
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常empid：' || to_char (t_empid);
            return;
        end if;

        --提交
        out_result := -1006;
        out_msg := '提交未决开始';

        ------充值撤销更新充值授权额度-------------------------------
        if t_acccode = 240 --如果是充值撤销的话更新回授权额度
        then
            begin
                --根据职员编号获取网点
                select a.dptcode
                  into v_netsite
                  from base_emp a
                 where     a.empid = t_empid
                       and a.customerunitcode = prmcustunitcode;

                select a.isuse, a.workstatus, a.curoddfare
                  into n_isuse, n_workstatus, n_curroddfare
                  from base_chargeauth a
                 where     a.businesspoint = v_netsite
                       and a.customerunitcode = prmcustunitcode;

                --启用充值授权
                if n_isuse = 1
                then
                    if n_workstatus = 0
                    then
                        update base_chargeauth
                           set curoddfare =
                                     curoddfare
                                   + t_electropfare
                                   - t_electrdummyopfare
                         where     businesspoint = v_netsite
                               and customerunitcode = prmcustunitcode;
                    else
                        if n_curroddfare + t_electropfare >= 0
                        --透支状态时更新透支金额
                        then
                            update base_chargeauth
                               set curoddfare =
                                         curoddfare
                                       + t_electropfare
                                       - t_electrdummyopfare,
                                   workstatus = 0,
                                   allowoverdraftfare =
                                       allowoverdraftfare - curoddfare
                             where     businesspoint = v_netsite
                                   and customerunitcode = prmcustunitcode;
                        else
                            update base_chargeauth
                               set curoddfare =
                                         curoddfare
                                       + t_electropfare
                                       - t_electrdummyopfare,
                                   allowoverdraftfare =
                                         allowoverdraftfare
                                       + t_electropfare
                                       - t_electrdummyopfare
                             where     businesspoint = v_netsite
                                   and customerunitcode = prmcustunitcode;
                        end if;
                    end if;
                end if;
            exception
                when others
                then
                    out_result := -1017;
                    out_msg := '获取充值授权额度信息异常';
                    return;
            end;
        end if;

        --------------------------------------------------------------------------------
        select count (*)
          into i_count
          from base_customers a
         where     a.customerid = t_customerid
               and a.cardno = t_cardno
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1007;
            out_msg := '用户不存在或者已退卡';
            return;
        end if;

        --用户存在，则获取用户当前信息
        --zxn 增加客户账户类型获取
        select a.cardsn,
               a.electropcount,
               a.electrsaveopcount,
               a.sumelectrconsumfare,
               a.refundlimitconsumfare,
               a.accounttype
          into i_curcardsn,
               i_curelecopcount,
               i_curelecsaveopcount,
               n_totalconsumfare,
               n_refundlimitconsumfare,
               n_custaccountype
          from base_customers a
         where     a.customerid = t_customerid
               and a.cardno = t_cardno
               and a.customerunitcode = prmcustunitcode;

        --判断是否为处理充值金额记录
        if vacccodegroupid = 1 --撤销充值
        then
            if t_cardsn > i_curcardsn
            then
                --未决卡序号比账本卡序号大，说明未决记录异常
                out_result := -1009;
                out_msg := '未决记录信息异常';
                return;
            elsif t_cardsn = i_curcardsn --充值未决为当前卡
            then
                --账本表交易计数大于未决交易计数，账本余额已经最新
                if i_curelecopcount > t_elecopcount + 1
                then
                    update base_customers a
                       set electroddfareacc =
                               electroddfareacc - t_electropfare,
                           sumelectraddfareacc =
                               sumelectraddfareacc - t_electropfare,
                           sumelectrdummyfare =
                               sumelectrdummyfare - t_electrdummyopfare,
                           elesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and a.cardno = t_cardno
                           and a.customerunitcode = prmcustunitcode;
                else
                    update base_customers a
                       set electroddfare = t_elecoddfarepre - t_electropfare,
                           electroddfareacc =
                               electroddfareacc - t_electropfare,
                           sumelectraddfareacc =
                               sumelectraddfareacc - t_electropfare,
                           sumelectraddfare =
                               sumelectraddfare - t_electropfare,
                           a.electropcount = t_elecopcount + 1,
                           -- a.electrsaveopcount = t_electrsaveopcount + 1, 充值计数不变
                           sumelectrdummyfare =
                               sumelectrdummyfare - t_electrdummyopfare,
                           elesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and a.cardno = t_cardno
                           and a.customerunitcode = prmcustunitcode;
                end if;

                --修改人：梁小凯 20090724
                --修改说明：虚充金额大于0时，对虚充总加款额的修改
                --修改标示：2009-08-10 朱鹏飞 增加退卡有效虚充金额累计
                --在申请时已经判断如果累计消费达到最低限额，虚充已经清零，此处只累计
                if t_electrdummyopfare > 0
                then
                    update base_customers
                       set sumelectradddummyfare =
                                 sumelectradddummyfare
                               + (t_electropfare - t_electrdummyopfare),
                           refunddumpfare =
                               refunddumpfare - t_electrdummyopfare
                     where     customerid = prmcustomerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;
                end if;

                --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
                --如果用卡余额计算的累计消费金额大，则说明卡上软准确
                --如果库里大，则说明库里可能正确，卡上总额可能错误
                if t_sumelectrfare - t_elecoddfarepre > n_totalconsumfare
                then
                    n_totalconsumfare := t_sumelectrfare - t_elecoddfarepre;
                else
                    n_totalconsumfare := n_totalconsumfare;
                end if;

                --比较累计消费比最低消费限额
                if (n_totalconsumfare > n_refundlimitconsumfare)
                then
                    --如果累计消费比最低限额大，
                    --有虚充，则用累计消费重新计算最低限额
                    --没有虚充，则用累计消费更新最大限额
                    if t_electrdummyopfare > 0
                    then
                        update base_customers
                           set refundlimitconsumfare =
                                   n_totalconsumfare - t_electropfare
                         where     customerid = prmcustomerid
                               and cardno = t_cardno
                               and customerunitcode = prmcustunitcode;
                    else
                        update base_customers
                           set refundlimitconsumfare = n_totalconsumfare
                         where     customerid = prmcustomerid
                               and cardno = t_cardno
                               and customerunitcode = prmcustunitcode;
                    end if;
                else
                    --如果累计消费比最低限额小
                    --有虚充，则用最低限额重新计算最低限额
                    --没有虚充，则还是原来的最低限额
                    if t_electrdummyopfare > 0
                    then
                        update base_customers
                           set refundlimitconsumfare =
                                   n_refundlimitconsumfare + t_electropfare
                         where     customerid = prmcustomerid
                               and cardno = t_cardno
                               and customerunitcode = prmcustunitcode;
                    else
                        update base_customers
                           set refundlimitconsumfare = n_refundlimitconsumfare
                         where     customerid = prmcustomerid
                               and cardno = t_cardno
                               and customerunitcode = prmcustunitcode;
                    end if;
                end if;
            else
                --非当前卡未决记录,判断冻结金额
                --是否存在下一和卡的制卡记录
                select count (*)
                  into i_count
                  from rec_card_make_acc a
                 where     a.customerid = t_customerid
                       and a.cardsn = t_cardsn + 1
                       and pty not in (10, 11, 12)
                       and a.oldcardno = t_cardno
                       and a.customerunitcode = prmcustunitcode;

                if (i_count <> 1)
                then
                    out_result := -1012;
                    out_msg := '未决记录异常，非当前卡下一张制卡记录不存在';
                    rollback;
                    return;
                end if;

                select a.pty
                  into i_pty
                  from rec_card_make_acc a
                 where     a.customerid = t_customerid
                       and a.cardsn = t_cardsn + 1
                       and pty not in (10, 11, 12)
                       and a.oldcardno = t_cardno
                       and a.customerunitcode = prmcustunitcode;

                if (i_pty = 1) --非当前卡下一张卡是补卡
                then
                    out_result := -1012;
                    out_msg := '非当前卡下一张卡是补卡，考虑处理冻结金额';

                    select count (*)
                      into i_count
                      from rec_freezefare_acc a
                     where     a.customerid = t_customerid
                           and a.cardsn = t_cardsn
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;

                    if (i_count = 1)
                    then
                        --存在冻结金额
                        --判断下一张卡冻结金额是否领取
                        select a.freezefareflag, a.opcount
                          into i_freezeflag, i_freeopcount
                          from rec_freezefare_acc a
                         where     a.customerid = t_customerid
                               and a.cardsn = t_cardsn
                               and cardno = t_cardno
                               --and wallettype = 1
                               and customerunitcode = prmcustunitcode;

                        if (i_freezeflag = 0) --冻结金额未领
                        then
                            if (t_elecopcount + 1 > i_freeopcount)
                            then
                                --冻结金额未领，则更新冻结金额
                                update rec_freezefare_acc a
                                   set opcount = opcount + 1,
                                       saveopcount = saveopcount + 1,
                                       freezefare =
                                           t_elecoddfarepre - t_electropfare
                                 where     a.customerid = t_customerid
                                       and a.cardsn = t_cardsn
                                       and a.cardno = t_cardno
                                       --and wallettype = 1
                                       and a.customerunitcode =
                                               prmcustunitcode;
                            else
                                out_msg :=
                                    '冻结金额已经更新，充值非最后交易记录';
                            end if;
                        else
                            out_msg := '冻结金额已领';
                        end if;
                    else
                        out_msg := '不存在冻结金额记录';
                    end if;
                else
                    out_msg := '下一张卡不是补卡';
                end if;
            end if;
        end if;

        out_result := -1013;
        out_msg := '获取职员部门信息和账户类型';

        --获取充值员部门及分区编号
        --zxn 20121107 去掉分区字段
        --zxn 增加职员账户类型获取
        select a.dptcode, a.accounttype, a.empname
          into v_deptcode, n_empaccountype, v_empname
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.empid = t_empid
               and a.customerunitcode = prmcustunitcode;

        -- 形成充值明细记录
        out_result := -1012;
        out_msg := '形成电子钱包撤销充值明细';

        --获取消费记录流水号
        select seq_rec_electtron_consume.nextval into n_cashaccfc from dual;

        --zxn 20121107 去掉分区字段
        insert into rec_electtron_consume (cstaccfc,
                                           customerid,
                                           cardno,
                                           cardtype,
                                           opdt,
                                           sumelectraddfare,
                                           electronoddfare,
                                           electronopfare,
                                           acccode,
                                           dscrp,
                                           cardsn,
                                           opcount,
                                           dealtype,
                                           collectdt,
                                           uploaddate,
                                           busid,
                                           driverid,
                                           poscode,
                                           samcardno,
                                           cardkind,
                                           traderecno,
                                           tac,
                                           samtradeno,
                                           buslineid,
                                           totalrecno,
                                           discount,
                                           tradetype,
                                           linedept,
                                           repealempid,
                                           electrdummyopfare,
                                           customerunitcode,
                                           cardasn)
             values (n_cashaccfc,
                     t_customerid,
                     t_cardno,
                     t_cardtypedetailid,
                     to_date (t_opdt, 'yyyy-mm-dd hh24:mi:ss'),
                     t_sumelectraddfare,
                     t_elecoddfarepre - t_electropfare,
                     t_electropfare,
                     t_acccode,
                     t_accdesc,
                     t_cardsn,
                     t_elecopcount + 1,
                     1,
                     to_date (t_opdt, 'yyyy-mm-dd hh24:mi:ss'),
                     sysdate,
                     0,
                     t_empid,
                     t_poscode,
                     t_samcardno,
                     t_cardkind,
                     1,
                     to_number (prmtac, 'xxxxxxxx'),
                     1,
                     0,
                     prmplanid,
                     0,
                     1,
                     v_deptcode,
                     t_repealempid,
                     t_electrdummyopfare,
                     prmcustunitcode,
                     t_cardno);

        out_result := -1006;
        out_msg :=
               '撤销记录进入撤销表失败!t_customerid'
            || t_customerid
            || 't_oldplanid'
            || t_oldplanid
            || 'prmcustunitcode'
            || prmcustunitcode;

        insert into rec_electtion_cash1
             values (t_customerid, t_oldplanid, prmcustunitcode);

        --删除申请明细
        delete from rec_electtron_cash_plan
              where planid = prmplanid and customerunitcode = prmcustunitcode;

        if (sql%rowcount != 1)
        then
            --如果发放表和日志表没有记录，也没有日志，说明人为删除了发入记录
            insert into log_operation (stationid,
                                       systemid,
                                       empid,
                                       outid,
                                       name,
                                       message,
                                       logtype,
                                       recordlevel,
                                       createdate,
                                       customerunitcode)
                 values (
                            0,
                            0,
                            to_char (t_empid),
                            to_char (t_customerid),
                            to_char (prmplanid),
                               '删除撤销充值申请记录planid：['
                            || to_char (prmplanid)
                            || ']时影响0行',
                            0,
                            0,
                            sysdate,
                            prmcustunitcode);
        end if;

        --当电子钱包充值金额大于0时进行及时统计
        if t_electropfare > 0
        then
            out_result := -1013;
            out_msg := '充值金额账目及时统计';
            pkg_st_payment.proc_custdataaccount_online (
                t_opdt,
                t_electropfare - t_electrdummyopfare,
                t_acccode,
                0,
                t_cardkind, --卡类型 1：m1卡 2：cpu卡
                t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                t_empid, --充值员或者司机id
                t_poscode, --设备唯一运营编号
                t_samcardno, --sam卡号
                0, --线路id
                v_deptcode,
                0, --车辆编号
                1, --钱包类型 1电子 2月票
                0, --操作类型 0：正常 1：回滚
                prmcustunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                out_result := -1014;
                out_msg := '充值金额账目及时统计失败，' || out_msg;
                return;
            end if;
        end if;

        --当电子钱包虚充红冲金额大于0时进行及时统计
        if t_electrdummyopfare > 0
        then
            --账目及时统计
            out_result := -1015;
            out_msg := '虚充金额账目及时统计';
            pkg_st_payment.proc_custdataaccount_online (t_opdt,
                                                        t_electrdummyopfare,
                                                        840,
                                                        0,
                                                        t_cardkind,
                                                        --卡类型 1：m1卡 2：cpu卡
                                                        t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                                                        t_empid, --充值员或者司机id
                                                        t_poscode, --设备唯一运营编号
                                                        t_samcardno, --sam卡号
                                                        0,
                                                        --线路id
                                                        v_deptcode,
                                                        0,
                                                        --车辆编号
                                                        1,
                                                        --钱包类型 1电子 2月票
                                                        0, --操作类型 0：正常 1：回滚
                                                        prmcustunitcode,
                                                        out_msg,
                                                        out_result);

            if out_result <> 100
            then
                out_msg := '虚充金额账目及时统计' || out_msg;
                out_result := -1016;
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := '未决记录提交处理成功';
        return;
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;

    ---------------------------次卡钱包充值业务操作---------------------------
    --次卡钱包充值提交
    procedure module_vicecardcash_commit (prmplanid         in     number, --计划id
                                          prmcustomerid     in     number,
                                          prmtac            in     varchar2,
                                          prmcustunitcode   in     varchar2, --客户代码
                                          out_result           out number,
                                          out_msg              out varchar2)
    as
        /*
        -------------------------------------------------------------------------------
        --存储过程： module_vicecardcash_commit
        --作　　者：周晓娜
        --时　　间：2011-07-22
        --说　　明： 提交次卡钱包领款记录模块
        --    未决存款记录的操作计数和余额都是未提交前的，
        --    此过程为统一处理电子钱包领款提交，过程内没有提交和回滚操作，由外层判断结果
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：成功，帐目统计成功，其他失败
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20120911
        --修改说明： 增加客户代码、充值授权额度处理
        --------------------------------------------------------------------------
        --修改标识：周晓娜 2012-12-06
        --修改说明：次卡钱包增加连充月次的功能，对应表结构调整账目处理过程
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20130422
        --修改说明： m1卡充值时原有流程充值交易计数和消费交易计数同时增加
                    现修改为充值时只改变充值交易计数，消费交易计数不再改变，保证cpu和m1处理流程一致
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20130426
        --修改说明： （次卡充值形成了一笔实际的充值金额账目，卡片上面写的是消费次数，造成消费的账目和充值金额无法对账 ）
                    1、次卡充值的时候形成一笔出纳帐和商户收支帐，目的是保证资产负债账目资产和负债平衡
                     2、次卡消费的时候不再形成消费的收支账目
        --------------------------------------------------------------------------
        */
        i_count                   integer;
        --账本信息
        i_curcardsn               integer; --账本当前卡序号
        i_curviceopcount          integer; --账本当前卡交易计数
        i_curvicesaveopcount      integer; --账本当前存款计数
        --
        i_pty                     integer;
        --非当前卡下一张卡操作类型（补卡，换卡等）
        i_freezeflag              integer; --非当前卡下一张卡冻结金额是否领取
        i_freeopcount             number; --冻结金额交易计数
        --充值未决记录
        vplanid                   number;
        t_acccode                 number;
        t_accdesc                 varchar (20);
        t_vicesaveopcount         number;
        t_viceopcount             number;
        t_sumfare                 number;
        t_cardno                  number;
        t_cardsn                  number;
        t_vicedummyopfare         number;
        t_viceopfare              number;
        t_viceoddfarepre          number;
        t_opdt                    varchar2 (30);
        t_customerid              number;
        t_cardtypedetailid        number;
        t_empid                   number;
        t_poscode                 number;
        t_cardkind                number;
        t_samcardno               number;
        t_areaid                  number;
        t_sumvicefare             number (10, 2);
        --
        v_deptcode                varchar2 (20); --充值职员所属营业部门
        i_deptareaid              integer; --充值职员营业部门所属分区
        vacccodegroupid           number; --科目大类
        --
        n_totalconsumfare         number (20, 2); --电子钱包累计消费金额
        n_refunddumpfare          number (10, 2); --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2); --最低消费限额
        --充值授权额度--
        v_netsite                 varchar2 (12); --充值网点编号
        n_curoddfare              number (20, 2); --可用充值额度
        n_isuse                   number; --是否启用充值授权
        d_opdt                    date;
        n_workstatus              number; --状态：0正常状态，1透支状态
        n_allowoverdraftfare      number (20, 2); --允许透支金额
        --连充设置
        t_limittimes              number;
        t_monthnum                number;
        t_validtimestart          date;
        t_validtimeend            date;
        --账户类型（收支账户使用）
        n_custaccountype          number; --持卡人账户类型
        n_empaccountype           number; --出纳员账户类型
        n_cashaccfc               number; --形成充值明细的原始流水号
        v_empname                 varchar2 (30); --出纳名称
        n_empoddfare              number (20, 2); --出纳账户余额
        n_cardid                  number;
    begin
        out_result := -1008;
        out_msg := '处理未决记录开始';
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        select count (*)
          into i_count
          from rec_vicecard_cash_plan a
         where a.planid = prmplanid and a.customerunitcode = prmcustunitcode;

        if (i_count <> 1)
        then
            out_result := -1001;
            out_msg := '参数信息不匹配，请重新操作';
            return;
        end if;

        select a.customerid,
               vicesaveopcount,
               viceopcount,
               cardno,
               cardsn,
               vicedummyopfare,
               viceopfare,
               viceoddfarepre,
               to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'),
               cardtypedetailid,
               acccode,
               description,
               empid,
               poscode,
               cardkind,
               psamcardno,
               areaid,
               sumviceaddfare,
               validtimestart,
               validtimeend,
               limittimes,
               monthnum
          into t_customerid,
               t_vicesaveopcount,
               t_viceopcount,
               t_cardno,
               t_cardsn,
               t_vicedummyopfare,
               t_viceopfare,
               t_viceoddfarepre,
               t_opdt,
               t_cardtypedetailid,
               t_acccode,
               t_accdesc,
               t_empid,
               t_poscode,
               t_cardkind,
               t_samcardno,
               t_areaid,
               t_sumvicefare,
               t_validtimestart,
               t_validtimeend,
               t_limittimes,
               t_monthnum
          from rec_vicecard_cash_plan a
         where a.planid = prmplanid and a.customerunitcode = prmcustunitcode;

        --增加科目校验
        --根据科目大类判断是否更新冻结金额
        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = t_acccode;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select a.groupid
          into vacccodegroupid
          from base_acc_type a
         where a.acccode = t_acccode;

        select count (*)
          into i_count
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常empid：' || to_char (t_empid);
            return;
        end if;

        --提交
        out_result := -1006;
        out_msg := '提交未决开始';

        -------------充值的提交更新充值授权额度信息----------------------------
        if vacccodegroupid = 1 or vacccodegroupid = 11
        then
            begin
                --根据职员编号获取职员所属网点
                select a.dptcode
                  into v_netsite
                  from base_emp a
                 where     a.empid = t_empid
                       and a.customerunitcode = prmcustunitcode;

                select a.curoddfare,
                       a.allowoverdraftfare,
                       a.isuse,
                       a.workstatus
                  into n_curoddfare,
                       n_allowoverdraftfare,
                       n_isuse,
                       n_workstatus
                  from base_chargeauth a
                 where     a.businesspoint = v_netsite
                       and a.customerunitcode = prmcustunitcode;

                --该充值网点启用充值授权额度
                if n_isuse = 1
                then
                    --当前状态为正常状态
                    if n_workstatus = 0
                    then
                        update base_chargeauth
                           set curoddfare =
                                     curoddfare
                                   - (t_viceopfare - t_vicedummyopfare)
                         where     businesspoint = v_netsite
                               and customerunitcode = prmcustunitcode;
                    --当前状态为透支状态
                    else
                        --充值额度没有使用完
                        if n_curoddfare > 0
                        then
                            if n_curoddfare >
                                   (t_viceopfare - t_vicedummyopfare)
                            then
                                update base_chargeauth
                                   set curoddfare =
                                             curoddfare
                                           - (  t_viceopfare
                                              - t_vicedummyopfare)
                                 where     businesspoint = v_netsite
                                       and customerunitcode = prmcustunitcode;
                            else
                                --zxn 20130426
                                --当使用透支金额时，修改原来的流程，
                                --1、透支金额在平台重新设置之前不改变
                                --2、此时更新当前的剩余额度，可能会更新成负数
                                --3、平台再次授权的时候，本次授权额度+当前授权额度（目的是为了在平台再次授权的时候把使用的透支金额去掉）
                                update base_chargeauth
                                   set curoddfare =
                                             n_curoddfare
                                           - (  t_viceopfare
                                              - t_vicedummyopfare),
                                       allowoverdraftfare =
                                             allowoverdraftfare
                                           - (  t_viceopfare
                                              - t_vicedummyopfare)
                                           + n_curoddfare,
                                       allowoverdraftsumfare =
                                             allowoverdraftsumfare
                                           + (  t_viceopfare
                                              - t_vicedummyopfare)
                                           - n_curoddfare --网点使用透支额度累计
                                 where     businesspoint = v_netsite
                                       and customerunitcode = prmcustunitcode;
                            /*update base_chargeauth
                              set curoddfare = 0,
                                  allowoverdraftfare =
                                       allowoverdraftfare
                                     - t_electropfare
                                     + n_curoddfare,
                                  allowoverdraftsumfare =
                                       allowoverdraftsumfare
                                     + t_electropfare
                                     - n_curoddfare            --允许透支金额累计
                            where businesspoint = v_netsite
                              and customerunitcode = prmcustunitcode;*/
                            end if;
                        else
                            /* update base_chargeauth
                              set allowoverdraftfare =
                                                 allowoverdraftfare - t_electropfare,
                                  allowoverdraftsumfare =
                                       allowoverdraftsumfare
                                     + t_electropfare             --允许透支金额累计
                            where businesspoint = v_netsite
                              and customerunitcode = prmcustunitcode;*/

                            --zxn 20130426
                            --当使用透支金额时，修改原来的流程，
                            --1、透支金额在平台重新设置之前不改变
                            --2、此时更新当前的剩余额度，可能会更新成负数
                            --3、平台再次授权的时候，本次授权额度+当前授权额度（目的是为了在平台再次授权的时候把使用的透支金额去掉）
                            update base_chargeauth
                               set curoddfare =
                                         n_curoddfare
                                       - (t_viceopfare - t_vicedummyopfare),
                                   allowoverdraftfare =
                                         allowoverdraftfare
                                       - (t_viceopfare - t_vicedummyopfare),
                                   allowoverdraftsumfare =
                                         allowoverdraftsumfare
                                       + (t_viceopfare - t_vicedummyopfare)
                                       - n_curoddfare --网点使用透支额度累计
                             where     businesspoint = v_netsite
                                   and customerunitcode = prmcustunitcode;
                        end if;
                    end if;
                end if;
            exception
                when others
                then
                    out_result := -1017;
                    out_msg := '获取充值授权额度信息异常';
                    return;
            end;
        end if;

        -------------------------------------------------------------------------
        select count (*)
          into i_count
          from base_customers a
         where     a.customerid = t_customerid
               and a.cardno = t_cardno
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1007;
            out_msg := '用户不存在或者已退卡';
            return;
        end if;

        --用户存在，则获取用户当前信息
        select a.cardsn,
               a.numberopcount,
               a.numbersaveopcount,
               a.accounttype
          into i_curcardsn,
               i_curviceopcount,
               i_curvicesaveopcount,
               n_custaccountype
          from base_customers a
         where     a.customerid = t_customerid
               and a.cardno = t_cardno
               and a.customerunitcode = prmcustunitcode;

        --获取次卡钱包消费累计总额、最低消费限额
        select a.sumconsumefare, a.refundlimitconsumfare
          into n_totalconsumfare, n_refundlimitconsumfare
          from base_customers_vicecard a
         where     a.customerid = t_customerid
               and a.cardasn = t_cardno
               and a.customerunitcode = prmcustunitcode;

        --判断是否为处理充值金额记录
        if vacccodegroupid = 1 or vacccodegroupid = 11 --充值
        then
            if t_cardsn > i_curcardsn
            then
                --未决卡序号比账本卡序号大，说明未决记录异常
                out_result := -1009;
                out_msg := '未决记录信息异常';
                return;
            elsif t_cardsn = i_curcardsn --充值未决为当前卡
            then
                --账本表交易计数大于未决交易计数，账本余额已经最新
                if i_curviceopcount > t_viceopcount
                then
                    --更新账本表卡系统余额
                    update base_customers a
                       set numberoddfareacc = numberoddfareacc + t_viceopfare,
                           vicevalidtimestart = t_validtimestart,
                           videvalidtimeend = t_validtimeend,
                           vicesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;

                    --更新次卡钱包加款额系统值和虚充金额
                    update base_customers_vicecard a
                       set sumaddfareacc = sumaddfareacc + t_viceopfare,
                           sumrdummyfare = sumrdummyfare + t_vicedummyopfare
                     where     a.customerid = t_customerid
                           and cardasn = t_cardno
                           and customerunitcode = prmcustunitcode;
                else
                    --更新账本卡余额、系统余额和交易计数
                    update base_customers a
                       set numberoddfare = t_viceoddfarepre + t_viceopfare,
                           numberoddfareacc = numberoddfareacc + t_viceopfare,
                           a.numberopcount = t_viceopcount,
                           a.numbersaveopcount = t_vicesaveopcount + 1,
                           vicevalidtimestart = t_validtimestart,
                           videvalidtimeend = t_validtimeend,
                           vicesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;

                    --更新次卡钱包总加款额、系统总额、虚充总额
                    update base_customers_vicecard a
                       set sumaddfareacc = sumaddfareacc + t_viceopfare,
                           sumaddfare = sumaddfare + t_viceopfare,
                           sumrdummyfare = sumrdummyfare + t_vicedummyopfare
                     where     a.customerid = t_customerid
                           and cardasn = t_cardno
                           and customerunitcode = prmcustunitcode;
                end if;

                --修改人：梁小凯 200907247
                --修改说明：虚充金额大于0时，对虚充总加款额的修改
                --修改标示：2009-08-10 朱鹏飞 增加退卡有效虚充金额累计
                --在申请时已经判断如果累计消费达到最低限额，虚充已经清零，此处只累计
                if t_vicedummyopfare > 0
                then
                    update base_customers_vicecard
                       set sumadddummyfare =
                                 sumadddummyfare
                               + (t_viceopfare - t_vicedummyopfare),
                           refunddumpfare = refunddumpfare + t_vicedummyopfare
                     where     customerid = prmcustomerid
                           and cardasn = t_cardno
                           and customerunitcode = prmcustunitcode;
                end if;

                --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
                --如果用卡余额计算的累计消费金额大，则说明卡上软准确
                --如果库里大，则说明库里可能正确，卡上总额可能错误
                if t_sumvicefare - t_viceoddfarepre > n_totalconsumfare
                then
                    n_totalconsumfare := t_sumvicefare - t_viceoddfarepre;
                else
                    n_totalconsumfare := n_totalconsumfare;
                end if;

                --比较累计消费比最低消费限额
                if (n_totalconsumfare > n_refundlimitconsumfare)
                then
                    --如果累计消费比最低限额大，
                    --有虚充，则用累计消费重新计算最低限额
                    --没有虚充，则用累计消费更新最大限额
                    if t_vicedummyopfare > 0
                    then
                        update base_customers_vicecard
                           set refundlimitconsumfare =
                                   n_totalconsumfare + t_viceopfare
                         where     customerid = prmcustomerid
                               and cardasn = t_cardno
                               and customerunitcode = prmcustunitcode;
                    else
                        update base_customers_vicecard
                           set refundlimitconsumfare = n_totalconsumfare
                         where     customerid = prmcustomerid
                               and cardasn = t_cardno
                               and customerunitcode = prmcustunitcode;
                    end if;
                else
                    --如果累计消费比最低限额小
                    --有虚充，则用最低限额重新计算最低限额
                    --没有虚充，则还是原来的最低限额
                    if t_vicedummyopfare > 0
                    then
                        update base_customers_vicecard
                           set refundlimitconsumfare =
                                   n_refundlimitconsumfare + t_viceopfare
                         where     customerid = prmcustomerid
                               and cardasn = t_cardno
                               and customerunitcode = prmcustunitcode;
                    else
                        update base_customers_vicecard
                           set refundlimitconsumfare = n_refundlimitconsumfare
                         where     customerid = prmcustomerid
                               and cardasn = t_cardno
                               and customerunitcode = prmcustunitcode;
                    end if;
                end if;
            else
                --非当前卡未决记录,判断冻结金额

                --2016-09-23 若当前记录的plan表cardsn小于账本表中的cardsn，
                --并且vacccodegroupid = 11，
                --则是圈存领款流程中 【新补办卡/新换卡 领取老卡圈存未领款记录(status=0)】
                if (vacccodegroupid = 11 and t_cardsn > 0)
                then
                    --更新账本卡余额、系统余额和交易计数
                    update base_customers a
                       set numberoddfare = numberoddfare + t_viceopfare,
                           numberoddfareacc = numberoddfareacc + t_viceopfare,
                           a.numberopcount = a.numberopcount,
                           a.numbersaveopcount = a.numbersaveopcount + 1,
                           vicevalidtimestart = t_validtimestart,
                           videvalidtimeend = t_validtimeend,
                           vicesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;

                    --更新次卡钱包总加款额、系统总额、虚充总额
                    update base_customers_vicecard a
                       set sumaddfareacc = sumaddfareacc + t_viceopfare,
                           sumaddfare = sumaddfare + t_viceopfare,
                           sumrdummyfare = sumrdummyfare + t_vicedummyopfare
                     where     a.customerid = t_customerid
                           and cardasn = t_cardno
                           and customerunitcode = prmcustunitcode;
                else
                    --是否存在下一和卡的制卡记录
                    select count (*)
                      into i_count
                      from rec_card_make_acc a
                     where     a.customerid = t_customerid
                           and a.cardsn = t_cardsn + 1
                           and pty not in (10, 11, 12)
                           and a.oldcardno = t_cardno
                           and a.customerunitcode = prmcustunitcode;

                    if (i_count <> 1)
                    then
                        out_result := -1012;
                        out_msg :=
                            '未决记录异常，非当前卡下一张制卡记录不存在';
                        rollback;
                        return;
                    end if;

                    select a.pty
                      into i_pty
                      from rec_card_make_acc a
                     where     a.customerid = t_customerid
                           and a.cardsn = t_cardsn + 1
                           and pty not in (10, 11, 12)
                           and a.oldcardno = t_cardno
                           and a.customerunitcode = prmcustunitcode;

                    if (i_pty = 1) --非当前卡下一张卡是补卡
                    then
                        out_result := -1012;
                        out_msg := '非当前卡下一张卡是补卡，考虑处理冻结金额';

                        select count (*)
                          into i_count
                          from rec_freezefare_acc a
                         where     a.customerid = t_customerid
                               and a.cardsn = t_cardsn
                               and cardno = t_cardno
                               --and wallettype = 3
                               and customerunitcode = prmcustunitcode;

                        if (i_count = 1)
                        then
                            --存在冻结金额
                            --判断下一张卡冻结金额是否领取
                            select a.vicefreezefareflag, a.viceopcount
                              into i_freezeflag, i_freeopcount
                              from rec_freezefare_acc a
                             where     a.customerid = t_customerid
                                   and a.cardsn = t_cardsn
                                   and cardno = t_cardno
                                   --and wallettype = 3
                                   and customerunitcode = prmcustunitcode;

                            if (i_freezeflag = 0) --冻结金额未领
                            then
                                if (t_viceopcount > i_freeopcount)
                                then
                                    --冻结金额未领，则更新冻结金额
                                    update rec_freezefare_acc a
                                       set viceopcount = opcount,
                                           vicesaveopcount = saveopcount + 1,
                                           vicefreezefare =
                                                 t_vicedummyopfare
                                               + t_viceopfare
                                     where     a.customerid = t_customerid
                                           and a.cardsn = t_cardsn
                                           and cardno = t_cardno
                                           --and wallettype = 3
                                           and customerunitcode =
                                                   prmcustunitcode;
                                else
                                    out_msg :=
                                        '冻结金额已经更新，充值非最后交易记录';
                                end if;
                            else
                                out_msg := '冻结金额已领';
                            end if;
                        else
                            out_msg := '不存在冻结金额记录';
                        end if;
                    else
                        out_msg := '下一张卡不是补卡';
                    end if;
                end if;
            end if;
        elsif vacccodegroupid = 5 --冻结金额
        then
            select id
              into n_cardid
              from base_customers a
             where     a.customerid = t_customerid
                   and cardno = t_cardno
                   and customerunitcode = prmcustunitcode;

            if t_cardsn > i_curcardsn
            then
                --未决卡序号比账本卡序号大，说明未决记录异常
                out_result := -1012;
                out_msg := '未决记录信息异常';
                return;
            elsif t_cardsn = i_curcardsn --充值未决为当前卡
            then
                --账本表交易计数大于未决交易计数，账本余额已经最新
                if i_curviceopcount > t_viceopcount
                then
                    update rec_freezefare_acc a
                       set vicefreezefareflag = 1
                     where     customerid = t_customerid
                           and vicefreezefareflag = 2
                           and cardid = n_cardid
                           --and wallettype = 3
                           and customerunitcode = prmcustunitcode;

                    update base_customers a
                       set vicevalidtimestart = t_validtimestart,
                           videvalidtimeend = t_validtimeend,
                           vicesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;
                else
                    --冻结金额记录为最新记录
                    update rec_freezefare_acc a
                       set vicefreezefareflag = 1
                     where     customerid = t_customerid
                           and vicefreezefareflag = 2
                           and cardid = n_cardid
                           --and wallettype = 3
                           and customerunitcode = prmcustunitcode;

                    update base_customers a
                       set numberoddfare = t_vicedummyopfare + t_viceopfare,
                           a.numberopcount = t_viceopcount,
                           a.numbersaveopcount = t_vicesaveopcount + 1,
                           vicevalidtimestart = t_validtimestart,
                           videvalidtimeend = t_validtimeend,
                           vicesaveplanid = prmplanid
                     where     a.customerid = t_customerid
                           and cardno = t_cardno
                           and customerunitcode = prmcustunitcode;
                end if;
            else
                --未决记录卡序号比账本卡序号小
                update rec_freezefare_acc a
                   set vicefreezefareflag = 1
                 where     customerid = t_customerid
                       and vicefreezefareflag = 2
                       and cardid = n_cardid
                       --and wallettype = 3
                       and customerunitcode = prmcustunitcode;
            end if;
        else
            out_result := -1013;
            out_msg := '未决科目信息错误acccode:' || to_char (t_acccode);
            return;
        end if;

        -- 形成充值明细记录
        out_result := -1012;
        out_msg := '形成次卡钱包充值明细';

        --获取交易记录流水号
        select seq_vicecard_cash.nextval into n_cashaccfc from dual;

        --增加次卡连充信息
        insert into rec_vicecard_cash (cashaccfc,
                                       opdt,
                                       customerid,
                                       cardno,
                                       cardsn,
                                       cardtypedetailid,
                                       cardkind,
                                       viceopcount,
                                       vicesaveopcount,
                                       viceoddfare,
                                       viceoddfarepre,
                                       vicedummyopfare,
                                       viceopfare,
                                       acccode,
                                       dscrp,
                                       poscode,
                                       dealtype,
                                       samcardno,
                                       samtradeno,
                                       planid,
                                       uploaddate,
                                       empid,
                                       wallettype,
                                       tac,
                                       customerunitcode,
                                       limittimes,
                                       monthnum,
                                       validtimestart,
                                       validtimeend,
                                       sumviceaddfare)
             values (n_cashaccfc,
                     to_date (t_opdt, 'yyyy-mm-dd hh24:mi:ss'),
                     t_customerid,
                     t_cardno,
                     t_cardsn,
                     t_cardtypedetailid,
                     t_cardkind,
                     t_viceopcount,
                     t_vicesaveopcount + 1,
                     t_viceoddfarepre + t_viceopfare,
                     t_viceoddfarepre,
                     t_vicedummyopfare,
                     t_viceopfare,
                     t_acccode,
                     t_accdesc,
                     t_poscode,
                     1,
                     t_samcardno,
                     -1,
                     prmplanid,
                     sysdate,
                     t_empid,
                     3,
                     prmtac,
                     prmcustunitcode,
                     t_limittimes,
                     t_monthnum,
                     t_validtimestart,
                     t_validtimeend,
                     t_sumvicefare);

        out_result := -1019;
        out_msg := '形成充值发放记录';

        --形成申请发放记录，手工处理写卡成功时tac为77777
        insert into rec_vicecard_cash_plan_putout (planid,
                                                   customerid,
                                                   cardno,
                                                   cardsn,
                                                   cardtypedetailid,
                                                   viceoddfare,
                                                   viceoddfarepre,
                                                   vicedummyopfare,
                                                   viceopfare,
                                                   vicesaveopcount,
                                                   viceopcount,
                                                   status,
                                                   acccode,
                                                   opdt,
                                                   description,
                                                   cardkind,
                                                   poscode,
                                                   psamcardno,
                                                   empid,
                                                   dealtype,
                                                   wallettype,
                                                   tac,
                                                   samtradeno,
                                                   ver,
                                                   customerunitcode,
                                                   limittimes,
                                                   monthnum,
                                                   validtimestart,
                                                   validtimeend)
            (select planid,
                    customerid,
                    cardno,
                    cardsn,
                    cardtypedetailid,
                    t_viceoddfarepre + t_viceopfare,
                    t_viceoddfarepre,
                    vicedummyopfare,
                    viceopfare,
                    t_vicesaveopcount + 1,
                    t_viceopcount,
                    2,
                    acccode,
                    opdt,
                    description,
                    cardkind,
                    poscode,
                    psamcardno,
                    empid,
                    1,
                    3,
                    prmtac,
                    samtradeno,
                    ver,
                    customerunitcode,
                    limittimes,
                    monthnum,
                    validtimestart,
                    validtimeend
               from rec_vicecard_cash_plan
              where planid = prmplanid and customerunitcode = prmcustunitcode);

        --删除申请明细
        delete from rec_vicecard_cash_plan
              where planid = prmplanid and customerunitcode = prmcustunitcode;

        if (sql%rowcount != 1)
        then
            --如果发放表和日志表没有记录，也没有日志，说明人为删除了发入记录
            insert into log_operation (stationid,
                                       systemid,
                                       empid,
                                       outid,
                                       name,
                                       message,
                                       logtype,
                                       recordlevel,
                                       createdate,
                                       customerunitcode)
                 values (
                            0,
                            0,
                            to_char (t_empid),
                            to_char (t_customerid),
                            to_char (prmplanid),
                               '删除次卡钱包充值申请记录planid：['
                            || to_char (prmplanid)
                            || ']时影响0行',
                            0,
                            0,
                            sysdate,
                            prmcustunitcode);
        end if;

        out_result := -1013;
        out_msg := '获取职员所属部门和账户类型信息';

        --获取充值员部门及分区编号
        --zxn 20121107 去掉分区字段
        select a.dptcode, a.accounttype, a.empname
          into v_deptcode, n_empaccountype, v_empname
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        --当次卡钱包充值金额大于0时进行及时统计
        if t_viceopfare > 0
        then
            out_result := -1013;
            out_msg := '充值金额账目及时统计';
            --zxn 20121107 去掉分区字段
            pkg_st_payment.proc_custdataaccount_online (
                t_opdt,
                t_viceopfare - t_vicedummyopfare,
                t_acccode,
                0,
                t_cardkind, --卡类型 1：m1卡 2：cpu卡
                t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                t_empid, --充值员或者司机id
                t_poscode, --设备唯一运营编号
                t_samcardno, --sam卡号
                0, --线路id
                v_deptcode,
                0, --车辆编号
                3, --钱包类型 1电子 2月票 3次卡钱包
                0, --操作类型 0：正常 1：回滚
                prmcustunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                out_result := -1014;
                out_msg := '充值金额账目及时统计失败，' || out_msg;
                return;
            end if;
        end if;

        --当电子钱包虚充金额大于0时进行及时统计
        if t_vicedummyopfare > 0
        then
            --账目及时统计
            out_result := -1015;
            out_msg := '虚充金额账目及时统计';
            --zxn 20121107 去掉分区字段
            pkg_st_payment.proc_custdataaccount_online (t_opdt,
                                                        t_vicedummyopfare,
                                                        802, --次卡钱包虚充
                                                        0,
                                                        t_cardkind,
                                                        --卡类型 1：m1卡 2：cpu卡
                                                        t_cardtypedetailid, --卡类型，普通卡，月卡，老年卡等
                                                        t_empid, --充值员或者司机id
                                                        t_poscode, --设备唯一运营编号
                                                        t_samcardno, --sam卡号
                                                        0,
                                                        --线路id
                                                        v_deptcode,
                                                        0,
                                                        --车辆编号
                                                        3,
                                                        --钱包类型 1电子 2月票 3 次卡钱包
                                                        0, --操作类型 0：正常 1：回滚
                                                        prmcustunitcode,
                                                        out_msg,
                                                        out_result);

            if out_result <> 100
            then
                out_msg := '虚充金额账目及时统计' || out_msg;
                out_result := -1016;
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := '次卡充值记录提交处理成功';
        return;
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;

    --次卡钱包充值回滚
    procedure module_vicecardcash_rollback (
        prmplanid         in     number, --计划id
        prmcustomerid     in     number,
        prmbadcode        in     number,
        prmbaddesc        in     varchar2,
        prmcustunitcode   in     varchar2, --客户代码
        out_result           out number,
        out_msg              out varchar2)
    as
        /*
        -------------------------------------------------------------------------------
        --存储过程： module_vicecardcash_rollback
        --作　　者：周晓娜
        --时　　间：2011-07-22
        --说　　明： 手工处理电子钱包存款未决记录。
        --    未决存款记录的操作计数和余额都是未提交前的，
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：成功，帐目统计成功，其他失败
        --------------------------------------------------------------------------
        --修改标记：周晓娜 20120912
        --修改说明： 兼容多客户处理
        --------------------------------------------------------------------------
        --修改标记：周晓娜 2012-12-06
        --修改说明： 兼容次卡连充处理
        --------------------------------------------------------------------------
        */
        i_count                integer;
        --账本信息
        i_curcardsn            integer; --账本当前卡序号
        i_curviceopcount       integer; --账本当前卡交易计数
        i_curvicesaveopcount   integer; --账本当前存款计数
        --
        i_pty                  integer;
        --非当前卡下一张卡操作类型（补卡，换卡等）
        i_freezeflag           integer; --非当前卡下一张卡冻结金额是否领取
        i_freeopcount          number; --冻结金额交易计数
        --充值未决记录
        vplanid                number;
        t_acccode              number;
        t_accdesc              varchar (20);
        t_vicesaveopcount      number;
        t_viceopcount          number;
        t_sumfare              number;
        t_cardno               number;
        t_cardsn               number;
        t_vicedummyopfare      number;
        t_viceopfare           number;
        t_viceoddfarepre       number;
        t_opdt                 varchar2 (30);
        t_customerid           number;
        t_cardtypedetailid     number;
        t_empid                number;
        t_poscode              number;
        t_cardkind             number;
        t_samcardno            number;
        t_areaid               number;
        t_sumvicefare          number (10, 2);
        --
        v_deptcode             varchar2 (20); --充值职员所属营业部门
        i_deptareaid           integer; --充值职员营业部门所属分区
        vacccodegroupid        number; --科目大类
        --连充设置
        t_limittimes           number;
        t_monthnum             number;
        t_validtimestart       date;
        t_validtimeend         date;
        vcardid                number;
    begin
        out_result := -1008;
        out_msg := '处理未决记录开始';

        select count (*)
          into i_count
          from rec_vicecard_cash_plan a
         where     a.planid = prmplanid
               and a.customerid = prmcustomerid
               and a.customerunitcode = prmcustunitcode;

        if (i_count <> 1)
        then
            out_result := -1001;
            out_msg := '未决记录可能已处理，请刷新页面后重试';
            return;
        end if;

        select a.customerid,
               vicesaveopcount,
               viceopcount,
               cardno,
               cardsn,
               vicedummyopfare,
               viceopfare,
               viceoddfarepre,
               to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'),
               cardtypedetailid,
               acccode,
               description,
               empid,
               poscode,
               cardkind,
               psamcardno,
               areaid,
               sumviceaddfare,
               validtimestart,
               validtimeend,
               limittimes,
               monthnum
          into t_customerid,
               t_vicesaveopcount,
               t_viceopcount,
               t_cardno,
               t_cardsn,
               t_vicedummyopfare,
               t_viceopfare,
               t_viceoddfarepre,
               t_opdt,
               t_cardtypedetailid,
               t_acccode,
               t_accdesc,
               t_empid,
               t_poscode,
               t_cardkind,
               t_samcardno,
               t_areaid,
               t_sumvicefare,
               t_validtimestart,
               t_validtimeend,
               t_limittimes,
               t_monthnum
          from rec_vicecard_cash_plan a
         where a.planid = prmplanid and a.customerunitcode = prmcustunitcode;

        --增加科目校验
        --根据科目大类判断是否更新冻结金额
        select count (*)
          into i_count
          from base_acc_type a
         where a.acccode = t_acccode;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '交易科目信息不正确！';
            return;
        end if;

        select a.groupid
          into vacccodegroupid
          from base_acc_type a
         where a.acccode = t_acccode;

        select count (*)
          into i_count
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.empid = t_empid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        if i_count <> 1
        then
            out_result := -1003;
            out_msg := '未决记录充值职员信息异常';
            return;
        end if;

        --判断是否为处理冻结金额记录
        if vacccodegroupid = 5
        then
            select id
              into vcardid
              from base_customers
             where     customerunitcode = prmcustunitcode
                   and customerid = t_customerid
                   and cardno = t_cardno;

            out_result := -1004;
            out_msg := '处理冻结金额为未领！';

            --更新冻结金额为未领
            update rec_freezefare_acc
               set vicefreezefareflag = 0
             where     customerid = t_customerid
                   and vicefreezefareflag = 2
                   and cardid = vcardid
                   --and wallettype = 3
                   and customerunitcode = prmcustunitcode;
        end if;

        out_result := -1005;
        out_msg := '设置写卡状态为失败状态！';

        --zxn 20121107 去掉分区字段
        insert into rec_vicecard_cash_plan_bad (planid,
                                                customerid,
                                                cardno,
                                                cardsn,
                                                cardtypedetailid,
                                                viceoddfare,
                                                viceoddfarepre,
                                                vicedummyopfare,
                                                viceopfare,
                                                vicesaveopcount,
                                                viceopcount,
                                                status,
                                                acccode,
                                                opdt,
                                                description,
                                                cardkind,
                                                poscode,
                                                psamcardno,
                                                empid,
                                                dealtype,
                                                wallettype,
                                                tac,
                                                samtradeno,
                                                badcode,
                                                baddesc,
                                                ver,
                                                customerunitcode,
                                                limittimes,
                                                monthnum,
                                                validtimestart,
                                                validtimeend)
            select planid,
                   customerid,
                   cardno,
                   cardsn,
                   cardtypedetailid,
                   viceoddfare,
                   viceoddfarepre,
                   vicedummyopfare,
                   viceopfare,
                   vicesaveopcount,
                   viceopcount,
                   status,
                   acccode,
                   opdt,
                   description,
                   cardkind,
                   poscode,
                   psamcardno,
                   empid,
                   dealtype,
                   wallettype,
                   tac,
                   samtradeno,
                   prmbadcode,
                   prmbaddesc,
                   ver,
                   prmcustunitcode,
                   limittimes,
                   monthnum,
                   validtimestart,
                   validtimeend
              from rec_vicecard_cash_plan a
             where     a.planid = prmplanid
                   and a.customerunitcode = prmcustunitcode;

        if (vacccodegroupid = 11)
        then
            --圈存回滚修改申请明细状态
            update rec_vicecard_cash_plan
               set status = 0
             where planid = prmplanid and customerunitcode = prmcustunitcode;
        else
            --充值回滚删除申请明细
            delete from rec_vicecard_cash_plan
                  where     planid = prmplanid
                        and customerunitcode = prmcustunitcode;
        end if;

        --删除申请明细
        --delete from rec_vicecard_cash_plan
        --      where planid = prmplanid and customerunitcode = prmcustunitcode;

        if (sql%rowcount != 1)
        then
            --如果发放表和日志表没有记录，也没有日志，说明人为删除了发入记录
            insert into log_operation (stationid,
                                       systemid,
                                       empid,
                                       outid,
                                       name,
                                       message,
                                       logtype,
                                       recordlevel,
                                       createdate,
                                       customerunitcode)
                 values (
                            0,
                            0,
                            to_char (t_empid),
                            to_char (t_customerid),
                            to_char (prmplanid),
                               '删除次卡钱包充值申请记录planid：['
                            || to_char (prmplanid)
                            || ']时影响0行',
                            0,
                            0,
                            sysdate,
                            prmcustunitcode);
        end if;

        out_result := 100;
        out_msg := '未决记录回滚处理完毕';
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
    end;
end;
/
create or replace package pkg_jtb_interface
is
    /*
    ----------------------------------------------------------------------------
    --过程包名：pkg_jtb_interface
    --作　　者：黎会芳
    --时　　间： 2015-10-30
    --说　　明：与交通部对接相关过程
    ----------------------------------------------------------------------------
    */
    type ref_cursor is ref cursor; --游标类型定义，用于返回数据集

    --下发城市代码
    procedure getsafelist (prmposcode        in     number, --请求查询的终端
                           prmver            in     number, --版本号
                           prmcustunitcode   in     varchar2, --客户代码
                           out_result           out number,
                           out_msg              out varchar2,
                           out_cursor           out ref_cursor);

    --互通城市代码
    procedure insertsafelist (prmmakecardcode   in     varchar2, --卡组织
                              prmcardiin        in     varchar2, --发卡机构代码
                              --返回值-------------------
                              out_result           out number,
                              out_msg              out varchar2);
    --下发城市代码折扣
    procedure getsafelistdiscount (prmposcode        in     number, --请求查询的终端
                                   prmver            in     number, --版本号
                                   prmcustunitcode   in     varchar2, --客户代码
                                   out_result           out number,
                                   out_msg              out varchar2,
                                   out_cursor           out ref_cursor);
end;
/
create or replace package body pkg_jtb_interface
is
    --下发白名单
    procedure getsafelist (prmposcode        in     number, --请求查询的终端
                           prmver            in     number, --版本号
                            prmcustunitcode   in     varchar2, --客户代码
                           out_result           out number,
                           out_msg              out varchar2,
                           out_cursor           out ref_cursor)
    as
        vcount       number;
        --个数
        v_citycode   varchar2 (8); --系统基本参数表中城市代码
    /*
     -------------------------------------------------------------------------
     --存储过程：getsafelist
     --作　　者：黎会芳
     --时　　间：2015-10-30
     --说　　明：下发白名单
     --输入参数：
     --输出参数：
     -------------------------------------------------------------------------
      */
    begin
        --判断客户代码是否合法
        select count (id) into vcount from base_legal_person;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := '客户代码为：' || prmcustunitcode || '的信息不合法！';
            return;
        end if;

        --判断终端信息是否合法
        select count (id)
          into vcount
          from base_term
         where poscode = prmposcode and customerunitcode = prmcustunitcode;

        if vcount = 0
        then
            out_result := -1002;
            out_msg := '终端编号为：' || prmposcode || '的信息不合法！';
            return;
        end if;

        select count (*)
          into vcount
          from base_syspara a;

        if vcount = 0
        then
            out_result := -1003;
            out_msg := '系统基本参数异常！';
            return;
        end if;

        --获取基本参数表里面的城市代码信息
        select a.citycode
          into v_citycode
          from base_syspara a;

        --全量下载，暂时不加版本号限制
        open out_cursor for
              select a.id,
                     a.makecardcode as citycode,
                     '' as cityname,
                     a.ver,
                     v_citycode as syscitycode
                from rec_city_safelist a
            order by ver;

        out_result := 100;
        out_msg := '获取互联互通白名单成功！';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || to_char (sqlcode) || '_+_' || sqlerrm;
    end;

    --互通城市代码
    procedure insertsafelist (prmmakecardcode   in     varchar2, --卡组织
                              prmcardiin        in     varchar2, --发卡机构代码
                              --返回值-------------------
                              out_result           out number,
                              out_msg              out varchar2)
    as
        vcount   integer;
         /*
     -------------------------------------------------------------------------
     --存储过程：insertsafelist
     --作　　者：黎会芳
     --时　　间：2015-10-30
     --说　　明：插入白名单
     --输入参数：
     --输出参数：
     -------------------------------------------------------------------------
      */
    begin
        out_result := -1002;
        out_msg := '下发白名单';

        select count (*)
          into vcount
          from rec_city_safelist
         where makecardcode = prmmakecardcode;

        if vcount > 0
        then
            out_msg := '发卡机构代码已已存在！';
            out_result := 100;
            return;
        end if;

        insert into rec_city_safelist ( makecardcode, cardiin)
             values ( prmmakecardcode, prmcardiin);

        out_msg := '插入白名单成功！';
        out_result := 100;

        commit;
    exception
        when others
        then
            out_result := -1;
            out_msg := '互通白名单插入失败，异常原因为：' || sqlerrm;
            rollback;
    end;

    --下发白名单折扣
    procedure getsafelistdiscount (prmposcode        in     number, --请求查询的终端
                                   prmver            in     number, --版本号
                                   prmcustunitcode   in     varchar2, --客户代码
                                   out_result           out number,
                                   out_msg              out varchar2,
                                   out_cursor           out ref_cursor)
    as
        vcount       number;
        --个数
        v_citycode   varchar2 (8); --系统基本参数表中城市代码
    /*
     -------------------------------------------------------------------------
     --存储过程：getsafelist
     --作　　者：黎会芳
     --时　　间：2015-10-30
     --说　　明：下发白名单
     --输入参数：
     --输出参数：
     -------------------------------------------------------------------------
      */
    begin
        --判断客户代码是否合法
        select count (id) into vcount from base_legal_person;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := '客户代码为：' || prmcustunitcode || '的信息不合法！';
            return;
        end if;

        /*
        --判断终端信息是否合法
        select count (id)
          into vcount
          from base_term
         where poscode = prmposcode and customerunitcode = prmcustunitcode;

        if vcount = 0
        then
            out_result := -1002;
            out_msg := '终端编号为：' || prmposcode || '的信息不合法！';
            return;
        end if;
        */

        select count (*)
          into vcount
          from base_syspara a;

        if vcount = 0
        then
            out_result := -1003;
            out_msg := '系统基本参数异常！';
            return;
        end if;

        --获取基本参数表里面的城市代码信息
        select a.citycode
          into v_citycode
          from base_syspara a;

        --全量下载，暂时不加版本号限制
        open out_cursor for
              select v_citycode as syscitycode, t.* from
                  (select a.makecardcode as citycode , nvl(b.rate,100) rate, a.ver, nvl(b.ver,0) disver
                     from rec_city_safelist a left join rec_city_safelistdiscount b
                       on a.makecardcode = b.makecardcode
                    where (b.customerunitcode = prmcustunitcode or b.customerunitcode is null)
                      and (a.ver > prmver or b.ver > prmver) order by b.ver desc, a.ver desc) t
            order by t.disver desc, t.ver desc;

        out_result := 100;
        out_msg := '获取互联互通白名单折扣成功！';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || to_char (sqlcode) || '_+_' || sqlerrm;
    end;

end;
/
create or replace package        pkg_page
as
   type refcursortype is ref cursor;           --游标类型定义，用于返回数据集

   procedure sp_page (
      p_pagesize               int,                              --每页记录数
      p_pageno                 int,                      --当前页码,从 1 开始
      p_sqlselect              varchar2,                --查询语句,含排序部分
      p_outrecordcount   out   int,                            --返回总记录数
      p_outcursor        out   refcursortype
   );

   procedure sp_page (
      p_pagesize               int,                              --每页记录数
      p_pageno                 int,                      --当前页码,从 1 开始
      p_sqlselect              varchar2,                --查询语句,含排序部分
      p_sqlcount               varchar2,             --获取记录总数的查询语句
      p_outrecordcount   out   int,                            --返回总记录数
      p_outcursor        out   refcursortype
   );

   procedure sp_page (
      p_pagesize          int,                                   --每页记录数
      p_pageno            int,                           --当前页码,从 1 开始
      p_sqlselect         varchar2,                     --查询语句,含排序部分
      p_outcursor   out   refcursortype
   );

   procedure sp_getrecordcount (
      p_sqlcount               varchar2,             --获取记录总数的查询语句
      p_outrecordcount   out   int                             --返回总记录数
   );
end pkg_page;


 
 
 
 /
create or replace package body        pkg_page
as
   procedure sp_page (
      p_pagesize               int,                              --每页记录数
      p_pageno                 int,                      --当前页码,从 1 开始
      p_sqlselect              varchar2,                --查询语句,含排序部分
      p_outrecordcount   out   int,                            --返回总记录数
      p_outcursor        out   refcursortype
   )
   as
      /*
      --------------------------------------------------------------------------
      --存储过程：sp_page
      --作　　者：朱鹏飞
      --时　　间：2009-05-26
      --说　　明：大数据量分页通用存储过程
      --输入参数：
      --输出参数：
      ------------------------------------------------------------------
      */
      v_sql         varchar2 (3000);
      v_count       int;
      v_heirownum   int;
      v_lowrownum   int;
   begin
      --取记录总数
      v_sql := 'select count(*) from (' || p_sqlselect || ')';

      execute immediate v_sql
                   into v_count;

      p_outrecordcount := v_count;
      --执行分页查询
      v_heirownum := p_pageno * p_pagesize;
      v_lowrownum := v_heirownum - p_pagesize + 1;
      v_sql :=
            'select * from ( select rownum rn,a.* from ('
         || p_sqlselect
         || ' ) a where rownum <= '
         || to_char (v_heirownum)
         || ' ) b where rn >= '
         || to_char (v_lowrownum);

      --注意对rownum别名的使用,第一次直接用rownum,第二次一定要用别名rn
      open p_outcursor for v_sql;
   end sp_page;

   procedure sp_page (
      p_pagesize               int,                               --每页记录数
      p_pageno                 int,                       --当前页码,从 1 开始
      p_sqlselect              varchar2,                 --查询语句,含排序部分
      p_sqlcount               varchar2,              --获取记录总数的查询语句
      p_outrecordcount   out   int,                             --返回总记录数
      p_outcursor        out   refcursortype
   )
   as
      /*
      --------------------------------------------------------------------------
      --存储过程：sp_page
      --作　　者：朱鹏飞
      --时　　间：2009-05-26
      --说　　明：大数据量分页通用存储过程(重载1，推荐使用)
      --输入参数：
      --输出参数：
      ------------------------------------------------------------------
      */
      v_sql         varchar2 (3000);
      v_count       int;
      v_heirownum   int;
      v_lowrownum   int;
   begin
      --取记录总数
      execute immediate p_sqlcount
                   into v_count;

      p_outrecordcount := v_count;
      --执行分页查询
      v_heirownum := p_pageno * p_pagesize;
      v_lowrownum := v_heirownum - p_pagesize + 1;
      v_sql :=
            'select * from (select rownum rn,a.* from ('
         || p_sqlselect
         || ') a where rownum <= '
         || to_char (v_heirownum)
         || ') b where rn >= '
         || to_char (v_lowrownum);

      --注意对rownum别名的使用,第一次直接用rownum,第二次一定要用别名rn
      open p_outcursor for v_sql;
   end sp_page;

   procedure sp_page (
      p_pagesize          int,                                    --每页记录数
      p_pageno            int,                            --当前页码,从 1 开始
      p_sqlselect         varchar2,                      --查询语句,含排序部分
      p_outcursor   out   refcursortype
   )
   as
      /*
      --------------------------------------------------------------------------
      --存储过程：sp_page
      --作　　者：朱鹏飞
      --时　　间：2009-05-26
      --说　　明：大数据量分页通用存储过程
      --输入参数：
      --输出参数：
      ------------------------------------------------------------------
      */
      v_sql         varchar2 (3000);
      v_heirownum   int;
      v_lowrownum   int;
   begin
      --执行分页查询
      v_heirownum := p_pageno * p_pagesize;
      v_lowrownum := v_heirownum - p_pagesize + 1;
      v_sql :=
            'select * from (select rownum rn,a.*  from ('
         || p_sqlselect
         || ') a where rownum <= '
         || to_char (v_heirownum)
         || ') b where rn >= '
         || to_char (v_lowrownum);

      --注意对rownum别名的使用,第一次直接用rownum,第二次一定要用别名rn
      open p_outcursor for v_sql;
   end sp_page;

   procedure sp_getrecordcount (
      p_sqlcount               varchar2,              --获取记录总数的查询语句
      p_outrecordcount   out   int                              --返回总记录数
   )
   as
      /*
      --------------------------------------------------------------------------
      --存储过程：sp_getrecordcount
      --作　　者：朱鹏飞
      --时　　间：2009-05-26
      --说　　明：获得记录数
      --输入参数：
      --输出参数：
      ------------------------------------------------------------------
      */
      v_count   int;
   begin
      ----取记录总数
      execute immediate p_sqlcount
                   into v_count;

      p_outrecordcount := v_count;
   end;
end pkg_page;

/
create or replace package pkg_param is
  /*
  ----------------------------------------------------------------------------
  --过程包名：pkg_param
  --作　　者：周晓娜
  --时　　间： 2012-11-02
  --说　　明：下发各种参数过程
  ----------------------------------------------------------------------------
  */
  type ref_cursor is ref cursor; --游标类型定义，用于返回数据集

  --下发城市代码
  procedure citytradecode(prmposcode      in number, --请求查询的终端
                          prmver          in number, --版本号
                          prmcustunitcode in varchar2, --客户代码
                          out_result      out number,
                          out_msg         out varchar2,
                          out_cursor      out ref_cursor);
  --上传gps信息
  procedure send_gpsinfo(prmposcode      in number,
                         prmlineid       in number,
                         prmgpslongitude in varchar2, --经度
                         prmgpslatitude  in varchar2, --纬度
                         prmposmileage   in number, --里程数
                         out_result      out number,
                         out_msg         out varchar2,
                         io_allrec       out ref_cursor);
  --上传终端状态参数信息
  procedure send_termstatus(prmposcode           in number,
                            prmlineid            in number,
                            prmportpty           in varchar2,
                            prmhardwarever       in varchar2,
                            prmsoftwarever       in varchar2,
                            prmncollectrecord    in number,
                            prmblltver           in number,
                            prmblltcount         in number,
                            prmgpsstatus         in number,
                            prmgpslongitude      in varchar2,
                            prmgpslatitude       in varchar2,
                            prmgpsver            in number,
                            prmstoppricever      in number,
                            prmparamcardver      in number,
                            prmlinecardver       in number,
                            prmcitytradever      in number,
                            prmpostime           in varchar2,
                            prmcustunitcode      in varchar2,
                            prmvoiceactionver    in number, --终端语音包版本号
                            prmlanguagever       in number, --终端语言包版本号
                            prmbankposcode       in varchar2, --终端编号
                            prmmerchantcode      in varchar2, --商户编号
                            prmunioncardparamver in number, --银联ic卡其他参数版本
                            prmpublicparamver    in number, --银联认证中心密钥版本
                            prmkeynousedate      in varchar2, --银联密钥失效时间 yyyy-mm-dd
                            prmbankcodever       in number, --银行bin号版本
                            out_result           out number,
                            out_msg              out varchar2,
                            io_allrec            out ref_cursor);

  --获取银联设置相关参数
  procedure unionpaypara(prmposcode      in number,
                         prmcustunitcode in varchar2,
                         out_result      out number,
                         out_msg         out varchar2,
                         io_allrec       out ref_cursor);
end;
-- package spec
/
create or replace package body pkg_param is
  --下发城市代码
  procedure citytradecode(prmposcode      in number, --请求查询的终端
                          prmver          in number, --版本号
                          prmcustunitcode in varchar2, --客户代码
                          out_result      out number,
                          out_msg         out varchar2,
                          out_cursor      out ref_cursor) as
    vcount number;
    --个数
    v_citycode varchar2(4); --系统基本参数表中城市代码
    /*
    -------------------------------------------------------------------------
    --存储过程：citytradecode
    --作　　者：周晓娜
    --时　　间：2012-11-02
    --说　　明：根据终端编号获取互联互通城市信息
    --输入参数：
    --输出参数：
    -------------------------------------------------------------------------
     */
  begin
    --判断客户代码是否合法
    select count(id) into vcount from base_legal_person;
  
    if vcount = 0 then
      out_result := -1001;
      out_msg    := '客户代码为：' || prmcustunitcode || '的信息不合法！';
      return;
    end if;
  
    --判断终端信息是否合法
    select count(id)
      into vcount
      from base_term
     where poscode = prmposcode
       and customerunitcode = prmcustunitcode;
  
    if vcount = 0 then
      out_result := -1002;
      out_msg    := '终端编号为：' || prmposcode || '的信息不合法！';
      return;
    end if;
  
    select count(*) into vcount from base_syspara a;
  
    if vcount = 0 then
      out_result := -1003;
      out_msg    := '系统基本参数异常！';
      return;
    end if;
  
    --获取基本参数表里面的城市代码信息
    select a.citycode into v_citycode from base_syspara a;
  
    --全量下载，暂时不加版本号限制
    open out_cursor for
      select a.id, a.citycode, a.cityname, a.ver, v_citycode as syscitycode
        from base_city_area a
       order by a.ver;
  
    out_result := 100;
    out_msg    := '获取互联互通城市代码成功！';
    commit;
  exception
    when others then
      rollback;
      out_result := -1;
      out_msg    := out_msg || to_char(sqlcode) || '_+_' || sqlerrm;
  end;

  procedure send_gpsinfo(prmposcode      in number,
                         prmlineid       in number,
                         prmgpslongitude in varchar2, --经度
                         prmgpslatitude  in varchar2, --纬度
                         prmposmileage   in number, --里程数
                         out_result      out number,
                         out_msg         out varchar2,
                         io_allrec       out ref_cursor) as
    allrec       ref_cursor;
    n_maxmileage number;
    n_busno      number;
    n_count      number;
    /*
    -------------------------------------------------------------------------
    --存储过程：send_gpsinfo
    --作　　者：党杰
    --时　　间：2013-11-06
    --说　　明：上传gps信息
    --输入参数：
    --输出参数：
    -------------------------------------------------------------------------
     */
  begin
    n_busno := 0;
    n_count := 0;
  
    update base_term_status
       set gpslongitude = prmgpslongitude,
           gpslatitude  = prmgpslatitude,
           posmileage   = prmposmileage
     where poscode = prmposcode;
  
    out_msg := '该终端gps信息更新成功';
  
    select count(*) into n_count from base_bus where poscode = prmposcode;
  
    if n_count = 1 --车辆绑定了单个终端
     then
      select busno into n_busno from base_bus where poscode = prmposcode;
    
      select max(posmileage)
        into n_maxmileage
        from base_term_status
       where poscode in
             (select poscode from base_bus where busno = n_busno);
    else
      --车辆绑定了多个终端
      select busno
        into n_busno
        from base_bus
       where poscodelist like '%' || to_char(prmposcode) || '%';
    
      if n_busno = 0 then
        out_result := -1001;
        out_msg    := '该终端没有对应的车辆';
        return;
      end if;
    
      select max(posmileage)
        into n_maxmileage
        from base_term_status
       where poscode in (select *
                           from table(split((select poscodelist
                                              from base_bus
                                             where busno = n_busno),
                                            '|')));
    end if;
  
    open allrec for
      select prmposcode as poscode, n_maxmileage as posmileage from dual;
  
    io_allrec  := allrec;
    out_result := 100;
    out_msg    := 'gps信息上传成功！';
  end;

  --上传终端状态参数信息
  procedure send_termstatus(prmposcode           in number,
                            prmlineid            in number,
                            prmportpty           in varchar2,
                            prmhardwarever       in varchar2,
                            prmsoftwarever       in varchar2,
                            prmncollectrecord    in number,
                            prmblltver           in number,
                            prmblltcount         in number,
                            prmgpsstatus         in number,
                            prmgpslongitude      in varchar2,
                            prmgpslatitude       in varchar2,
                            prmgpsver            in number,
                            prmstoppricever      in number,
                            prmparamcardver      in number,
                            prmlinecardver       in number,
                            prmcitytradever      in number,
                            prmpostime           in varchar2,
                            prmcustunitcode      in varchar2,
                            prmvoiceactionver    in number, --终端语音包版本号
                            prmlanguagever       in number, --终端语言包版本号
                            prmbankposcode       in varchar2, --终端编号
                            prmmerchantcode      in varchar2, --商户编号
                            prmunioncardparamver in number, --银联ic卡其他参数版本
                            prmpublicparamver    in number, --银联认证中心密钥版本
                            prmkeynousedate      in varchar2, --银联密钥失效时间 yyyy-mm-dd
                            prmbankcodever       in number, --银行bin号版本
                            out_result           out number,
                            out_msg              out varchar2,
                            io_allrec            out ref_cursor) as
    /*
    -------------------------------------------------------------------------
    --存储过程：citytradecode
    --作　　者：周晓娜
    --时　　间：2012-11-06
    --说　　明：上传终端状态信息
    --输入参数：
    --输出参数：
         按位定义，两个字节最低位为bit0，最高位为bit15。1-需要更新，0-不更新
         bit0: 增量黑名单更新
         bit1：参数卡下发
         bit2：票价卡下发
         bit3: 站点gps
         bit4：站点间票价
         bit5：互联互通城市代码
         bit6：更新时间
         bit7：银联认证中心公钥参数
         bit8：银联ic 卡其他参数
         bit9：语音包
         bit10：语言包
         bit11: 银联卡号过滤
                       ……
         bit15：远程升级
    -------------------------------------------------------------------------
    --修改标识：zxn 20130528
    --增加银联终端编号和商户编号的下发
    -------------------------------------------------------------------------
    --修改标识：zxn 20131031
    --增加分段计费业务中逃票判断间隔时间
     --修改标识：dj 20131105
    --增加gps上传间隔时间
    -------------------------------------------------------------------------
     */
    vcount           number;
    v_flag           varchar2(16); --通知标志位
    v_blltver        number; --黑名单版本号
    vparamcardver    number; --参数卡版本号
    vlinecardver     number; --线路卡版本号
    vgpsver          number; --gps版本号
    vstoppricever    number; --站点票价版本号
    vcitytradever    number; --互联互通版本号
    vupdatetime      date; --终端时间
    v_applicationver varchar(32); --终端应用程序版本号
    vposcode         number; --终端编号
    n_ver            number; --终端升级表中对应的版本号
    allrec           ref_cursor;
    n_busno          number; --终端对应的车辆编号
    n_unionparamver  number; --银联ic卡其他参数版本
    n_publicparamver number; --银联认证中心密钥版本号
    n_voiceactionver varchar2(30); --语音包版本号
    n_lanuagever     number; --语言包版本号
    n_termtype       number; --终端类型
    n_chargetype     number; --线路计费方式
    v_unionposcode   varchar2(8); --受卡机终端标识码（银联）
    v_unionmerchant  varchar2(15); --受卡方标识码，即商户代码（银联）
    v_bankcodever    number; --银联bin号版本
    n_timespan       number; --终端逃票时间间隔设置
    n_timegps        number; --gps上传时间间隔设置
    vcitydisver      number := prmcitytradever; --互联互通版本号
  
    --2018.04.04 终端远程升级文件和语音包升级文件status使用不同变量存放
    --解决问题：同一个终端语音包升级完成，无法进行远程文件升级
    n_status_software number; --终端程序status
    n_status_voice    number; --终端语音包status
    v_consumemodel    varchar2(100); --消费账目归属模式
    v_linedptcode     varchar2(100); --终端线路所属部门
    v_buslineid       number; --终端poscode所在车辆平台所属线路
    v_busdptcode      varchar2(100); --终端poscode所在车辆平台所属部门
  begin
    v_flag          := '0000000000000000';
    vposcode        := prmposcode;
    n_busno         := 0;
    out_result      := -10000;
    out_msg         := '终端状态上报异常';
    n_chargetype    := 0;
    v_unionposcode  := '00000000';
    v_unionmerchant := '00000';
    n_timespan      := 90;
    n_timegps       := 15;
  
    --------------------------------------------------------------------------------
    --对游标赋初始值
    open allrec for
      select sysdate as vupdatetime,
             v_flag  as notificationflag --更新标志位
            ,
             n_busno as busno
        from dual;
  
    io_allrec := allrec;
  
    --------------------------------------------------------------------------------
  
    --判断客户是否合法
    select count(id)
      into vcount
      from base_legal_person
     where customerunitcode = prmcustunitcode;
  
    if vcount = 0 then
      out_result := -1001;
      out_msg    := '客户代码【' || prmcustunitcode || '】不合法!';
      return;
    end if;
  
    --判断终端信息是否合法
    select count(id)
      into vcount
      from base_term
     where poscode = prmposcode
       and customerunitcode = prmcustunitcode;
  
    if vcount = 0 then
      out_result := -1002;
      out_msg    := '客户代码【' || prmcustunitcode || '】的终端信息' ||
                    to_char(prmposcode) || '不合法!';
      return;
    end if;
  
    --获取终端类型信息
    select a.typeid
      into n_termtype
      from base_term a
     where a.poscode = prmposcode
       and a.customerunitcode = prmcustunitcode;
  
    --终端是车载机时判断线路和车辆信息是否合法
    if n_termtype = 2 then
      --判断线路信息是否合法
      select count(id)
        into vcount
        from base_busline
       where lineid = prmlineid
         and customerunitcode = prmcustunitcode;
    
      if vcount = 0 then
        out_result := -1003;
        out_msg    := '客户代码【' || prmcustunitcode || '】的线路信息' ||
                      to_char(prmlineid) || '不合法!';
        return;
      end if;
    
      --获取线路计费方式
      select chargetypeid
        into n_chargetype
        from base_busline
       where lineid = prmlineid
         and customerunitcode = prmcustunitcode;
    
      --获取车辆信息
      select count(a.id)
        into vcount
        from base_bus a
       where (a.poscode = prmposcode or
             a.poscodelist like '%' || prmposcode || '%')
         and a.customerunitcode = prmcustunitcode
         and a.isdelete = 0;
    
      if vcount = 0 then
        out_result := -1004;
        out_msg    := '客户代码【' || prmcustunitcode || '】，设备唯一编号' ||
                      to_char(prmposcode) || '对应的车辆信息不合法!';
        return;
      end if;
    
      --获取车辆信息
      select a.busno
        into n_busno
        from base_bus a
       where (a.poscode = prmposcode or
             a.poscodelist like '%' || prmposcode || '%')
         and a.customerunitcode = prmcustunitcode
         and a.isdelete = 0;
    
      --获取黑名单版本号
      select nvl(max(a.ver), 0)
        into v_blltver
        from rec_bllt a
       where a.customerunitcode = prmcustunitcode;
    
      --获取参数卡参数
      select nvl(max(a.ver), 0)
        into vparamcardver
        from base_param a
       where a.paramgroupid = 225
         and a.customerunitcode = prmcustunitcode
         and a.isuse = 1
         and a.flag = 0;
    
      --获取线路票价卡版本号
      select a.linecardver
        into vlinecardver
        from base_busline a
       where a.customerunitcode = prmcustunitcode
         and a.lineid = prmlineid
         and a.isdelete = 0;
    
      if n_chargetype = 0 --统一收费时没有gps和站点间票价版本号的对比
       then
        vgpsver       := prmgpsver;
        vstoppricever := prmstoppricever;
      else
        --获取gps版本号
        select nvl(max(a.stopver), 0)
          into vgpsver
          from base_busline a
         where a.customerunitcode = prmcustunitcode
           and a.lineid = prmlineid;
      
        --获取站点间票价版本号
        select nvl(max(a.pricever), 0)
          into vstoppricever
          from base_busline a, base_chargingmode b
         where a.chargetypeid = b.typeid
           and a.customerunitcode = prmcustunitcode
           and a.lineid = prmlineid;
      end if;
    
      --获取互联互通城市代码
      select count(a.id) into vcount from rec_city_safelist a;
    
      if vcount <> 0 then
        --获取互联互通城市代码
        select nvl(max(a.ver), 0)
          into vcitytradever
          from rec_city_safelist a;
      
        select count(*) into vcount from rec_city_safelistdiscount;
      
        if vcount <> 0 then
          --获取互联互通城市代码
          select nvl(max(a.ver), 0)
            into vcitydisver
            from rec_city_safelistdiscount a;
        end if;
      
        if (vcitydisver > vcitytradever) then
          vcitytradever := vcitydisver;
        end if;
      else
        vcitytradever := prmcitytradever;
      end if;
    
      --获取终端应用程序版本
      select count(id)
        into vcount
        from base_term_upgrade a
       where a.poscode = prmposcode
         and a.customerunitcode = prmcustunitcode;
    
      if vcount = 0 then
        v_applicationver := prmsoftwarever; --应用程序版本
        n_voiceactionver := prmvoiceactionver; --语音包版本号
        n_lanuagever     := prmlanguagever; --语言包版本号
      else
        --判断是否有应用程序升级信息
        select count(id)
          into vcount
          from base_term_upgrade a
         where a.poscode = prmposcode
           and a.systype = 0
           and a.customerunitcode = prmcustunitcode;
      
        if vcount = 1 --存在应用程序升级信息
         then
          --获取终端应用程序版本
          select a.applicationver, a.status, a.ver
            into v_applicationver, n_status_software, n_ver
            from base_term_upgrade a
           where a.poscode = prmposcode
             and a.systype = 0
             and a.customerunitcode = prmcustunitcode;
        
          --通过平台升级文件升级方式执行的终端升级，终端最终的升级结果在此处更新
        
          --如果终端上送的应用程序版本号和平台升级表中一致，且是允许升级状态，此时更新升级状态为完成
          if v_applicationver = prmsoftwarever and n_status_software = 1 then
            update base_term_upgrade
               set status = 2, upgradeendtime = sysdate
             where poscode = prmposcode
               and systype = 0
               and customerunitcode = prmcustunitcode
               and applicationver = prmsoftwarever;
          
            --更新终端升级日志表中状态
            update base_term_upgrade_log
               set status         = 2,
                   createdate     = sysdate,
                   upgradeendtime = sysdate
             where poscode = prmposcode
               and filever = prmsoftwarever
               and systype = 0
               and ver = n_ver
               and customerunitcode = prmcustunitcode;
          end if;
        
          --终端升级表中状态为2的不需要升级
          if n_status_software in (2, 4) then
            --如果终端状态与升级表中状态不一致，更新升级表中版本号
            if v_applicationver <> prmsoftwarever then
              update base_term_upgrade
                 set applicationver = prmsoftwarever
               where poscode = prmposcode
                 and status = 2
                 and systype = 0
                 and customerunitcode = prmcustunitcode;
            end if;
          
            v_applicationver := prmsoftwarever;
          end if;
        end if;
      
        ---------------判断是否有语音包升级信息-----------------------
        select count(id)
          into vcount
          from base_term_upgrade a
         where a.poscode = prmposcode
           and a.systype = 2
           and a.customerunitcode = prmcustunitcode;
      
        if vcount = 1 --存在应用程序升级信息
         then
          --获取终端语音包版本信息
          select a.applicationver, a.status, a.ver
            into n_voiceactionver, n_status_voice, n_ver
            from base_term_upgrade a
           where a.poscode = prmposcode
             and a.systype = 2
             and a.customerunitcode = prmcustunitcode;
        
          --通过平台升级文件升级方式执行的终端升级，终端最终的升级结果在此处更新
        
          --如果终端上送的语音包版本号和平台升级表中一致，且是允许升级状态，此时更新升级状态为完成
          if to_number(n_voiceactionver) = prmvoiceactionver and
             n_status_voice = 1 then
            update base_term_upgrade
               set status = 2, upgradeendtime = sysdate
             where poscode = prmposcode
               and systype = 2
               and customerunitcode = prmcustunitcode
               and applicationver = to_char(prmvoiceactionver);
          
            --更新终端升级日志表中状态
            update base_term_upgrade_log
               set status         = 2,
                   createdate     = sysdate,
                   upgradeendtime = sysdate
             where poscode = prmposcode
               and filever = to_char(prmvoiceactionver)
               and systype = 2
               and ver = n_ver
               and customerunitcode = prmcustunitcode;
          end if;
        
          --终端升级表中状态为2的不需要升级
          if n_status_voice in (2, 4) then
            --如果终端状态与升级表中状态不一致，更新升级表中版本号
            if to_number(n_voiceactionver) <> prmvoiceactionver then
              update base_term_upgrade
                 set applicationver = to_char(prmvoiceactionver)
               where poscode = prmposcode
                 and status = 2
                 and systype = 2
                 and customerunitcode = prmcustunitcode;
            end if;
          
            n_voiceactionver := to_char(prmvoiceactionver);
          end if;
        end if;
      end if;
    
      -------------20180411 消费账目归属模式( 0 以平台绑定线路为准；1 以终端绑定线路为准；)-------------------------
      --若系统无此参数，则以平台绑定线路为准
      select nvl(max(b.paramvalue), 0)
        into v_consumemodel
        from base_param b
       where b.paramname = 'consumeaccountmodel'
         and b.customerunitcode = prmcustunitcode
         and b.isuse = 1;
    
      if trim(v_consumemodel) = '1' then
        --获取终端上传线路 所属部门
        select a.dptcode
          into v_linedptcode
          from base_busline a
         where a.lineid = prmlineid
           and a.isdelete = 0
           and a.customerunitcode = prmcustunitcode;
      
        --获取终端上传poscode所在车辆 所属平台线路和部门
        select a.dptcode, a.lineid
          into v_busdptcode, v_buslineid
          from base_bus a
         where busno = n_busno
           and a.isdelete = 0
           and a.customerunitcode = prmcustunitcode;
      
        if trim(v_linedptcode) <> trim(v_busdptcode) or
           prmlineid <> v_buslineid then
          --更新车辆部门、线路信息
          update base_bus a
             set a.dptcode = v_linedptcode, a.lineid = prmlineid
           where busno = n_busno
             and a.isdelete = 0
             and a.customerunitcode = prmcustunitcode;
        
          --更新终端部门信息
          update base_term a
             set a.dptcode = v_linedptcode
           where a.poscode = prmposcode
             and a.customerunitcode = prmcustunitcode;
        end if;
      end if;
    
      --------------------------------------------------------------------------------------------------------------------
      --获取银联ic卡其他参数版本号
      select nvl(max(a.ver), 0)
        into n_unionparamver
        from base_term_unioncard_param a;
    
      --获取银联认证中心密钥版本号
      select nvl(max(a.ver), 0)
        into n_publicparamver
        from base_term_publickey_param a;
    
      --银行卡号bin号版本
      select nvl(max(a.ver), 0)
        into v_bankcodever
        from base_bus_banklist a;
    
      --where a.customerunitcode = prmcustunitcode;
      out_msg := '获取终端更新标志位';
    
      --比较终端应用程序版本号
      if upper(prmsoftwarever) <> upper(v_applicationver) and
         n_status_software = 1 then
        v_flag := '1';
      else
        v_flag := '0';
      end if;
    
      v_flag := v_flag || '000';
    
      --处理bin号
      if prmbankcodever <> v_bankcodever then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      v_flag := v_flag || '0';
    
      --处理语言包版本号
      if prmvoiceactionver <> to_number(n_voiceactionver) then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      if prmunioncardparamver <> n_unionparamver then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      if prmpublicparamver <> n_publicparamver then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      if sysdate <> to_date(prmpostime, 'yyyy-mm-dd hh24:mi:ss') then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      if prmcitytradever <> vcitytradever then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      if prmstoppricever <> vstoppricever then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      if prmgpsver <> vgpsver then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      --比较线路票价卡版本号
      if prmlinecardver <> vlinecardver then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      --比较参数版本号
      if prmparamcardver <> vparamcardver then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      --比较黑名单版本号
      if prmblltver <> v_blltver then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    end if;
  
    ----------------判断充值机终端信息-------------------------------------
    if n_termtype = 3 then
      --获取互联互通城市代码
      select count(a.id) into vcount from rec_city_safelist a;
    
      if vcount <> 0 then
        --获取互联互通城市代码
        select nvl(max(a.ver), 0)
          into vcitytradever
          from rec_city_safelist a;
      
        select count(*) into vcount from rec_city_safelistdiscount;
      
        if vcount <> 0 then
          --获取互联互通城市代码
          select nvl(max(a.ver), 0)
            into vcitydisver
            from rec_city_safelistdiscount a;
        end if;
      
        if (vcitydisver > vcitytradever) then
          vcitytradever := vcitydisver;
        end if;
      else
        vcitytradever := prmcitytradever;
      end if;
    
      --获取终端应用程序版本
      select count(id)
        into vcount
        from base_term_upgrade a
       where a.poscode = prmposcode
         and a.customerunitcode = prmcustunitcode;
    
      if vcount = 0 then
        v_applicationver := prmsoftwarever; --应用程序版本
        n_voiceactionver := prmvoiceactionver; --语音包版本号
        n_lanuagever     := prmlanguagever; --语言包版本号
      else
        --判断是否有应用程序升级信息
        select count(id)
          into vcount
          from base_term_upgrade a
         where a.poscode = prmposcode
           and a.systype = 0
           and a.customerunitcode = prmcustunitcode;
      
        if vcount = 1 --存在应用程序升级信息
         then
          --获取终端应用程序版本
          select a.applicationver, a.status, a.ver
            into v_applicationver, n_status_software, n_ver
            from base_term_upgrade a
           where a.poscode = prmposcode
             and a.systype = 0
             and a.customerunitcode = prmcustunitcode;
        
          --通过平台升级文件升级方式执行的终端升级，终端最终的升级结果在此处更新
        
          --如果终端上送的应用程序版本号和平台升级表中一致，且是允许升级状态，此时更新升级状态为完成
          if v_applicationver = prmsoftwarever and n_status_software = 1 then
            update base_term_upgrade
               set status = 2, upgradeendtime = sysdate
             where poscode = prmposcode
               and systype = 0
               and customerunitcode = prmcustunitcode
               and applicationver = prmsoftwarever;
          
            --更新终端升级日志表中状态
            update base_term_upgrade_log
               set status         = 2,
                   createdate     = sysdate,
                   upgradeendtime = sysdate
             where poscode = prmposcode
               and filever = prmsoftwarever
               and systype = 0
               and ver = n_ver
               and customerunitcode = prmcustunitcode;
          end if;
        
          --终端升级表中状态为2的不需要升级
          if n_status_software in (2, 4) then
            --如果终端状态与升级表中状态不一致，更新升级表中版本号
            if v_applicationver <> prmsoftwarever then
              update base_term_upgrade
                 set applicationver = prmsoftwarever
               where poscode = prmposcode
                 and status = 2
                 and systype = 0
                 and customerunitcode = prmcustunitcode;
            end if;
          
            v_applicationver := prmsoftwarever;
          end if;
        end if;
      
        ---------------判断是否有语音包升级信息-----------------------
        select count(id)
          into vcount
          from base_term_upgrade a
         where a.poscode = prmposcode
           and a.systype = 2
           and a.customerunitcode = prmcustunitcode;
      
        if vcount = 1 --存在应用程序升级信息
         then
          --获取终端语音包版本信息
          select a.applicationver, a.status, a.ver
            into n_voiceactionver, n_status_voice, n_ver
            from base_term_upgrade a
           where a.poscode = prmposcode
             and a.systype = 2
             and a.customerunitcode = prmcustunitcode;
        
          --通过平台升级文件升级方式执行的终端升级，终端最终的升级结果在此处更新
        
          --如果终端上送的语音包版本号和平台升级表中一致，且是允许升级状态，此时更新升级状态为完成
          if to_number(n_voiceactionver) = prmvoiceactionver and
             n_status_voice = 1 then
            update base_term_upgrade
               set status = 2, upgradeendtime = sysdate
             where poscode = prmposcode
               and systype = 2
               and customerunitcode = prmcustunitcode
               and applicationver = to_char(prmvoiceactionver);
          
            --更新终端升级日志表中状态
            update base_term_upgrade_log
               set status         = 2,
                   createdate     = sysdate,
                   upgradeendtime = sysdate
             where poscode = prmposcode
               and filever = to_char(prmvoiceactionver)
               and systype = 2
               and ver = n_ver
               and customerunitcode = prmcustunitcode;
          end if;
        
          --终端升级表中状态为2的不需要升级
          if n_status_voice in (2, 4) then
            --如果终端状态与升级表中状态不一致，更新升级表中版本号
            if to_number(n_voiceactionver) <> prmvoiceactionver then
              update base_term_upgrade
                 set applicationver = to_char(prmvoiceactionver)
               where poscode = prmposcode
                 and status = 2
                 and systype = 2
                 and customerunitcode = prmcustunitcode;
            end if;
          
            n_voiceactionver := to_char(prmvoiceactionver);
          end if;
        end if;
      end if;
    
      --银行卡号bin号版本
      select nvl(max(a.ver), 0)
        into v_bankcodever
        from base_bus_banklist a;
    
      out_msg := '获取终端更新标志位';
    
      --比较终端应用程序版本号
      if upper(prmsoftwarever) <> upper(v_applicationver) and
         n_status_software = 1 then
        v_flag := '1';
      else
        v_flag := '0';
      end if;
    
      v_flag := v_flag || '000';
    
      --处理bin号
      if prmbankcodever <> v_bankcodever then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      v_flag := v_flag || '0000';
    
      if sysdate <> to_date(prmpostime, 'yyyy-mm-dd hh24:mi:ss') then
        v_flag := v_flag || '1';
      else
        v_flag := v_flag || '0';
      end if;
    
      --互联互通版本号
      v_flag := v_flag || '0';
      --gps版本号
      v_flag := v_flag || '0';
      --线路票价卡参数
      v_flag := v_flag || '0';
      --参数卡参数
      v_flag := v_flag || '0';
      --比较参数版本号
      v_flag := v_flag || '0';
      --充值机不判断黑名单
      v_flag := v_flag || '0';
    end if;
  
    -------------------------------------------------------------------------------- 
    out_msg := '更新终端状态为签到状态';
  
    select count(id)
      into vcount
      from base_term_status
     where poscode = prmposcode
       and customerunitcode = prmcustunitcode;
  
    if vcount = 0 then
      insert into base_term_status
        (id,
         poscode,
         lineid,
         portpty,
         hardwarever,
         softwarever,
         ncollectrecordnum,
         blltver,
         blltnum,
         gpsstatus,
         gpslongitude,
         gpslatitude,
         gpsver,
         stoppricever,
         paramcardver,
         linecardver,
         citytradever,
         termtime,
         customerunitcode,
         opdt,
         collectdt,
         unioncardparamver,
         publicparamver,
         voiceactionver,
         bankposcode,
         merchantcode,
         keynousedate)
      values
        (0,
         prmposcode,
         prmlineid,
         prmportpty,
         prmhardwarever,
         prmsoftwarever,
         prmncollectrecord,
         prmblltver,
         prmblltcount,
         prmgpsstatus,
         prmgpslongitude,
         prmgpslatitude,
         prmgpsver,
         prmstoppricever,
         prmparamcardver,
         prmlinecardver,
         prmcitytradever,
         to_date(prmpostime, 'yyyy-mm-dd hh24:mi:ss'),
         prmcustunitcode,
         sysdate,
         sysdate,
         prmunioncardparamver,
         prmpublicparamver,
         prmvoiceactionver,
         prmbankposcode,
         prmmerchantcode,
         to_date(prmkeynousedate, 'yyyy-mm-dd hh24:mi:ss'));
    else
      update base_term_status
         set lineid            = prmlineid,
             portpty           = prmportpty,
             hardwarever       = prmhardwarever,
             softwarever       = prmsoftwarever,
             ncollectrecordnum = prmncollectrecord,
             blltver           = prmblltver,
             blltnum           = prmblltcount,
             gpsstatus         = prmgpsstatus,
             gpslongitude      = prmgpslongitude,
             gpslatitude       = prmgpslatitude,
             gpsver            = prmgpsver,
             stoppricever      = prmstoppricever,
             paramcardver      = prmparamcardver,
             linecardver       = prmlinecardver,
             citytradever      = prmcitytradever,
             termtime          = to_date(prmpostime, 'yyyy-mm-dd hh24:mi:ss'),
             collectdt         = sysdate,
             unioncardparamver = prmunioncardparamver,
             publicparamver    = prmpublicparamver,
             voiceactionver    = prmvoiceactionver,
             bankposcode       = prmbankposcode,
             merchantcode      = prmmerchantcode,
             keynousedate      = to_date(prmkeynousedate,
                                         'yyyy-mm-dd hh24:mi:ss')
       where poscode = prmposcode
         and customerunitcode = prmcustunitcode;
    end if;
  
    --判断终端是否有对接关系
    select count(a.id)
      into vcount
      from base_term_union a
     where a.poscode = prmposcode
       and a.customerunitcode = prmcustunitcode;
  
    if vcount = 1 then
      select a.unionposcode, a.unionmerchantcode
        into v_unionposcode, v_unionmerchant
        from base_term_union a
       where a.poscode = prmposcode
         and a.customerunitcode = prmcustunitcode;
    end if;
  
    out_result := -1010;
    out_msg    := '更新终端表最后一次联机时间失败！';
  
    --更新终端表最后一次联机时间
    select count(a.id)
      into vcount
      from base_term a
     where a.poscode = prmposcode
       and a.isdelete = 0
       and a.customerunitcode = prmcustunitcode;
  
    if vcount = 1 then
      update base_term
         set lastcollectdate = sysdate
       where poscode = prmposcode
         and isdelete = 0
         and customerunitcode = prmcustunitcode;
    end if;
  
    --获取逃票时间 间隔
    select a.paramvalue
      into n_timespan
      from base_param a
     where a.paramname = 'withoutpaytimespan'
       and a.customerunitcode = prmcustunitcode;
  
    --获取gps上传时间间隔
    select a.paramvalue
      into n_timegps
      from base_param a
     where a.paramname = 'withoutpaytimegps'
       and a.customerunitcode = prmcustunitcode;
  
    --返回数据库状态
    open allrec for
      select --终端应用程序版本号
       to_char(sysdate, 'yyyymmddhh24miss') as updatetime,
       v_flag as notificationflag,
       n_busno as busno,
       v_unionposcode as unionposcode,
       v_unionmerchant as unionmerchant,
       --更新标志位                                    ,
       n_timespan as timespan,
       n_timegps  as timegpsupload
        from dual;
  
    io_allrec  := allrec;
    out_result := 100;
    out_msg    := '签到成功！';
    commit;
  exception
    when others then
      rollback;
      out_result := -1;
      out_msg    := out_msg || to_char(sqlcode) || '_+_' || sqlerrm;
  end;

  --获取银联设置相关参数
  procedure unionpaypara(prmposcode      in number,
                         prmcustunitcode in varchar2,
                         out_result      out number,
                         out_msg         out varchar2,
                         io_allrec       out ref_cursor) as
    vcount number;
    --个数
    /*
    -------------------------------------------------------------------------
    --存储过程：unionpaypara
    --作　　者：周晓娜
    --时　　间：2012-11-06
    --说　　明：获取银联设置相关参数
    --输入参数：
    --输出参数：
    -------------------------------------------------------------------------
     */
  begin
    --判断客户代码是否合法
    select count(id) into vcount from base_legal_person;
  
    if vcount = 0 then
      out_result := -1001;
      out_msg    := '客户代码为：' || prmcustunitcode || '的信息不合法！';
      return;
    end if;
  
    --判断终端信息是否合法
    select count(id)
      into vcount
      from base_term
     where poscode = prmposcode
       and customerunitcode = prmcustunitcode;
  
    if vcount = 0 then
      out_result := -1002;
      out_msg    := '终端编号为：' || prmposcode || '的信息不合法！';
      return;
    end if;
  
    --获取银联设置相关参数
    open io_allrec for
      select a.id,
             a.paramgroupid,
             a.paramname,
             a.paramvalue,
             a.ver,
             a.isuse,
             a.customerunitcode,
             a.updatevertime,
             a.flag
        from base_param a
       where a.flag = 1
         and a.paramgroupid = 16;
  
    out_result := 100;
    out_msg    := '获取银联相关参数设置信息成功！';
    commit;
  exception
    when others then
      rollback;
      out_result := -1;
      out_msg    := out_msg || to_char(sqlcode) || '_+_' || sqlerrm;
  end;
end;
/
create or replace package pkg_partition
is
/*
----------------------------------------------------------------------------
--过程包名：pkg_partition
--作　　者：周晓娜
--时　　间： 2013-04-12
--说　　明：维护分区信息
----------------------------------------------------------------------------
*/ --坚持自动创建分区
   procedure initsysbyauto (
      out_result   out   number,                             --执行结果返回值
      out_msg      out   varchar2                          --执行结果输出信息
   );

   --根据年份自动扩展交易记录相关分区表分区信息
   procedure autopartitionbyyear (
      prmyear      in       number,                                      --年
      out_result   out      number,                          --执行结果返回值
      out_msg      out      varchar2                       --执行结果输出信息
   );

   --根据账号自动扩展账本分区信息
   procedure autopartitionbycustomerid (
      out_result   out   number,                             --执行结果返回值
      out_msg      out   varchar2                          --执行结果输出信息
   );

   --创建不同法人客户的分区信息(11g数据使用)
   procedure add_partelevenbycustunitcode (
      prmcustunitcode   in       varchar2,                         --客户代码
      prmyear           in       varchar2,                               --年
      out_result        out      number,                     --执行结果返回值
      out_msg           out      varchar2                  --执行结果输出信息
   );

   --创建不同法人客户的分区信息
   procedure add_parttenbycustunitcode (
      prmcustunitcode   in       varchar2,                         --客户代码
      prmyear           in       varchar2,                               --年
      out_result        out      number,                     --执行结果返回值
      out_msg           out      varchar2                  --执行结果输出信息
   );
end;


 
 
 
 
/
create or replace package body pkg_partition
is
   procedure initsysbyauto (
      out_result   out   number,                             --执行结果返回值
      out_msg      out   varchar2                          --执行结果输出信息
   )
   /*
          ----------------------------------------------------------------------------
          --存储过程：initsysbyauto
          --作　　者：周晓娜
          --时　　间：2013-04-12
          --说　　明：自动创建分区信息

         --输入参数：
         --输出参数：
         --    out_result: 100 成功

         -- 使用：定义oracle作业处理(10g使用该业务规则)
         -- 备注：oracle10g目前支持的复合分区 range-list range-hash
                11g 支持的复合分区：range-range range-list range-hash  list-list list-range list-hash
          --------------------------------------------------------------------------
                   */
   as
      vdateyear          number;
      d_begintime        date;                                    -- 开始时间
      custom_exception   exception;                              --自定义异常
   begin
      vdateyear := 1900;
      out_result := -1001;
      out_msg := '自动扩展分区失败！';

      --1、扩展交易记录分区-当年
      select (extract (year from sysdate))
        into vdateyear
        from dual;

      autopartitionbyyear (vdateyear, out_result, out_msg);

      if (out_result <> 100)                                     --100验证通过
      then
         out_msg := '自动扩展当前年份交易记录分区失败：' || out_msg;
         out_result := out_result;
         raise custom_exception;
      end if;

      --2、扩展交易记录分区-下一年
      select (extract (year from sysdate) + 1)
        into vdateyear
        from dual;

      autopartitionbyyear (vdateyear, out_result, out_msg);

      if (out_result <> 100)                                     --100验证通过
      then
         out_msg := '自动扩展下一年份交易记录分区失败：' || out_msg;
         out_result := out_result;
         raise custom_exception;
      end if;

      --3、扩展账本分区
      autopartitionbycustomerid (out_result, out_msg);

      if (out_result <> 100)                                     --100验证通过
      then
         out_msg := '自动扩展账本分区失败：' || out_msg;
         out_result := out_result;
         raise custom_exception;
      end if;

      out_msg := '自动扩展分区信息成功！';
      out_result := 100;
      commit;
   exception
      when custom_exception                                   --自定义异常处理
      then
         rollback;

         if out_result > 0
         then
            out_result := out_result * -1;
         else
            out_result := out_result;
         end if;

         out_msg := out_msg;
         out_result := out_result;
       -----记录异常日志
      /* insert into st_account_log
                   (accountdate, operatorid, begintime, endtime,
                    accounttype, results, description, ismanual,
                    customerunitcode
                   )
            values (sysdate, -1, t_begintime, sysdate,
                    9, out_result, out_msg, prmismanual,
                    prmcustunitcode
                   );*/
      when others
      then
         rollback;

         if out_result > 0
         then
            out_result := out_result * -1;
         else
            out_result := out_result;
         end if;

         out_result := out_result || '异常，具体信息为：' || sqlerrm;
    -----记录异常日志
   /* insert into st_account_log
                (accountdate, operatorid, begintime, endtime,
                 accounttype, results, description, ismanual,
                 customerunitcode
                )
         values (sysdate, -1, t_begintime, sysdate,
                 9, out_result, out_msg, prmismanual,
                 prmcustunitcode
                );*/
   end;

   --根据账号自动扩展账本分区信息
   procedure autopartitionbycustomerid (
      out_result   out   number,                              --执行结果返回值
      out_msg      out   varchar2                           --执行结果输出信息
   )
   is
      /*
          ----------------------------------------------------------------------------
          --存储过程：autopartitionbycustomerid
          --作　　者：周晓娜
          --时　　间：2013-04-12
          --说　　明：根据扩展法人对应的账本分区信息(适用于range-list分区形式,每200000万扩展一分区)
                   账本表：
                   主分区名称规则：part+分区记录数 (part200000)
                   子分区命令规则： 主分区_sub20 (part08600000000_sub20)
                   交易记录表：
                   主分区名称规则：part+年份 (part2013)
                   子分区命令规则： 主分区_sub+年份 (part08600000000_sub2013)
         --输入参数：
         --输出参数：
         --    out_result: 100 成功

         -- 使用：添加客户法人时调用(10g使用该业务规则)
         -- 备注：oracle10g目前支持的复合分区 range-list range-hash
                11g 支持的复合分区：range-range range-list range-hash  list-list list-range list-hash
          --------------------------------------------------------------------------
                   */
      vcount            integer;
      vtablename        varchar2 (50);
      vpartitionname    varchar2 (50);
      vsubpartname      varchar2 (50);
      vsql              varchar2 (500);
      vcustunitcode     varchar2 (12);                             --客户代码
      vspacename        varchar2 (50);
      vspacenameyear    integer;
      vspacenamecount   integer;
      vsysstartyear     integer;
      vmaxspace         integer;
      vminspace         integer;
      i_partnum         varchar2 (10);                         --主分区记录数
      i_subpartnum      varchar2 (10);                         --子分区记录数
      i_num             number;                --客户法人对应的customerid大小
      i_maxvalue        number;                                  --最大函数值

      --获取客户法人
      cursor c_enterprise
      is
         select customerunitcode
           from base_legal_person;
   begin
      out_result := -1001;
      out_msg := '初始化信息失败！ ';
      i_partnum := 2000000;
      i_subpartnum := 20;
      vspacename := 'tbs_par1';                                  --分区表空间
      vcount := 0;

       --此处要根据分区表空间的定义适用对应的表空间建立对应的分区信息
      /* select count (*)
         into vcount
         from base_syspara;

       if vcount > 0
       then
          --获取系统开通时间
          select extract (year from min (sysstartdt))
            into vsysstartyear
            from base_syspara;

          vspacename :=
                'oldetail0'
             || to_char (  nvl (mod ((to_number (vdateyear) - vsysstartyear),
                                     4),
                                0
                               )
                         + 1
                        );
       else
          vspacename := 'oldetail01';
       end if;*/
      select count (*)
        into vspacenamecount
        from user_free_space
       where tablespace_name = vspacename;

      if vspacenamecount = 0
      then
         out_result := -1002;
         out_msg := vspacename || '表空间不存在！ ';
         return;
      end if;

      for c_enterprise_rec in c_enterprise
      loop
         vsql := '';
         vcustunitcode := c_enterprise_rec.customerunitcode;

         select nvl (max (a.customerid), 0)
           into i_num
           from base_customers_info a
          where a.customerunitcode = vcustunitcode;

         if (i_num >= 0 and i_num <= 2000000)
         then
            i_partnum := 2000000;
            i_subpartnum := 200;
         elsif (i_num > 2000000 and i_num <= 4000000)
         then
            i_partnum := 4000000;
            i_subpartnum := 400;
         elsif (i_num > 4000000 and i_num <= 6000000)
         then
            i_partnum := 6000000;
            i_subpartnum := 600;
         elsif (i_num > 6000000 and i_num <= 8000000)
         then
            i_partnum := 8000000;
            i_subpartnum := 800;
         else
            --oracle 11g maxvalue
            i_partnum := 'maxvalue';                                   --maxvalue;
            i_subpartnum := 'maxvalue';
         end if;

         vtablename := 'base_customers';                                --表名
         --当前年份主分区名称
         vpartitionname := 'part' || i_partnum;
         --当前年份子分区名称
         vsubpartname := 'part' || vcustunitcode || '_sub' || i_subpartnum;

         --判断主分区是否存
         select count (*)
           into vcount
           from user_tab_partitions
          where table_name = vtablename and partition_name = vpartitionname;

         if vcount = 0                      --主分区不存在则创建主分区和子分区
         then
            out_result := -1002;
            out_msg :=
                  '扩展base_customers表主分区'
               || vpartitionname
               || '（'
               || vsubpartname
               || '）失败！ ';
            vsql :=
                  'alter  table '
               || vtablename
               || ' add partition '
               || vpartitionname
               || ' values less than('
               || i_partnum
               || ')'
               || ' (subpartition '
               || vsubpartname
               || ' values  ('''
               || vcustunitcode
               || ''') tablespace  '
               || vspacename
               || ')';
         else                                                     --主分区存在
            --判断子分区是否存在
            select count (*)
              into vcount
              from user_tab_subpartitions
             where table_name = vtablename
                   and subpartition_name = vsubpartname;

            if vcount = 0                   --主分区不存在则创建主分区和子分区
            then
               out_result := -1003;
               out_msg :=
                     '扩展base_customers表子分区'
                  || vsubpartname
                  || '（主分区'
                  || vpartitionname
                  || '）失败！ ';
               vsql :=
                     'alter  table '
                  || vtablename
                  || ' modify partition '
                  || vpartitionname
                  || ' add subpartition '
                  || vsubpartname
                  || ' values ('''
                  || vcustunitcode
                  || ''') tablespace '
                  || vspacename
                  || '';
            end if;
         end if;

         if vsql is not null
         then
            execute immediate vsql;
         end if;
      -- commit;  --外部调用此处不提交和回滚
      end loop;

      out_result := 100;
      out_msg := '自动创建分区处理成功！';
   exception
      when others
      then
         -- rollback;
         out_result := out_result;
         out_msg := out_msg || to_char (sqlcode) || '_+_' || sqlerrm;
   end;

   procedure autopartitionbyyear (
      prmyear      in       number,                                       --年
      out_result   out      number,                           --执行结果返回值
      out_msg      out      varchar2                        --执行结果输出信息
   )
   is
      /*
          ----------------------------------------------------------------------------
          --存储过程：autopartitionbyyear
          --作　　者：周晓娜
          --时　　间：2013-04-12
          --说　　明：自动扩展法人对应的交易记录分区信息(适用于range-list分区形式)
                   账本表：
                   主分区名称规则：part+分区记录数 (part200000)
                   子分区命令规则： 主分区_sub20 (part08600000000_sub20)
                   交易记录表：
                   主分区名称规则：part+年份 (part2013)
                   子分区命令规则： 主分区_sub+年份 (part08600000000_sub2013)
         --输入参数：
         --输出参数：
         --    out_result: 100 成功

         -- 使用：添加客户法人时调用(10g使用该业务规则)
         -- 备注：oracle10g目前支持的复合分区 range-list range-hash
                11g 支持的复合分区：range-range range-list range-hash  list-list list-range list-hash
          --------------------------------------------------------------------------
                   */
      vcount            integer;
      vtablename        varchar2 (50);
      vpartitionname    varchar2 (50);
      vsubpartname      varchar2 (50);
      vdateyear         number;
      vyear             number;
      --当前年份
      vsql              varchar2 (500);
      vcustunitcode     varchar2 (12);                             --客户代码
      vspacename        varchar2 (50);
      vspacenameyear    integer;
      vspacenamecount   integer;
      vsysstartyear     integer;
      vmaxspace         integer;
      vminspace         integer;

      --获取客户法人
      cursor c_enterprise
      is
         select customerunitcode
           from base_legal_person;

      --获取分区表信息
      cursor c1_tabs
      is
         select   table_name
             from user_part_tables
            where instr (table_name, 'bin$') = 0
              and table_name != 'base_customers'
         order by table_name;
   begin
      out_result := -1001;
      out_msg := '初始化信息失败！ ';
      vdateyear := 1900;
      vspacename := 'tbs_par1';                                  --分区表空间
      vcount := 0;

       --此处要根据分区表空间的定义适用对应的表空间建立对应的分区信息
      /* select count (*)
         into vcount
         from base_syspara;

       if vcount > 0
       then
          --获取系统开通时间
          select extract (year from min (sysstartdt))
            into vsysstartyear
            from base_syspara;

          vspacename :=
                'oldetail0'
             || to_char (  nvl (mod ((to_number (vdateyear) - vsysstartyear),
                                     4),
                                0
                               )
                         + 1
                        );
       else
          vspacename := 'oldetail01';
       end if;
      select count (*)
        into vspacenamecount
        from user_free_space
       where tablespace_name = vspacename;

      if vspacenamecount = 0
      then
         out_result := -1002;
         out_msg := vspacename || '表空间不存在！ ';
         return;
      end if;*/
      for c_enterprise_rec in c_enterprise
      loop
         vsql := '';
         vcustunitcode := c_enterprise_rec.customerunitcode;
         vpartitionname := 'part' || vdateyear;
         vdateyear := prmyear;
         vyear := vdateyear + 1;

         --所有分区表
         for c1_rec in c1_tabs
         loop
            vtablename := c1_rec.table_name;
            --当前年份主分区名称
            vpartitionname := 'part' || vdateyear;
            --当前年份子分区名称
            vsubpartname := 'part' || vcustunitcode || '_sub' || vdateyear;

            --判断当前年份的主分区是否存
            select count (*)
              into vcount
              from user_tab_partitions
             where table_name = vtablename and partition_name = vpartitionname;

            if vcount = 0                   --主分区不存在则创建主分区和子分区
            then
               out_result := -1002;
               out_msg :=
                     '创建'
                  || vtablename
                  || '主分区('
                  || vpartitionname
                  || ','
                  || vsubpartname
                  || ')'
                  || '失败！ ';
               vsql :=
                     'alter  table '
                  || vtablename
                  || ' add partition '
                  || vpartitionname
                  || ' values less than(to_date('''
                  || vyear
                  || '-01-01'',''yyyy-mm-dd''))'
                  || '( subpartition '
                  || vsubpartname
                  || ' values  ('''
                  || vcustunitcode
                  || ''') tablespace  '
                  || vspacename
                  || ')';
            else                                                  --主分区存在
               --判断子分区是否存在
               select count (*)
                 into vcount
                 from user_tab_subpartitions
                where table_name = vtablename
                  and subpartition_name = vsubpartname;

               if vcount = 0                --主分区不存在则创建主分区和子分区
               then
                  out_result := -1003;
                  out_msg :=
                        '创建'
                     || vtablename
                     || '子分区('
                     || vpartitionname
                     || ','
                     || vsubpartname
                     || ')'
                     || '失败！ ';
                  vsql :=
                        'alter  table '
                     || vtablename
                     || ' modify partition '
                     || vpartitionname
                     || ' add subpartition '
                     || vsubpartname
                     || ' values ('''
                     || vcustunitcode
                     || ''') tablespace '
                     || vspacename
                     || '';
               end if;
            end if;

            if vsql is not null
            then
               execute immediate vsql;
            end if;
         -- commit;  --外部调用此处不提交和回滚
         end loop;
      end loop;

      out_result := 100;
      out_msg := '自动创建分区处理成功！';
   exception
      when others
      then
         -- rollback;
         out_result := out_result;
         out_msg := out_msg || to_char (sqlcode) || '_+_' || sqlerrm;
   end;

   --创建不同法人客户的分区信息,针对orcle11g
   procedure add_partelevenbycustunitcode (
      prmcustunitcode   in       varchar2,                          --客户代码
      prmyear           in       varchar2,                                --年
      out_result        out      number,                      --执行结果返回值
      out_msg           out      varchar2                   --执行结果输出信息
   )
   is
      /*
       ----------------------------------------------------------------------------
       --存储过程：add_partelevenbycustunitcode
       --作　　者：周晓娜
       --时　　间：2013-04-12
       --说　　明：根据客户代码创建该客户法人对应的分区信息(适用用list-range复合分区形式)
                   账本表：
                   主分区名称规则：part+客户代码 (part08600000000)
                   子分区命令规则： 主分区_sub20 (part08600000000_sub20)
                   交易记录表：
                   主分区名称规则：part+客户代码 (part08600000000)
                   子分区命令规则： 主分区_sub+年份 (part08600000000_sub2013)
       --输入参数：
       --输出参数：
       --    out_result: 100 成功

       -- 使用：添加客户法人时调用(11g使用该业务规则)
       -- 备注：oracle10g目前支持的复合分区 range-list range-hash
                11g 支持的复合分区：range-range range-list range-hash  list-list list-range list-hash

       --说明：添加客户法人时，分区表是建立好的，每个分区表对应的主分区理论上是创建好的，
               对主分区进行判断，没有存在根据规则创建，存在则在已经建立好的分区下面创建对应的子分区
       --------------------------------------------------------------------------
                */
      vcount            integer;
      vtablename        varchar2 (50);
      vpartitionname    varchar2 (50);
      vsubpartname      varchar2 (50);
      vdateyear         number;
      vyear             number;
      vsql              varchar2 (500);
      veid              varchar2 (12);
      vspacename        varchar2 (50);
      vspacenameyear    integer;
      vspacenamecount   integer;
      vsysstartyear     integer;
      vmaxspace         integer;
      vminspace         integer;
      i_subpartnum      number;           --账户号范围（以20w为一个范围节点）
      i_partnum         number;

      --获取所有分区表名称
      cursor c1_tabs
      is
         select   table_name
             from user_part_tables
            where instr (table_name, 'bin$') = 0
         order by table_name;
   begin
      out_result := -1001;
      out_msg := '初始化信息失败！ ';
      vspacename := 'tbs_par1';                          --指定创建分区表空间
      vdateyear := 1900;
      i_subpartnum := 20;                                          --赋初始值
      i_partnum := 2000000;

      --获取年份值
      select to_number (extract (year from to_date (prmyear, 'yyyy-mm-dd')))
        into vdateyear
        from dual;

      --判断表空间是否存在
      select count (*)
        into vspacenamecount
        from user_free_space
       where tablespace_name = vspacename;

      if vspacenamecount = 0
      then
         out_result := -1002;
         out_msg := vspacename || '表空间不存在！ ';
         return;
      end if;

      veid := prmcustunitcode;
      vcount := 0;
      vyear := vdateyear + 1;
      --主分区名称
      vpartitionname := 'part' || prmcustunitcode;

      --所有分区表
      for c1_rec in c1_tabs
      loop
         vtablename := c1_rec.table_name;                        --分区表名称
         vsql := '';

         --如果是账本表，主分区命名part+记录数（子分区：主分区_sub+账本记录数，以万为单位
         if vtablename = 'base_customers'
         then
            --子分区名称
            vsubpartname := vpartitionname || '_sub' || i_subpartnum;

            --判断初始主分区是否存在
            select count (*)
              into vcount
              from user_tab_partitions
             where table_name = vtablename and partition_name = vpartitionname;

            if vcount = 0                 --创建账本表初始化主分区和子分区信息
            then
               out_result := -1003;
               out_msg :=
                     '初始化客户法人'
                  || prmcustunitcode
                  || '分区表'
                  || vtablename
                  || '的主分区'
                  || vpartitionname
                  || '信息失败！ ';
               vsql :=
                     'alter  table '
                  || vtablename
                  || ' add partition '
                  || vpartitionname
                  || ' values ('''
                  || prmcustunitcode
                  || ''')'
                  || ' (subpartition '
                  || vsubpartname
                  || ' values less than ('
                  || i_partnum
                  || ') tablespace  '
                  || vspacename
                  || ')';
            else
               out_result := -1003;
               out_msg :=
                     '初始化客户法人'
                  || prmcustunitcode
                  || '分区表'
                  || vtablename
                  || '的子分区'
                  || vsubpartname
                  || '信息失败！ ';

               --判断子分区是否存在
               select count (*)
                 into vcount
                 from user_tab_subpartitions
                where table_name = vtablename
                  and subpartition_name = vsubpartname;

               if vcount = 0                  --添加客户法人账本表第一个子分区
               then
                  vsql :=
                        'alter  table '
                     || vtablename
                     || ' modify partition '
                     || vpartitionname
                     || ' add subpartition '
                     || vsubpartname
                     || ' values less than ('
                     || i_partnum
                     || ') tablespace '
                     || vspacename
                     || '';
               end if;
            end if;
         else                                   --交易记录表 时间范围+客户代码
            --子分区名称
            vsubpartname := vpartitionname || '_sub' || vdateyear;

            --判断初始主分区是否存在
            select count (*)
              into vcount
              from user_tab_partitions
             where table_name = vtablename and partition_name = vpartitionname;

            if vcount = 0                 --创建账本表初始化主分区和子分区信息
            then
               out_result := -1004;
               out_msg :=
                     '初始化客户法人'
                  || prmcustunitcode
                  || '分区表'
                  || vtablename
                  || '的主分区'
                  || vpartitionname
                  || '信息失败！ ';
               vsql :=
                     'alter  table '
                  || vtablename
                  || ' add partition '
                  || vpartitionname
                  || ' values ('''
                  || prmcustunitcode
                  || ''')'
                  || ' (subpartition '
                  || vsubpartname
                  || ' values less than(to_date('''
                  || vyear
                  || '-01-01'',''yyyy-mm-dd'')) tablespace '
                  || vspacename
                  || '';
            else
               out_result := -1004;
               out_msg :=
                     '初始化客户法人'
                  || prmcustunitcode
                  || '分区表'
                  || vtablename
                  || '的子分区'
                  || vsubpartname
                  || '信息失败！ ';

               --判断子分区是否存在
               select count (*)
                 into vcount
                 from user_tab_subpartitions
                where table_name = vtablename
                  and subpartition_name = vsubpartname;

               if vcount = 0                  --添加客户法人账本表第一个子分区
               then
                  vsql :=
                        'alter  table '
                     || vtablename
                     || ' modify partition '
                     || vpartitionname
                     || ' add subpartition '
                     || vsubpartname
                     || ' values less than(to_date('''
                     || vyear
                     || '-01-01'',''yyyy-mm-dd'')) tablespace '
                     || vspacename
                     || '';
               end if;
            end if;
         end if;

         if vsql is not null
         then
            execute immediate vsql;
         end if;
      -- commit;  该过程属于内部调用过程，在外层过程中执行提交和回滚
      end loop;

      out_result := 100;
      out_msg := '初始化分区处理成功！';
   exception
      when others
      then
         --rollback;
         out_result := out_result;
         out_msg := out_msg || to_char (sqlcode) || '_+_' || sqlerrm;
   end;

   --创建不同法人客户的分区信息,针对orcle10g
   procedure add_parttenbycustunitcode (
      prmcustunitcode   in       varchar2,                          --客户代码
      prmyear           in       varchar2,                                --年
      out_result        out      number,                      --执行结果返回值
      out_msg           out      varchar2                   --执行结果输出信息
   )
   is
      /*
       ----------------------------------------------------------------------------
       --存储过程：add_parttenbycustunitcode
       --作　　者：周晓娜
       --时　　间：2013-04-12
       --说　　明：根据客户代码创建该客户法人对应的分区信息(适用于range-list分区形式)
                   账本表：
                   主分区名称规则：part+分区记录数 (part200000)
                   子分区命令规则： 主分区_sub20 (part08600000000_sub20)
                   交易记录表：
                   主分区名称规则：part+年份 (part2013)
                   子分区命令规则： 主分区_sub+年份 (part08600000000_sub2013)
       --输入参数：
       --输出参数：
       --    out_result: 100 成功

       -- 使用：添加客户法人时调用(10g使用该业务规则)
       -- 备注：oracle10g目前支持的复合分区 range-list range-hash
                11g 支持的复合分区：range-range range-list range-hash  list-list list-range list-hash


       --说明：添加客户法人时，分区表是建立好的，每个分区表对应的主分区理论上是创建好的，
               对主分区进行判断，没有存在根据规则创建，存在则在已经建立好的分区下面创建对应的子分区
       --------------------------------------------------------------------------
                */
      vcount            integer;
      vtablename        varchar2 (50);
      vpartitionname    varchar2 (50);
      vsubpartname      varchar2 (50);
      vdateyear         number;
      vyear             number;
      vsql              varchar2 (500);
      veid              varchar2 (12);
      vspacename        varchar2 (50);
      vspacenameyear    integer;
      vspacenamecount   integer;
      vsysstartyear     integer;
      vmaxspace         integer;
      vminspace         integer;
      i_subpartnum      number;           --账户号范围（以20w为一个范围节点）
      i_partnum         number;

      --获取所有分区表名称
      cursor c1_tabs
      is
         select   table_name
             from user_part_tables
            where instr (table_name, 'bin$') = 0
         order by table_name;
   begin
      out_result := -1001;
      out_msg := '初始化信息失败！ ';
      vspacename := 'tbs_par1';                          --指定创建分区表空间
      vdateyear := 1900;
      --2017-12-27 修改创建客户法人base_customers分区创建名称 
      --默认分区200000 子分区名称20
      i_subpartnum := 20;                                          --赋初始值
      i_partnum := 200000;

      --获取年份值
      select to_number (extract (year from to_date (prmyear, 'yyyy-mm-dd')))
        into vdateyear
        from dual;

      --判断表空间是否存在
      select count (*)
        into vspacenamecount
        from user_free_space
       where tablespace_name = vspacename;

      if vspacenamecount = 0
      then
         out_result := -1002;
         out_msg := vspacename || '表空间不存在！ ';
         return;
      end if;

      veid := prmcustunitcode;
      vcount := 0;
      vyear := vdateyear + 1;
      --主分区名称
      vpartitionname := 'part' || vdateyear;

      --所有分区表
      for c1_rec in c1_tabs
      loop
         vtablename := c1_rec.table_name;                        --分区表名称
         vsql := '';

         --如果是账本表，主分区命名part+记录数（子分区：主分区_sub+账本记录数，以万为单位
         if vtablename = 'base_customers'
         then
            --分区名称
            vpartitionname := 'part' || i_partnum;
            --子分区名称
            vsubpartname :=
                          'part' || prmcustunitcode || '_sub' || i_subpartnum;
            out_result := -1003;
            out_msg :=
                  '初始化客户法人'
               || prmcustunitcode
               || '分区表'
               || vtablename
               || '的主分区'
               || vpartitionname
               || '信息失败！ ';

            --判断初始主分区是否存在
            select count (*)
              into vcount
              from user_tab_partitions
             where table_name = vtablename and partition_name = vpartitionname;

            if vcount = 0                 --创建账本表初始化主分区和子分区信息
            then
               vsql :=
                     'alter  table '
                  || vtablename
                  || ' add partition '
                  || vpartitionname
                  || ' values less than('
                  || i_partnum
                  || ')'
                  || ' (subpartition '
                  || vsubpartname
                  || ' values  ('''
                  || prmcustunitcode
                  || ''') tablespace  '
                  || vspacename
                  || ')';
            else
               out_result := -1003;
               out_msg :=
                     '初始化客户法人'
                  || prmcustunitcode
                  || '分区表'
                  || vtablename
                  || '的子分区'
                  || vsubpartname
                  || '信息失败！ ';

               --判断第一个子分区是否存在
               select count (*)
                 into vcount
                 from user_tab_subpartitions
                where table_name = vtablename
                  and subpartition_name = vsubpartname;

               if vcount = 0                  --添加客户法人账本表第一个子分区
               then
                  vsql :=
                        'alter  table '
                     || vtablename
                     || ' modify partition '
                     || vpartitionname
                     || ' add subpartition '
                     || vsubpartname
                     || ' values ('''
                     || prmcustunitcode
                     || ''') tablespace '
                     || vspacename
                     || '';
               end if;
            end if;
         else                                   --交易记录表 时间范围+客户代码
            --主分区名称
            vpartitionname := 'part' || vdateyear;
            --子分区名称
            vsubpartname := 'part' || prmcustunitcode || '_sub' || vdateyear;
            out_result := -1004;
            out_msg :=
                  '初始化客户法人'
               || prmcustunitcode
               || '分区表'
               || vtablename
               || '的主分区'
               || vpartitionname
               || '信息失败！ ';

            --判断初始主分区是否存在
            select count (*)
              into vcount
              from user_tab_partitions
             where table_name = vtablename and partition_name = vpartitionname;

            if vcount = 0                 --创建账本表初始化主分区和子分区信息
            then
               vsql :=
                     ' alter  table '
                  || vtablename
                  || ' add partition '
                  || vpartitionname
                  || ' values less than(to_date('''
                  || vyear
                  || '-01-01'',''yyyy-mm-dd''))'
                  || '( subpartition '
                  || vsubpartname
                  || ' values  ('''
                  || prmcustunitcode
                  || ''') tablespace  '
                  || vspacename
                  || ')';
            else
               out_result := -1004;
               out_msg :=
                     '初始化客户法人'
                  || prmcustunitcode
                  || '分区表'
                  || vtablename
                  || '的子分区'
                  || vsubpartname
                  || '信息失败！ ';

               --判断子分区是否存在
               select count (*)
                 into vcount
                 from user_tab_subpartitions
                where table_name = vtablename
                  and subpartition_name = vsubpartname;

               if vcount = 0                  --添加客户法人账本表第一个子分区
               then
                  vsql :=
                        'alter  table '
                     || vtablename
                     || ' modify partition '
                     || vpartitionname
                     || ' add subpartition '
                     || vsubpartname
                     || ' values ('''
                     || prmcustunitcode
                     || ''') tablespace '
                     || vspacename
                     || '';
               end if;
            end if;
         end if;

         if vsql is not null
         then
            execute immediate vsql;
         end if;
      -- commit;  该过程属于内部调用过程，在外层过程中执行提交和回滚
      end loop;

      out_result := 100;
      out_msg := '初始化分区处理成功！';
   exception
      when others
      then
         --rollback;
         out_result := out_result;
         out_msg := out_msg || to_char (sqlcode) || '_+_' || sqlerrm;
   end;
end;

/
create or replace package pkg_rec_alipay_record is

  --支付宝返回交易失败的数据入库
  procedure proc_upload_alipay_record(prmaccountid        in varchar2, --支付宝记录唯一标志
                                      prmappid            in varchar2, --应用id
                                      prmposcode          in number, --设备运营唯一编号
                                      prmbusid            in number, --车辆id
                                      prmbuslineid        in number, --线路id
                                      prmopdt             in date, --交易时间
                                      prmtraderecno       in number, --pos交易流水号（交易记录）
                                      prmdriverid         in number, --司机id
                                      prmopfare           in number, --交易金额
                                      prmoddfare          in number, --卡余额
                                      prmtradetype        in number, --交易类型
                                      prmcollectdt        in date, --采集时间
                                      prmuploaddate       in date, --上传时间
                                      prmaccountdate      in date, --清算时间
                                      prmmaincardtype     in number, --主卡类型
                                      prmcardtype         in number, --卡类型
                                      prmextentvalue      in varchar2, --扩展字段
                                      prmflag             in number, --处理标志
                                      prmcustomerunitcode in varchar2, --客户编号
                                      prmresponsecode     in varchar2, --应答码
                                      prmresponsemessage  in varchar2, --应答信息
                                      prmnexttime         in varchar2, --下次执行时间
                                      out_result          out number,
                                      out_msg             out varchar2);

  --支付宝返回交易成功的数据入库
  procedure proc_alipay_record_result(prmcstaccfc         in number, --流水号
                                      prmaccountid        in varchar2, --支付宝记录唯一标志
                                      prmappid            in varchar2, --应用id
                                      prmposcode          in number, --设备运营唯一编号
                                      prmbusid            in number, --车辆id
                                      prmbuslineid        in number, --线路id
                                      prmopdt             in date, --交易时间
                                      prmtraderecno       in number, --pos交易流水号（交易记录）
                                      prmdriverid         in number, --司机id
                                      prmopfare           in number, --交易金额
                                      prmoddfare          in number, --卡余额
                                      prmtradetype        in number, --交易类型
                                      prmcollectdt        in date, --采集时间
                                      prmuploaddate       in date, --上传时间
                                      prmaccountdate      in date, --清算时间
                                      prmmaincardtype     in number, --主卡类型
                                      prmcardtype         in number, --卡类型
                                      prmextentvalue      in varchar2, --扩展字段
                                      prmflag             in number, --处理标志
                                      prmcustomerunitcode in varchar2, --客户编号
                                      prmresponsecode     in out varchar2, --应答码
                                      prmresponsemessage  in out varchar2, --应答信息
                                      out_result          out number,
                                      out_msg             out varchar2);

end pkg_rec_alipay_record;
/
create or replace package body pkg_rec_alipay_record is
  --支付宝返回交易失败的数据入库
  procedure proc_upload_alipay_record(prmaccountid        in varchar2, --支付宝记录唯一标志
                                      prmappid            in varchar2, --应用id
                                      prmposcode          in number, --设备运营唯一编号
                                      prmbusid            in number, --车辆id
                                      prmbuslineid        in number, --线路id
                                      prmopdt             in date, --交易时间
                                      prmtraderecno       in number, --pos交易流水号（交易记录）
                                      prmdriverid         in number, --司机id
                                      prmopfare           in number, --交易金额
                                      prmoddfare          in number, --卡余额
                                      prmtradetype        in number, --交易类型
                                      prmcollectdt        in date, --采集时间
                                      prmuploaddate       in date, --上传时间
                                      prmaccountdate      in date, --清算时间
                                      prmmaincardtype     in number, --主卡类型
                                      prmcardtype         in number, --卡类型
                                      prmextentvalue      in varchar2, --扩展字段
                                      prmflag             in number, --处理标志
                                      prmcustomerunitcode in varchar2, --客户编号
                                      prmresponsecode     in varchar2, --应答码
                                      prmresponsemessage  in varchar2, --应答信息
                                      prmnexttime         in varchar2, --下次执行时间
                                      out_result          out number,
                                      out_msg             out varchar2) as
    /*
    --------------------------------------------------------------------------
    --存储过程：proc_upload_alipay_record
    --说　　明：支付宝返回交易失败的数据入库
    --输入参数：
    --输出参数：
    --返回值和返回信息定义：
    --100 ：记录上传成功，帐目统计成功， 其他失败
    --------------------------------------------------------------------------
    */
    i_count      integer;
    i_badrectype integer; --坏账类型
    n_acccode    integer;
    v_accdscrp   varchar2(20);
    v_dptcode    varchar2(20);
    n_busid      integer;
    n_lineid     integer;
    custom_exception exception; --自定义错误
  begin
    i_count      := 0;
    i_badrectype := 0;
    n_busid      := prmbusid;
    n_lineid     := prmbuslineid;
    n_acccode    := 207; --科目赋值
    ------------------------验证租户信息是否合法------------------------
    out_result := -1001;
    out_msg    := '验证租户信息是否合法失败';
  
    select count(a.id)
      into i_count
      from base_legal_person a
     where a.customerunitcode = prmcustomerunitcode;
  
    if i_count <> 1 then
      out_result := 101;
      out_msg    := '客户法人信息不合法！customerunitcode：' ||
                    to_char(prmcustomerunitcode);
      return;
    end if;
  
    out_result := -1002;
    out_msg    := '获取科目名称信息失败';
  
    select nvl(max(a.accdscrp), '未知')
      into v_accdscrp
      from base_acc_type a
     where a.acccode = n_acccode;
  
    -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
    out_result := -1003;
    out_msg    := '验证终端,车辆，线路，部门是信息失败';
    v_dptcode  := '001';
    proc_validatetermbusline(prmposcode,
                             prmcustomerunitcode,
                             n_busid,
                             n_lineid,
                             v_dptcode,
                             i_badrectype,
                             out_result,
                             out_msg);
  
    --------------------------查询原始消费----------------------------
    out_result := -1004;
    out_msg    := '查询原始消费记录失败！';
  
    select count(*)
      into i_count
      from rec_alipay_record a
     where a.accountid = prmaccountid;
  
    ------------------------修改原始消费记录---------------------
    out_result := -1005;
    out_msg    := '消费记录处理失败！';
  
    if i_count > 0 then
      update rec_alipay_record a
         set a.accountdate     = prmaccountdate,
             a.responsecode    = prmresponsecode,
             a.responsemessage = prmresponsemessage,
             a.nexttime        = prmnexttime
       where a.accountid = prmaccountid;
    else
      insert into rec_alipay_record
        (accountid,
         appid,
         poscode,
         busid,
         buslineid,
         linedept,
         opdt,
         traderecno,
         driverid,
         opfare,
         oddfare,
         tradetype,
         acccode,
         dscrp,
         collectdt,
         uploaddate,
         accountdate,
         maincardtype,
         cardtype,
         extentvalue,
         flag,
         customerunitcode,
         responsecode,
         responsemessage,
         nexttime)
      values
        (prmaccountid,
         prmappid,
         prmposcode,
         n_busid,
         n_lineid,
         v_dptcode,
         prmopdt,
         prmtraderecno,
         prmdriverid,
         prmopfare,
         prmoddfare,
         prmtradetype,
         n_acccode,
         v_accdscrp,
         prmcollectdt,
         prmuploaddate,
         prmaccountdate,
         prmmaincardtype,
         prmcardtype,
         prmextentvalue,
         prmflag,
         prmcustomerunitcode,
         prmresponsecode,
         prmresponsemessage,
         prmnexttime);
    end if;
  
    commit;
    out_result := 100;
    out_msg    := '处理成功';
    return;
  exception
    when custom_exception -----先处理自定义异常
     then
      rollback;
    
      if out_result > 0 then
        out_result := out_result * -1;
      else
        out_result := out_result;
      end if;
    when others then
      rollback;
      out_result := -1000;
      out_msg    := '记录上传失败，处理[' || out_msg || ']异常，具体原因为：' || sqlerrm;
  end;

  --支付宝返回交易成功的数据入库
  procedure proc_alipay_record_result(prmcstaccfc         in number, --流水号
                                      prmaccountid        in varchar2, --支付宝记录唯一标志
                                      prmappid            in varchar2, --应用id
                                      prmposcode          in number, --设备运营唯一编号
                                      prmbusid            in number, --车辆id
                                      prmbuslineid        in number, --线路id
                                      prmopdt             in date, --交易时间
                                      prmtraderecno       in number, --pos交易流水号（交易记录）
                                      prmdriverid         in number, --司机id
                                      prmopfare           in number, --交易金额
                                      prmoddfare          in number, --卡余额
                                      prmtradetype        in number, --交易类型
                                      prmcollectdt        in date, --采集时间
                                      prmuploaddate       in date, --上传时间
                                      prmaccountdate      in date, --清算时间
                                      prmmaincardtype     in number, --主卡类型
                                      prmcardtype         in number, --卡类型
                                      prmextentvalue      in varchar2, --扩展字段
                                      prmflag             in number, --处理标志
                                      prmcustomerunitcode in varchar2, --客户编号
                                      prmresponsecode     in out varchar2, --应答码
                                      prmresponsemessage  in out varchar2, --应答信息
                                      out_result          out number,
                                      out_msg             out varchar2) as
    /*
    --------------------------------------------------------------------------
    --存储过程：proc_upload_alipay_record
    --说　　明：支付宝返回交易成功的数据入库
    --输入参数：
    --输出参数：
    --返回值和返回信息定义：
    --100 ：记录上传成功，帐目统计成功， 其他失败
    --------------------------------------------------------------------------
    */
    i_count      integer;
    i_badrectype integer; --坏账类型
    n_acccode    integer;
    v_accdscrp   varchar2(20);
    v_dptcode    varchar2(20);
    n_busid      integer;
    n_lineid     integer;
    custom_exception exception; --自定义错误
  begin
    i_count      := 0;
    i_badrectype := 0;
    n_busid      := prmbusid;
    n_lineid     := prmbuslineid;
  
    ------------------------检查是否正在数据结算-------------------------
    out_result := -1001;
    out_msg    := '检查当前是否正在结算';
  
    proc_validateisbalance(out_result, out_msg);
  
    if (out_result <> 0) --0当前系统未进行结算
     then
      out_result := 101;
      out_msg    := '判断账目结算状态异常，' || out_msg;
      return;
    end if;
  
    ------------------------先验证客户信息是否合法------------------------
    out_result := -1002;
    out_msg    := '检查客户法人信息是否合法';
  
    select count(a.id)
      into i_count
      from base_legal_person a
     where a.customerunitcode = prmcustomerunitcode;
  
    if i_count <> 1 then
      out_result := 101;
      out_msg    := '客户法人信息不合法！customerunitcode：' ||
                    to_char(prmcustomerunitcode);
    
      return;
    end if;
  
    ----------------------------查询科目-------------------------
    out_result := -1003;
    out_msg    := '获取科目描述信息失败！';
    n_acccode  := 207;
  
    select nvl(max(a.accdscrp), '未知')
      into v_accdscrp
      from base_acc_type a
     where a.acccode = n_acccode;
  
    -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
    out_result := -1004;
    out_msg    := '验证终端,车辆，线路，部门信息失败';
    v_dptcode  := '001';
    proc_validatetermbusline(prmposcode,
                             prmcustomerunitcode,
                             n_busid,
                             n_lineid,
                             v_dptcode,
                             i_badrectype,
                             out_result,
                             out_msg);
  
    if (out_result <> 100) then
      prmresponsecode    := out_result;
      prmresponsemessage := out_msg;
    end if;
  
    --------------------------查询成功表中是否已存在----------------------------
    out_result := -1005;
    out_msg    := '消费记录在成功表中已存在！';
  
    select count(*)
      into i_count
      from rec_alipay_record_success a
     where a.accountid = prmaccountid;
  
    if i_count > 0 then
      out_result := 100;
      return;
    end if;
  
    ------------------------处理数据---------------------
    out_result := -1006;
    out_msg    := '处理消费记录失败！';
  
    insert into rec_alipay_record_success
      (accountid,
       appid,
       poscode,
       busid,
       buslineid,
       linedept,
       opdt,
       traderecno,
       driverid,
       opfare,
       oddfare,
       tradetype,
       acccode,
       dscrp,
       collectdt,
       uploaddate,
       accountdate,
       maincardtype,
       cardtype,
       extentvalue,
       flag,
       customerunitcode,
       responsecode,
       responsemessage)
    values
      (prmaccountid,
       prmappid,
       prmposcode,
       n_busid,
       n_lineid,
       v_dptcode,
       prmopdt,
       prmtraderecno,
       prmdriverid,
       prmopfare,
       prmoddfare,
       prmtradetype,
       n_acccode,
       v_accdscrp,
       prmcollectdt,
       prmuploaddate,
       prmaccountdate,
       prmmaincardtype,
       prmcardtype,
       prmextentvalue,
       prmflag,
       prmcustomerunitcode,
       prmresponsecode,
       prmresponsemessage);
  
    delete from rec_alipay_record a where a.cstaccfc = prmcstaccfc; --此次数据为第二次处理时，需将原始表中数据删除
  
    out_result := -1007;
    out_msg    := '及时统计失败！';
  
    if prmresponsecode = '10000' then
      --如果车辆、线路、部门没有查到，数据入统计帐的话会有问题
      pkg_st_payment.proc_custdataaccount_online(prmopdt,
                                                 prmopfare,
                                                 n_acccode,
                                                 0,
                                                 2,
                                                 prmcardtype,
                                                 prmdriverid,
                                                 prmposcode,
                                                 prmposcode, --prmsamcardno,
                                                 n_lineid,
                                                 v_dptcode,
                                                 n_busid,
                                                 1, --1, --钱包类型 电子钱包
                                                 0, --0正常 1回滚统计操作
                                                 prmcustomerunitcode,
                                                 out_msg,
                                                 out_result,
                                                 prmmaincardtype);--2017-12-16 新增主卡类型
    
      if out_result <> 100 then
        out_result := 101;
        return;
      end if;
    end if;
  
    commit;
    out_result := 100;
    out_msg    := '处理成功';
    return;
  exception
    when custom_exception -----先处理自定义异常
     then
      rollback;
    
      if out_result > 0 then
        out_result := out_result * -1;
      else
        out_result := out_result;
      end if;
    when others then
      rollback;
      out_result := -1000;
      out_msg    := '记录上传失败，处理[' || out_msg || ']异常，具体原因为：' || sqlerrm;
  end;
end pkg_rec_alipay_record;
/
create or replace package pkg_rec_bank
as
    procedure verget (out_msg out varchar2, out_result out integer);

    procedure cardstatusget (prmcustomerid         in     integer,
                             prmasn                in     varchar2,
                             prmcardsn             in     integer,
                             prmcustomerunitcode   in     varchar2, --客户代码
                             out_msg                  out varchar2,
                             out_result               out integer);

    procedure bankqyzbbrequestanddel (prmacccode        in     varchar2,
                                      prmfootdthis      in     integer,
                                      prmfootdt         in     integer,
                                      prmcheckoddfare   in     number,
                                      prmopfare         in     number,
                                      prmcheckdayhas    in     integer,
                                      out_msg              out varchar2,
                                      out_result           out integer);

    procedure bankqyqybrequestanddel (prmacccode            in     integer,
                                      prmfootdthis          in     integer,
                                      prmfootdt             in     integer,
                                      prmreqpch             in     integer,
                                      prmcheckoddfare       in     number,
                                      prmopfare             in     number,
                                      prmcheckdayorpch      in     integer,
                                      prmcheckcustomer      in     integer,
                                      prmcustomerunitcode   in     varchar2, --客户代码
                                      out_msg                  out varchar2,
                                      out_result               out integer);

    procedure bankrecforfirst (prmtype               in     integer,
                               prmzbbqy              in     integer,
                               prmcustomerid         in     integer,
                               prmasn                in out varchar2,
                               prmcardsn             in out integer,
                               prmoutid              in out varchar2,
                               prmsumfare            in     number,
                               prmoddfare            in     number,
                               prmopcount            in     integer,
                               prmcheckfare          in     integer,
                               prmgetqyfare          in     integer,
                               prmopfare             in out number,
                               prmtermid             in     integer,
                               prmtermtradeno        in     varchar2,
                               prmbankrecno          in     number,
                               prmacccode            in     integer,
                               prmbankcardno         in out varchar2,
                               prmcheckfootdt        in     integer,
                               prmfootdt             in     integer,
                               prmdaycount           in     number,
                               prmdayfare            in     number,
                               prmtermserverid       in     integer,
                               prmqctype             in     integer,
                               prmbzinfo             in     varchar2,
                               prmcustomerunitcode   in     varchar2, --客户代码
                               out_msg                  out varchar2,
                               out_result               out integer);

    procedure bankrecforsecond (prmtype               in     integer,
                                prmcustomerid         in     integer,
                                prmasn                in out varchar2,
                                prmcardsn             in out integer, --持卡序号
                                prmsumfare            in     number,
                                prmoddfare            in     number,
                                prmsubsidyoddfare     in     number,
                                prmoddfarepre         in     number,
                                prmopcount            in     integer,
                                prmopfare             in     number,
                                prmsucced             in     integer,
                                prmbankrecno          in     number,
                                prmacccode            in     integer,
                                prmbankcardno         in     varchar2,
                                prmbanktradeno        in     varchar2,
                                prmbankret            in     varchar2,
                                prmbankretdesc        in     varchar2,
                                prmfootdt             in     integer,
                                prmtermid             in     integer,
                                prmtermtradeno        in     varchar2,
                                prmtermxkzt           in     integer,
                                prmcustomerunitcode   in     varchar2, --客户代码
                                out_back                 out integer,
                                out_msg                  out varchar2,
                                out_result               out integer,
                                prmsaveopcount        in     integer, --充值计数
                                prmcardtypedetailid   in     integer, --卡小类
                                prmtradecardtype      in     integer, --卡种类：1 m1卡，2 cpu卡
                                prmposcode            in     number, --终端唯一编号
                                prmpsamcardno         in     number --psam卡号
                                                                   );

    procedure bankbindqyget (prmtype               in     integer,
                             prmchecklx            in     integer,
                             prmcustomerid         in     integer,
                             prmasn                in     varchar2,
                             prmcardsn             in     integer,
                             prmzbbqy              in     integer,
                             prmacccode            in     varchar2,
                             prmqyjbxx                out integer,
                             prmcustoutid          in out varchar2,
                             prmbankcarno          in out varchar2,
                             prmqyzjhm                out varchar2,
                             prmqyrxm                 out varchar2,
                             prmbindlx                out integer,
                             prmqylx                  out integer,
                             prmqyopfare              out number,
                             prmqyoddfare             out number,
                             prmqsrq                  out integer,
                             prmjzrq                  out integer,
                             prmcustomerunitcode   in     varchar2,
                             prmbankname              out varchar2,
                             out_msg                  out varchar2,
                             out_result               out integer);

    procedure bank_request_electr_cash (
        --客户基本信息-------------
        prmcustomerid          in     number,                       --客户编号
        prmcardno              in     number,                           --卡号
        prmcardsn              in     number,                       --持卡序号
        prmelectrsaveopcount   in     number,             --申请前充值交易计数
        prmelectropcount       in     number,                       --消费计数
        prmcardkind            in     number,                         --卡类型
        prmcardtypedetailid    in     number,                     --卡类型小类
        prmopdt                in     varchar2,                     --操作时间
        --客户金额信息-------------
        prmsumelectraddfare    in     number,                         --卡总额
        prmelectroddfare       in     number,             --电子钱包充值前余额
        prmelectrdummyopfare   in     number,                       --虚充金额
        prmelectropfare        in     number,               --电子钱包实充金额
        --终端交易信息-------------
        prmposcode             in     number,                       --消费终端
        prmpsamcardno          in     number,                       --psam卡号
        prmempid               in     number,                     --充值员编号
        prmcardasn             in     number,
        --返回值-------------------
        prmplanid              in out number,                     --领款计划id
        prmcustomerunitcode    in     varchar2,
        out_result                out number,
        out_msg                   out varchar2);

    procedure bank_request_vicecard_cash (
        --客户基本信息-------------
        prmcustomerid         in     number,                        --客户编号
        prmcardno             in     number,                            --卡号
        prmcardsn             in     number,                        --持卡序号
        prmvicesaveopcount    in     number,              --申请前充值交易计数
        prmviceopcount        in     number,                        --消费计数
        prmcardkind           in     number,                          --卡类型
        prmcardtypedetailid   in     number,                      --卡类型小类
        prmopdt               in     varchar2,                      --操作时间
        --客户金额信息-------------
        prmsumviceaddfare     in     number,                          --卡总额
        prmviceoddfare        in     number,              --次卡钱包消费后余额
        prmvicedummyopfare    in     number,                        --虚充金额
        prmviceopfare         in     number,                --次卡钱包实充金额
        --终端交易信息-------------
        prmposcode            in     number,                        --消费终端
        prmpsamcardno         in     number,                        --psam卡号
        prmempid              in     number,                      --充值员编号
        prmcardasn            in     number,
        --返回值-------------------
        prmplanid             in out number,                      --领款计划id
        prmcustomerunitcode   in     varchar2,
        --根据卡结构改动，表结构新增字段
        prmlimittimes         in     number,                --每月消费限制次数
        prmmonthnum           in     number,                        --充值月数
        prmvalidtimestart     in     varchar2,                      --有效起日
        prmvalidtimeend       in     varchar2,                      --有效止日
        out_result               out number,
        out_msg                  out varchar2);

     procedure bank_request_month_cash (
      --客户基本信息-------------
      prmcustomerid         in       number,                       --客户编号
      prmcardno             in       number,                           --卡号
      prmcardsn             in       number,                       --持卡序号
      prmvicesaveopcount    in       number,             --申请前充值交易计数
      prmviceopcount        in       number,                       --消费计数
      prmcardkind           in       number,                         --卡类型
      prmcardtypedetailid   in       number,                     --卡类型小类
      prmopdt               in       varchar2,                     --操作时间
      --客户金额信息-------------
      prmsumviceaddfare     in       number,                         --卡总额
      prmviceoddfare        in       number,             --次卡钱包消费后余额
      prmvicedummyopfare    in       number,                       --虚充金额
      prmviceopfare         in       number,               --次卡钱包实充金额
      --终端交易信息-------------
      prmposcode            in       number,                       --消费终端
      prmpsamcardno         in       number,                       --psam卡号
      prmempid              in       number,                     --充值员编号
      prmcardasn            in       number,
      --返回值-------------------
      prmplanid             in out number,                      --领款计划id
      prmcustomerunitcode   in       varchar2,
      --根据卡结构改动，表结构新增字段
      prmlimittimes         in       number,               --每月消费限制次数
      prmmonthnum           in       number,                       --充值月数
      prmvalidtimestart     in       varchar2,                     --有效起日
      prmvalidtimeend       in       varchar2,                     --有效止日
      out_result            out      number,
      out_msg               out      varchar2
   );


    procedure bankfilelsdz (prmtype               in     integer,
                            prmzhxh               in     integer,
                            prmcustomerid         in out number,
                            prmasn                in out number,
                            prmcustoutid          in     varchar2,
                            prmcheckrecno         in     integer,
                            prmbankrecno          in     number,
                            prmacccode            in out varchar2,
                            prmbankcardno         in     varchar2,
                            prmfootdtlx           in     integer,
                            prmfootdt             in     integer,
                            prmopfare             in out number,
                            prmsucced             in     number,
                            prmbankret            in     varchar2,
                            prmbanktradeno        in     varchar2,
                            prmcustomerunitcode   in     varchar2,  --客户代码
                            out_back                 out integer,
                            out_msg                  out varchar2,
                            out_result               out integer,
                            out_cardsn               out integer)/*--------------------------------------------------------------------------
                                                                  存储过程：bankfilelsdz
                                                                  说　　明：普通圈存记录和银行对帐文件的交易流水对帐
                                                                  --------------------------------------------------
                                                                  初始返回值为处理失败
                                                                  prmtype =1 备用
                                                                  prmzhxh =1帐号序号有效  =2为学工号有效 =3和其它帐号和学工号都无效
                                                                  prmcheckrecno =1主键prmbankrecno有效  =2和其它主键prmbankrecno无效
                                                                  prmfootdtlx 本字段暂时不使用 =1不做处理,=2学校方的帐务日期,=3检查学校方的帐务日期
                                                                              --=6银行方的帐务日期 =7检查银行方的帐务日期
                                                                  bankdz =5学校单边帐,=6银行单边帐,=7对帐金额不一致,=8补帐记录,=9对帐成功记录
                                                                  out_result定义
                                                                   101 = ora_银行回应成功
                                                                  ---------------------------------------------------------------------------
                                                                  修改作者：朱鹏飞
                                                                  修改日期：2008-10-14
                                                                  修改原因：对账统计错误 现对账接口已经不需要再返回custmerid，acccode,opfare
                                                                              所以这些值传入的值不太改变，对修改传入值的地方注释
                                                                  ----------------------------------------------------------------------------
                                                                  修改标示：朱鹏飞 2008-11-20
                                                                  修改说明：对账成功后更新统计日期
                                                                  修改标示：朱鹏飞 2008-12-05
                                                                  修改说明：对账成功后，更新对账交易描述“对账成功”
                                                                  -------------------------------------------------
                                                                  --修改标示：朱鹏飞 2009-01-07
                                                                  --修改说明：见正文中说明，修改outid为sn
                                                                 ----------------------------------------------------------------------
                                                                 --修改标示：周晓娜 2010-01-28（同步07版上朱鹏飞修改的升级内容）
                                                                 --修改说明：1、修改即时统计时班次为银行账务日期
                                                                 --2、修改recbankrec表coudate为全日期格式，包含时分秒
                                                                 -----------------------------------------------------------------------
                                                                 --修改标示：梁小凯2010-12-15
                                                                 --修改说明：增加支持多个银行
                                                              ---------------------------------------------------------------------------
                                                              */
                                                                 ;

    procedure bankfilelsdzsumlog (prmtype               in     integer,
                                  prmfootdthis          in     integer,
                                  prmfootdt             in     integer,
                                  prmacccode            in     integer,
                                  prmacccodedesc        in     varchar2,
                                  prmbanksumcount       in     integer,
                                  prmbanksumfare        in     number,
                                  prmdzsumcount         in     integer,
                                  prmdzsumfare          in     number,
                                  prmcustomerunitcode   in     varchar2, --客户代码
                                  prmorgsumcount           out integer,
                                  prmorgsumfare            out number,
                                  prmallsumcount           out integer,
                                  prmallsumfare            out number,
                                  prmfixsumcount           out integer,
                                  prmfixsumfare            out number,
                                  prmdescript              out varchar2,
                                  out_msg                  out varchar2,
                                  out_result               out integer);

    procedure bankbindqychange (prmtype               in     integer,
                                prmchecklx            in     integer,
                                prmcustomerid         in     integer,
                                prmasn                in     varchar2,
                                prmcardsn             in     integer,
                                prmzbbqy              in     integer,
                                prmacccode            in     varchar2,
                                prmcustoutid          in out varchar2,
                                prmbankcardno         in     varchar2,
                                prmcheckzjhm          in     integer,
                                prmqyzjhm             in     varchar2,
                                prmbindlx                    integer,
                                prmqylx               in     integer,
                                prmqyopfare           in     number,
                                prmqyoddfare          in     number,
                                prmqsrq                      integer,
                                prmjzrq               in     integer,
                                prmqypass             in     varchar2,
                                prmqytype             in     integer,
                                prmbzinfo             in     varchar2,
                                prmcustomerunitcode   in     varchar2, --客户代码
                                out_msg                  out varchar2,
                                out_result               out integer);
end;


 
 
 
 
/
create or replace package body pkg_rec_bank
as
    --得到系统的服务程序版本号
    procedure verget (out_msg out varchar2, out_result out integer)
    is
    /*
    --------------------------------------------------------------------------

            --存储过程：verget
            --作　　者：党杰
            --时　　间：2011-11-5
            --说    明：返回结果100为成功，与圈存代码一致。
    --------------------------------------------------------------------------
    */
    begin
        out_msg := 'ver:capposserver2.00.0010[2007.07.10-2007.12.05]';
        out_result := 100;
    end;

    --取当前卡的卡状态
    procedure cardstatusget (prmcustomerid         in     integer,
                             prmasn                in     varchar2,
                             prmcardsn             in     integer,
                             prmcustomerunitcode   in     varchar2, --客户代码
                             out_msg                  out varchar2,
                             out_result               out integer)
    is
        /*
        --------------------------------------------------------------------------

                --存储过程：cardstatusget
                --作　　者：党杰
                --时　　间：2011-11-5
                --说    明：城市一卡通没有卡号，用asn代替卡号。
        --------------------------------------------------------------------------
                --修改标示：李政
                --时　　间：2013-10-28
                --修改说明：增加客户代码  prmcustomerunitcode
       ---------------------------------------------------------------------------
        */
        varrow      integer;
        varasn      varchar2 (30);
        varcardsn   integer;
        varstatus   integer;
    begin
        --初始返回值为处理失败
        out_result := 31;
        out_msg := '状态异常卡';

        --取值并验卡
        select nvl (status, 0), nvl (asn, 0), nvl (cardsn, 0)
          into varstatus, varasn, varcardsn
          from base_customers
         where customerid = prmcustomerid
               and customerunitcode = prmcustomerunitcode;

        if varasn != prmasn or varcardsn != prmcardsn
        then
            out_result := 4;
            out_msg := 'ora_卡库不一致卡';
        elsif varstatus = 1
        then
            out_result := 0;
            out_msg := 'ora_正常卡';
        elsif varstatus = 3
        then
            out_result := 1;
            out_msg := 'ora_挂失卡';
        elsif varstatus = 99
        then
            out_result := 3;
            out_msg := 'ora_未发卡';
        else
            out_result := 3;
            out_msg := 'ora_状态异常卡';
        end if;

        return;
    exception
        when no_data_found
        then
            out_result := 5;
            out_msg := 'ora_帐外卡';
            return;
        when others
        then
            out_result := 34;
            out_msg := 'ora_帐外卡' || sqlerrm;
    end;

    --清除指定帐务日期以前的历史数据,检索账本表内所有符合条件的用户并生成申请数据
    procedure bankqyzbbrequestanddel (prmacccode        in     varchar2,
                                      prmfootdthis      in     integer,
                                      prmfootdt         in     integer,
                                      prmcheckoddfare   in     number,
                                      prmopfare         in     number,
                                      prmcheckdayhas    in     integer,
                                      out_msg              out varchar2,
                                      out_result           out integer)
    is
        varrow          integer;
        varcustomerid   integer;
        varcustoutid    varchar2 (18);
        varbankcardno   varchar2 (20);
        varsumfare      number (10, 2);
        varoddfare      number (10, 2);
        varopcount      number (6);
        varcardtype     number (3);
        varqyacccode    varchar2 (10);
        varqylx         number (3);
        varqyoddfare    number (10, 2);
        varqyopfare     number (10, 2);
        varbankrecno    integer;
        varfootdt       number (14);                             --sql专用变量
    begin
        --------------------------------------------------------------------------
        --prmcheckdayhas =1限制当天交易只允许一次,=2和其它当天交易允许多次
        --初始返回值为处理失败
        out_result := 31;
        out_msg := 'ora_处理失败';
        return;
    --非批量圈存直接返回
    --------------------------------------------------------------------------
    --检查参数的合法性
    --其它后期再补
    end;

    procedure bankqyqybrequestanddel (prmacccode            in     integer,
                                      prmfootdthis          in     integer,
                                      prmfootdt             in     integer,
                                      prmreqpch             in     integer,
                                      prmcheckoddfare       in     number,
                                      prmopfare             in     number,
                                      prmcheckdayorpch      in     integer,
                                      prmcheckcustomer      in     integer,
                                      prmcustomerunitcode   in     varchar2, --客户代码
                                      out_msg                  out varchar2,
                                      out_result               out integer)
    is
        /*
          --------------------------------------------------------------------------
                  --存储过程：cardstatusget
                  --作　　者：党杰
                  --时　　间：2011-11-5
                  --说    明：此过程有问题，需要调试、确认
          --------------------------------------------------------------------------
                 --修改标示：李政
                 --时　　间：2013-10-28
                 --修改说明：增加客户代码  prmcustomerunitcode
          ---------------------------------------------------------------------------
          */
        --清除指定帐务日期以前的历史数据,检索账本表和签约表内所有符合条件的用户并生成申请数据
        varrow            integer;
        varcustomerid     integer;
        varcustoutid      varchar2 (18);
        varbankcardno     varchar2 (20);
        varoddfare        number (10, 2);
        varopcount        integer;
        varcardtype       integer;
        varqyacccode      varchar2 (10);
        varqylx           integer;
        varqyoddfare      number (10, 2);
        varqyopfare       number (10, 2);
        varbankrecno      integer;
        varnewbankrecno   number (17);

        cursor c_req
        is
            select q.customerid,
                   substr (q.bankcardno, 0, 20),
                   q.qylx,
                   q.qyoddfare,
                   q.qyopfare,
                   t.outid,
                   t.electroddfare,
                   t.electropcount,
                   t.cardtypedetailid
              from rec_city_bankbindqy q, base_customers t
             where     (q.qylx = 2 or q.qylx = 3)
                   and q.acccode = prmacccode
                   and q.qsrq <= prmfootdt
                   and q.jzrq >= prmfootdt
                   and q.customerid = t.customerid
                   and t.status = 1
                   and t.customerunitcode = prmcustomerunitcode;

        vcount            integer;
        vsystemusebatqc   integer;
        vbatnum           integer;
        vcustdept         varchar2 (10);
        vnousedate        date;
        vqkopfare         number;
        vqqopfare         number;
        visuseqc          integer;
        vcardno           number;
    begin
        --------------------------------------------------------------------------
        --prmcheckdayorpch =1限制当天交易只允许一次,=2限制当天当前批次的交易只允许一次,其它当天交易允许多次
        --prmcheckcustomer=1限制每用户+每天+每个银行卡号只能申请一次,=2每天+每个银行卡号只能申请一次,其它和1一样
        --初始返回值为处理失败
        out_result := 31;
        out_msg := 'ora_处理失败';

        --------------------------------------------------------------------------
        --检查参数的合法性
        if prmfootdt < 20060101 or prmfootdt > 20591231
           or to_date (to_char (prmfootdthis), 'yyyymmdd') + 30 >
                  to_date (to_char (prmfootdt), 'yyyymmdd')
        then                                    --日期的严格约束条件由外界检查
            out_result := 32;
            out_msg :=
                   'ora_参数日期无效['
                || to_char (prmfootdthis)
                || '+30>'
                || to_char (prmfootdt)
                || ']';
            return;
        end if;

        if prmcheckoddfare < 10 or prmopfare < 0
        then                                       --0.1元是为了满足测试的需要
            out_result := 32;
            out_msg :=
                   'ora_参数金额无效['
                || to_char (prmcheckoddfare)
                || ','
                || to_char (prmopfare)
                || ']';
            return;
        end if;

        --------------------------------------------------------------------------
        --检查指定日期的数据 删除历史数据
        if prmcheckdayorpch = 1
        then
            select count (*)
              into varrow
              from rec_city_bank_request
             where     footdt = prmfootdt
                   and acccode = prmacccode
                   and rownum < 2
                   and customerunitcode = prmcustomerunitcode;
        elsif prmcheckdayorpch = 2
        then
            select count (*)
              into varrow
              from rec_city_bank_request
             where     footdt = prmfootdt
                   and reqpch = prmreqpch
                   and acccode = prmacccode
                   and rownum < 2
                   and customerunitcode = prmcustomerunitcode;
        else
            select count (*)
              into varrow
              from rec_city_bank_request
             where     footdt = prmfootdt
                   and acccode = prmacccode
                   and rownum < 2
                   and customerunitcode = prmcustomerunitcode;
        end if;

        if varrow > 0
        then
            out_result := 33;
            out_msg :=
                   'ora_指定帐务日期['
                || to_char (prmfootdt)
                || ',科目:'
                || prmacccode
                || ']的申请数据已经存在';
            return;
        end if;

        --临时请求数据保存30天,圈存数据保存90天
        delete rec_city_bank_request
         where     footdt <= prmfootdthis
               and acccode = prmacccode
               and customerunitcode = prmcustomerunitcode;

        delete rec_city_bankrec
         where ( (succed = 0 or succed = 3) and opdt < sysdate - 90)
               and customerunitcode = prmcustomerunitcode;

        --------------------------------------------------------------------------
        select nvl (count (*), 0)
          into vcount
          from base_param
         where     paramname = 'system_isusebatnumqc'
               and paramgroupid = 15
               and customerunitcode = prmcustomerunitcode;

        select to_number (paramvalue)
          into vsystemusebatqc
          from base_param
         where     paramname = 'system_isusebatnumqc'
               and paramgroupid = 15
               and customerunitcode = prmcustomerunitcode;

        --在循环内检查账本信息，并生成申请数据
        open c_req;

        fetch c_req
          into varcustomerid,
               varbankcardno,
               varqylx,
               varqyoddfare,
               varqyopfare,
               varcustoutid,
               varoddfare,
               varopcount,
               varcardtype;

        while (c_req%found)
        loop
            --检查签约银行卡号卡号是否有效
            if length (varbankcardno) < 15
            then
                goto donextrow;
            end if;

            ---      验证是否存在圈存参数
            if vcount = 0
            then
                --如果不存在， 兼容以前的方式
                if varqylx != 3
                then      --不是非定额的(目前只有定额),转换签约余额和签约金额,
                    -- 取这个人所在
                    varqyoddfare := prmcheckoddfare;
                    varqyopfare := prmopfare;
                end if;
            else
                if vsystemusebatqc = 1
                then
                    --系统启用
                    select outid
                      into vcardno
                      from base_customers
                     where customerid = varcustomerid
                           and customerunitcode = prmcustomerunitcode;

                    --获取批次号
                    vbatnum := trunc (vcardno / 65536);

                    if visuseqc = 1
                    then
                        --如果本批次启用了，验证有效期
                        if vnousedate < sysdate
                        then
                            --如果有效时间小与当前时间 返回一条
                            goto donextrow;
                        end if;

                        --不是非定额的(目前只有定额),转换签约余额和签约金额
                        if varqylx != 3
                        then
                            -- 取这个人所在批次的启圈金额和圈款额
                            varqyoddfare := vqqopfare;
                            varqyopfare := vqkopfare;
                        end if;
                    else
                        goto donextrow;
                    end if;
                else
                    --系统没有启用，那么还是采用以前的方式
                    if varqylx != 3
                    then  --不是非定额的(目前只有定额),转换签约余额和签约金额,
                        -- 取这个人所在
                        varqyoddfare := prmcheckoddfare;
                        varqyopfare := prmopfare;
                    end if;
                end if;
            end if;

            if varoddfare > varqyoddfare
            then                              --和账本签约方式的处理方式不一样
                goto donextrow;
            end if;

            --当前有圈存未领款额,指定日期内有圈存圈存成功记录的用户不再圈存
            select count (*)
              into varrow
              from rec_electtron_cash_plan
             where     customerid = varcustomerid
                   and status <> 2
                   and rownum < 2
                   and customerunitcode = prmcustomerunitcode;

            if varrow > 0
            then
                goto donextrow;
            end if;

            --当天数据已经产生 两卡没有绑定的
            if prmcheckcustomer = 1
            then
                select count (*)
                  into varrow
                  from rec_city_bank_request
                 where     customerid = varcustomerid
                       and footdt = prmfootdt
                       and bankcardno = varbankcardno
                       and rownum < 2
                       and customerunitcode = prmcustomerunitcode;
            elsif prmcheckcustomer = 2
            then
                select count (*)
                  into varrow
                  from rec_city_bank_request
                 where     footdt = prmfootdt
                       and bankcardno = varbankcardno
                       and rownum < 2
                       and customerunitcode = prmcustomerunitcode;
            else
                select count (*)
                  into varrow
                  from rec_city_bank_request
                 where     customerid = varcustomerid
                       and footdt = prmfootdt
                       and bankcardno = varbankcardno
                       and rownum < 2
                       and customerunitcode = prmcustomerunitcode;
            end if;

            if varrow > 0
            then
                goto donextrow;
            end if;

            --插入批量申请表,自助一般是5位流水号:yyyymmdd0+nnnnn，批量为6位的流水号:yyyymmdd9+nnnnn
            select (prmfootdt * 10 + 9) * 100000        --暂时注释，以后再调试
              into varnewbankrecno
              from dual;

            insert into rec_city_bank_request (bankrecno,
                                               reqpch,
                                               customerid,
                                               bankcardno,
                                               footdt,
                                               opfare,
                                               bankcount,
                                               succed,
                                               acccode,
                                               preoddfare,
                                               preopcount,
                                               opdt,
                                               qylx,
                                               customerunitcode)
            values (varnewbankrecno,
                    prmreqpch,
                    varcustomerid,
                    varbankcardno,
                    prmfootdt,
                    varqyopfare,
                    0,
                    0,
                    prmacccode,
                    varoddfare,
                    varopcount,
                    sysdate,
                    varqylx,
                    prmcustomerunitcode);

           --------------------------------------------------------------------------
           --下一条记录
           <<donextrow>>
            fetch c_req
              into varcustomerid,
                   varbankcardno,
                   varqylx,
                   varqyoddfare,
                   varqyopfare,
                   varcustoutid,
                   varoddfare,
                   varopcount,
                   varcardtype;
        end loop;

        close c_req;

        out_result := 0;
        out_msg := 'ora_生成申请数据成功';
        commit;
        return;
    exception
        when others
        then
            out_result := 34;
            out_msg := sqlerrm;
            rollback;
    end;

    --银行圈存记录第一次入库(批量、验卡、[验证签约关系、验证签约密码、取签约绑定学工号、取签约绑定银行卡号])
    --复杂的签约处理需要先取签约关系另行处理.
    procedure bankrecforfirst (prmtype               in     integer,        --
                               prmzbbqy              in     integer,
                               --如果有签约关系时,=1取帐本表的签约,=2取签约关系表里的签约
                               prmcustomerid         in     integer, --客户编号
                               prmasn                in out varchar2, --卡应用序列号
                               prmcardsn             in out integer, --持卡序号
                               prmoutid              in out varchar2, --市民卡号
                               prmsumfare            in     number,    -- 总额
                               prmoddfare            in     number,     --余额
                               prmopcount            in     integer, --操作计数
                               prmcheckfare          in     integer,
                               --=1验证交易金额是否重复,=2和其它不验证交易金额是否重复
                               prmgetqyfare          in     integer, --签约金额
                               prmopfare             in out number, --操作金额
                               prmtermid             in     integer, --终端ｉｄ
                               prmtermtradeno        in     varchar2, --终端交易号
                               prmbankrecno          in     number, --银行交易号
                               prmacccode            in     integer, --科目代码
                               prmbankcardno         in out varchar2, --银行卡号
                               prmcheckfootdt        in     integer,
                               --1验证帐务日期和库日期一致,=2和其它不验证帐务日期和库日期一致
                               prmfootdt             in     integer, --账务日期
                               prmdaycount           in     number, --日交易次数
                               prmdayfare            in     number, -- 日交易金额
                               prmtermserverid       in     integer, --终端服务编码
                               prmqctype             in     integer,
                               --圈存类型(圈存机：0，电话银行：1，网上银行：2，批量签约  3,  次卡钱包圈存 8)
                               prmbzinfo             in     varchar2, --电话号码或ip地址或备注信息
                               prmcustomerunitcode   in     varchar2, --客户代码
                               out_msg                  out varchar2,
                               out_result               out integer)
    is
        varrow             integer;
        varcardno          integer;
        varcardsn          integer;
        varfootdt          integer;
        varrowstatus       integer;
        vargetopfare       number (10, 2);
        varrowserverid     integer;
        varrowcustoutid    varchar2 (30);
        varrowbankcardno   varchar2 (30);
        vardaycount        integer;                      -----------------yuch
        vardayfare         number (10, 2);               -----------------yuch
    begin
        --------------------------------------------------------------------------
        --初始变量
        --prmcheckfare(=1验证交易金额是否重复,=2和其它不验证交易金额是否重复)
        --prmcheckfootdt(=1验证帐务日期和库日期一致,=2和其它不验证帐务日期和库日期一致)
        --prmzbbqy(如果有签约关系时,=1取帐本表的签约,=2取签约关系表里的签约)
        --mod(prmtype)(<30不验校卡号、>30验证校卡号、=1批量圈存、=2普通圈存、=3验证签约关系、=4取签约绑定学工号、
        --  =5取签约绑定银行卡号、=6取签约绑定两卡卡号、=7批量圈存银行回应，=8圈存银行回应，=9冲正 类型和bankrecforsecond里的prmtype一致)
        --prmgetqyfare =1取签约表里的签约金额,=2不取签约表里的签约金额，备用
        --prmdaycount和prmdayfare分别为日交易次数和日交易金额，如果有一个大于0则检查对应的日交易限制。
        --prmreturn =0成功,=1零散黑名单中,=2批次黑名单中,=3帐本状态异常,4=卡库不一致卡 5=帐外卡
        --=11无签约记录,=12签约记录已经存在,=13签约证件验证无效,=14签约密码验证无效,=15签约关系验证无效,=16签约关系记录异常
        --=20记录不存在 =21记录已经存在 =22记录重复,=23同卡同金额两天内连续交易 =26帐务日期无效
        --=31其它错误,=32参数错误,=33已经存在,=34过程异常 =49其它异常 =97网络异常
        --初始返回值为处理失败
        ------------------------------------------------------------------------------------------------------
        --修改标示：李政
        --时　　间：2013-10-28
        --修改说明：增加客户代码  prmcustomerunitcode
        ------------------------------------------------------------------------------------------------------
        out_result := 31;
        out_msg := 'ora_处理失败';

        if (prmtype = 4 or prmtype = 34)
        then                                                        --取学工号
            varrowcustoutid := '*****';
            prmoutid := '****';
        elsif (prmtype = 5 or prmtype = 35)
        then                                                      --取银行卡号
            varrowbankcardno := '**';
            prmbankcardno := '****';
        elsif (prmtype = 6 or prmtype = 36)
        then                                              --取学工号和银行卡号
            varrowcustoutid := '*****';
            prmoutid := '****';
            varrowbankcardno := '**';
            prmbankcardno := '****';
        end if;

        --------------------------------------------------------------------------
        --验证参数
        if (mod (prmtype, 30) < 1 or mod (prmtype, 30) > 6)
        then
            out_msg := 'ora_参数faretype[' || to_char (prmtype) || ']无效';
            return;
        end if;

        --------------------------------------------------------------------------
        --验证帐务日期
        if (prmcheckfootdt = 1
            and prmfootdt != to_number (to_char (sysdate, 'yyyymmdd')))
        then
            out_result := 26;
            out_msg := 'ora_帐务日期和库日期不一致';
            return;
        end if;

        --begin  张秋玲20100125 出现异常，提示信息不明确。
        out_msg := 'ora_根据账本号读取账本信息失败！';

        --end
        select cardsn, status, outid
          into prmcardsn, varrowstatus, varrowcustoutid
          from base_customers
         where asn = prmasn and customerunitcode = prmcustomerunitcode;

        --------------------------------------------------------------------------
        --验证校卡卡号,并取账本表里的签约关系
        if prmtype > 30
        then
            begin
                select cardsn, nvl (status, 0), nvl (outid, '**')
                  into varcardsn, varrowstatus, varrowcustoutid
                  from base_customers
                 where asn = prmasn
                       and customerunitcode = prmcustomerunitcode;

                if (varcardno != prmasn or varcardsn != prmcardsn)
                then
                    out_result := 4;
                    out_msg := 'ora_卡库不一致卡';
                    return;
                end if;

                if varrowstatus <> 1
                then
                    out_result := 3;
                    out_msg := 'ora_状态异常卡';
                    return;
                end if;
            exception
                when others
                then
                    out_result := 5;
                    out_msg := 'ora_帐外卡';
                    return;
            end;
        end if;

        ----------------------------------------------------------
        --取特殊签约绑定卡卡号
        if mod (prmtype, 30) > 2 and prmzbbqy = 2
        then
            begin
                --begin  张秋玲20100125 出现异常，提示信息不明确。
                out_msg := 'ora_取签约绑定的银行卡号异常';

                --end
                select substr (nvl (bankcardno, '**'), 1, 20)
                  into varrowbankcardno
                  from rec_city_bankbindqy
                 where     acccode = prmacccode
                       and customerid = prmcustomerid
                       and prmfootdt >= qsrq
                       and prmfootdt <= jzrq
                       and customerunitcode = prmcustomerunitcode;
            exception
                when no_data_found
                then
                    out_result := 11;
                    out_msg := 'ora_无签约记录';
                    return;
                when too_many_rows
                then
                    out_result := 15;
                    out_msg := 'ora_签约关系记录异常';
                    return;
                when others
                then
                    out_result := 34;
                    out_msg := 'ora_签约关系异常,' || sqlerrm;
                    return;
            end;
        end if;

       --------------------------------------------------------------------------
       <<checkcuststatusok>>                               -- 验证校卡卡号通过
        --------------------------------------------------------------------------
        --签约绑定、取学工号、取银行卡号
        if (prmtype = 3 or prmtype = 33)
        then                                                    --验证签约关系
            if (varrowbankcardno <> prmbankcardno)
            then
                out_result := 14;
                out_msg := 'ora_签约关系验证无效';
                return;
            end if;
        elsif (prmtype = 4 or prmtype = 34)
        then                                             --4,6取签约绑定学工号
            prmoutid := varrowcustoutid;
        elsif (prmtype = 5 or prmtype = 35)
        then                                           --5,6取签约绑定银行卡号
            prmbankcardno := varrowbankcardno;
        elsif (prmtype = 6 or prmtype = 36)
        then
            prmoutid := varrowcustoutid;
            prmbankcardno := varrowbankcardno;

            if (substr (nvl (varrowbankcardno, '00000'), 1, 5) = '00000')
            then
                out_result := 11;
                out_msg := 'ora_无签约记录';
                return;
            end if;
        end if;

       --------------------------------------------------------------------------
       <<checkbankbindok>>                                 -- 验证签约关系通过
        --------------------------------------------------------------------------
        --检查同卡同金额两天内连续交易
        --begin  张秋玲20100125 出现异常，提示信息不明确。
        out_msg := 'ora_验证同卡同金额两天内连续交易异常';

        --end
        if (prmcheckfare = 1)
        then
            varfootdt := to_number (to_char (sysdate - 0, 'yyyymmdd'));

            select nvl (count (*), 0)
              into varrow
              from rec_city_bankrec
             where     footdt >= varfootdt
                   and trim (bankcardno) = trim (prmbankcardno)
                   and opfare = prmopfare
                   and rownum < 2
                   and customerunitcode = prmcustomerunitcode;

            if varrow > 0
            then
                out_result := 23;
                out_msg := 'ora_同卡同金额两天内连续交易';
                return;
            end if;
        end if;

       --------------------------------------------------------------------------
       <<checkdaycountanddayfare>>               -- 验证日交易次数和日交易金额
        -----------------  begin change  yuch
        --------------------------------------------------------------------------
        --begin  张秋玲20100125 出现异常，提示信息不明确。
        out_msg := 'ora_验证日交易次数和日交易金额异常';

        --end
        if (prmdaycount > 0 or prmdayfare > 0)
        then
            select sum (1), sum (opfare)
              into vardaycount, vardayfare
              from rec_city_bankrec
             where     footdt = prmfootdt
                   and customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode;

            if (prmdaycount > 0 and vardaycount > prmdaycount)
            then
                out_result := 24;
                out_msg := 'ora_日交易次数超限';
                return;
            end if;

            if (prmdayfare > 0 and vardayfare > prmdayfare)
            then
                out_result := 24;
                out_msg := 'ora_日交易金额超限';
                return;
            end if;
        end if;

        -----------------  end change  yuch
        --------------------------------------------------------------------------
        ------------插入记录
        --先更新批量圈存
        if (prmtype = 1 or prmtype = 31)
        then
            --注意,为了避免批量申请的重复，需要再次验证bankcount<1的条件
            if (prmcheckfare = 1)
            then
                update rec_city_bank_request
                   set bankcount = bankcount + 1,
                       bankretdesc = '申请提交',
                       opdt = sysdate
                 where     customerid = prmcustomerid
                       and footdt = prmfootdt
                       and trim (bankcardno) = trim (prmbankcardno)
                       and bankcount < 1
                       and customerunitcode = prmcustomerunitcode;
            else
                update rec_city_bank_request
                   set bankcount = bankcount + 1,
                       bankretdesc = '申请提交',
                       opdt = sysdate
                 where     bankrecno = prmbankrecno
                       and customerid = prmcustomerid
                       and footdt = prmfootdt
                       and trim (bankcardno) = trim (prmbankcardno)
                       and bankcount < 1
                       and customerunitcode = prmcustomerunitcode;
            end if;

            if sql%rowcount != 1
            then
                out_result := 21;
                out_msg := 'ora_批量每条每天限制交易一次';
                return;
            end if;
        end if;

        --------------------------------------------------------------------------
        --插入记录
        --begin  张秋玲20100125 出现异常，提示信息不明确。
        out_msg := 'ora_插入rec_bankrec表记录异常';

        --end
        insert into rec_city_bankrec (bankrecno,
                                      customerid,
                                      opdt,
                                      preoddfare,
                                      preopcount,
                                      oddfare,
                                      opcount,
                                      cardsn,
                                      opfare,
                                      footdt,
                                      fixfootdt,
                                      bankcardno,
                                      banktradeno,
                                      bankret,
                                      bankretdesc,
                                      bankdz,
                                      acccode,
                                      termid,
                                      termtradeno,
                                      tradestatus,
                                      succed,
                                      sn,
                                      qctype,
                                      bzinfo,
                                      customerunitcode)
        values (prmbankrecno,
                prmcustomerid,
                sysdate,
                prmoddfare,
                prmopcount,
                prmoddfare,
                prmopcount,
                prmcardsn,
                prmopfare,
                prmfootdt,
                prmfootdt,
                prmbankcardno,
                '**',
                '**',
                '申请提交',
                0,
                prmacccode,
                prmtermid,
                prmtermtradeno,
                0,
                0,
                0,
                prmqctype,
                prmbzinfo,
                prmcustomerunitcode);

       --------------------------------------------------------------------------
       <<okret>>
        out_result := 100;
        out_msg := 'ora_圈存首次插入成功';
        commit;
        return;
    --------------------------------------------------------------------------
    exception
        when others
        then
            out_result := 34;
            --begin  张秋玲20100125 出现异常，提示信息不明确。
            --out_msg := sqlerrm;
            out_msg := to_char (sqlcode) || '||||' || out_msg || sqlerrm;
            --end
            rollback;
    end;

    --银行圈存记录第二次入库(根据银行回应结果更新银行请求回应记录)
    --银行圈存记录第二次入库(根据银行回应结果更新银行请求回应记录)
    procedure bankrecforsecond (prmtype               in     integer,
                                prmcustomerid         in     integer,
                                prmasn                in out varchar2,
                                prmcardsn             in out integer, --持卡序号
                                prmsumfare            in     number,
                                prmoddfare            in     number,
                                prmsubsidyoddfare     in     number,
                                prmoddfarepre         in     number,
                                prmopcount            in     integer,
                                prmopfare             in     number,
                                prmsucced             in     integer,
                                prmbankrecno          in     number,
                                prmacccode            in     integer,
                                prmbankcardno         in     varchar2,
                                prmbanktradeno        in     varchar2,
                                prmbankret            in     varchar2,
                                prmbankretdesc        in     varchar2,
                                prmfootdt             in     integer,
                                prmtermid             in     integer,
                                prmtermtradeno        in     varchar2,
                                prmtermxkzt           in     integer,
                                prmcustomerunitcode   in     varchar2, --客户代码
                                out_back                 out integer,
                                out_msg                  out varchar2,
                                out_result               out integer,
                                prmsaveopcount        in     integer, --充值计数
                                prmcardtypedetailid   in     integer, --卡小类
                                prmtradecardtype      in     integer, --卡种类：1 m1卡，2 cpu卡
                                prmposcode            in     number, --终端唯一编号
                                prmpsamcardno         in     number --psam卡号
                                                                   )
    /*--------------------------------------------------------------------------
       存储过程：bankrecforsecond
       说　　明：银行圈存记录第二次入库(根据银行回应结果更新银行请求回应记录)
       --------------------------------------------------
       --初始变量
       mod(prmtype)(<30不验校卡号、>30验证校卡号、
       =1批量圈存、
       =2普通圈存、
       =3验证签约关系、
       =4取签约绑定学工号、
       =5取签约绑定银行卡号、
       =6取签约绑定两卡卡号、
       =7批量圈存银行回应，
       =8圈存银行回应，
       =9冲正 类型和bankrecforsecond里的prmtype一致)

       初始返回值为处理失败
       --out_result : 101 ＝ ora_银行拒绝,更新成功
       ------------------------------------------------------
       修改人员：朱鹏飞
       修改日期：2008-11-20
       修改说明：圈款成功后，增加圈款统计日期字段
       -------------------------------------------------------
       修改标识：冯永辉 20090829
       修改说明:根据cpu项目短信平台需要，圈款成功后写入表rec_message_data
      ----------------------------------------------------------------------
      --修改标示：周晓娜 2010-01-28（同步07版上朱鹏飞修改的升级内容）
      --修改说明：1、修改即时统计时班次为银行账务日期
      --2、修改recbankrec表coudate为全日期格式，包含时分秒
      ----------------------------------------------------------------------
      --修改标示：李政
      --时　　间：2013-10-28
      --修改说明：增加客户代码  prmcustomerunitcode
      ----------------------------------------------------------------------
   */
    is
        varrow               integer;
        varoutid             integer;
        varcstaccfcqc        number (12);
        varcstaccfclk        number (12);
        varrowsucced         number (3);
        varrowfootdt         integer;
        varrowserverid       integer;
        varrowtermserverid   integer;
        varrowopfare         number (10, 2);
        varrowbankrecno      number (17);
        varacccode           integer;
        varrowfixfootdt      integer;
        vempcode             varchar2 (32);
        vcount               number;
        varrowqctype         number;
        limittimes           varchar2 (10);
        monthnum             varchar2 (10);
        validtimestart       varchar2 (32);
        validtimeend         varchar2 (32);
    begin
        out_result := 31;
        out_msg := 'ora_处理失败';
        out_back := 0;
        varrowbankrecno := 0;
        varrowsucced := 0;
        varrowopfare := 0;
        varrowfixfootdt := 0;
        vempcode := '00000000';

        --------------------------------------------------------------------------
        --检查输入参数prmtype,prmsucced是否有效
        if (prmtype not in (7, 8, 37, 38)
            or (prmsucced != 1 and prmsucced != 3))
        then
            out_result := 32;
            out_msg :=
                   'ora_参数type['
                || to_char (prmtype)
                || ']succed['
                || to_char (prmsucced)
                || ']无效';
            return;
        end if;

        --------------------------------------------------------------------------
        --检查库内数据记录数量是否有效
        begin
            select bankrecno,
                   succed,
                   opfare,
                   footdt,
                   fixfootdt,
                   qctype
              into varrowbankrecno,
                   varrowsucced,
                   varrowopfare,
                   varrowfootdt,
                   varrowfixfootdt,
                   varrowqctype
              from rec_city_bankrec
             where     customerid = prmcustomerid
                   and bankrecno = prmbankrecno
                   and customerunitcode = prmcustomerunitcode;
        --if(sql%rowcount !=1) then
        --  prmreturn  := 22; prmmessage := 'ora_记录数量无效';
        --end if;
        exception
            when no_data_found
            then
                out_result := 22;
                out_msg := 'ora_记录数量[0]无效';
                return;
            when too_many_rows
            then
                out_result := 22;
                out_msg := 'ora_记录数量[rows]无效';
                return;
            when others
            then
                out_result := 22;
                out_msg := 'ora_记录数量无效,' || sqlerrm;
                return;
        end;

        --------------------------------------------------------------------------
        --检查数据的一致性
        if varrowopfare != prmopfare or varrowbankrecno != prmbankrecno
        then
            out_result := 22;
            out_msg := 'ora_银行回应金额序号无效';
            return;
        end if;

        if varrowsucced != 0
        then
            out_result := 22;
            out_msg := 'ora_库内交易状态无效';
            return;
        end if;

        if (prmtype = 7 or prmtype = 37)
        then
            update rec_city_bank_request
               set succed = prmsucced,
                   banktradeno = prmbanktradeno,
                   bankret = prmbankret,
                   bankretdesc = prmbankretdesc,
                   opdt = sysdate
             where     customerid = prmcustomerid
                   and bankrecno = prmbankrecno
                   and customerunitcode = prmcustomerunitcode;
        --bankretdesc=prmbankretdesc,opdt=sysdate where customerid = prmcustomerid and  bankcardno = prmbankcardno;
        end if;

        --------------------------------------------------------------------------
        --银行拒绝交易
        if (prmsucced = 3)
        then
            update rec_city_bankrec
               set succed = prmsucced,
                   banktradeno = prmbanktradeno,
                   bankret = prmbankret,
                   bankretdesc = substr (prmbankretdesc, 1, 30)
             where     customerid = prmcustomerid
                   and bankrecno = prmbankrecno
                   and customerunitcode = prmcustomerunitcode;

            --footdt=prmfootdt and  bankcardno = prmbankcardno;
            out_result := 101;
            out_msg := 'ora_银行拒绝,更新成功';
            commit;
            return;
        end if;

        --------------------------------------------------------------------------
        --获取客户卡号
        --select asn
        -- into prmasn
        --from base_customers
        --where     customerid = prmcustomerid
        --     and customerunitcode = prmcustomerunitcode;

        --------------------------------------------------------------------------
        --处理prmsucced=1的情况填写圈存记录、领款记录 生成领款序号，
        /* select seq_rec_cust_acc.nextval
           into varcstaccfcqc
           from dual;*/
        select seq_cash_plan.nextval into varoutid from dual;

        out_back := varoutid;                           --返回本笔生成的流水号

        --修改标示：朱鹏飞 2008-11-20
        --修改说明：入库成功后，更新统计日期
        update rec_city_bankrec
           set succed = prmsucced,
               banktradeno = prmbanktradeno,
               bankret = prmbankret,
               bankretdesc = '圈存划账成功',
               fixfootdt = prmfootdt,
               sn = varoutid,
               coudate = sysdate
         --coudate = trunc (sysdate, 'dd')
         where bankrecno = prmbankrecno
               and customerunitcode = prmcustomerunitcode;

        --and footdt=prmfootdt and  bankcardno = prmbankcardno;
        if (sql%rowcount != 1)
        then
            out_result := 34;
            out_msg := 'ora_非法修改异常';
            return;
        end if;

        ------------------------------------------------------------------------

        --修改人：梁小凯20101215
        --修改说明：从圈款大类中验证是否存在此科目
        select nvl (count (*), 0)
          into vcount
          from base_acc_type a
         where a.groupid = 10 and a.acccode = prmacccode;

        if vcount = 1
        then
            case prmacccode
                when 1001
                then
                    varacccode := 1101;
                when 1002
                then
                    varacccode := 1102;
                when 1003
                then
                    varacccode := 1103;
                when 1004
                then
                    varacccode := 1104;
                when 1005
                then
                    varacccode := 1105;
                when 1006
                then
                    varacccode := 1106;
                when 1007
                then
                    varacccode := 1107;
                when 1008
                then
                    varacccode := 1108;
            end case;
        --varacccode := prmacccode;
        else
            out_result := 32;
            out_msg :=
                'ora_参数prmacccode[' || to_char (prmacccode) || ']无效';
            return;
        end if;

        --------------------------------------------------------------------------
        out_msg := '形成领款计划错误！';

    if (varrowqctype = 8)
    --形成次卡钱包领款记录
        then
      select replace (regexp_substr (a.bzinfo,
                                           '[^|]+',
                                           1,
                                           1                     /*取第1个值*/
                                            ), ',', ' '),
                   replace (regexp_substr (a.bzinfo,
                                           '[^|]+',
                                           1,
                                           2                     /*取第2个值*/
                                            ), ',', ' '),
                   replace (regexp_substr (a.bzinfo,
                                           '[^|]+',
                                           1,
                                           3                     /*取第3个值*/
                                            ), ',', ' '),
                   replace (regexp_substr (a.bzinfo,
                                           '[^|]+',
                                           1,
                                           4                     /*取第4个值*/
                                            ), ',', ' ')
              into monthnum,
                   limittimes,
                   validtimestart,
                   validtimeend
              from rec_city_bankrec a
             where bankrecno = prmbankrecno
                   and customerunitcode = prmcustomerunitcode;

            --形成次卡钱包领款记录
            insert into rec_vicecard_cash_plan (planid,
                                                customerid,
                                                cardno,
                                                cardsn,
                                                cardtypedetailid,
                                                sumviceaddfare,
                                                viceoddfare,
                                                viceoddfarepre,
                                                viceopfare,
                                                vicedummyopfare,
                                                vicesaveopcount,
                                                viceopcount,
                                                status,
                                                acccode,
                                                opdt,
                                                description,
                                                areaid,
                                                cardkind,
                                                poscode,
                                                psamcardno,
                                                empid,
                                                dealtype,
                                                wallettype,
                                                tac,
                                                samtradeno,
                                                ver,
                                                customerunitcode,
                                                validtimestart,
                                                validtimeend,
                                                limittimes,
                                                monthnum)
            values (varoutid,
                    prmcustomerid,
                    prmasn,
                    prmcardsn,
                    prmcardtypedetailid,
                    0,
                    0,
                    0,
                    prmopfare,
                    0,
                    0,
                    0,
                    0,
                    varacccode,
                    sysdate,
                    '次卡钱包圈存领款',
                    0,
                    prmtradecardtype,
                    prmposcode,
                    prmpsamcardno,
                    0,
                    1,
                    3,
                    0,
                    0,
                    0,
                    prmcustomerunitcode,
                    to_date (validtimestart, 'yyyy-mm-dd'),
                    to_date (validtimeend, 'yyyy-mm-dd'),
                    to_number (limittimes),
                    to_number (monthnum));
        elsif (varrowqctype = 9)
    --形成月票钱包领款记录
    then
        select replace (regexp_substr (a.bzinfo,
                                           '[^|]+',
                                           1,
                                           1                     /*取第1个值*/
                                            ), ',', ' '),
                   replace (regexp_substr (a.bzinfo,
                                           '[^|]+',
                                           1,
                                           2                     /*取第2个值*/
                                            ), ',', ' '),
                   replace (regexp_substr (a.bzinfo,
                                           '[^|]+',
                                           1,
                                           3                     /*取第3个值*/
                                            ), ',', ' '),
                   replace (regexp_substr (a.bzinfo,
                                           '[^|]+',
                                           1,
                                           4                     /*取第4个值*/
                                            ), ',', ' ')
              into monthnum,
                   limittimes,
                   validtimestart,
                   validtimeend
              from rec_city_bankrec a
             where bankrecno = prmbankrecno
                   and customerunitcode = prmcustomerunitcode;

      --形成月票钱包领款记录
        insert into rec_monticket_cash_plan (planid,
                                             customerid,
                                             cardno,
                                             cardsn,
                                             cardtypedetailid,
                                             sumviceaddfare,
                                             viceoddfare,
                                             viceoddfarepre,
                                             viceopfare,
                                             vicedummyopfare,
                                             vicesaveopcount,
                                             viceopcount,
                                             status,
                                             acccode,
                                             opdt,
                                             description,
                                             cardkind,
                                             poscode,
                                             psamcardno,
                                             empid,
                                             dealtype,
                                             wallettype,
                                             tac,
                                             samtradeno,
                                             ver,
                                             customerunitcode,
                                             validtimestart,
                                             validtimeend,
                                             limittimes,
                                             monthnum)
      /*
             values (vplanid,
                     prmcustomerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumviceaddfare,
                     0,
                     prmviceoddfare,
                     prmviceopfare,
                     prmvicedummyopfare,
                     prmvicesaveopcount,
                     prmviceopcount,
                     1,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     1,
                     2,
                     0,
                     0,
                     0,
                     prmcustomerunitcode,
                     v_validtimestart,
                     v_validtimeend,
                     prmlimittimes,
                     prmmonthnum);
      */
       values (varoutid,
                    prmcustomerid,
                    prmasn,
                    prmcardsn,
                    prmcardtypedetailid,
                     0,
                     0,
                     0,
                     prmopfare,
                     0,
                     0,
                     0,
                     0,
                     varacccode,
                     sysdate,
                     '月票钱包圈存领款',
                     prmtradecardtype,
                     prmposcode,
                     prmpsamcardno,
                     0,
                     1,
                     2,
                     0,
                     0,
                     0,
                     prmcustomerunitcode,
                     to_date (validtimestart, 'yyyy-mm-dd'),
                    to_date (validtimeend, 'yyyy-mm-dd'),
                    to_number (limittimes),
                    to_number (monthnum));
    else
      --形成电子钱包领款记录
            insert into rec_electtron_cash_plan (planid,
                                                 customerid,
                                                 cardno,
                                                 cardsn,
                                                 cardtypedetailid,
                                                 sumelectraddfare,
                                                 electroddfare,
                                                 electroddfarepre,
                                                 electropfare,
                                                 electrdummyopfare,
                                                 electrsaveopcount,
                                                 electropcount,
                                                 status,
                                                 acccode,
                                                 opdt,
                                                 description,
                                                 cardkind,
                                                 poscode,
                                                 psamcardno,
                                                 empid,
                                                 dealtype,
                                                 wallettype,
                                                 tac,
                                                 samtradeno,
                                                 ver,
                                                 customerunitcode)
            values (varoutid,
                    prmcustomerid,
                    prmasn,
                    prmcardsn,
                    prmcardtypedetailid,
                    prmsumfare,
                    0,
                    prmoddfarepre,
                    prmopfare,
                    0,
                    prmsaveopcount,
                    prmopcount,
                    0,
                    varacccode,
                    sysdate,
                    '电子钱包圈存领款',
                    prmtradecardtype,
                    prmposcode,
                    prmpsamcardno,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    prmcustomerunitcode);
        end if;

        --------------------------------------------------------------------------------
        out_result := 100;
        out_msg := 'ora_圈存二次更新成功';
        commit;
        return;
    exception
        when others
        then
            rollback;
            out_result := 34;
            out_msg := to_char (sqlcode) || '||||' || out_msg || sqlerrm;
    end;

    --普通圈存记录和银行对帐文件的交易流水对帐
    procedure bankfilelsdz (prmtype               in     integer,
                            prmzhxh               in     integer,
                            prmcustomerid         in out number,
                            prmasn                in out number,
                            prmcustoutid          in     varchar2,
                            prmcheckrecno         in     integer,
                            prmbankrecno          in     number,
                            prmacccode            in out varchar2,
                            prmbankcardno         in     varchar2,
                            prmfootdtlx           in     integer,
                            prmfootdt             in     integer,
                            prmopfare             in out number,
                            prmsucced             in     number,
                            prmbankret            in     varchar2,
                            prmbanktradeno        in     varchar2,
                            prmcustomerunitcode   in     varchar2,  --客户代码
                            out_back                 out integer,
                            out_msg                  out varchar2,
                            out_result               out integer,
                            out_cardsn               out integer)
    /*--------------------------------------------------------------------------
     存储过程：bankfilelsdz
     说　　明：普通圈存记录和银行对帐文件的交易流水对帐
     --------------------------------------------------
     初始返回值为处理失败
     prmtype =1 备用
     prmzhxh =1帐号序号有效  =2为学工号有效 =3和其它帐号和学工号都无效
     prmcheckrecno =1主键prmbankrecno有效  =2和其它主键prmbankrecno无效
     prmfootdtlx 本字段暂时不使用 =1不做处理,=2学校方的帐务日期,=3检查学校方的帐务日期
                 --=6银行方的帐务日期 =7检查银行方的帐务日期
     bankdz =5学校单边帐,=6银行单边帐,=7对帐金额不一致,=8补帐记录,=9对帐成功记录
     out_result定义
      101 = ora_银行回应成功
     ---------------------------------------------------------------------------
     修改作者：朱鹏飞
     修改日期：2008-10-14
     修改原因：对账统计错误 现对账接口已经不需要再返回custmerid，acccode,opfare
                 所以这些值传入的值不太改变，对修改传入值的地方注释
     ----------------------------------------------------------------------------
     修改标示：朱鹏飞 2008-11-20
     修改说明：对账成功后更新统计日期
     修改标示：朱鹏飞 2008-12-05
     修改说明：对账成功后，更新对账交易描述“对账成功”
     -------------------------------------------------
     --修改标示：朱鹏飞 2009-01-07
     --修改说明：见正文中说明，修改outid为sn
    ----------------------------------------------------------------------
    --修改标示：周晓娜 2010-01-28（同步07版上朱鹏飞修改的升级内容）
    --修改说明：1、修改即时统计时班次为银行账务日期
    --2、修改recbankrec表coudate为全日期格式，包含时分秒
    -----------------------------------------------------------------------
    --修改标示：梁小凯2010-12-15
    --修改说明：增加支持多个银行
    --------------------------------------------------------------------------
    --修改标示：李政
    --时　　间：2013-10-28
    --修改说明：增加客户代码  prmcustomerunitcode
    --------------------------------------------------------------------------
 */
    is
        varrow               integer;
        varrowoutid          integer;
        varcstaccfcqc        number (12);
        varcstaccfclk        number (12);
        varcustomerid        integer;
        varrowcustomerid     integer;
        varrowopdt           date;
        varrowbankrecno      number (17);
        varrowsucced         number (3);
        varrowsumfare        number (10, 2);
        varrowoddfare        number (10, 2);
        varrowopcount        integer;
        varrowopfare         number (10, 2);
        varrowbankdz         number (2);
        varrowfootdt         integer;
        varrowtermid         integer;
        varrowserverid       integer;
        varrowtermserverid   integer;
        varrowbanktradeno    varchar2 (20);
        varacccode           varchar2 (10);
        varrowfixfootdt      integer;
        vempcode             varchar2 (32);
        vcount               number;
    begin
        out_result := 31;
        out_msg := 'ora_处理失败';
        varrowsumfare := 0;
        varrowoddfare := 0;
        varrowopcount := 0;
        varrowbankrecno := 0;
        varrowsucced := 0;
        varrowopfare := 0;
        varrowbankdz := 0;
        varrowoutid := 0;                         --即为领款事务id，字段名为sn
        varrowfootdt := 0;
        varrowbanktradeno := '0';
        varrowtermid := 0;
        varrowserverid := 0;
        varrowtermserverid := 0;
        varrowfixfootdt := 0;
        vempcode := '00000000';

        --------------------------------------------------------------------------
        --检查输入参数prmtype,prmsucced是否有效
        if (prmtype != 1 or prmsucced < 1 or prmsucced > 3)
        then
            out_result := 32;
            out_msg := 'ora_参数succed[' || to_char (prmsucced) || ']无效';
            return;
        end if;

        --------------------------------------------------------------------------
        out_msg :=
            '根据账号获取卡号等错误！prmcustomerid:'
            || to_char (prmcustomerid);

        --判断使用的学工号,并转换成账号序号
        if (prmzhxh = 1)
        then
            varcustomerid := prmcustomerid;

            --根据帐号获取卡号、持卡序号
            --2008-6-26 李政  对账时关联注销表
            select asn, cardsn
              into prmasn, out_cardsn
              from (select asn,
                           cardsn,
                           customerid,
                           customerunitcode
                      from base_customers)
             where customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode;
        elsif prmzhxh = 2
        then
            --根据学工号获取帐号、卡号、持卡序号
            select customerid, asn, cardsn
              into varcustomerid, prmasn, out_cardsn
              from (select asn,
                           cardsn,
                           customerid,
                           outid,
                           customerunitcode
                      from base_customers)
             where outid = prmcustoutid
                   and customerunitcode = prmcustomerunitcode;
        else
            varcustomerid := 0;
        end if;

        --------------------------------------------------------------------------
        --查库内的对应记录
        begin
            if (prmcheckrecno = 1)
            then
                select oddfare,
                       opcount,
                       bankrecno,
                       succed,
                       opfare,
                       bankdz,
                       banktradeno,
                       sn,
                       footdt,
                       termid,
                       opdt,
                       customerid,
                       fixfootdt
                  into varrowoddfare,
                       varrowopcount,
                       varrowbankrecno,
                       varrowsucced,
                       varrowopfare,
                       varrowbankdz,
                       varrowbanktradeno,
                       varrowoutid,
                       varrowfootdt,
                       varrowtermid,
                       varrowopdt,
                       varrowcustomerid,
                       varrowfixfootdt
                  from rec_city_bankrec
                 where bankrecno = prmbankrecno
                       and customerunitcode = prmcustomerunitcode;
            --and bankcardno = prmbankcardno;
            else
                --修改标示：朱鹏飞 2009-01-07
                --修改说明：原select  bankdz, banktradeno, outid,错误
                select oddfare,
                       opcount,
                       bankrecno,
                       succed,
                       opfare,
                       bankdz,
                       banktradeno,
                       sn,
                       footdt,
                       termid,
                       opdt,
                       customerid,
                       fixfootdt
                  into varrowoddfare,
                       varrowopcount,
                       varrowbankrecno,
                       varrowsucced,
                       varrowopfare,
                       varrowbankdz,
                       varrowbanktradeno,
                       varrowoutid,
                       varrowfootdt,
                       varrowtermid,
                       varrowopdt,
                       varrowcustomerid,
                       varrowfixfootdt
                  from rec_city_bankrec
                 where     footdt = prmfootdt
                       and trim (bankcardno) = trim (prmbankcardno)
                       and opfare = prmopfare
                       and customerunitcode = prmcustomerunitcode;
            end if;
        exception
            when no_data_found
            then
                out_result := 20;
                out_msg :=
                    'ora_记录数量[0]无效prmbankrecno:'
                    || to_char (prmbankrecno);
                return;
            when too_many_rows
            then
                out_result := 22;
                out_msg :=
                    'ora_记录数量[rows]prmbankrecno:'
                    || to_char (prmbankrecno);
                return;
            when others
            then
                out_result := 22;
                out_msg :=
                       'ora_记录数量无效prmbankrecno:'
                    || to_char (prmbankrecno)
                    || '--'
                    || sqlerrm;
                return;
        end;

        varcustomerid := varrowcustomerid;

        --根据帐号获取卡号、持卡序号
        select asn, cardsn
          into prmasn, out_cardsn
          from (select asn,
                       cardsn,
                       customerid,
                       customerunitcode
                  from base_customers)
         where customerid = varcustomerid
               and customerunitcode = prmcustomerunitcode;

        --------------------------------------------------------------------------
        --检查帐号合法性
        if (prmzhxh = 1 or prmzhxh = 2)
        then
            if (varcustomerid != varrowcustomerid)
            then
                out_result := 31;
                out_msg := 'ora_库内外帐号不一致';
                return;
            end if;
        else
            varcustomerid := varrowcustomerid;
        end if;

        --------------------------------------------------------------------------
        --检查学校记录的完整性和合法性
        if ( ( (varrowsucced = 1 or varrowsucced = 2) and varrowoutid < 1)
            or (varrowsucced != 1 and varrowsucced != 2 and varrowoutid > 0))
        then
            out_result := 31;
            out_msg := 'ora_库内记录非法无效';
            return;
        end if;

        --------------------------------------------------------------------------
        --检查双方交易金额是否一致  --bankdz 5学校单边帐,6银行单边帐,7对帐金额不一致,8补帐记录,9对帐成功记录
        -- if varrowopfare !=prmopfare or varrowbanktradeno != prmbanktradeno then
        if varrowopfare != prmopfare
        then
            out_result := 34;
            out_msg := 'ora_银行回应金额无效';

            update rec_city_bankrec
               set bankdz = 7
             where bankrecno = varrowbankrecno
                   and customerunitcode = prmcustomerunitcode;

            return;
        end if;

        --------------------------------------------------------------------------
        --检查学校是否为单边账,这种检查只有银行回应文件中有失败记录时才会调用,很少使用
        if ( (varrowsucced = 1 or varrowsucced = 2 or varrowoutid > 0)
            and prmsucced != 2)
        then
            out_result := 31;
            out_msg := 'ora_参数succed[' || to_char (prmsucced) || ']非法无效';

            update rec_city_bankrec
               set bankdz = 5
             where bankrecno = varrowbankrecno
                   and customerunitcode = prmcustomerunitcode;

            return;
        end if;

        --------------------------------------------------------------------------
        --检查是否已经处理过,处理过不再处理
        --if (varrowbankdz !=0 or varrowoutid>0) then
        if (varrowbankdz != 0)
        then
            goto okret;
        end if;

        --------------------------------------------------------------------------
        --1.圈存没有成功并且对帐也没有成功, 2.圈存成功并且对帐也成功,只修改对帐标记
        if ( (prmsucced = 3 and (varrowsucced = 0 or varrowsucced = 3))
            or (prmsucced = 2 and (varrowsucced = 1 or varrowsucced = 2)))
        then
            --update rec_bankrec set succed= prmsucced,bankdz=9 where
            update rec_city_bankrec
               set bankdz = 9
             where bankrecno = varrowbankrecno
                   and customerunitcode = prmcustomerunitcode;

            goto okret;
        end if;

        --------------------------------------------------------------------------
        --圈存没有成功，但是对帐成功
        if (prmsucced = 2 and (varrowsucced = 0 or varrowsucced = 3))
        then
            -------------------------------------------------------------------------
            --修改人：梁小凯20101215
            --修改说明：从圈款大类中验证是否存在此科目
            select nvl (count (*), 0)
              into vcount
              from base_acc_type a
             where a.groupid = 6 and a.acccode = prmacccode;

            if vcount = 1
            then
                --形成领款科目=103
                varacccode := 103;
            else
                out_result := 32;
                out_msg :=
                    'ora_参数prmacccode[' || to_char (prmacccode) || ']无效';
                return;
            end if;

            -------------------------------------------------------------------------
            select seq_cash_plan.nextval into varcstaccfcqc from dual;

            --修改标示：朱鹏飞 2008-11-20
            --修改说明：对账成功后更新统计日期
            --修改标示：朱鹏飞 2008-12-05
            --修改说明：对账成功后，更样报交易描述
            --修改标示：朱鹏飞 2009-01-07
            --修改说明：原更新条件 outid = varcstaccfcqc错误,
            update rec_city_bankrec
               set succed = prmsucced,
                   fixfootdt = prmfootdt,
                   bankdz = 9,
                   sn = varcstaccfcqc,
                   --coudate = trunc (sysdate, 'dd'),
                   coudate = sysdate,
                   bankretdesc = '对账成功'
             where bankrecno = varrowbankrecno
                   and customerunitcode = prmcustomerunitcode;

            if (sql%rowcount != 1)
            then
                out_result := 34;
                out_msg := 'ora_非法修改异常';
                return;
            end if;

            --------------------------------------------------------------------------
            --产生领款记录
            out_msg := '形成领款记录出错！';

            /*        insert into rec_city_plan
                                (id, customerid, cardno, resetdt, syssubsidyver, empid,
                                 createdt, termid, sumfare,
                                 oddfare, opfare, opcount, presaveopcount, saveopcount,
                                 status, affairstatus, acccode, opdt, businesstype,
                                 oppzwdate, oppaccfc, firstdt, cardsn
                                )
                         values (varcstaccfcqc, varcustomerid, prmasn, 0, 0, varrowopdt,
                                 varrowtermid, varrowsumfare, varrowoddfare,
                                 varrowopfare, varrowopcount, 0, 0, 5,
                                 0, varacccode, sysdate, 5, sysdate,
                                 prmfootdt, varrowbankrecno, 0, out_cardsn
                                );
           */
            insert into rec_electtron_cash_plan (planid,
                                                 customerid,
                                                 cardno,
                                                 cardsn,
                                                 cardtypedetailid,
                                                 sumelectraddfare,
                                                 electroddfare,
                                                 electroddfarepre,
                                                 electropfare,
                                                 electrdummyopfare,
                                                 electrsaveopcount,
                                                 electropcount,
                                                 status,
                                                 acccode,
                                                 opdt,
                                                 description,
                                                 cardkind,
                                                 poscode,
                                                 psamcardno,
                                                 empid,
                                                 dealtype,
                                                 wallettype,
                                                 tac,
                                                 samtradeno,
                                                 ver,
                                                 customerunitcode)
            values (varcstaccfcqc,
                    prmcustomerid,
                    prmasn,
                    0,
                    0,
                    0,
                    0,
                    0,
                    prmopfare,
                    0,
                    0,
                    0,
                    0,
                    varacccode,
                    sysdate,
                    '圈存领款',
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    prmcustomerunitcode);

            ----------------------------------------------------------------------------
            --因为对帐时不知道圈存给什么，只有当加入领款计划表成功时，将领款基本信息返回--此三值已经不需要返回，注释 zhupengfei at 20080916--prmcustomerid := varrowcustomerid;                             --帐号--prmacccode := varacccode;                                  --科目代码--prmopfare := varrowopfare;                                 --操作金额
            out_back := varcstaccfcqc;                        --领款计划流水号
            -----------------------------------------------------------------------------
            /*
                     --账目处理
                     out_msg := '圈款即时统计出错！';
                     pkg_rec_subsidy_plan.processdeptdata
                                                        (to_char (sysdate,
                                                                  'yyyy-mm-dd hh24:mi:ss'
                                                                 ),
                                                         --操作日期
                                                         varrowopfare,          --操作金额
                                                         prmacccode,            --科目代码
                                                         0,
                                                         0,
                                                         varrowtermid,            --终端id
                                                         --1,                         --班次
                                                         prmfootdt,
                                                         varrowserverid,    --客户分区编码
                                                         0,                   --按终端统计
                                                         vempcode,
                                                         0,
                                                         out_msg,
                                                         out_result
                                                        );
                                                        */
            out_result := 100;
            out_msg := 'ora_圈存补帐成功';
            commit;
            return;
        end if;

       <<okret>>
        out_result := 101;
        out_msg := 'ora_银行回应成功';
        commit;
        return;
    exception
        when others
        then
            out_result := 34;
            out_msg := out_msg || to_char (sqlcode) || '_+_' || sqlerrm;
            rollback;
    end;

    --更新指定帐务日期银行记录对帐日志
    procedure bankfilelsdzsumlog (prmtype               in     integer,
                                  prmfootdthis          in     integer,
                                  prmfootdt             in     integer,
                                  prmacccode            in     integer,
                                  prmacccodedesc        in     varchar2,
                                  prmbanksumcount       in     integer,
                                  prmbanksumfare        in     number,
                                  prmdzsumcount         in     integer,
                                  prmdzsumfare          in     number,
                                  prmcustomerunitcode   in     varchar2, --客户代码
                                  prmorgsumcount           out integer,
                                  prmorgsumfare            out number,
                                  prmallsumcount           out integer,
                                  prmallsumfare            out number,
                                  prmfixsumcount           out integer,
                                  prmfixsumfare            out number,
                                  prmdescript              out varchar2,
                                  out_msg                  out varchar2,
                                  out_result               out integer)
    is
        prmbzsumcount   number;
        prmbzsumfare    number (10, 2);
        vcount          number;
    begin
        ---------------------------------------------------------------------------
        --修改标示：李政
        --时　　间：2013-10-28
        --修改说明：增加客户代码  prmcustomerunitcode
        ---------------------------------------------------------------------------
        --初始返回值为处理失败
        --prmtype(=1圈存,=2缴费)
        out_result := 31;
        --=0成功,=31其它错误,=32参数错误,=33已经存在,=34过程异常
        out_msg := 'ora_处理失败';
        prmorgsumcount := 0;
        prmorgsumfare := 0;
        prmfixsumcount := 0;
        prmfixsumfare := 0;
        prmallsumcount := 0;
        prmallsumfare := 0;
        -----
        prmbzsumcount := 0;
        prmbzsumfare := 0;

        --------------------------------------------------------------------------
        --检查参数的合法性
        if (to_date (to_char (prmfootdthis), 'yyyymmdd') + 30 >
                to_date (to_char (prmfootdt), 'yyyymmdd')
            or to_date (to_char (prmfootdthis), 'yyyymmdd') + 10 > sysdate)
        then                                    --日期的严格约束条件由外界检查
            out_result := 32;
            out_msg :=
                   'ora_参数日期无效['
                || to_char (prmfootdthis)
                || '+30>'
                || to_char (prmfootdt)
                || ']';
            return;
        end if;

        --修改人：梁小凯20101215
        --修改说明：从圈款大类中验证是否存在此科目
        select nvl (count (*), 0)
          into vcount
          from base_acc_type a
         where a.groupid = 4 and a.acccode = prmacccode;

        if (prmtype != 1 and prmtype != 2) or (prmtype = 1 and vcount != 1)
        then
            out_result := 32;
            out_msg :=
                '参数无效[' + to_char (prmtype) || ',' || prmacccode || ']';
            return;
        end if;

        --------------------------------------------------------------------------
        --删除无效的历史交易记录
        if prmtype = 1
        then
            delete rec_city_bankrec
             where     footdt < prmfootdthis
                   and acccode = prmacccode
                   and succed != 1
                   and succed != 2
                   and customerunitcode = prmcustomerunitcode;
        end if;

        --------------------------------------------------------------------------
        --删除当天的记录,统计当天的圈存对帐后的结果
        delete rec_city_bank_dzlog
         where     footdt = prmfootdt
               and acctype = prmtype
               and acccode = prmacccode
               and customerunitcode = prmcustomerunitcode;

        if prmtype = 1
        then
            select nvl (sum (1), 0), nvl (sum (opfare), 0)
              into prmorgsumcount, prmorgsumfare
              from rec_city_bankrec
             where     footdt = prmfootdt
                   and acccode = prmacccode
                   and succed = 1
                   and customerunitcode = prmcustomerunitcode;

            ---------
            select nvl (sum (1), 0), nvl (sum (opfare), 0)
              into prmbzsumcount, prmbzsumfare
              from rec_city_bankrec
             where     footdt = prmfootdt
                   and acccode = prmacccode
                   and (succed = 2)
                   and customerunitcode = prmcustomerunitcode;

            --------
            select nvl (sum (1), 0), nvl (sum (opfare), 0)
              into prmallsumcount, prmallsumfare
              from rec_city_bankrec
             where     footdt = prmfootdt
                   and acccode = prmacccode
                   and (succed = 1 or succed = 2)
                   and customerunitcode = prmcustomerunitcode;

            select nvl (sum (1), 0), nvl (sum (opfare), 0)
              into prmfixsumcount, prmfixsumfare
              from rec_city_bankrec
             where     fixfootdt = prmfootdt
                   and acccode = prmacccode
                   and (succed = 1 or succed = 2)
                   and customerunitcode = prmcustomerunitcode;
        elsif prmtype = 2
        then
            prmorgsumcount := 0;
            prmorgsumfare := 0;
            prmfixsumcount := 0;
            prmfixsumfare := 0;
        end if;

        if (prmbanksumcount = prmdzsumcount and prmbanksumfare = prmdzsumfare)
           and (prmallsumcount = prmfixsumcount
                and prmallsumfare = prmfixsumfare)
        then
            prmdescript := '帐务完全正确';
        elsif (prmbanksumcount = prmdzsumcount
               and prmbanksumfare = prmdzsumfare)
        then
            prmdescript := '银行流水正确,帐务偏差';
        else
            prmdescript := '银行流水对帐偏差';
        end if;

        insert into rec_city_bank_dzlog (footdt,
                                         acctype,
                                         acccode,
                                         acccodedesc,
                                         banksumcount,
                                         banksumfare,
                                         opdt,
                                         orgsumcount,
                                         orgsumfare,
                                         dzsumcount,
                                         dzsumfare,
                                         fixsumcount,
                                         fixsumfare,
                                         allsumcount,
                                         allsumfare,
                                         descript,
                                         bzsumcount,
                                         bzsumfare,
                                         customerunitcode)
        values (prmfootdt,
                prmtype,
                prmacccode,
                prmacccodedesc,
                prmbanksumcount,
                prmbanksumfare,
                sysdate,
                prmorgsumcount,
                prmorgsumfare,
                prmdzsumcount,
                prmdzsumfare,
                prmfixsumcount,
                prmfixsumfare,
                prmallsumcount,
                prmallsumfare,
                prmdescript,
                prmbzsumcount,
                prmbzsumfare,
                prmcustomerunitcode);

        out_result := 100;
        out_msg := 'ora_对帐入库完成';
        commit;
        return;
    exception
        when others
        then
            out_result := 34;
            out_msg := sqlerrm;
            rollback;
    end;

    procedure bankbindqyget (prmtype               in     integer,
                             prmchecklx            in     integer,
                             prmcustomerid         in     integer,
                             prmasn                in     varchar2,
                             prmcardsn             in     integer,
                             prmzbbqy              in     integer,
                             prmacccode            in     varchar2,
                             prmqyjbxx                out integer,
                             prmcustoutid          in out varchar2,
                             prmbankcarno          in out varchar2,
                             prmqyzjhm                out varchar2,
                             prmqyrxm                 out varchar2,
                             prmbindlx                out integer,
                             prmqylx                  out integer,
                             prmqyopfare              out number,
                             prmqyoddfare             out number,
                             prmqsrq                  out integer,
                             prmjzrq                  out integer,
                             prmcustomerunitcode   in     varchar2,
                             prmbankname              out varchar2,
                             out_msg                  out varchar2,
                             out_result               out integer)
    is
        varrow          integer;
        varcustomerid   integer;
        varrowstatus    integer;
        varrowqyzjhm    varchar2 (30);
    begin
        --*prmtype*:
        -- 1 = 备用
        --*prmchecklx*:
        -- 1 = 通过prmcustomerid取签约关系并验证校园卡的卡库一至性,
        -- 2 = 通过prmcustomerid取签约关系不验证校园卡的卡库一至性
        -- 5 = 通过prmcustoutid取签约关系
        --*prmzbbqy*
        -- 1 = 取帐本表的签约,
        -- 2 = 取签约关系表里的签约
        --*prmqyjbxx*
        -- (签约基本信息bit[876543210]->=128备用,
        -- =64备用,
        -- =32备用,
        -- =16备用,
        -- =8学工号有效,
        -- =4银行卡号有效,
        -- =2证件号码有效,
        -- =1姓名有效
        -- *prmbindlx*
        -- =1绑定的是customerid，
        -- =2绑定的是学工号custoutid
        -- *prmqylx*
        -- =1普通签约,
        -- =2定额签约,
        -- =3非定额签约
        --初始返回值为处理失败,--=0成功,=31其它错误,=32参数错误,=33已经存在,=34过程异常
        --out_result =0成功,=1零散黑名单中,=2批次黑名单中,=3帐本状态异常,4=帐外卡
        --=11无签约记录,=12签约记录已经存在,=13签约关系验证无效,=14签约关系记录异常
        --out_result : 101 ＝ ora_银行拒绝,更新成功
        --初始返回值为处理失败
        prmqyjbxx := 0;
        out_result := 31;
        out_msg := 'ora_签约关系处理失败';

        ---------------------------------------------------------------------------
        --修改标示：李政
        --时　　间：2013-10-28
        --修改说明：增加客户代码  prmcustomerunitcode
        ---------------------------------------------------------------------------
        --判断使用的学工号,并取对应的基本信息
        begin
            if prmchecklx = 1
            then
                select nvl (customerid, 0),
                       nvl (status, 0),
                       nvl (outid, '**'),
                       nvl ('证件号码字段', '**'),
                       nvl ('姓名字段', '**')
                  into varcustomerid,
                       varrowstatus,
                       prmcustoutid,
                       prmqyzjhm,
                       prmqyrxm
                  from base_customers
                 where     customerid = prmcustomerid
                       and asn = prmasn
                       and cardsn = prmcardsn
                       and customerunitcode = prmcustomerunitcode;
            elsif prmchecklx = 2
            then
                select nvl (customerid, 0),
                       nvl (status, 0),
                       nvl (outid, '**'),
                       nvl ('证件号码字段', '**'),
                       nvl ('姓名字段', '**')
                  into varcustomerid,
                       varrowstatus,
                       prmcustoutid,
                       prmqyzjhm,
                       prmqyrxm
                  from base_customers
                 where     customerid = prmcustomerid
                       and asn = prmasn
                       and cardsn = prmcardsn
                       and customerunitcode = prmcustomerunitcode;
            elsif prmchecklx = 5
            then
                select nvl (customerid, 0),
                       nvl (status, 0),
                       nvl (outid, '**'),
                       nvl ('证件号码字段', '**'),
                       nvl ('姓名字段', '**')
                  into varcustomerid,
                       varrowstatus,
                       prmcustoutid,
                       prmqyzjhm,
                       prmqyrxm
                  from base_customers
                 where     customerid = prmcustomerid
                       and asn = prmasn
                       and cardsn = prmcardsn
                       and customerunitcode = prmcustomerunitcode;
            else
                out_result := 32;
                out_msg := 'ora_prmchecklx无效';
                return;
            end if;

            if varrowstatus != 1
            then
                out_result := 2;
                out_msg := 'ora_状态异常卡';
                return;
            end if;
        exception
            when others
            then
                out_result := 4;
                out_msg := 'ora_帐外卡';
                return;
        end;

        --------------------------------------------------------------------------
        -------取签约信息
        if prmzbbqy = 1
        then
            if prmchecklx = 1 or prmchecklx = 2
            then
                prmqyjbxx := 8 + 4 + 2 + 1;
            else
                prmqyjbxx := 4 + 2 + 1;
            end if;

            prmbindlx := 2;
            prmqylx := 1;
            prmqyopfare := 0;
            prmqyoddfare := 0;
            prmqsrq := 20060701;
            prmjzrq := 20210701;
            out_result := 0;
            out_msg := 'ora_成功';
            return;
        else
            prmbankcarno := '0000000000000000000';

            if prmchecklx = 1 or prmchecklx = 2
            then
                prmqyjbxx := 8 + 2 + 1;
            else
                prmqyjbxx := 2 + 1;
            end if;

            begin
                --修改人：梁晓凯
                --修改日期：20090119
                --修改说明：增加证件号码字段
                select nvl (bankcardno, '00000'),
                       nvl (qylx, 0),
                       nvl (qyopfare, 0),
                       nvl (qyoddfare, 0),
                       nvl (qsrq, 0),
                       nvl (jzrq, 0),
                       nvl (qyzjhm, '**')
                  into prmbankcarno,
                       prmqylx,
                       prmqyopfare,
                       prmqyoddfare,
                       prmqsrq,
                       prmjzrq,
                       prmqyzjhm
                  from rec_city_bankbindqy
                 where     acccode = prmacccode
                       and customerid = varcustomerid
                       and customerunitcode = prmcustomerunitcode
                       and asn = prmasn;
            exception
                when no_data_found
                then
                    out_result := 11;
                    out_msg := 'ora_签约查询成功,无记录';
                    return;
                when too_many_rows
                then
                    out_result := 22;
                    out_msg := 'ora_记录数量[rows]无效';
                    return;
                when others
                then
                    out_result := 34;
                    out_msg := sqlerrm;
                    return;
            end;

            begin
                --修改人：梁晓凯
                --修改日期：20090119
                --修改说明：增加证件号码字段
                select nvl (bankname, '00000')
                  into prmbankname
                  from rec_city_bankinfo
                 where acccode = prmacccode;
            exception
                when no_data_found
                then
                    out_result := 11;
                    out_msg := 'ora_签约查询成功,无记录';
                    return;
                when too_many_rows
                then
                    out_result := 22;
                    out_msg := 'ora_记录数量[rows]无效';
                    return;
                when others
                then
                    out_result := 34;
                    out_msg := sqlerrm;
                    return;
            end;

            prmqyjbxx := prmqyjbxx + 4;
        end if;

        out_result := 0;
        out_msg := 'ora_签约查询成功';
        commit;
        return;
    exception
        when no_data_found
        then
            out_result := 11;
            out_msg := 'ora_记录数量[0]无效';
            return;
        when too_many_rows
        then
            out_result := 22;
            out_msg := 'ora_记录数量[rows]无效';
            return;
        when others
        then
            out_result := 34;
            out_msg := sqlerrm;
            return;
    end;

    procedure bankbindqychange (prmtype               in     integer,
                                prmchecklx            in     integer,
                                prmcustomerid         in     integer,
                                prmasn                in     varchar2,
                                prmcardsn             in     integer,
                                prmzbbqy              in     integer,
                                prmacccode            in     varchar2,
                                prmcustoutid          in out varchar2,
                                prmbankcardno         in     varchar2,
                                prmcheckzjhm          in     integer,
                                prmqyzjhm             in     varchar2,
                                prmbindlx                    integer,
                                prmqylx               in     integer,
                                prmqyopfare           in     number,
                                prmqyoddfare          in     number,
                                prmqsrq                      integer,
                                prmjzrq               in     integer,
                                prmqypass             in     varchar2,
                                prmqytype             in     integer,
                                prmbzinfo             in     varchar2,
                                prmcustomerunitcode   in     varchar2, --客户代码
                                out_msg                  out varchar2,
                                out_result               out integer)
    is
        varrow            integer;
        varqyrow          integer;
        varcustomerid     integer;
        varrowstatus      integer;
        varrowcustoutid   varchar2 (20);
        varrowqyzjhm      varchar2 (30);
        varbankcardno     varchar2 (30);
        varbgsm           varchar2 (30);
    --vmsg              varchar2 (50);
    --vresult           integer;
    begin
        ---------------------------------------------------------------------------
        --修改标示：李政
        --时　　间：2013-10-28
        --修改说明：增加客户代码  prmcustomerunitcode
        ---------------------------------------------------------------------------
        --prmtype=1备用
        --prmchecklx=1通过prmcustomerid取签约关系并验证校园卡的卡库一至性,=2通过prmcustomerid取签约关系不验证校园卡的卡库一至性
        -- =5通过prmcustoutid取签约关系
        --prmzbbqy(如果有签约关系时,=1取帐本表的签约,=2取签约关系表里的签约)
        --prmcheckzjhm=1验证签约证件号码,=2或其它不验证签约证件号码 =5不验证签约证件号码并且更新签约表里的签约证件号
        -- prmbindlx[=1绑定的是customerid，2绑定的是学工号custoutid]
        --prmqylx =0删除签约，=1普通签约，=2定额签约  =3非定额签约
        --初始返回值为处理失败
        out_result := 31;
        out_msg := 'ora_签约关系处理失败';

        --判断使用的学工号,并取对应的基本信息
        begin
            if prmchecklx = 1
            then
                select nvl (customerid, 0),
                       nvl (status, 0),
                       nvl (outid, '**')
                  into varcustomerid, varrowstatus, prmcustoutid
                  from base_customers
                 where     customerid = prmcustomerid
                       and asn = prmasn
                       and cardsn = prmcardsn
                       and customerunitcode = prmcustomerunitcode;
            elsif prmchecklx = 2
            then
                select nvl (customerid, 0),
                       nvl (status, 0),
                       nvl (outid, '**')
                  into varcustomerid, varrowstatus, prmcustoutid
                  from base_customers
                 where     customerid = prmcustomerid
                       and asn = prmasn
                       and cardsn = prmcardsn
                       and customerunitcode = prmcustomerunitcode;
            elsif prmchecklx = 5
            then
                select nvl (customerid, 0),
                       nvl (status, 0),
                       nvl (outid, '**')
                  into varcustomerid, varrowstatus, prmcustoutid
                  from base_customers
                 where     customerid = prmcustomerid
                       and asn = prmasn
                       and cardsn = prmcardsn
                       and customerunitcode = prmcustomerunitcode;
            else
                out_result := 32;
                out_msg := 'ora_prmchecklx无效';
                return;
            end if;

            if varrowstatus != 1
            then
                out_result := 2;
                out_msg := 'ora_状态异常卡';
                return;
            end if;
        exception
            when others
            then
                out_result := 4;
                out_msg := 'ora_帐外卡';
                return;
        end;

        --修改人：梁小凯
        --修改日期：20081111
        --修改说明：增加对 varrowcustoutid变量赋值
        varrowcustoutid := prmcustoutid;

        --------------------------------------------------------------------------
        --验证证件号码
        if prmcheckzjhm = 1
        then
            if trim (varrowqyzjhm) != trim (prmqyzjhm)
            then
                out_result := 13;
                out_msg := 'ora_签约证件验证无效';
                return;
            end if;
        end if;

        if prmzbbqy = 1
        then
            if prmqylx = 0
            then                                            --处理删除签约关系
                varbgsm := '删除账本签约';
                varbankcardno := '00000000000000000000';
            else
                varbankcardno := prmbankcardno;
            end if;

            update base_customers
               set outid = varbankcardno
             where customerid = varcustomerid
                   and customerunitcode = prmcustomerunitcode;

            goto qybgok;
        end if;

        --------------------------------------------------------------------------
        --先处理删除签约关系,然后处理签约变更,没有处理签约关系数目多于1条的纪录
        if prmqylx = 0
        then                                                --处理删除签约关系
            varbgsm := '删除签约表签约';

            --添加历史查询记录
            delete rec_city_bankbindqy
             where     acccode = prmacccode
                   and customerid = varcustomerid
                   and customerunitcode = prmcustomerunitcode;

            out_result := 0;
            goto qybgok;
        else
            --先读原签约关系
            select nvl (count (1), 0)
              into varqyrow
              from rec_city_bankbindqy
             where     acccode = prmacccode
                   and customerid = varcustomerid
                   and customerunitcode = prmcustomerunitcode;

            --if exists( select 1 from  rec_bankbindqy where acccode=prmacccode and customerid=varcustomerid) then
            if varqyrow > 0
            then
                varbgsm := '变更签约表签约';

                --修改人：梁晓凯
                --修改日期：2008-06-24
                --修改说明：增加 qytype , bzinfo 字段
                update rec_city_bankbindqy
                   set bankcardno = prmbankcardno,
                       qylx = prmqylx,
                       qyzjhm = prmqyzjhm,
                       qyopfare = prmqyopfare,
                       qyoddfare = prmqyoddfare,
                       qsrq = prmqsrq,
                       jzrq = prmjzrq,
                       qytype = prmqytype,
                       bzinfo = prmbzinfo
                 where     acccode = prmacccode
                       and customerid = varcustomerid
                       and customerunitcode = prmcustomerunitcode;
            else
                varbgsm := '新用户签约表签约';

                insert into rec_city_bankbindqy (acccode,
                                                 customerid,
                                                 bankcardno,
                                                 qylx,
                                                 qyopfare,
                                                 qyoddfare,
                                                 qsrq,
                                                 jzrq,
                                                 qypass,
                                                 qyzjhm,
                                                 initdt,
                                                 initgh,
                                                 qytype,
                                                 bzinfo,
                                                 customerunitcode,
                                                 asn)
                values (prmacccode,
                        prmcustomerid,
                        prmbankcardno,
                        prmqylx,
                        prmqyopfare,
                        prmqyoddfare,
                        prmqsrq,
                        prmjzrq,
                        prmqypass,
                        prmqyzjhm,
                        sysdate,
                        '11111111',
                        prmqytype,
                        prmbzinfo,
                        prmcustomerunitcode,
                        prmasn);
            end if;
        end if;

       --添加历史查询记录
       <<qybgok>>
        out_result := 0;
        out_msg := 'ora_' || varbgsm || '成功';
        commit;
        return;
    exception
        when others
        then
            out_result := 34;
            out_msg := sqlerrm;
            rollback;
    end;

    procedure bank_request_electr_cash (
        --客户基本信息-------------
        prmcustomerid          in     number,                       --客户编号
        prmcardno              in     number,                           --卡号
        prmcardsn              in     number,                       --持卡序号
        prmelectrsaveopcount   in     number,             --申请前充值交易计数
        prmelectropcount       in     number,                       --消费计数
        prmcardkind            in     number,                         --卡类型
        prmcardtypedetailid    in     number,                     --卡类型小类
        prmopdt                in     varchar2,                     --操作时间
        --客户金额信息-------------
        prmsumelectraddfare    in     number,                         --卡总额
        prmelectroddfare       in     number,             --电子钱包充值前余额
        prmelectrdummyopfare   in     number,                       --虚充金额
        prmelectropfare        in     number,               --电子钱包实充金额
        --终端交易信息-------------
        prmposcode             in     number,                       --消费终端
        prmpsamcardno          in     number,                       --psam卡号
        prmempid               in     number,                     --充值员编号
        prmcardasn             in     number,
        --返回值-------------------
        prmplanid              in out number,                     --领款计划id
        prmcustomerunitcode    in     varchar2,
        out_result                out number,
        out_msg                   out varchar2)
    as
        vcount                    number;
        visbalance                number;
        vplanid                   number;
        vacccode         constant number := 100;        --固定电子钱包充值科目
        vaccdesc                  varchar (20);
        vempid                    number;
        vareaid                   number;
        velectrsaveopcount        number;
        vplanacccode              number;
        vplanacccodegroup         number;
        v_planlogcount            number;           --电子钱包申请日志记录条数
        n_totalconsumfare         number (20, 2);               --累计消费金额
        n_refunddumpfare          number (10, 2);         --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2);               --最低消费限额
    begin
        ---------------------------------------------------------------------------
        --修改标示：李政
        --时　　间：2013-10-28
        --修改说明：增加客户代码  prmcustomerunitcode
        ---------------------------------------------------------------------------
        --初始化变量
        out_result := -1000;
        out_msg := '充值申请开始！';

        --------------------------------------------------------------------------------
        --验证交易金额合法性
        if (prmelectropfare < 0) or (prmelectrdummyopfare < 0)
        then
            out_result := -1001;
            out_msg := '交易金额必须大于0！';
            return;
        end if;

        --交易金额是充值交款金额和虚充金额的和，一定是大于，如果小于则为异常
        if prmelectropfare < prmelectrdummyopfare
        then
            out_result := -1002;
            out_msg := '交易金额必须大于或等于虚充金额！';
            return;
        end if;

        --------------------------------------------------------------------------------
        --校验领未未决记录
        select count (*)
          into vcount
          from rec_electtron_cash_plan
         where     customerid = prmcustomerid
               and cardsn = prmcardsn
               and status = 1
               and customerunitcode = prmcustomerunitcode
               and cardno = prmcardasn;

        if (vcount <> 0)
        then
            out_result := -1025;
            out_msg := '当前卡存在未决记录，无法进行充值操作';
            return;
        end if;

        ----------------------------------------------------------------------
        out_result := -1003;
        out_msg := '获取交易科目描述！';

        select count (*)
          into vcount
          from base_acc_type a
         where a.acccode = vacccode;

        if vcount = 0
        then
            out_result := -1004;
            out_msg := '交易科目不存在acccode:' || to_char (vacccode);
            return;
        end if;

        select accdscrp
          into vaccdesc
          from base_acc_type
         where acccode = vacccode;

        --------------------------------------------------------------------------------
        --验证账户、设备、psam卡号、职员合法性
        pkg_cust_cash.proc_verify_baseinfo (prmcustomerid,
                                            prmcardno,
                                            prmcardsn,
                                            prmempid,
                                            prmpsamcardno,
                                            prmposcode,
                                            prmcardasn,
                                            prmcustomerunitcode,
                                            out_result,
                                            out_msg);


        if out_result <> 100
        then
            out_result := -1002;
            out_msg := '基本信信验证不通过' || out_msg;
            return;
        end if;

        --------------------------------------------------------------------------------
        select nvl (count (*), 0)
          into vcount
          from rec_electtron_cash_plan
         where     customerid = prmcustomerid
               and cardsn = prmcardsn
               and status = 1
               and customerunitcode = prmcustomerunitcode
               and cardno = prmcardasn;

        if vcount > 0
        then
            out_result := -1008;
            out_msg := '存在电子钱包未决记录';
            return;
        end if;

        --验证账户状态
        select electrsaveopcount,
               sumelectrconsumfare,
               refunddumpfare,
               refundlimitconsumfare
          into velectrsaveopcount,
               n_totalconsumfare,
               n_refunddumpfare,
               n_refundlimitconsumfare
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and customerunitcode = prmcustomerunitcode;

        --只允许卡上的交易计数和数据库中一至，才进行充值申请操作
        if prmelectrsaveopcount <> velectrsaveopcount
        then
            out_result := -1025;
            out_msg :=
                   '卡充值交易计数校验错误！库中交易计数为：'
                || to_char (velectrsaveopcount)
                || '，卡上充值交易计数为：'
                || to_char (prmelectrsaveopcount);
            return;
        end if;

        --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
        --如果用卡余额计算的累计消费金额大，则说明卡上软准确
        --如果库里大，则说明库里可能正确，卡上总额可能错误
        if prmsumelectraddfare - prmelectroddfare > n_totalconsumfare
        then
            n_totalconsumfare := prmsumelectraddfare - prmelectroddfare;
        else
            n_totalconsumfare := n_totalconsumfare;
        end if;

        --比较累计消费金额与最低消费限额
        --如果累计消费金额大于等于最低消费限额，则虚充金额清零
        if n_totalconsumfare >= n_refundlimitconsumfare
           and n_totalconsumfare > 0
        then
            out_result := -1008;
            out_msg := '电子钱包虚充金额清零';

            update base_customers
               set refunddumpfare = 0
             where     customerid = prmcustomerid
                   and customerunitcode = prmcustomerunitcode
                   and cardno = prmcardasn;

            out_result := -1008;
            out_msg := '形成电子钱包虚充金额清零记录';

            insert into rec_rushdumpfare_log (id,
                                              customerid,
                                              cardno,
                                              elecopcount,
                                              elecsaveopcount,
                                              lastdumpfare,
                                              elecsumfare,
                                              sumconsumfare,
                                              opdt,
                                              poscode,
                                              psamcardno,
                                              customerunitcode)
            values (0,
                    prmcustomerid,
                    prmcardno,
                    prmelectropcount,
                    prmelectrsaveopcount,
                    n_refunddumpfare,
                    prmsumelectraddfare,
                    n_totalconsumfare,
                    sysdate,
                    prmposcode,
                    prmpsamcardno,
                    prmcustomerunitcode);
        end if;

        out_result := -1026;
        out_msg := '获取交易流水号！';
        --获取申请流水号
        /* select seq_cash_plan.nextval
           into vplanid
           from dual;
       */

        --------------------------------------------------------------------------------
        out_result := -1027;
        out_msg := '形成充值申请记录！';

        --2016-09-23 兼容 新补办卡/新换卡 领取老卡圈存未领款记录(status=0)
        --赋值：cardno = prmcardasn,
        update rec_electtron_cash_plan
           set electrsaveopcount = prmelectrsaveopcount,
               electropcount = prmelectropcount,
               status = 1,
               cardkind = prmcardkind,
               cardtypedetailid = prmcardtypedetailid,
               poscode = prmposcode,
               cardno = prmcardasn,
               psamcardno = prmpsamcardno,
               wallettype = 1
         where planid = prmplanid;

        /*
            insert into rec_electtron_cash_plan
                        (planid, customerid, cardno, cardsn,
                         cardtypedetailid, sumelectraddfare, electroddfare,
                         electroddfarepre, electropfare, electrdummyopfare,
                         electrsaveopcount, electropcount, status, acccode,
                         opdt, description,
                         areaid, cardkind, poscode, psamcardno, empid,
                         dealtype, wallettype, tac, samtradeno, ver
                        )
                 values (vplanid, prmcustomerid, prmcardno, prmcardsn,
                         prmcardtypedetailid, prmsumelectraddfare, 0,
                         prmelectroddfare, prmelectropfare, prmelectrdummyopfare,
                         prmelectrsaveopcount, prmelectropcount, 1, vacccode,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), vaccdesc,
                         vareaid, prmcardkind, prmposcode, prmpsamcardno, prmempid,
                         0, 0, 0, 0, 0
                        );
      */
        --------------------------------------------------------------------------------
        out_result := -1028;
        out_msg := '形成充值申请记录日志！';

        select nvl (count (*), 0)
          into v_planlogcount
          from rec_electtron_cash_plan_log
         where planid = prmplanid;

        if v_planlogcount = 0
        then
            insert into rec_electtron_cash_plan_log (planid,
                                                     customerid,
                                                     cardno,
                                                     cardsn,
                                                     cardtypedetailid,
                                                     sumelectraddfare,
                                                     electroddfare,
                                                     electroddfarepre,
                                                     electropfare,
                                                     electrsaveopcount,
                                                     electropcount,
                                                     status,
                                                     acccode,
                                                     opdt,
                                                     description,
                                                     cardkind,
                                                     poscode,
                                                     psamcardno,
                                                     empid,
                                                     dealtype,
                                                     wallettype,
                                                     tac,
                                                     samtradeno,
                                                     ver,
                                                     createdt,
                                                     customerunitcode)
            values (prmplanid,
                    prmcustomerid,
                    prmcardno,
                    prmcardsn,
                    prmcardtypedetailid,
                    prmsumelectraddfare,
                    0,
                    prmelectroddfare,
                    prmelectropfare,
                    prmelectrsaveopcount,
                    prmelectropcount,
                    0,
                    vacccode,
                    to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                    vaccdesc,
                    prmcardkind,
                    prmposcode,
                    prmpsamcardno,
                    prmempid,
                    0,
                    0,
                    0,
                    0,
                    0,
                    sysdate,
                    prmcustomerunitcode);
        else
            update rec_electtron_cash_plan_log
               set electroddfarepre = prmelectroddfare,
                   electropfare = prmelectropfare,
                   electrsaveopcount = prmelectrsaveopcount,
                   electropcount = prmelectropcount,
                   status = 0,
                   opdt = to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                   poscode = prmposcode
             where planid = prmplanid;
        end if;

        --------------------------------------------------------------------------------
        prmplanid := prmplanid;
        out_result := 100;
        out_msg := '充值申请成功！';
        commit;
    exception
        when others
        then
            rollback;
            prmplanid := -1;
            out_result := -1;
            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;

    --次卡钱包充值申请
    procedure bank_request_vicecard_cash (
        --客户基本信息-------------
        prmcustomerid         in     number,                        --客户编号
        prmcardno             in     number,                            --卡号
        prmcardsn             in     number,                        --持卡序号
        prmvicesaveopcount    in     number,              --申请前充值交易计数
        prmviceopcount        in     number,                        --消费计数
        prmcardkind           in     number,                          --卡类型
        prmcardtypedetailid   in     number,                      --卡类型小类
        prmopdt               in     varchar2,                      --操作时间
        --客户金额信息-------------
        prmsumviceaddfare     in     number,                          --卡总额
        prmviceoddfare        in     number,              --次卡钱包消费后余额
        prmvicedummyopfare    in     number,                        --虚充金额
        prmviceopfare         in     number,                --次卡钱包实充金额
        --终端交易信息-------------
        prmposcode            in     number,                        --消费终端
        prmpsamcardno         in     number,                        --psam卡号
        prmempid              in     number,                      --充值员编号
        prmcardasn            in     number,
        --返回值-------------------
        prmplanid             in out number,                      --领款计划id
        prmcustomerunitcode   in     varchar2,
        --根据卡结构改动，表结构新增字段
        prmlimittimes         in     number,                --每月消费限制次数
        prmmonthnum           in     number,                        --充值月数
        prmvalidtimestart     in     varchar2,                      --有效起日
        prmvalidtimeend       in     varchar2,                      --有效止日
        out_result               out number,
        out_msg                  out varchar2)
    as
        /*
       --------------------------------------------------------------------------
       --存储过程： proc_request_vicecard_cash
       --作　　者：周晓娜
       --时　　间：2011-07-22
       --说　　明： 次卡钱包充值申请
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败
       --------------------------------------------------------------------------
       --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       --修改标识：周晓娜 2012-09-11
       --修改说明：兼容多客户、增加充值授权额度和一人多卡处理
       --------------------------------------------------------------------------
       --修改标识：周晓娜 2012-12-06
       --修改说明：次卡钱包增加连充月次的功能，对应表结构调整账目处理过程
       --------------------------------------------------------------------------
       */
        vcount                    number;
        visbalance                number;
        vplanid                   number;
        vacccode         constant number := 102;        --固定次卡钱包充值科目
        vaccdesc                  varchar (20);
        vempid                    number;
        vareaid                   number;
        vvicesaveopcount          number;
        vplanacccode              number;
        vplanacccodegroup         number;
        --
        n_totalconsumfare         number (20, 2);               --累计消费金额
        n_refunddumpfare          number (10, 2);         --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2);               --最低消费限额
        n_customerid              number;                               --帐号
        v_paramvalue              varchar2 (20);                    --运行参数
        --充值额度
        v_dptcode                 varchar2 (9);     --职员所属网点（部门编号）
        v_termdptcode             varchar2 (9);     --终端所属网点（部门编号）
        n_isuse                   number;               --是否启用网点授权额度
        n_curoddfare              number (20, 2);               --可用充值额度
        n_workstatus              number;         --状态：0正常状态，1透支状态
        d_limitenddate            date;                     --允许透支截止日期
        d_currdate                date;                             --当前日期
    v_viceplanlogcount        number;           --次卡钱包申请日志记录条数
        n_maxlimitdate            number;                     --最大逾期（天）
        n_allowoverdraftfare      number (20, 2);               --允许透支金额
        v_validtimestart          varchar2 (20);                    --有效起日
        v_validtimeend            varchar2 (20);                    --有效止日
        vvicefreezefare           number (20, 2);
    begin
        --初始化变量
        v_validtimestart :=
            to_date (prmvalidtimestart, 'yyyy-mm-dd hh24:mi:ss');
        v_validtimeend := to_date (prmvalidtimeend, 'yyyy-mm-dd hh24:mi:ss');
        --prmplanid := -1;
        out_result := -1000;
        out_msg := '充值申请开始！';
        d_currdate := sysdate;                                  --系统当前日期
        --------------------------------------------------------------------------------

        --验证账户、设备、psam卡号、职员合法性
        pkg_cust_cash.proc_verify_baseinfo (prmcustomerid,
                                            prmcardno,
                                            prmcardsn,
                                            prmempid,
                                            prmpsamcardno,
                                            prmposcode,
                                            prmcardasn,
                                            prmcustomerunitcode,
                                            out_result,
                                            out_msg);

        if out_result <> 100
        then
            out_result := -1002;
            out_msg := '基本信信验证不通过' || out_msg;
            return;
        end if;

        --2013.7.19新加判断未领冻结金额条件
        select sum (a.vicefreezefare)
          into vvicefreezefare
          from rec_freezefare_acc a
         where     a.customerid = prmcustomerid
               and a.customerunitcode = prmcustomerunitcode
               and a.vicefreezefareflag = 0
               and cardid in
                       (select id
                          from base_customers
                         where     customerid = prmcustomerid
                               and customerunitcode = prmcustomerunitcode
                               and cardno = prmcardno);

        if vvicefreezefare > 0
        then
            out_result := -1003;
            out_msg := '有未领月票冻结金额，当前只能充值电子钱包！';
            return;
        end if;

        --2013.7.19新加判断未领冻结金额条件结束

        --验证交易金额合法性
        if (prmviceopfare < 0)
        then
            out_result := -1001;
            out_msg := '交易金额必须大于0！';
            return;
        end if;

        --交易金额是充值交款金额和虚充金额的和，一定是大于，如果小于则为异常
        if prmviceopfare < prmvicedummyopfare
        then
            out_result := -1002;
            out_msg := '交易金额必须大于或等于虚充金额！';
            return;
        end if;

        ----------------------------------------------------------------------
        out_result := -1003;
        out_msg := '获取交易科目描述！';

        select count (*)
          into vcount
          from base_acc_type a
         where a.acccode = vacccode;

        if vcount = 0
        then
            out_result := -1004;
            out_msg := '交易科目不存在acccode:' || to_char (vacccode);
            return;
        end if;

        select accdscrp
          into vaccdesc
          from base_acc_type
         where acccode = vacccode;

        --------------------------------------------------------------------------------
        n_customerid := prmcustomerid;

        --------------------------------------------------------------------------------
        ------------------------增加充值额度判断-------------------------------

        --根据职员编号获取网点编号
        select a.dptcode
          into v_dptcode
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.empid = prmempid
               and a.customerunitcode = prmcustomerunitcode;

        --根据终端编号获取网点编号
        select a.dptcode
          into v_termdptcode
          from base_term a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.poscode = prmposcode
               and a.customerunitcode = prmcustomerunitcode;

        if v_dptcode <> v_termdptcode
        then
            out_result := -1026;
            out_msg := '出纳员、终端不属于同一个点';
            return;
        end if;

        --根据职员编号获取职员所属网点
        begin
            select a.curoddfare,
                   a.isuse,
                   a.workstatus,
                   a.maxlimitdate,
                   a.limitenddate,
                   a.allowoverdraftfare
              into n_curoddfare,
                   n_isuse,
                   n_workstatus,
                   n_maxlimitdate,
                   d_limitenddate,
                   n_allowoverdraftfare
              from base_chargeauth a
             where a.businesspoint = v_dptcode
                   and a.customerunitcode = prmcustomerunitcode;

            --该充值网点启用充值授权额度
            if n_isuse = 1
            then
                --充值额度不足
                if n_curoddfare < prmviceopfare - prmvicedummyopfare
                then
                    --当前状态为正常状态
                    if n_workstatus = 0
                    then
                        --此出纳员允许透支
                        if d_currdate + n_maxlimitdate > d_currdate
                        then
                            --透支额度不足
                            if n_allowoverdraftfare + n_curoddfare <
                                   prmviceopfare - prmvicedummyopfare
                            then
                                out_result := -1026;
                                out_msg := '允许透支额度不足，不能充值';
                                return;
                            end if;

                            --更新当前状态为透支状态，允许透支截止日期=当前日期+最大逾期
                            update base_chargeauth
                               set workstatus = 1,
                                   limitenddate = d_currdate + n_maxlimitdate
                             where businesspoint = v_dptcode
                                   and customerunitcode = prmcustomerunitcode;
                        --没有授权允许逾期天数
                        else
                            out_result := -1027;
                            out_msg := '超过充值授权最大逾期，不能充值';
                            return;
                        end if;
                    --当前状态为透支状态
                    else
                        --没有超过最大逾期截止日期
                        if d_currdate < d_limitenddate
                        then
                            if n_allowoverdraftfare <
                                   prmviceopfare - prmvicedummyopfare
                            then
                                out_result := -1028;
                                out_msg := '允许透支额度不足，不能充值';
                                return;
                            end if;
                        --超过最大逾期截止日期
                        else
                            out_result := -1029;
                            out_msg := '超过充值授权最大逾期，不能充值';
                            return;
                        end if;
                    end if;
                end if;
            end if;
        exception
            when others
            then
                out_result := -1030;
                out_msg := '获取充值授权额度信息异常';
                return;
        end;

        --------------------------------------------------------------------------------
        --校验领未未决记录
        select count (*)
          into vcount
          from rec_vicecard_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and status = 1
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if (vcount <> 0)
        then
            out_result := -1025;
            out_msg := '当前卡存在次卡未决记录，无法进行充值操作';
            return;
        end if;

        --验证账户状态
        select numbersaveopcount
          into vvicesaveopcount
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and customerunitcode = prmcustomerunitcode;

        select nvl (count (*), 0)
          into vcount
          from base_customers_vicecard
         where     customerid = prmcustomerid
               and cardasn = prmcardasn
               and customerunitcode = prmcustomerunitcode;

        if vcount < 1
        then
            insert into base_customers_vicecard (customerid,
                                                 sumconsumefare,
                                                 sumrdummyfare,
                                                 sumaddfare,
                                                 sumaddfareacc,
                                                 refunddumpfare,
                                                 refundlimitconsumfare,
                                                 ver,
                                                 sumadddummyfare,
                                                 customerunitcode,
                                                 cardasn --需要添加清零日期和清零方式,vicehangdate,hangtype
                                                        )
            values (prmcustomerid,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    prmcustomerunitcode,
                    prmcardno);
        end if;

        --获取次卡钱包消费额累积、未消费完的虚充金额、最低消费限额
        select sumconsumefare, refunddumpfare, refundlimitconsumfare
          into n_totalconsumfare, n_refunddumpfare, n_refundlimitconsumfare
          from base_customers_vicecard
         where     customerid = prmcustomerid
               and cardasn = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --只允许卡上的交易计数和数据库中一至，才进行充值申请操作
        if prmvicesaveopcount <> vvicesaveopcount
        then
            out_result := -1025;
            out_msg :=
                   '卡充值交易计数校验错误！库中交易计数为：'
                || to_char (vvicesaveopcount)
                || '，卡上充值交易计数为：'
                || to_char (prmvicesaveopcount);
            return;
        end if;

        --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
        --如果用卡余额计算的累计消费金额大，则说明卡上软准确
        --如果库里大，则说明库里可能正确，卡上总额可能错误
        if prmsumviceaddfare - prmviceoddfare > n_totalconsumfare
        then
            n_totalconsumfare := prmsumviceaddfare - prmviceoddfare;
        else
            n_totalconsumfare := n_totalconsumfare;
        end if;

        --比较累计消费金额与最低消费限额
        --如果累计消费金额大于等于最低消费限额，则虚充金额清零
        if n_totalconsumfare >= n_refundlimitconsumfare
           and n_totalconsumfare > 0
        then
            out_result := -1008;
            out_msg := '次卡钱包虚充金额清零';

            update base_customers
               set refunddumpfare = 0
             where     customerid = n_customerid
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            out_result := -1008;
            out_msg := '形成次卡钱包虚充金额清零记录';

            insert into rec_rushvicedumpfare_log (id,
                                                  customerid,
                                                  cardno,
                                                  viceopcount,
                                                  vicesaveopcount,
                                                  lastdumpfare,
                                                  elecsumfare,
                                                  sumconsumfare,
                                                  opdt,
                                                  poscode,
                                                  psamcardno,
                                                  customerunitcode,
                                                  wallettype)
            values (0,
                    prmcustomerid,
                    prmcardno,
                    prmviceopcount,
                    prmvicesaveopcount,
                    n_refunddumpfare,
                    prmsumviceaddfare,
                    n_totalconsumfare,
                    sysdate,
                    prmposcode,
                    prmpsamcardno,
                    prmcustomerunitcode,
                    3);
        end if;

        out_result := -1026;
        out_msg := '获取交易流水号！';

        --获取申请流水号
        /*
      select seq_cash_plan.nextval into vplanid from dual;
    */

        --------------------------------------------------------------------------------
        out_result := -1027;
        out_msg := '形成充值申请记录！';

        --2016-09-23 兼容 新补办卡/新换卡 领取老卡圈存未领款记录(status=0)
        --赋值：cardno = prmcardasn,
        update rec_vicecard_cash_plan
           set vicesaveopcount = prmvicesaveopcount,
               viceopcount = prmviceopcount,
               viceoddfare = prmviceoddfare,
               viceopfare = prmviceopfare,
               viceoddfarepre = prmviceoddfare,
               vicedummyopfare = prmvicedummyopfare,
               areaid = vareaid,
               opdt = to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
               empid = prmempid,
               status = 1,
               cardkind = prmcardkind,
               cardtypedetailid = prmcardtypedetailid,
               poscode = prmposcode,
               cardno = prmcardasn,
               psamcardno = prmpsamcardno,
               wallettype = 3,
               validtimestart = v_validtimestart,
               validtimeend = v_validtimeend,
               limittimes = prmlimittimes,
               monthnum = prmmonthnum
         where planid = prmplanid;


        /*
                insert into rec_vicecard_cash_plan (planid,
                                                    customerid,
                                                    cardno,
                                                    cardsn,
                                                    cardtypedetailid,
                                                    sumviceaddfare,
                                                    viceoddfare,
                                                    viceoddfarepre,
                                                    viceopfare,
                                                    vicedummyopfare,
                                                    vicesaveopcount,
                                                    viceopcount,
                                                    status,
                                                    acccode,
                                                    opdt,
                                                    description,
                                                    areaid,
                                                    cardkind,
                                                    poscode,
                                                    psamcardno,
                                                    empid,
                                                    dealtype,
                                                    wallettype,
                                                    tac,
                                                    samtradeno,
                                                    ver,
                                                    customerunitcode,
                                                    validtimestart,
                                                    validtimeend,
                                                    limittimes,
                                                    monthnum)
                     values (vplanid,
                             prmcustomerid,
                             prmcardno,
                             prmcardsn,
                             prmcardtypedetailid,
                             prmsumviceaddfare,
                             0,
                             prmviceoddfare,
                             prmviceopfare,
                             prmvicedummyopfare,
                             prmvicesaveopcount,
                             prmviceopcount,
                             1,
                             vacccode,
                             to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                             vaccdesc,
                             vareaid,
                             prmcardkind,
                             prmposcode,
                             prmpsamcardno,
                             prmempid,
                             1,
                             3,
                             0,
                             0,
                             0,
                             prmcustomerunitcode,
                             v_validtimestart,
                             v_validtimeend,
                             prmlimittimes,
                             prmmonthnum);
        */
        --------------------------------------------------------------------------------
        out_result := -1028;
        out_msg := '形成充值申请记录日志！';


        select nvl (count (*), 0)
          into v_viceplanlogcount
          from rec_vicecard_cash_plan_log
         where planid = prmplanid;

    if v_viceplanlogcount = 0
        then
        insert into rec_vicecard_cash_plan_log (planid,
                                                customerid,
                                                cardno,
                                                cardsn,
                                                cardtypedetailid,
                                                sumviceaddfare,
                                                viceoddfare,
                                                viceoddfarepre,
                                                viceopfare,
                                                vicesaveopcount,
                                                viceopcount,
                                                status,
                                                acccode,
                                                opdt,
                                                description,
                                                cardkind,
                                                poscode,
                                                psamcardno,
                                                empid,
                                                dealtype,
                                                wallettype,
                                                tac,
                                                samtradeno,
                                                ver,
                                                createdt,
                                                customerunitcode,
                                                limittimes,
                                                monthnum,
                                                validtimestart,
                                                validtimeend)
        values (prmplanid,
                prmcustomerid,
                prmcardno,
                prmcardsn,
                prmcardtypedetailid,
                prmsumviceaddfare,
                0,
                prmviceoddfare,
                prmviceopfare,
                prmvicesaveopcount,
                prmviceopcount,
                0,
                vacccode,
                to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                vaccdesc,
                prmcardkind,
                prmposcode,
                prmpsamcardno,
                prmempid,
                1,
                3,
                0,
                0,
                0,
                sysdate,
                prmcustomerunitcode,
                prmlimittimes,
                prmmonthnum,
                v_validtimestart,
                v_validtimeend);
        else
            update rec_vicecard_cash_plan_log
               set viceoddfarepre = prmviceoddfare,
                   viceopfare = prmviceopfare,
                   vicesaveopcount = prmvicesaveopcount,
                   viceopcount = prmviceopcount,
                   status = 0,
                   opdt = to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                   poscode = prmposcode
             where planid = prmplanid;
        end if;
        --------------------------------------------------------------------------------
        prmplanid := prmplanid;
        out_result := 100;
        out_msg := '充值申请成功！';
        commit;
    exception
        when others
        then
            rollback;
            prmplanid := -1;
            out_result := -1;
            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;

  procedure bank_request_month_cash (
     --客户基本信息-------------
       prmcustomerid         in     number, --客户编号
       prmcardno             in     number, --卡号
       prmcardsn             in     number, --持卡序号
       prmvicesaveopcount    in     number, --申请前充值交易计数
       prmviceopcount        in     number, --消费计数
       prmcardkind           in     number, --卡类型
       prmcardtypedetailid   in     number, --卡类型小类
       prmopdt               in     varchar2, --操作时间
       --客户金额信息-------------
       prmsumviceaddfare     in     number, --卡总额
       prmviceoddfare        in     number, --次卡钱包消费后余额
       prmvicedummyopfare    in     number, --虚充金额
       prmviceopfare         in     number, --次卡钱包实充金额
       --终端交易信息-------------
       prmposcode            in     number, --消费终端
       prmpsamcardno         in     number, --psam卡号
       prmempid              in     number, --充值员编号
       prmcardasn            in     number,
       --返回值-------------------
       prmplanid             in out number,                      --领款计划id
       prmcustomerunitcode   in     varchar2,
       --根据卡结构改动，表结构新增字段
       prmlimittimes         in     number, --每月消费限制次数
       prmmonthnum           in     number, --充值月数
       prmvalidtimestart     in     varchar2, --有效起日
       prmvalidtimeend       in     varchar2, --有效止日
       out_result               out number,
       out_msg                  out varchar2)
    as
        /*
       --------------------------------------------------------------------------
       --存储过程： proc_request_month_cash
       --作　　者：梁小凯
       --时　　间：2009-07-03
       --说　　明： 月票钱包充值申请
       --输入参数：
       --输出参数：
       --返回值和返回信息定义：
       --100 ：记录上传成功，帐目统计成功，其他失败
       --------------------------------------------------------------------------
       --修改标示：朱鹏飞 2009-08-07
       --修改说明：增加月票充值前未决处理
       --------------------------------------------------------------------------
       --修改标识：程文平 2012-08-11
       --修改说明：兼容标准公交和住建部密钥系统
       --------------------------------------------------------------------------
       --修改标记：周晓娜 20120910
       --修改说明： 增加客户代码和一人多卡的处理和充值额度判断
       --------------------------------------------------------------------------
       --修改标记：周晓娜 20121204
       --修改说明： 月票钱包信息修改表结构，根据表结构调整过程满足需求
       --------------------------------------------------------------------------
       */
        vcount                    number;
        visbalance                number;
        vplanid                   number;
        vacccode         constant number := 101;        --固定月票钱包充值科目
        vaccdesc                  varchar (20);
        vempid                    number;
        vareaid                   number;
        vvicesaveopcount          number;
        vplanacccode              number;
        vplanacccodegroup         number;
        --
        n_totalconsumfare         number (20, 2);               --累计消费金额
        n_refunddumpfare          number (10, 2);         --退款时有效虚充金额
        n_refundlimitconsumfare   number (10, 2);               --最低消费限额
        n_customerid              number;                               --帐号
        v_paramvalue              varchar2 (20);                    --运行参数
        --充值额度
        v_dptcode                 varchar2 (9);     --职员所属网点（部门编号）
        v_termdptcode             varchar2 (9);     --终端所属网点（部门编号）
        n_isuse                   number;               --是否启用网点授权额度
        n_curoddfare              number (20, 2);               --可用充值额度
        n_workstatus              number;         --状态：0正常状态，1透支状态
        d_limitenddate            date;                     --允许透支截止日期
        d_currdate                date;                             --当前日期
        v_viceplanlogcount        number;           --月票钱包申请日志记录条数
        n_maxlimitdate            number;                     --最大逾期（天）
        n_allowoverdraftfare      number (20, 2);               --允许透支金额
        v_validtimestart          varchar2 (20);                    --有效起日
        v_validtimeend            varchar2 (20);                    --有效止日
        vmonthfreezefare          number (20, 2);
    begin
        --初始化变量
        v_validtimestart :=
            to_date (prmvalidtimestart, 'yyyy-mm-dd hh24:mi:ss');
        v_validtimeend := to_date (prmvalidtimeend, 'yyyy-mm-dd hh24:mi:ss');
        --prmplanid := -1;
        out_result := -1000;
        out_msg := '充值申请开始！';
        d_currdate := sysdate;                                  --系统当前日期
        --验证账户、设备、psam卡号、职员合法性
        pkg_cust_cash.proc_verify_baseinfo (prmcustomerid,
                              prmcardno,
                              prmcardsn,
                              prmempid,
                              prmpsamcardno,
                              prmposcode,
                              prmcardasn,
                              prmcustomerunitcode,
                              out_result,
                              out_msg);

        if out_result <> 100
        then
            out_result := -1002;
            out_msg := '基本信息验证不通过' || out_msg;
            return;
        end if;

        --2013.7.19新加判断未领冻结金额条件
        select sum (monthfreezefare)
          into vmonthfreezefare
          from rec_freezefare_acc a
         where     a.customerid = prmcustomerid
               and a.customerunitcode = prmcustomerunitcode
               and monthfreezefareflag = 0
               and cardid in
                       (select id
                          from base_customers
                         where     customerid = prmcustomerid
                               and customerunitcode = prmcustomerunitcode
                               and cardno = prmcardno);

        if vmonthfreezefare > 0
        then
            out_result := -1003;
            out_msg := '有未领月票冻结金额，当前只能充值电子钱包！';
            return;
        end if;

        --2013.7.19新加判断未领冻结金额条件结束
        --------------------------------------------------------------------------------

        --验证交易金额合法性
        if (prmviceopfare < 0)
        then
            out_result := -1001;
            out_msg := '交易金额必须大于0！';
            return;
        end if;

        --交易金额是充值交款金额和虚充金额的和，一定是大于，如果小于则为异常
        if prmviceopfare < prmvicedummyopfare
        then
            out_result := -1002;
            out_msg := '交易金额必须大于或等于虚充金额！';
            return;
        end if;

        --------------------------------------------------------------------------------
        out_result := -1003;
        out_msg := '获取交易科目描述！';

        select count (*)
          into vcount
          from base_acc_type a
         where a.acccode = vacccode;

        if vcount = 0
        then
            out_result := -1004;
            out_msg := '交易科目不存在acccode:' || to_char (vacccode);
            return;
        end if;

        select accdscrp
          into vaccdesc
          from base_acc_type
         where acccode = vacccode;

        --------------------------------------------------------------------------------
        ------------------------增加充值额度判断-------------------------------

        --根据职员编号获取网点编号
        select a.dptcode
          into v_dptcode
          from base_emp a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.empid = prmempid
               and a.customerunitcode = prmcustomerunitcode;

        --根据终端编号获取网点编号
        select a.dptcode
          into v_termdptcode
          from base_term a, base_dept b
         where     a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.poscode = prmposcode
               and a.customerunitcode = prmcustomerunitcode;

        if v_dptcode <> v_termdptcode
        then
            out_result := -1026;
            out_msg := '出纳员、终端不属于同一个点';
            return;
        end if;

        --根据职员编号获取职员所属网点
        begin
            select a.curoddfare,
                   a.isuse,
                   a.workstatus,
                   a.maxlimitdate,
                   a.limitenddate,
                   a.allowoverdraftfare
              into n_curoddfare,
                   n_isuse,
                   n_workstatus,
                   n_maxlimitdate,
                   d_limitenddate,
                   n_allowoverdraftfare
              from base_chargeauth a
             where     a.businesspoint = v_dptcode
                   and a.customerunitcode = prmcustomerunitcode;

            --该充值网点启用充值授权额度
            if n_isuse = 1
            then
                --充值额度不足
                if n_curoddfare < prmviceopfare - prmvicedummyopfare
                then
                    --当前状态为正常状态
                    if n_workstatus = 0
                    then
                        --此出纳员允许透支
                        if d_currdate + n_maxlimitdate > d_currdate
                        then
                            --透支额度不足
                            if n_allowoverdraftfare + n_curoddfare <
                                   prmviceopfare - prmvicedummyopfare
                            then
                                out_result := -1026;
                                out_msg := '允许透支额度不足，不能充值';
                                return;
                            end if;

                            --更新当前状态为透支状态，允许透支截止日期=当前日期+最大逾期
                            update base_chargeauth
                               set workstatus = 1,
                                   limitenddate = d_currdate + n_maxlimitdate
                             where     businesspoint = v_dptcode
                                   and customerunitcode = prmcustomerunitcode;
                        --没有授权允许逾期天数
                        else
                            out_result := -1027;
                            out_msg := '超过充值授权最大逾期，不能充值';
                            return;
                        end if;
                    --当前状态为透支状态
                    else
                        --没有超过最大逾期截止日期
                        if d_currdate < d_limitenddate
                        then
                            if n_allowoverdraftfare <
                                   prmviceopfare - prmvicedummyopfare
                            then
                                out_result := -1028;
                                out_msg := '允许透支额度不足，不能充值';
                                return;
                            end if;
                        --超过最大逾期截止日期
                        else
                            out_result := -1029;
                            out_msg := '超过充值授权最大逾期，不能充值';
                            return;
                        end if;
                    end if;
                end if;
            end if;
        exception
            when others
            then
                out_result := -1030;
                out_msg := '获取充值授权额度信息异常';
                return;
        end;

        --------------------------------------------------------------------------------
        --校验领未未决记录
        select count (*)
          into vcount
          from rec_monticket_cash_plan
         where     customerid = n_customerid
               and cardsn = prmcardsn
               and cardno = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if (vcount <> 0)
        then
            out_result := -1025;
            out_msg := '当前卡存在月票未决记录，无法进行充值操作';
            return;
        end if;

        ----------------------------------------------------------------------
        --验证账户状态
        select monsaveopcount
          into vvicesaveopcount
          from base_customers
         where     customerid = prmcustomerid
               and cardno = prmcardno
               and cardsn = prmcardsn
               and customerunitcode = prmcustomerunitcode;

        select nvl (count (*), 0)
          into vcount
          from base_customers_monticket
         where     customerid = prmcustomerid
               and cardasn = prmcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount < 1
        then
            insert into base_customers_monticket (customerid,
                                                  sumconsumefare,
                                                  sumrdummyfare,
                                                  sumaddfare,
                                                  sumaddfareacc,
                                                  refunddumpfare,
                                                  refundlimitconsumfare,
                                                  ver,
                                                  sumadddummyfare,
                                                  customerunitcode,
                                                  cardasn--需要添加清零日期和清零方式,vicehangdate,hangtype
                                                  )
                 values (prmcustomerid,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         prmcustomerunitcode,
                         prmcardno);
        end if;

        --获取月票钱包消费额累积、未消费完的虚充金额、最低消费限额
        select sumconsumefare, refunddumpfare, refundlimitconsumfare
          into n_totalconsumfare, n_refunddumpfare, n_refundlimitconsumfare
          from base_customers_monticket
         where     customerid = prmcustomerid
               and cardasn = prmcardno
               and customerunitcode = prmcustomerunitcode;

        --只允许卡上的交易计数和数据库中一至，才进行充值申请操作
        if prmvicesaveopcount <> vvicesaveopcount
        then
            out_result := -1025;
            out_msg :=
                   '卡充值交易计数校验错误！库中交易计数为：'
                || to_char (vvicesaveopcount)
                || '，卡上充值交易计数为：'
                || to_char (prmvicesaveopcount);
            return;
        end if;

        --用卡总额 - 卡余额=累计消费金额 与库累计消费金额对比
        --如果用卡余额计算的累计消费金额大，则说明卡上软准确
        --如果库里大，则说明库里可能正确，卡上总额可能错误
        if prmsumviceaddfare - prmviceoddfare > n_totalconsumfare
        then
            n_totalconsumfare := prmsumviceaddfare - prmviceoddfare;
        else
            n_totalconsumfare := n_totalconsumfare;
        end if;

        --比较累计消费金额与最低消费限额
        --如果累计消费金额大于等于最低消费限额，则虚充金额清零
        if     n_totalconsumfare >= n_refundlimitconsumfare
           and n_totalconsumfare > 0
        then
            out_result := -1008;
            out_msg := '月票钱包虚充金额清零';

            update base_customers
               set refunddumpfare = 0
             where     customerid = n_customerid
                   and cardno = prmcardno
                   and customerunitcode = prmcustomerunitcode;

            out_result := -1008;
            out_msg := '形成月票钱包虚充金额清零记录';

            insert into rec_rushvicedumpfare_log (id,
                                                  customerid,
                                                  cardno,
                                                  viceopcount,
                                                  vicesaveopcount,
                                                  lastdumpfare,
                                                  elecsumfare,
                                                  sumconsumfare,
                                                  opdt,
                                                  poscode,
                                                  psamcardno,
                                                  customerunitcode,
                                                  wallettype)
                 values (0,
                         prmcustomerid,
                         prmcardno,
                         prmviceopcount,
                         prmvicesaveopcount,
                         n_refunddumpfare,
                         prmsumviceaddfare,
                         n_totalconsumfare,
                         sysdate,
                         prmposcode,
                         prmpsamcardno,
                         prmcustomerunitcode,
                         2);
        end if;

        out_result := -1026;
        out_msg := '获取交易流水号！';

        --获取申请流水号
        /*
        select seq_cash_plan.nextval into vplanid from dual;
        */

        --------------------------------------------------------------------------------
        out_result := -1027;
        out_msg := '形成充值申请记录！';

        /*
        insert into rec_monticket_cash_plan (planid,
                                             customerid,
                                             cardno,
                                             cardsn,
                                             cardtypedetailid,
                                             sumviceaddfare,
                                             viceoddfare,
                                             viceoddfarepre,
                                             viceopfare,
                                             vicedummyopfare,
                                             vicesaveopcount,
                                             viceopcount,
                                             status,
                                             acccode,
                                             opdt,
                                             description,
                                             cardkind,
                                             poscode,
                                             psamcardno,
                                             empid,
                                             dealtype,
                                             wallettype,
                                             tac,
                                             samtradeno,
                                             ver,
                                             customerunitcode,
                                             validtimestart,
                                             validtimeend,
                                             limittimes,
                                             monthnum)
             values (vplanid,
                     prmcustomerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumviceaddfare,
                     0,
                     prmviceoddfare,
                     prmviceopfare,
                     prmvicedummyopfare,
                     prmvicesaveopcount,
                     prmviceopcount,
                     1,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     1,
                     2,
                     0,
                     0,
                     0,
                     prmcustomerunitcode,
                     v_validtimestart,
                     v_validtimeend,
                     prmlimittimes,
                     prmmonthnum);
                     */


        --2016-09-23 兼容 新补办卡/新换卡 领取老卡圈存未领款记录(status=0)
        --赋值：cardno = prmcardasn,
        update rec_monticket_cash_plan
        set vicesaveopcount = prmvicesaveopcount,
               viceopcount = prmviceopcount,
               viceoddfare = prmviceoddfare,
               viceopfare = prmviceopfare,
               viceoddfarepre = prmviceoddfare,
               vicedummyopfare = prmvicedummyopfare,
               opdt = to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
               empid = prmempid,
               status = 1,
               cardkind = prmcardkind,
               cardtypedetailid = prmcardtypedetailid,
               poscode = prmposcode,
               cardno = prmcardasn,
               psamcardno = prmpsamcardno,
               wallettype = 2,
               validtimestart = v_validtimestart,
               validtimeend = v_validtimeend,
               limittimes = prmlimittimes,
               monthnum = prmmonthnum
         where planid = prmplanid;

        --------------------------------------------------------------------------------
        out_result := -1028;
        out_msg := '形成充值申请记录日志！';

        select nvl (count (*), 0)
          into v_viceplanlogcount
          from rec_monticket_cash_plan_log
         where planid = prmplanid;

        if v_viceplanlogcount = 0
        then
        insert into rec_monticket_cash_plan_log (planid,
                                                 customerid,
                                                 cardno,
                                                 cardsn,
                                                 cardtypedetailid,
                                                 sumviceaddfare,
                                                 viceoddfare,
                                                 viceoddfarepre,
                                                 viceopfare,
                                                 vicesaveopcount,
                                                 viceopcount,
                                                 status,
                                                 acccode,
                                                 opdt,
                                                 description,
                                                 cardkind,
                                                 poscode,
                                                 psamcardno,
                                                 empid,
                                                 dealtype,
                                                 wallettype,
                                                 tac,
                                                 samtradeno,
                                                 ver,
                                                 createdt,
                                                 customerunitcode,
                                                 limittimes,
                                                 monthnum,
                                                 validtimestart,
                                                 validtimeend)
             values (prmplanid,
                     prmcustomerid,
                     prmcardno,
                     prmcardsn,
                     prmcardtypedetailid,
                     prmsumviceaddfare,
                     0,
                     prmviceoddfare,
                     prmviceopfare,
                     prmvicesaveopcount,
                     prmviceopcount,
                     0,
                     vacccode,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     vaccdesc,
                     prmcardkind,
                     prmposcode,
                     prmpsamcardno,
                     prmempid,
                     1,
                     2,
                     0,
                     0,
                     0,
                     sysdate,
                     prmcustomerunitcode,
                     prmlimittimes,
                     prmmonthnum,
                     v_validtimestart,
                     v_validtimeend);
       else
            update rec_monticket_cash_plan_log
               set viceoddfarepre = prmviceoddfare,
                   viceopfare = prmviceopfare,
                   vicesaveopcount = prmvicesaveopcount,
                   viceopcount = prmviceopcount,
                   status = 0,
                   opdt = to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                   poscode = prmposcode
             where planid = prmplanid;
        end if;

        --------------------------------------------------------------------------------
        prmplanid := prmplanid;
        out_result := 100;
        out_msg := '充值申请成功！';
        commit;
    exception
        when others
        then
            rollback;
            prmplanid := -1;
            out_result := -1;
            out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
    end;

end;
/
create or replace package pkg_rec_bllt
as
   procedure proc_insertbllt (
      prmcardno         in       number,                   --需要挂失的黑名单
      prmsourcetype     in       number,
      --黑名单来源（1：制卡中心；2：自助；3：记录上传；4：其他）
      prmcardasn        in       number,                       --卡应用序列号
      prmcustunitcode   in       varchar2,                         --客户代码
      prmmessage        out      varchar2,                         --返回信息
      prmreturn         out      integer                           --返回结果
   );

   procedure proc_uploadsafebllt (
      prmcardno         in       number,
      prmposrecno       in       number,
      prmfinddt         in       varchar2,
      prmposcode        in       number,
      prmcardasn        in       number,                       --卡应用序列号
      prmcustunitcode   in       varchar2,                         --客户代码
      out_msg           out      varchar2,
      out_result        out      number
   );

   procedure proc_checkbllt_psamcard (
      prmpsamcardno     in       number,
      prmopdt           in       varchar2,
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      number,
      out_msg           out      varchar2
   );

   procedure proc_insertlzbllt(prmsn           in number, --版本号
                              prmcardasn      in number, --卡应用序列号
                              prmstate        in number, --状态0 正常 1 取消
                              prmcustunitcode in varchar2, --客户代码
                              prmnousedate    in varchar2, --有效期  yyyy-mm-dd  hh24:mi:ss
                              prmsuorceip     in varchar2, --来源ip
                              out_msg         out varchar2, --返回信息
                              out_result      out integer --返回结果
                              );
   procedure proc_insertlzbllt_oda(prmsn           in number, --版本号
                              prmcardasn      in number, --卡应用序列号
                              prmstate        in number, --状态0 正常 1 取消
                              prmcustunitcode in varchar2, --客户代码
                              prmnousedate    in varchar2, --有效期  yyyy-mm-dd  hh24:mi:ss
                              prmsuorceip     in varchar2, --来源ip
                              prmsuorcetype   in number,  --来源类型
                              prmcardownbusiness in number,--卡种类
                              out_msg         out varchar2, --返回信息
                              out_result      out integer --返回结果
                              );
end;
 
 
 
 
/
create or replace package body pkg_rec_bllt
as
   procedure proc_uploadsafebllt (
      prmcardno         in       number,
      prmposrecno       in       number,
      prmfinddt         in       varchar2,
      prmposcode        in       number,
      prmcardasn        in       number,                       --卡应用序列号
      prmcustunitcode   in       varchar2,                         --客户代码
      out_msg           out      varchar2,
      out_result        out      number
   )
   as
         /*
      --------------------------------------------------------------------------
      --存储过程：proc_uploadsafebllt
      --作　　者：梁小凯
      --时　　间：20090601
      --说　　明：处理一条上传的安全黑名单记录
      --输入参数：
      --输出参数：
      ------------------------------------------------------------------
      */
      vcount        integer;
      vid           integer;
      vsourceip     varchar (20);
      vsourcetype   integer;
      vnousedate    date;
      vbllttype     number;
   begin
      out_result := -1;
      out_msg := '处理失败';
      vid := 0;
      vsourceip := '127.0.0.1';
      vsourcetype := 0;
      vnousedate := sysdate;

--------------------------------------------------------------------------------
--验证系统参数表
      select nvl (count (*), 0)
        into vcount
        from base_syspara a;

      if vcount = 0
      then
         out_result := -1001;
         out_msg := '系统参数表不能为空！';
         return;
      end if;

      --获取黑名单类型
      select a.bllttype
        into vbllttype
        from base_syspara a;

--------------------------------------------------------------------------------
      if vbllttype = 0
      then
         out_result := -1001;
         out_msg := '黑名单模式';

         select count (*)
           into vcount
           from rec_bllt a
          where a.customerunitcode = prmcustunitcode
            and a.cardno = prmcardno
            and a.cardasn = prmcardasn;

         if vcount = 1
         then
            select id, suorceip, suorcetype, nousedate
              into vid, vsourceip, vsourcetype, vnousedate
              from rec_bllt a
             where a.customerunitcode = prmcustunitcode
               and cardno = prmcardno
               and cardasn = prmcardasn;
         end if;

         --插入安全黑名单表
         select count (*)
           into vcount
           from rec_bllt_safe a
          where a.customerunitcode = prmcustunitcode
            and a.cardno = prmcardno
            and a.cardasn = prmcardasn;

         if vcount = 0
         then
            insert into rec_bllt_safe
                        (cardno, cardasn,
                         lossdt,
                         finddt, oppsn, suorcetype, suorceip, systemid,
                         nousedate, poscode, posrecno, customerunitcode
                        )
                 values (prmcardno, prmcardasn,
                         to_date (prmfinddt, 'yyyy-mm-dd hh24:mi:ss'),
                         sysdate, vid, vsourcetype, vsourceip, 0,
                         vnousedate, prmposcode, prmposrecno, prmcustunitcode
                        );
         end if;

         delete from rec_bllt a
               where a.customerunitcode = prmcustunitcode
                 and a.cardno = prmcardno
                 and a.cardasn = prmcardasn;
      else
         out_result := -1002;
         out_msg := '白名单模式';

         select count (*)
           into vcount
           from rec_bllt a
          where a.customerunitcode = prmcustunitcode
            and a.cardno = prmcardno
            and state = 0
            and a.cardasn = prmcardasn;

         if vcount = 1
         then
            --如果存在此黑名单，则将状态修改为解挂状态
            update rec_bllt a
               set state = 1
             where a.customerunitcode = prmcustunitcode
               and a.cardno = prmcardno
               and a.cardasn = prmcardasn;
         end if;
      end if;

      out_result := 100;
      out_msg := '处理成功';
      commit;
      return;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := to_char (sqlcode) || '_+_' || sqlerrm;
   end;

   procedure proc_insertbllt (
      prmcardno         in       number,                    --需要挂失的黑名单
      prmsourcetype     in       number,
      prmcardasn        in       number,                        --卡应用序列号
      prmcustunitcode   in       varchar2,                          --客户代码
      --黑名单来源（1：制卡中心；2：自助；3：记录上传；4：其他）
      prmmessage        out      varchar2,                          --返回信息
      prmreturn         out      integer                            --返回结果
   )
   as
      /*
      ----------------------------------------------------------------------------
      --存储过程：proc_insertbllt
      --作　　者：朱鹏飞
      --时　　间：2009-05-26
      --说　　明：生成黑名单和工作站传输任务
      --输入参数：
      --输出参数：
      --    out_result: 100 成功
      --                200 黑名单已经存在
      --                <0  异常失败
      --------------------------------------------------------------------------
      --修改人：周晓娜 2012-09-07
      --修改说明：增加客户代码处理
      --------------------------------------------------------------------------
      */
      vcount        integer;
      --vcurusedate   date;
      vbllttype     number;
      vscardsnr     varchar2 (8);
      vcardno       number;
      vstate        number;
   begin
      prmmessage := '更新账本状态为挂失';
      prmreturn := -1;

      --------------------------------------------------------------------------------
--验证系统参数表
      select nvl (count (*), 0)
        into vcount
        from base_syspara a;

      if vcount = 0
      then
         prmreturn := -1001;
         prmmessage := '系统参数表不能为空！';
         return;
      end if;

      --获取黑名单类型
      select a.bllttype
        into vbllttype
        from base_syspara a;

--------------------------------------------------------------------------------
      if vbllttype = 0
      then
         prmreturn := -1002;
         prmmessage := '黑名单模式！';

         select count (*)
           into vcount
           from base_customers a
          where a.cardno = prmcardno and a.customerunitcode = prmcustunitcode;

         if vcount > 0
         then
            update base_customers a
               set status = 3
             where a.cardno = prmcardno
               and a.customerunitcode = prmcustunitcode;

            insert into rec_loss
                        (lossfc, customerid, cardno, opdt, cardsn, empid,
                         optype, losstype, poscode, sourceip,
                         cardtypedetailid, opdesc, hasunloss,
                         customerunitcode)
               select 0, customerid, cardno, sysdate, cardsn, 0, 0, 1, 0,
                      '0.0.0.0', cardtypedetailid, '自动挂失', 0,
                      prmcustunitcode
                 from base_customers a
                where a.cardno = prmcardno
                  and a.customerunitcode = prmcustunitcode;
         end if;

         select count (*)
           into vcount
           from rec_bllt a
          where a.cardno = prmcardno
            and a.cardasn = prmcardasn
            and a.customerunitcode = prmcustunitcode;

         if vcount = 0
         then
            select count (*)
              into vcount
              from rec_bllt_safe a
             where a.cardno = prmcardno
               and a.cardasn = prmcardasn
               and a.customerunitcode = prmcustunitcode;

            if vcount = 0
            then
               prmmessage := '插入黑名单';
               prmreturn := -2;

               insert into rec_bllt
                           (cardno, lossdt, nousedate,
                            suorcetype, suorceip, state, cardasn,
                            customerunitcode
                           )
                    values (prmcardno, sysdate, sysdate + 1460,
                            prmsourcetype, '0.0.0.0', 0, prmcardasn,
                            prmcustunitcode
                           );

               prmmessage := '插入黑名单成功！';
               prmreturn := 100;
            else
               update rec_bllt a
                  set losscount = nvl (losscount, 0) + 1
                where a.cardno = prmcardno
                  and a.cardasn = prmcardasn
                  and a.customerunitcode = prmcustunitcode;

               prmmessage := '此卡号在安全黑名单中存在！';
               prmreturn := 100;
            end if;
         else
            update rec_bllt a
               set losscount = nvl (losscount, 0) + 1
             where a.cardno = prmcardno
               and a.cardasn = prmcardasn
               and a.customerunitcode = prmcustunitcode;

            prmmessage := '此黑名单已存在！';
            prmreturn := 200;
         end if;
--------------------------------------------------------------------------------
      else
         prmreturn := -1003;
         prmmessage := '白名单模式！';

         --验证卡号是否存在
         select nvl (count (*), 0)
           into vcount
           from base_customers a
          where a.cardno = prmcardno and a.customerunitcode = prmcustunitcode;

         if vcount = 1
         then
            select a.scardsnr
              into vscardsnr
              from base_customers a
             where cardno = prmcardno and a.customerunitcode = prmcustunitcode;

            prmreturn := -1004;
            prmmessage := '生成白名单！';
            --用十进制的卡唯一号作为卡号
            vcardno := to_number (vscardsnr, 'xxxxxxxx');

            select nvl (count (*), 0)
              into vcount
              from rec_bllt a
             where a.cardno = vcardno
               and cardasn = prmcardasn
               and a.customerunitcode = prmcustunitcode;

            --黑名单表中不存在此卡号
            if vcount = 0
            then
               insert into rec_bllt
                           (cardno, lossdt, nousedate, suorcetype,
                            suorceip, state, cardasn, customerunitcode
                           )
                    values (vcardno, sysdate, sysdate + 1460, prmsourcetype,
                            '0.0.0.0', 0, prmcardasn, prmcustunitcode
                           );

               prmmessage := '插入黑名单成功！';
               prmreturn := 100;
            else
               --黑名单表中存在此卡号
               select a.state
                 into vstate
                 from rec_bllt a
                where a.cardno = vcardno
                  and cardasn = prmcardasn
                  and a.customerunitcode = prmcustunitcode;

               if vstate <> 0
               then
                  update rec_bllt
                     set state = 0
                   where cardno = vcardno
                     and cardasn = prmcardasn
                     and customerunitcode = prmcustunitcode;
               end if;

               prmmessage := '更新黑名单状态成功！';
               prmreturn := 100;
            end if;
         else
            prmmessage := '此卡号在账本表中不存在';
            prmreturn := 200;
         end if;
      end if;

      --注意：不提交，由外层调用过程提交
      return;
   exception
      when others
      then
         prmreturn := prmreturn;
         prmmessage := '插入黑名单异常:' || sqlerrm;

         insert into log_operation
                     (stationid, systemid,
                      message,
                      logtype, recordlevel, createdate, outid, name,
                      customerunitcode, empcode, empid
                     )
              values (0, 0,
                         '生成黑名单失败，卡号：'
                      || to_char (prmcardno)
                      || '返回描述'
                      || prmmessage,
                      0, 0, sysdate, 0, null,
                      prmcustunitcode, '0', 0
                     );
   end;

   procedure proc_checkbllt_psamcard (
      prmpsamcardno     in       number,
      prmopdt           in       varchar2,
      prmcustunitcode   in       varchar2,                          --客户代码
      out_result        out      number,
      out_msg           out      varchar2
   )
   as
       /*
      ----------------------------------------------------------------------------
      --存储过程：proc_checkbllt_psamcard
      --作　　者：朱鹏飞
      --时　　间：2009-05-26
      --说　　明：检查psam卡是否已挂失，及确认消费记录为挂失前后消费？
      --输入参数：
      --输出参数：
      --    out_result: 100 psam卡未挂失
      --                200 psam已经挂失，并且是挂失后消费
      --                201 psam已经挂失，是挂失前消费
      --                <0  异常
      --------------------------------------------------------------------------
      --修改人：周晓娜 2012-09-07
      --修改说明：增加客户代码处理
      --------------------------------------------------------------------------
      */
      i_count   integer;
   begin
      select count (*)
        into i_count
        from base_samcard a
       where a.samcardno = prmpsamcardno
         and a.customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := 200;
         out_msg := '此psam卡不存在';
         return;
      end if;

      select count (*)
        into i_count
        from base_samcard a
       where a.samcardno = prmpsamcardno
         and a.state = 10
         and a.customerunitcode = prmcustunitcode;

      if i_count > 0
      then
         out_result := 100;
         out_msg := '此psam卡已挂失';

         select count (*)
           into i_count
           from base_samcard a
          where a.samcardno = prmpsamcardno
            and a.state = 10
            and to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss') < a.lossdate
            and a.customerunitcode = prmcustunitcode;

         if i_count > 0
         then
            --记录上传时间比挂失时间小
            out_result := 201;
            out_msg := 'psam卡挂失前消费';
         else
            --记录上传时间比挂失时间大
            out_result := 200;
            out_msg := 'psam卡挂失后消费';
         end if;
      else
         out_result := 100;
         out_msg := '此psam卡未挂失';
      end if;
   exception
      when others
      then
         out_result := -1001;
         out_msg := '检查psam卡是否已挂失异常，具体原因为：' || sqlerrm;
   end;

   --柳州市民卡黑名单
  procedure proc_insertlzbllt(prmsn           in number, --版本号
                              prmcardasn      in number, --卡应用序列号
                              prmstate        in number, --状态0 正常 1 取消
                              prmcustunitcode in varchar2, --客户代码
                              prmnousedate    in varchar2, --有效期  yyyy-mm-dd  hh24:mi:ss
                              prmsuorceip     in varchar2, --来源ip
                              out_msg         out varchar2, --返回信息
                              out_result      out integer --返回结果
                              ) as
    vcount     number;
    vnousedate date;
  begin
    vnousedate := to_date(prmnousedate, 'yyyy-mm-dd hh24:mi:ss');
    out_result := 100;
    out_msg    := '无操作';
    --挂失
    if prmstate = 0 then

      select count(0)
        into vcount
        from rec_bllt a
       where to_char(a.cardasn) = to_char(prmcardasn)
         and a.customerunitcode = prmcustunitcode;
      if vcount = 0 then

        insert into rec_bllt
          (
          id,
          cardno,
           lossdt,
           nousedate,
           state,
           cardasn,
           customerunitcode,
           suorcetype,
           suorceip,ver)
        values
          (
          prmsn,
          prmcardasn,
           sysdate,
           vnousedate,
           0,
           prmcardasn,
           prmcustunitcode,
           4,
           prmsuorceip,prmsn);

        out_result := 100;
        out_msg    := '插入黑名单成功';
      else
        select count(0)
          into vcount
          from rec_bllt a
         where to_char(a.cardasn) = to_char(prmcardasn)
           and a.customerunitcode = prmcustunitcode
           and a.state = 1;
        if vcount = 1 then

          update rec_bllt a
             set a.state     = 0,
                 a.lossdt    = sysdate,
                 a.losscount = a.losscount + 1,
                 suorceip    = prmsuorceip,
                 a.nousedate = vnousedate,
                 a.id=prmsn,
                 a.ver=prmsn
           where to_char(a.cardasn) = to_char(prmcardasn)
             and a.customerunitcode = prmcustunitcode;

          out_result := 100;
          out_msg    := '更新黑名单状态成功';
        end if;
      end if;
    else

      select count(0)
        into vcount
        from rec_bllt a
       where to_char(a.cardasn) = to_char(prmcardasn)
         and a.customerunitcode = prmcustunitcode
         and a.state = 0;
      if vcount = 1 then
        update rec_bllt a
           set a.state     = 1,
               a.lossdt    = sysdate,
               suorceip    = prmsuorceip,
               a.nousedate = vnousedate, a.id=prmsn,
                 a.ver=prmsn
         where to_char(a.cardasn) = to_char(prmcardasn)
           and a.customerunitcode = prmcustunitcode;
        out_result := 100;
        out_msg    := '更新黑名单状态成功';
      end if;
    end if;
    commit;
    return;
  exception
    when others then
      rollback;
      out_result := -1;
      out_msg    := to_char(sqlcode) || '_+_' || sqlerrm;
  end;



   --柳州市民卡黑名单   oda
  procedure proc_insertlzbllt_oda(prmsn           in number, --版本号
                              prmcardasn      in number, --卡应用序列号
                              prmstate        in number, --状态0 正常 1 取消
                              prmcustunitcode in varchar2, --客户代码
                              prmnousedate    in varchar2, --有效期  yyyy-mm-dd  hh24:mi:ss
                              prmsuorceip     in varchar2, --来源ip
                              prmsuorcetype   in number,  --来源类型
                              prmcardownbusiness in number,--卡种类
                              out_msg         out varchar2, --返回信息
                              out_result      out integer --返回结果
                              ) as
    vcount     number;
    vnousedate date;
  begin
    vnousedate := to_date(prmnousedate, 'yyyy-mm-dd hh24:mi:ss');
    out_result := 100;
    out_msg    := '无操作';
    --挂失
    if prmstate = 0 then

      select count(0)
        into vcount
        from rec_bllt a
       where to_char(a.cardasn) = to_char(prmcardasn)
         and a.customerunitcode = prmcustunitcode;
      if vcount = 0 then

        insert into rec_bllt
          (
          id,
          cardno,
           lossdt,
           nousedate,
           state,
           cardasn,
           customerunitcode,
           suorcetype,
           suorceip,ver,
           cardownbusiness)
        values
          (
          prmsn,
          prmcardasn,
           sysdate,
           vnousedate,
           0,
           prmcardasn,
           prmcustunitcode,
           prmsuorcetype,
           prmsuorceip,prmsn,prmcardownbusiness);

        out_result := 100;
        out_msg    := '插入黑名单成功';
      else
        select count(0)
          into vcount
          from rec_bllt a
         where to_char(a.cardasn) = to_char(prmcardasn)
           and a.customerunitcode = prmcustunitcode;
        if vcount = 1 then

          update rec_bllt a
             set a.state     = 0,
                 a.lossdt    = sysdate,
                 a.losscount = a.losscount + 1,
                 suorceip    = prmsuorceip,
                 a.nousedate = vnousedate,
                 a.id=prmsn,
                 a.ver=prmsn
           where to_char(a.cardasn) = to_char(prmcardasn)
             and a.customerunitcode = prmcustunitcode;

          out_result := 100;
          out_msg    := '更新黑名单状态成功';
        end if;
      end if;
    else

      select count(0)
        into vcount
        from rec_bllt a
       where to_char(a.cardasn) = to_char(prmcardasn)
         and a.customerunitcode = prmcustunitcode
         and a.state = 0;
      if vcount = 1 then
        update rec_bllt a
           set a.state     = 1,
               a.lossdt    = sysdate,
               suorceip    = prmsuorceip,
               a.nousedate = vnousedate, a.id=prmsn,
                 a.ver=prmsn
         where to_char(a.cardasn) = to_char(prmcardasn)
           and a.customerunitcode = prmcustunitcode;
        out_result := 100;
        out_msg    := '更新黑名单状态成功';
      end if;
    end if;
    commit;
    return;
  exception
    when others then
      rollback;
      out_result := -1;
      out_msg    := to_char(sqlcode) || '_+_' || sqlerrm;
  end;

end;
/
create or replace package pkg_rec_city_interconnect is
  type refcursortype is ref cursor; --游标类型定义，用于返回数据集

  procedure proc_uploadnoncardconsumerec(
                                         --客户基本信息-------------
                                         prmcustomerid in number, --客户编号
                                         prmcardno     in number, --卡号
                                         prmcardsn     in number, --持卡序号
                                         prmwallettype in number, --钱包类型
                                         prmcardkind   in number, --卡种类 1：m1卡 2：cpu卡
                                         prmcardtype   in number, --卡类型 普通卡 月卡 老年卡等
                                         prmopdt       in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                         prmopcount    in number, --消费操作计数，根据钱包判断
                                         --客户金额信息-------------
                                         prmsumelectrfare in number, --卡总额
                                         prmoddfare       in number, --消费后余额，根据钱包类型判断钱包
                                         prmopfare        in number, --消费金额，根据钱包类型判断钱包
                                         prmdiscountfare  in number, --打折金额
                                         --终端交易信息-------------
                                         prmbusid      in number, --车辆id
                                         prmposcode    in number, --设备唯一运营编号
                                         prmsamcardno  in number, --pasm卡卡号
                                         prmtac        in number, --tac验证码
                                         prmdriverid   in number, --司机编号
                                         prmbuslineid  in number, --线路编号
                                         prmdeptcode   in varchar2, --线路所属部门
                                         prmdealtype   in number, --记录类型，用于确定科目
                                         prmtradetype  in number, --交易应用类型
                                         prmcollectdt  in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                         prmtotalrecno in number,
                                         --总交易流水号包含交易流水和日志流水
                                         prmtraderecno in number, --终端交易流水号
                                         prmsamtradeno in number, --pasm卡交易流水号
                                         --cpu卡加入字段------------
                                         prmcardasn       in number, --卡应用序列号
                                         prmtradecitycode in varchar2, --交易地城市代码
                                         prmownercitycode in varchar2, --所属地城市代码
                                         prmmaincardtype  in number, --主卡类型
                                         prmassocardtype  in number, --子卡类型
                                         prmcardversion   in number, --卡内版本
                                         prmtradekind     in number, --交易性质
                                         prmtestflag      in number, --测试标记
                                         prmcollectpoint  in varchar2, --采集点编号
                                         prmoperatorpoint in varchar2, --营运单位编号
                                         prmcustunitcode  in varchar2, --客户代码
                                         prmacccode       in number,
                                         prmaccdesc       in varchar2, --科目描述
                                         --坏账处理---
                                         prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                         --返回值-------------------
                                         out_result out number,
                                         out_msg    out varchar2);

  procedure proc_noncardconsumerecresult(prmcardasn           in number, --卡号
                                         prmopcount           in number, --卡消费计数器
                                         prmcstaccfc          in number, --检索参考号
                                         prmaccountdate       in varchar2, --收单机构清算日期
                                         prmacquireacceptdate in varchar2, --收单机构受理日期
                                         prmmakecardcode      in varchar2, --发卡地发卡机构代码
                                         prmopdt              in varchar2, --交易日期
                                         prmoddfare           number, --消费后余额
                                         prmopfare            number, --消费额
                                         prmacccode           in varchar2, --交易类型
                                         prmresultcode        in varchar2, --结果代码
                                         prmresultinfo        in varchar2, --结果描述
                                         prmresultcontent     in varchar2, --返回原始报文
                                         prmcustunitcode      in varchar2, --商户代码
                                         prmfilecreatedate    in varchar2, -- 文件创建日期
                                         prmfilename          in varchar2, -- 文件名称
                                         out_result           out number,
                                         out_msg              out varchar2);

  procedure proc_geterrorconsumebuildcm(prmerrordealcstaccfc in number,
                                        prmsearchnumber      in varchar2,
                                        prmsponsorcitycode   in varchar2,
                                        prmcustunitcode      in varchar2,
                                        out_cursor           out refcursortype);

  procedure proc_uploadnolocaladjustresult(prmcstaccfc       in number,
                                           prmsearchnumber   in varchar2,
                                           prmvalidatecode   in varchar2, --清算中心最终验证结果
                                           prmvalidatedesc   in varchar2, --清算中心最终验证结果描述  
                                           prmfilename       in varchar2, --ad文件名称 
                                           prmfilecreatedate in varchar2, -- 文件创建日期                                    
                                           prmcustunitcode   in varchar2,
                                           prmtradecitycode  in varchar2, --交易地城市代码
                                           prmownercitycode  in varchar2, --所属地城市代码
                                           out_result        out number,
                                           out_msg           out varchar2);

  procedure proc_uploadlocaladjustresult(prmcardkind in number, --卡种类 1：m1卡 2：cpu卡                                    
                                         prmcardtype in number,
                                         --终端交易信息-------------
                                         prmposcode    in number, --设备唯一运营编号
                                         prmsamcardno  in number, --pasm卡卡号
                                         prmtac        in number, --tac验证码
                                         prmdriverid   in number, --司机编号
                                         prmdealtype   in number, --记录类型，用于确定科目
                                         prmtradetype  in number, --交易应用类型
                                         prmcollectdt  in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                         prmtotalrecno in number, --总交易流水号包含交易流水和日志流水
                                         prmtraderecno in number, --终端交易流水号
                                         prmsamtradeno in number, --pasm卡交易流水号
                                         --cpu卡加入字段------------
                                         prmcardasn       in number, --卡应用序列号
                                         prmtradecitycode in varchar2, --交易地城市代码
                                         prmownercitycode in varchar2, --所属地城市代码
                                         prmmaincardtype  in number, --主卡类型
                                         prmassocardtype  in number, --子卡类型
                                         prmcardversion   in number, --卡内版本
                                         prmtradekind     in number, --交易性质
                                         prmtestflag      in number, --测试标记
                                         prmcollectpoint  in varchar2, --采集点编号
                                         prmoperatorpoint in varchar2, --营运单位编号
                                         
                                         prmcstaccfc       in number,
                                         prmsearchnumber   in varchar2,
                                         prmvalidatecode   in varchar2, --清算中心最终验证结果
                                         prmvalidatedesc   in varchar2, --清算中心最终验证结果描述
                                         prmfilename       in varchar2, --ad文件名称 
                                         prmfilecreatedate in varchar2, -- 文件创建日期                                    
                                         prmcustunitcode   in varchar2,
                                         out_result        out number,
                                         out_msg           out varchar2);
end;
/
create or replace package body pkg_rec_city_interconnect
is
    /*
    ----------------------------------------------------------------------------
    --copyright (c) 1992-2009 新开普电子股份有限公司 版权所有。
    --存储过程名称：pkg_rec_city_interconnect
    --功能描述：    公交一卡通针对交通部互联互通接口支持
    --              0.异地卡本地交易记录上传
    --              1.异地卡本地交易处理
    ---------------------------------------------------------------------------
    todo : 日期时间 处理
    */
    --异地卡本地消费处理过程
    procedure proc_uploadnoncardconsumerec (
        --客户基本信息-------------
        prmcustomerid      in     number, --客户编号
        prmcardno          in     number, --卡号
        prmcardsn          in     number, --持卡序号
        prmwallettype      in     number, --钱包类型
        prmcardkind        in     number, --卡种类 1：m1卡 2：cpu卡
        prmcardtype        in     number, --卡类型 普通卡 月卡 老年卡等
        prmopdt            in     varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
        prmopcount         in     number, --消费操作计数，根据钱包判断
        --客户金额信息-------------
        prmsumelectrfare   in     number, --卡总额
        prmoddfare         in     number, --消费后余额，根据钱包类型判断钱包
        prmopfare          in     number, --消费金额，根据钱包类型判断钱包
        prmdiscountfare    in     number, --打折金额
        --终端交易信息-------------
        prmbusid           in     number, --车辆id
        prmposcode         in     number, --设备唯一运营编号
        prmsamcardno       in     number, --pasm卡卡号
        prmtac             in     number, --tac验证码
        prmdriverid        in     number, --司机编号
        prmbuslineid       in     number, --线路编号
        prmdeptcode        in     varchar2, --线路所属部门
        prmdealtype        in     number, --记录类型，用于确定科目
        prmtradetype       in     number, --交易应用类型
        prmcollectdt       in     varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
        prmtotalrecno      in     number,
        --总交易流水号包含交易流水和日志流水
        prmtraderecno      in     number, --终端交易流水号
        prmsamtradeno      in     number, --pasm卡交易流水号
        --cpu卡加入字段------------
        prmcardasn         in     number, --卡应用序列号
        prmtradecitycode   in     varchar2, --交易地城市代码
        prmownercitycode   in     varchar2, --所属地城市代码
        prmmaincardtype    in     number, --主卡类型
        prmassocardtype    in     number, --子卡类型
        prmcardversion     in     number, --卡内版本
        prmtradekind       in     number, --交易性质
        prmtestflag        in     number, --测试标记
        prmcollectpoint    in     varchar2, --采集点编号
        prmoperatorpoint   in     varchar2, --营运单位编号
        prmcustunitcode    in     varchar2, --客户代码
        prmacccode         in     number, --科目
        prmaccdesc         in     varchar2, --科目描述
        --坏账处理---
        prmbadid           in     number, --处理坏账时，坏账流水号，正常消费记录上传为0
        --返回值-------------------
        out_result            out number,
        out_msg               out varchar2)
    as
        /*
        --------------------------------------------------------------------------
        --修改说明：异地卡本地消费处理过程
        --------------------------------------------------------------------------
        */
        n_acccode          number := 211; --电子钱包消费科目
        v_accdesc          varchar2 (50);
        custom_exception   exception; --自定义错误
    begin
        out_result := -1000;
        out_msg := '上传明细失败！';
        n_acccode := prmacccode;
        v_accdesc := prmaccdesc;

        out_result := -1003;
        out_msg := '记录入城市一卡通互联互通消费表异常';

        --非本地卡交易记录，记录入互联互通消费表
        insert into rec_city_nonlocalconsume (customerid,
                                              cardno,
                                              cardtype,
                                              opdt,
                                              oddfare,
                                              opfare,
                                              acccode,
                                              dscrp,
                                              cardsn,
                                              opcount,
                                              dealtype,
                                              collectdt,
                                              uploaddate,
                                              busid,
                                              driverid,
                                              poscode,
                                              samcardno,
                                              cardkind,
                                              traderecno,
                                              tac,
                                              samtradeno,
                                              buslineid,
                                              totalrecno,
                                              discount,
                                              tradetype,
                                              linedept,
                                              cardasn,
                                              tradecitycode,
                                              ownercitycode,
                                              maincardtype,
                                              assocardtype,
                                              cardversion,
                                              tradekind,
                                              testflag,
                                              collectpoint,
                                              operatorpoint,
                                              status,
                                              deptcode,
                                              wallettype,
                                              customerunitcode)
             values (prmcustomerid,
                     prmcardno,
                     prmcardtype,
                     to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                     prmoddfare,
                     prmopfare,
                     n_acccode,
                     v_accdesc,
                     prmcardsn,
                     prmopcount,
                     0,
                     to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                     sysdate,
                     prmbusid,
                     prmdriverid,
                     prmposcode,
                     prmsamcardno,
                     prmcardkind,
                     prmtraderecno,
                     prmtac,
                     prmsamtradeno,
                     prmbuslineid,
                     prmtotalrecno,
                     prmdiscountfare,
                     prmtradetype,
                     prmdeptcode,
                     prmcardasn,
                     trim (prmtradecitycode),
                     trim (prmownercitycode),
                     prmmaincardtype,
                     prmassocardtype,
                     prmcardversion,
                     prmtradekind,
                     prmtestflag,
                     prmcollectpoint,
                     trim (prmoperatorpoint),
                     0,
                     prmdeptcode,
                     prmwallettype,
                     prmcustunitcode);

        --如果是处理坏账的记录，修改坏账的最终处理状态为已入正常账
        if prmbadid <> 0
        then
            update rec_consumeacc_bad
               set status = 1
             where cstaccfc = prmbadid;
        end if;

        out_result := 100;
        out_msg := '操作成功！';
        commit;
        return;
    exception
        when custom_exception -----先处理自定义异常
        then
            out_result := -1;
            out_msg :=
                   '异地卡记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
            rollback;
        when others
        then
            out_result := -1;
            out_msg :=
                   '异地卡记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
            rollback;
    end;

    --异地卡本地消费结算结果处理
    procedure proc_noncardconsumerecresult (
        prmcardasn             in     number, --卡号
        prmopcount             in     number, --卡消费计数器
        prmcstaccfc            in     number, --检索参考号
        prmaccountdate         in     varchar2, --收单机构清算日期
        prmacquireacceptdate   in     varchar2, --收单机构受理日期
        prmmakecardcode        in     varchar2, --发卡地发卡机构代码
        prmopdt                in     varchar2, --交易日期
        prmoddfare                    number, --消费后余额
        prmopfare                     number, --消费额
        prmacccode             in     varchar2, --交易类型
        prmresultcode          in     varchar2, --结果代码
        prmresultinfo          in     varchar2, --结果描述
        prmresultcontent       in     varchar2, --返回原始报文
        prmcustunitcode        in     varchar2, --商户代码
        prmfilecreatedate      in     varchar2, -- 文件创建日期
        prmfilename            in     varchar2, -- 文件名称
        out_result                out number,
        out_msg                   out varchar2)
    as
        /*
        ---------------------------------------------------------------------------

           --存储过程：proc_noncardconsumerecresult
           --作　　者：黎会芳
           --时　　间：2015-12-21
           --说　　明：异地卡本地消费结算结果处理
              --输出参数：
           --out_result：100 ：成功
           --            其他的都认为失败
        ---------------------------------------------------------------------------
        */
        n_count            number;
        n_acccode          number;
        v_opdt             varchar2 (20);
        n_opfare           number;
        n_discountfare     number;
        n_cardkind         number;
        n_cardtype         number;
        n_driverid         number;
        v_poscode          varchar2 (20);
        n_samcardno        number;
        n_lineid           number;
        v_dptcode          varchar2 (20);
        n_busid            number;
        n_wallettype       number;
        n_maincardtype     number;
        d_settlementdate   date; --清算日期
        d_filecreatedate   date; --文件创建日期
        d_accountdate      date; --结算日期
    begin
        out_result := -10000;
        out_msg := '形成消费记录账目异常';

        d_filecreatedate :=
            to_date (prmfilecreatedate, 'yyyy-mm-dd hh24:mi:ss');
        d_accountdate := to_date (prmaccountdate, 'yyyy-mm-dd hh24:mi:ss');
        d_settlementdate := to_date (prmaccountdate, 'yyyy-mm-dd hh24:mi:ss');
        --------------------------------------------------------------------------------
        out_result := -1003;
        out_msg := '检查当前是否正在结算';

        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_msg := '判断账目结算状态异常，' || out_msg;
            out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
            return;
        end if;

        if (prmacccode = '204' or prmacccode = '214' or prmacccode = '224')
        then
            n_wallettype := 4;
        else
            n_wallettype := 1;
        end if;

        out_msg := '记录原始报文信息时失败 ';
        out_result := -1004;

        n_count := 0;

        select nvl (count (*), 0)
          into n_count
          from rec_city_nonlocalconsume a
         where     a.cardasn = prmcardasn
               and a.opcount = prmopcount
               and a.wallettype = n_wallettype
               and a.customerunitcode = prmcustunitcode;

        if (n_count != 1)
        then
            insert into rec_city_nonlocalreturninfo (localcstaccfc,
                                                     cardno,
                                                     opdt,
                                                     oddfare,
                                                     opfare,
                                                     acccode,
                                                     dscrp,
                                                     opcount,
                                                     customerunitcode,
                                                     accountdate,
                                                     transferdate,
                                                     resultcode,
                                                     resultinfo,
                                                     resultcontent,
                                                     acquireacceptdate,
                                                     makecardcode,
                                                     wallettype,
                                                     filename)
                select 0,
                       prmcardasn,
                       to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                       prmoddfare,
                       prmopfare,
                       prmacccode,
                       '',
                       prmopcount,
                       prmcustunitcode,
                       to_date (prmaccountdate, 'yyyy-mm-dd hh24:mi:ss'),
                       sysdate,
                       prmresultcode,
                       prmresultinfo,
                       prmresultcontent,
                       to_date (prmacquireacceptdate,
                                'yyyy-mm-dd hh24:mi:ss'),
                       prmmakecardcode,
                       n_wallettype,
                       prmfilename
                  from rec_city_nonlocalconsume a
                 where     a.cardasn = prmcardasn
                       and a.opcount = prmopcount
                       and a.wallettype = n_wallettype
                       and a.customerunitcode = prmcustunitcode;

            out_msg := '记录不合法，不存在或存在多条记录，记录数：' || n_count;
            out_result := 100;

            --修改清分清算机构清算结果原始信息
            update rec_city_nolocalcardconsume_fb a
               set a.status = 1, dealtype = '020047', updatedate = sysdate
             where     a.cardno = prmcardasn
                   and a.opcount = prmopcount
                   and a.wallettype = n_wallettype
                   and a.customerunitcode = prmcustunitcode;

            commit;
            return;
        end if;

        insert into rec_city_nonlocalreturninfo (localcstaccfc,
                                                 cardno,
                                                 opdt,
                                                 oddfare,
                                                 opfare,
                                                 acccode,
                                                 dscrp,
                                                 opcount,
                                                 customerunitcode,
                                                 accountdate,
                                                 transferdate,
                                                 resultcode,
                                                 resultinfo,
                                                 resultcontent,
                                                 acquireacceptdate,
                                                 makecardcode,
                                                 wallettype,
                                                 filename)
            select a.cstaccfc,
                   a.cardasn,
                   a.opdt,
                   a.oddfare,
                   a.opfare,
                   a.acccode,
                   a.dscrp,
                   a.opcount,
                   a.customerunitcode,
                   to_date (prmaccountdate, 'yyyy-mm-dd hh24:mi:ss'),
                   sysdate,
                   prmresultcode,
                   prmresultinfo,
                   prmresultcontent,
                   to_date (prmacquireacceptdate, 'yyyy-mm-dd hh24:mi:ss'),
                   prmmakecardcode,
                   a.wallettype,
                   prmfilename
              from rec_city_nonlocalconsume a
             where     a.cardasn = prmcardasn
                   and a.opcount = prmopcount
                   and a.wallettype = n_wallettype
                   and a.customerunitcode = prmcustunitcode;

        ------------------------------------结算失败数据处理--------------------------------------------
        out_msg := '处理结算数据时失败 ';
        out_result := -1005;

        if (prmresultcode != '000000')
        then
            --更新异地卡消费记录临时表
            update rec_city_nonlocalconsume a
               set a.status = 1, --0 未处理 1已处理
                   dealtype = 21, --数据清算失败，错误代码依照清算机构定
                   filename = prmfilename,
                   filecreatedate = to_date (prmfilecreatedate, 'yyyymmdd'),
                   accountdate = to_date (prmaccountdate, 'yyyymmdd'),
                   errorcode = prmresultcode
             where     a.cardasn = prmcardasn
                   and a.opcount = prmopcount
                   and a.wallettype = n_wallettype
                   and a.customerunitcode = prmcustunitcode;

            out_msg := '修改清分清算机构清算结果原始信息记录失败 ';
            out_result := -1006;

            --修改清分清算机构清算结果原始信息
            update rec_city_nolocalcardconsume_fb a
               set a.status = 1, --0 未处理 1已处理
                   dealtype = prmresultcode,
                   updatedate = sysdate
             where     a.cardno = prmcardasn
                   and a.opcount = prmopcount
                   and a.wallettype = n_wallettype
                   and a.customerunitcode = prmcustunitcode;

            out_result := 100;
            out_msg := '结算失败记录处理成功';
            commit;
            return;
        end if;

        --------------------------------------结果成功------------------------------------------
        if prmresultcode = '000000'
        then
            select a.cardtype,
                   a.wallettype,
                   to_char (a.opdt, 'yyyy-mm-dd hh24:mi:ss'),
                   a.opfare,
                   a.acccode,
                   a.busid,
                   a.driverid,
                   a.poscode,
                   a.samcardno,
                   a.cardkind,
                   a.buslineid,
                   a.discount,
                   a.linedept,
                   a.maincardtype
              into n_cardtype,
                   n_wallettype,
                   v_opdt,
                   n_opfare,
                   n_acccode,
                   n_busid,
                   n_driverid,
                   v_poscode,
                   n_samcardno,
                   n_cardkind,
                   n_lineid,
                   n_discountfare,
                   v_dptcode,
                   n_maincardtype
              from rec_city_nonlocalconsume a
             where     a.cardasn = prmcardasn
                   and a.opcount = prmopcount
                   and a.wallettype = n_wallettype
                   and a.customerunitcode = prmcustunitcode;

            out_msg := '结果成功处理，修改未结算表记录失败 ';
            out_result := -1006;

            --更新异地卡消费记录临时表
            update rec_city_nonlocalconsume a
               set a.status = 1, --0 未处理 1已处理
                   dealtype = 1, --1表示本地处理成功，正常数据 number类型
                   filename = prmfilename,
                   filecreatedate = to_date (prmfilecreatedate, 'yyyymmdd'),
                   accountdate = to_date (prmaccountdate, 'yyyymmdd'),
                   errorcode = prmresultcode
             where     a.cardasn = prmcardasn
                   and a.opcount = prmopcount
                   and a.wallettype = n_wallettype
                   and a.customerunitcode = prmcustunitcode;

            out_msg := '修改清分清算机构清算结果原始信息记录失败 ';
            out_result := -1006;

            --修改清分清算机构清算结果原始信息
            update rec_city_nolocalcardconsume_fb a
               set a.status = 1, --0 未处理 1已处理
                                dealtype = '1', --1表示本地处理成功，正常数据
                                               updatedate = sysdate
             where     a.cardno = prmcardasn
                   and a.opcount = prmopcount
                   and a.wallettype = n_wallettype
                   and a.customerunitcode = prmcustunitcode;

            out_msg := '入正常表失败 ';
            out_result := -1005;

            insert into rec_city_nonlocalsuccess (cstaccfc,
                                                  customerid,
                                                  cardno,
                                                  cardtype,
                                                  wallettype,
                                                  opdt,
                                                  oddfare,
                                                  opfare,
                                                  acccode,
                                                  dscrp,
                                                  cardsn,
                                                  opcount,
                                                  dealtype,
                                                  collectdt,
                                                  uploaddate,
                                                  busid,
                                                  driverid,
                                                  poscode,
                                                  samcardno,
                                                  cardkind,
                                                  traderecno,
                                                  tac,
                                                  samtradeno,
                                                  buslineid,
                                                  totalrecno,
                                                  discount,
                                                  tradetype,
                                                  linedept,
                                                  repealempid,
                                                  cardasn,
                                                  tradecitycode,
                                                  ownercitycode,
                                                  maincardtype,
                                                  assocardtype,
                                                  cardversion,
                                                  tradekind,
                                                  testflag,
                                                  operatorpoint,
                                                  collectpoint,
                                                  transstatus,
                                                  businesstype,
                                                  deptcode,
                                                  customerunitcode,
                                                  accountdate,
                                                  transferdate,
                                                  filecreatedate,
                                                  filename)
                select a.cstaccfc,
                       a.customerid,
                       a.cardno,
                       a.cardtype,
                       a.wallettype,
                       a.opdt,
                       a.oddfare,
                       a.opfare,
                       a.acccode,
                       a.dscrp,
                       a.cardsn,
                       a.opcount,
                       a.dealtype,
                       a.collectdt,
                       a.uploaddate,
                       a.busid,
                       a.driverid,
                       a.poscode,
                       a.samcardno,
                       a.cardkind,
                       a.traderecno,
                       a.tac,
                       a.samtradeno,
                       a.buslineid,
                       a.totalrecno,
                       a.discount,
                       a.tradetype,
                       a.linedept,
                       a.repealempid,
                       a.cardasn,
                       a.tradecitycode,
                       a.ownercitycode,
                       a.maincardtype,
                       a.assocardtype,
                       a.cardversion,
                       a.tradekind,
                       a.testflag,
                       a.operatorpoint,
                       a.collectpoint,
                       a.status,
                       a.businesstype,
                       a.deptcode,
                       a.customerunitcode,
                       to_date (prmaccountdate, 'yyyy-mm-dd hh24:mi:ss'),
                       sysdate,
                       to_date (prmfilecreatedate, 'yyyy-mm-dd hh24:mi:ss'),
                       prmfilename
                  from rec_city_nonlocalconsume a
                 where     a.cardasn = prmcardasn
                       and a.opcount = prmopcount
                       and a.wallettype = n_wallettype
                       and a.customerunitcode = prmcustunitcode;

            -------------------------------------账目统计--------------------------------------------
            out_msg := '账目统计失败';
            out_result := -1007;
            --消费记录即时统计
            pkg_st_payment.proc_nolocalaccount_online (
                v_opdt,
                n_opfare,
                n_acccode,
                n_discountfare,
                n_cardkind,
                n_cardtype,
                n_driverid,
                v_poscode,
                n_samcardno,
                n_lineid,
                v_dptcode,
                n_busid,
                n_wallettype, --钱包类型 电子钱包
                0, --0正常 1回滚统计操作
                prmcustunitcode,
                to_char (d_accountdate, 'yyyy-mm-dd hh24:mi:ss'),
                to_char (d_settlementdate, 'yyyy-mm-dd hh24:mi:ss'),
                to_char (d_filecreatedate, 'yyyy-mm-dd hh24:mi:ss'),
                out_msg,
                out_result,
                n_maincardtype);

            if (out_result = 100)
            then
                out_msg := '结果成功记录处理成功';
                commit;
                return;
            else
                if out_result > 0
                then
                    out_result := out_result * -1;
                else
                    out_result := out_result;
                end if;

                out_msg := '记录上传统计失败,' || out_msg;
                rollback;
                return;
            end if;
        end if;
    exception
        when others
        then
            rollback;
            out_result := -10000;
            out_msg := out_msg || to_char (sqlcode) || '_+_' || sqlerrm;
    end;

    --根据部级下发的ed数据及异地消费本地的验证机构 查询生成cm文件需要的数据
    --此版本只支持收单机构发起异常交易验证，发卡机构发起一次退单类型的差错，其他差错类型暂时不支持
    procedure proc_geterrorconsumebuildcm (
        prmerrordealcstaccfc   in     number,
        prmsearchnumber        in     varchar2,
        prmsponsorcitycode     in     varchar2,
        prmcustunitcode        in     varchar2,
        out_cursor                out refcursortype)
    as
        /*
          ---------------------------------------------------------------------------

        --存储过程：proc_geterrorconsumebuildcm
        --作　　者：胡凡凡
        --时　　间：2017-05-18
        --说　　明：查询差错调整数据
                   异地消费差错模块，根据部级下发的ed文件，及异地消费数据在本地的验证结果生成cm文件上送清算中心
            ---------------------------------------------------------------------------
        */
        v_confirmcitycode   varchar2 (20); --差错确认方机构代码
        v_ownercitycode     varchar2 (20); --发卡方机构代码
        v_tradecitycode     varchar2 (20); --收单方机构代码

        v_owner             varchar (20); --本地配置发卡方机构代码
        v_operator          varchar (20); --本地配置收单方机构代码

        n_validateresult    number; --异地消费本地验证结果
        i_count             number;

        v_result            number;
        v_msg               varchar2 (100);
    begin
        v_result := -1001;
        v_msg := '取本地发卡、收单方机构代码失败！';

        ----------------取本地发卡、收单方机构代码-----------------
        select nvl (trim (max (ownercitycode)), '0'),
               nvl (trim (max (operatorcode)), '0')
          into v_owner, v_operator
          from base_legal_person a
         where a.customerunitcode = prmcustunitcode;

        if length (v_owner) != 8 or length (v_operator) != 8
        then
            v_result := 101;
            v_msg :=
                   '发卡机构代码或收单机构代码配置错误，请重新配置！当前设置的发卡机构代码：'
                || v_owner
                || '当前设置的收单机构代码：'
                || v_operator;
            return;
        end if;

        v_result := -1002;
        v_msg := '查询部级下发的差错数据失败！';

        select count (cstaccfc)
          into i_count
          from rec_city_errordeal_ed ed
         where     ed.cstaccfc = prmerrordealcstaccfc
               and ed.searchnumber = prmsearchnumber
               and ed.status = 0
               and ed.customerunitcode = prmcustunitcode;

        if i_count <= 0
        then
            return;
        end if;

        --差错发起机构是收单方，此消费为本地卡异地消费
        if substr (prmsponsorcitycode, 0, 1) = '1'
        then
            v_result := -1004;
            v_msg := '查询本地卡异地消费记录在本地的验证结果！';

            --获取本地处理结果
            select count (*)
              into i_count
              from rec_city_localcardconsume_cl cl
             where     cl.searchnumber = prmsearchnumber
                   and cl.status = 1
                   --and cl.errordealstatus = 1
                   and cl.ownercitycode = v_owner
                   and cl.operatorflag = prmsponsorcitycode
                   and cl.customerunitcode = prmcustunitcode;

            v_confirmcitycode := v_owner;
            v_ownercitycode := v_owner;
            v_tradecitycode := prmsponsorcitycode;

            if i_count = 1
            then
                select cl.dealtype
                  into n_validateresult
                  from rec_city_localcardconsume_cl cl
                 where     cl.searchnumber = prmsearchnumber
                       and cl.status = 1
                       --and cl.errordealstatus = 1
                       and cl.ownercitycode = v_owner
                       and cl.operatorflag = prmsponsorcitycode
                       and cl.customerunitcode = prmcustunitcode;
            else
                v_result := -1005;
                v_msg := '查询本地卡异地消费记录失败！';
                n_validateresult := 0;
            end if;
        --差错发起机构是发卡方，此消费为异地卡本地消费
        elsif substr (prmsponsorcitycode, 0, 1) = '0'
        then
            v_result := -1006;
            v_msg := '查询异地卡本地消费记录在本地的验证结果！';

            select count (*)
              into i_count
              from rec_city_nonlocalconsume rec
             where     rec.cstaccfc = to_number (prmsearchnumber) --prmsearchnumber为12位的字符串，需转换成数字在进行比较
                   and rec.status = 1
                   -- and rec.errordealstatus = 1
                   and rec.ownercitycode = prmsponsorcitycode
                   and rec.operatorpoint = v_operator
                   and rec.customerunitcode = prmcustunitcode;

            v_confirmcitycode := v_operator;
            v_ownercitycode := prmsponsorcitycode;
            v_tradecitycode := v_operator;

            if i_count = 1
            then
                n_validateresult := 0; --消费记录在本地消费成功,拒绝退单
            else
                n_validateresult := 1; --异地卡本地消费记录进坏账，记录在本地消费失败，统一退单
            end if;
        end if;

        open out_cursor for
            select ed.cstaccfc,
                   ed.accountdate,
                   ed.casiserialnum,
                   ed.searchnumber,
                   ed.adjustmenttype,
                   ed.errortype,
                   case n_validateresult
                       when 1 then '01'
                       when 0 then '02'
                   end
                       resultcode,
                   ed.cardno,
                   ed.opcount,
                   ed.electronoddfare,
                   ed.transactiontype,
                   ed.electronopfare,
                   ed.mcc,
                   ed.channeltype,
                   ed.opdt,
                   ed.testflag,
                   ed.sponsorcitycode,
                   v_confirmcitycode confirmcitycode,
                   v_ownercitycode ownercitycode,
                   v_tradecitycode tradecitycode
              from rec_city_errordeal_ed ed
             where     ed.cstaccfc = prmerrordealcstaccfc
                   and ed.searchnumber = prmsearchnumber
                   and ed.status = 0
                   and ed.customerunitcode = prmcustunitcode;
    exception
        when others
        then
            v_result := -10000;
            v_msg := v_msg || to_char (sqlcode) || '_+_' || sqlerrm;
    end;

    --根据差错处理部级下发的最终ad文件，处理异地卡本地消费原始消费记录
    --此版本只支持收单机构发起异常交易验证，发卡机构发起一次退单类型的差错，其他差错类型暂时不支持
    procedure proc_uploadnolocaladjustresult (
        prmcstaccfc         in     number,
        prmsearchnumber     in     varchar2,
        prmvalidatecode     in     varchar2, --清算中心最终验证结果
        prmvalidatedesc     in     varchar2, --清算中心最终验证结果描述
        prmfilename         in     varchar2, --ad文件名称
        prmfilecreatedate   in     varchar2, -- 文件创建日期
        prmcustunitcode     in     varchar2,
        prmtradecitycode    in     varchar2, --交易地城市代码
        prmownercitycode    in     varchar2, --所属地城市代码
        out_result             out number,
        out_msg                out varchar2)
    as
        /*
          ---------------------------------------------------------------------------
        --存储过程：proc_uploadnolocaladjustresult
        --作　　者：胡凡凡
        --时　　间：2017-05-19
        --说　　明：根据差错处理部级下发的最终ad文件，处理异地卡本地消费原始消费记录
            ---------------------------------------------------------------------------
        */
        v_errorcode      varchar2 (10);
        v_accountcode    varchar2 (10);
        i_count          number;
        n_acccode        number;
        v_opdt           varchar2 (20);
        n_opfare         number;
        n_discountfare   number;
        n_cardkind       number;
        n_cardtype       number;
        n_driverid       number;
        v_poscode        varchar2 (20);
        n_samcardno      number;
        n_lineid         number;
        v_dptcode        varchar2 (20);
        n_busid          number;
        n_wallettype     number;
        n_maincardtype   number;
    begin
        if prmvalidatecode = '0'
        then
            --ad文件中成功时的错误码为’0‘，其他文件中成功的错误码为’000000‘，做转换
            v_errorcode := '000000';
        else
            v_errorcode := prmvalidatecode;
        end if;

        out_result := -1001;
        out_msg := '查询部级下发的差错数据ad失败！';

        select count (*)
          into i_count
          from rec_city_errordeal_ad ad
         where     ad.cstaccfc = prmcstaccfc
               and ad.oldsearchnumber = prmsearchnumber
               and ad.status = 0
               and ad.customerunitcode = prmcustunitcode;

        if i_count = 0
        then
            return;
        end if;

        --差错发起机构是发卡方，此消费为异地卡本地消费
        out_result := -1002;
        out_msg := '查询异地卡本地消费记录在本地的消费失败！';

        select count (*)
          into i_count
          from rec_city_nonlocalconsume rec
         where     rec.cstaccfc = to_number (prmsearchnumber) --prmsearchnumber为12位的字符串，需转换成数字在进行比较
               and rec.status = 1
               -- and rec.errordealstatus = 1
               and rec.ownercitycode = prmownercitycode
               and rec.operatorpoint = prmtradecitycode
               and rec.customerunitcode = prmcustunitcode;

        if i_count = 0
        then
            return;
        end if;

        select rec.errorcode
          into v_accountcode
          from rec_city_nonlocalconsume rec
         where     rec.cstaccfc = to_number (prmsearchnumber) --prmsearchnumber为12位的字符串，需转换成数字在进行比较
               and rec.status = 1
               -- and rec.errordealstatus = 1
               and rec.ownercitycode = prmownercitycode
               and rec.operatorpoint = prmtradecitycode
               and rec.customerunitcode = prmcustunitcode;


        --只有当原数据清算失败，差错清算成功时才执行
        if (v_errorcode = '000000' and v_accountcode != '000000')
        then
            select a.cardtype,
                   a.wallettype,
                   to_char (a.opdt, 'yyyy-mm-dd hh24:mi:ss'),
                   a.opfare,
                   a.acccode,
                   a.busid,
                   a.driverid,
                   a.poscode,
                   a.samcardno,
                   a.cardkind,
                   a.buslineid,
                   a.discount,
                   a.linedept,
                   a.maincardtype
              into n_cardtype,
                   n_wallettype,
                   v_opdt,
                   n_opfare,
                   n_acccode,
                   n_busid,
                   n_driverid,
                   v_poscode,
                   n_samcardno,
                   n_cardkind,
                   n_lineid,
                   n_discountfare,
                   v_dptcode,
                   n_maincardtype
              from rec_city_nonlocalconsume a
             where     a.cstaccfc = to_number (prmsearchnumber) --prmsearchnumber为12位的字符串，需转换成数字在进行比较
                   and a.status = 1
                   and a.ownercitycode = prmownercitycode
                   and a.operatorpoint = prmtradecitycode
                   and a.customerunitcode = prmcustunitcode;

            out_result := -1003;
            out_msg := '修改异地卡本地消费原始消费记录清算结构为成功！';

            --更新异地卡消费记录临时表
            update rec_city_nonlocalconsume rec
               set rec.dealtype = 1, --本地清算成功
                   rec.filename = prmfilename, --ad文件名
                   rec.filecreatedate =
                       to_date (prmfilecreatedate, 'yyyy/mm/dd hh24:mi:ss'),
                   rec.uploaddate = sysdate,
                   rec.errorcode = v_errorcode, --最终验证结果
                   rec.errordealstatus = 0 --0未进行差错处理 1正在进行差错处理
             where     rec.cstaccfc = to_number (prmsearchnumber) --prmsearchnumber为12位的字符串，需转换成数字在进行比较
                   and rec.status = 1
                   -- and rec.errordealstatus = 1
                   and rec.ownercitycode = prmownercitycode
                   and rec.operatorpoint = prmtradecitycode
                   and rec.customerunitcode = prmcustunitcode;

            out_result := -1004;
            out_msg := '异地卡本地消费插入到成功表！';

            insert into rec_city_nonlocalsuccess (cstaccfc,
                                                  customerid,
                                                  cardno,
                                                  cardtype,
                                                  wallettype,
                                                  opdt,
                                                  oddfare,
                                                  opfare,
                                                  acccode,
                                                  dscrp,
                                                  cardsn,
                                                  opcount,
                                                  dealtype,
                                                  collectdt,
                                                  uploaddate,
                                                  busid,
                                                  driverid,
                                                  poscode,
                                                  samcardno,
                                                  cardkind,
                                                  traderecno,
                                                  tac,
                                                  samtradeno,
                                                  buslineid,
                                                  totalrecno,
                                                  discount,
                                                  tradetype,
                                                  linedept,
                                                  repealempid,
                                                  cardasn,
                                                  tradecitycode,
                                                  ownercitycode,
                                                  maincardtype,
                                                  assocardtype,
                                                  cardversion,
                                                  tradekind,
                                                  testflag,
                                                  operatorpoint,
                                                  collectpoint,
                                                  transstatus,
                                                  businesstype,
                                                  deptcode,
                                                  customerunitcode,
                                                  accountdate,
                                                  transferdate,
                                                  filecreatedate,
                                                  filename)
                select a.cstaccfc,
                       a.customerid,
                       a.cardno,
                       a.cardtype,
                       a.wallettype,
                       a.opdt,
                       a.oddfare,
                       a.opfare,
                       a.acccode,
                       a.dscrp,
                       a.cardsn,
                       a.opcount,
                       a.dealtype,
                       a.collectdt,
                       a.uploaddate,
                       a.busid,
                       a.driverid,
                       a.poscode,
                       a.samcardno,
                       a.cardkind,
                       a.traderecno,
                       a.tac,
                       a.samtradeno,
                       a.buslineid,
                       a.totalrecno,
                       a.discount,
                       a.tradetype,
                       a.linedept,
                       a.repealempid,
                       a.cardasn,
                       a.tradecitycode,
                       a.ownercitycode,
                       a.maincardtype,
                       a.assocardtype,
                       a.cardversion,
                       a.tradekind,
                       a.testflag,
                       a.operatorpoint,
                       a.collectpoint,
                       a.status,
                       a.businesstype,
                       a.deptcode,
                       a.customerunitcode,
                       to_date (prmfilecreatedate, 'yyyy-mm-dd hh24:mi:ss'),
                       sysdate,
                       to_date (prmfilecreatedate, 'yyyy-mm-dd hh24:mi:ss'),
                       prmfilename
                  from rec_city_nonlocalconsume a
                 where     a.cstaccfc = to_number (prmsearchnumber) --prmsearchnumber为12位的字符串，需转换成数字在进行比较
                       and a.status = 1
                       and a.ownercitycode = prmownercitycode
                       and a.operatorpoint = prmtradecitycode
                       and a.customerunitcode = prmcustunitcode;
        elsif (v_errorcode != '000000' and v_accountcode = '000000')
        then
            out_result := -1004;
            out_msg := '修改异地卡本地消费原始消费记录清算结构为失败！';

            --更新异地卡消费记录临时表
            update rec_city_nonlocalconsume rec
               set rec.dealtype = 21, --数据清算失败，错误代码依照清算机构定
                   rec.filename = prmfilename, --ad文件名
                   rec.filecreatedate =
                       to_date (prmfilecreatedate, 'yyyy/mm/dd hh24:mi:ss'),
                   rec.uploaddate = sysdate,
                   rec.errorcode = v_errorcode, --最终验证结果
                   rec.errordealstatus = 0 --0未进行差错处理 1正在进行差错处理
             where     rec.cstaccfc = to_number (prmsearchnumber) --prmsearchnumber为12位的字符串，需转换成数字在进行比较
                   and rec.status = 1
                   --and rec.errordealstatus = 1
                   and rec.ownercitycode = prmownercitycode
                   and rec.operatorpoint = prmtradecitycode
                   and rec.customerunitcode = prmcustunitcode;
        end if;

        out_result := -1005;
        out_msg := '修改差错处理ad数据信息失败 ';

        --修改清分清算机构清算结果原始信息
        update rec_city_errordeal_ad ad
           set ad.status = 1, --0 未处理 1已处理
                             ad.updatedate = sysdate
         where     ad.cstaccfc = prmcstaccfc
               and ad.oldsearchnumber = prmsearchnumber
               and ad.status = 0
               and ad.customerunitcode = prmcustunitcode;

        out_result := -1006;
        out_msg := '修改差错处理ed数据信息失败 ';

        update rec_city_errordeal_ed ed
           set ed.status = 1, --0 未处理 1已处理
               ed.dealresult = v_errorcode,
               ed.updatedate = sysdate
         where     ed.searchnumber = prmsearchnumber
               and ed.status = 0
               and ed.customerunitcode = prmcustunitcode;

        --原数据清算失败，差错清算成功
        if (v_errorcode = '000000' and v_accountcode != '000000')
        then
            -------------------------------------账目统计--------------------------------------------
            out_msg := '账目统计失败';
            out_result := -1007;

            --消费记录即时统计
            pkg_st_payment.proc_nolocalaccount_online (v_opdt,
                                                       n_opfare,
                                                       n_acccode,
                                                       n_discountfare,
                                                       n_cardkind,
                                                       n_cardtype,
                                                       n_driverid,
                                                       v_poscode,
                                                       n_samcardno,
                                                       n_lineid,
                                                       v_dptcode,
                                                       n_busid,
                                                       n_wallettype, --钱包类型 电子钱包
                                                       0, --0正常 1回滚统计操作
                                                       prmcustunitcode,
                                                       prmfilecreatedate,
                                                       prmfilecreatedate,
                                                       prmfilecreatedate,
                                                       out_msg,
                                                       out_result,
                                                       n_maincardtype);

            if (out_result = 100)
            then
                out_msg :=
                    '部级下发的差错数据ad处理异地卡本地消费原始记录成功';
                commit;
                return;
            else
                if out_result > 0
                then
                    out_result := out_result * -1;
                else
                    out_result := out_result;
                end if;

                out_msg :=
                       '部级下发的差错数据ad处理异地卡本地消费原始记录失败,'
                    || out_msg;
                rollback;
                return;
            end if;
        -------------------------------------账目统计结束--------------------------------------------
        else
            out_result := 100;
            out_msg := '部级下发的差错数据ad处理异地卡本地消费原始记录成功';
            commit;
            return;
        end if;
    exception
        when others
        then
            out_result := -10000;
            out_msg := out_msg || to_char (sqlcode) || '_+_' || sqlerrm;
    end;

    --根据差错处理部级下发的最终ad文件，处理本地卡异地消费原始消费记录
    --此版本只支持收单机构发起异常交易验证，发卡机构发起一次退单类型的差错，其他差错类型暂时不支持
    procedure proc_uploadlocaladjustresult (
        prmcardkind         in     number, --卡种类 1：m1卡 2：cpu卡
        prmcardtype         in     number,
        --终端交易信息-------------
        prmposcode          in     number, --设备唯一运营编号
        prmsamcardno        in     number, --pasm卡卡号
        prmtac              in     number, --tac验证码
        prmdriverid         in     number, --司机编号
        prmdealtype         in     number, --记录类型，用于确定科目
        prmtradetype        in     number, --交易应用类型
        prmcollectdt        in     varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
        prmtotalrecno       in     number, --总交易流水号包含交易流水和日志流水
        prmtraderecno       in     number, --终端交易流水号
        prmsamtradeno       in     number, --pasm卡交易流水号
        --cpu卡加入字段------------
        prmcardasn          in     number, --卡应用序列号
        prmtradecitycode    in     varchar2, --交易地城市代码
        prmownercitycode    in     varchar2, --所属地城市代码
        prmmaincardtype     in     number, --主卡类型
        prmassocardtype     in     number, --子卡类型
        prmcardversion      in     number, --卡内版本
        prmtradekind        in     number, --交易性质
        prmtestflag         in     number, --测试标记
        prmcollectpoint     in     varchar2, --采集点编号
        prmoperatorpoint    in     varchar2, --营运单位编号
        prmcstaccfc         in     number,
        prmsearchnumber     in     varchar2,
        prmvalidatecode     in     varchar2, --清算中心最终验证结果
        prmvalidatedesc     in     varchar2, --清算中心最终验证结果描述
        prmfilename         in     varchar2, --ad文件名称
        prmfilecreatedate   in     varchar2, -- 文件创建日期
        prmcustunitcode     in     varchar2,
        out_result             out number,
        out_msg                out varchar2)
    as
        /*
          ---------------------------------------------------------------------------
        --存储过程：proc_uploadnolocaladjustresult
        --作　　者：胡凡凡
        --时　　间：2017-05-19
        --说　　明：根据差错处理部级下发的最终ad文件，处理本地卡异地消费原始消费记录
            ---------------------------------------------------------------------------
        */
        n_localvalidate   number; --本地卡异地消费本地验证结果
        i_count           number;
        n_cardno          number;
        n_cardsn          number;
        d_opdt            date;
        n_opcount         number;
        n_oddfare         number (10, 2);
        n_opfare          number (10, 2);
        n_wallettype      number;
        n_busid           number;
        n_buslineid       number;
        v_deptcode        varchar2 (10);
        v_errorcode       varchar2 (10);
        n_customerid      number;
        d_accountdate     date;
        n_iscurcard       number; --1当前卡  0非当前卡
        n_isnewconsume    number; --1新消费    0老消费
        i_badrectype      integer; --坏账类型
        n_cashaccfc       number; --形成消费明细的原始流水号
        n_acccode         number := 221; --电子钱包消费科目
        v_accdscrp        varchar2 (100);
    begin
        n_busid := 0;
        n_buslineid := 0;
        v_deptcode := '';

        if prmvalidatecode = '0'
        then
            --ad文件中成功时的错误码为’0‘，其他文件中成功的错误码为’000000‘，做转换
            v_errorcode := '000000';
        else
            v_errorcode := prmvalidatecode;
        end if;

        out_result := -1001;
        out_msg := '查询部级下发的差错数据ad失败！';

        select count (*)
          into i_count
          from rec_city_errordeal_ad ad
         where     ad.cstaccfc = prmcstaccfc
               and ad.oldsearchnumber = prmsearchnumber
               and ad.status = 0
               and ad.customerunitcode = prmcustunitcode;

        if i_count = 0
        then
            return;
        end if;

        out_result := -1002;
        out_msg := '查询本地卡异地消费原始记录cl数据是否存在失败！';

        select count (*)
          into i_count
          from rec_city_localcardconsume_cl cl
         where     cl.searchnumber = prmsearchnumber
               and cl.status = 1
               -- and cl.errordealstatus = 1
               and cl.ownercitycode = prmownercitycode
               and cl.operatorflag = prmtradecitycode
               and cl.customerunitcode = prmcustunitcode;

        if i_count = 0
        then
            return;
        end if;

        out_result := -1003;
        out_msg := '查询本地卡异地消费原始记录cl数据失败！';

        select cl.dealtype,
               cl.cardno,
               cl.opdt,
               cl.opcount,
               cl.electronoddfare - cl.electronopfare, --消费前卡余额-交易金额=当前卡余额
               cl.electronopfare,
               cl.wallettype,
               cl.accountdate
          into n_localvalidate,
               n_cardno,
               d_opdt,
               n_opcount,
               n_oddfare,
               n_opfare,
               n_wallettype,
               d_accountdate
          from rec_city_localcardconsume_cl cl
         where     cl.searchnumber = prmsearchnumber
               and cl.status = 1
               --and cl.errordealstatus = 1
               and cl.ownercitycode = prmownercitycode
               and cl.operatorflag = prmtradecitycode
               and cl.customerunitcode = prmcustunitcode;

        --------------------修改原始记录信息------------------------------
        out_result := -1004;
        out_msg := '修改本地卡异地消费记录cl原始信息清算结果失败';

        update rec_city_localcardconsume_cl cl
           set cl.updatedate = sysdate,
               cl.errordealstatus = 0, --1 成功交易
               cl.adfilename = prmfilename,
               cl.filecreatedate =
                   to_date (prmfilecreatedate, 'yyyy/mm/dd hh24:mi:ss'),
               cl.errorcode = v_errorcode,
               cl.describe = prmvalidatedesc
         where     cl.searchnumber = prmsearchnumber
               and cl.status = 1
               -- and cl.errordealstatus = 1
               and cl.ownercitycode = prmownercitycode
               and cl.operatorflag = prmtradecitycode
               and cl.customerunitcode = prmcustunitcode;

        out_result := -1005;
        out_msg := '修改清分清算机构清算结果原始信息ad失败';

        update rec_city_errordeal_ad ad
           set ad.status = 1, --0 未处理 1已处理
                             ad.updatedate = sysdate
         where     ad.cstaccfc = prmcstaccfc
               and ad.oldsearchnumber = prmsearchnumber
               and ad.status = 0
               and ad.customerunitcode = prmcustunitcode;

        out_result := -1006;
        out_msg := '修改差错处理ed数据信息失败 ';

        update rec_city_errordeal_ed ed
           set ed.status = 1, --0 未处理 1已处理
               ed.dealresult = v_errorcode,
               ed.updatedate = sysdate
         where     ed.searchnumber = prmsearchnumber
               and ed.status = 0
               and ed.customerunitcode = prmcustunitcode;

        if n_localvalidate = 1 and v_errorcode = '000000'
        then
            out_result := -1007;
            out_msg := 'rec_city_localcardconsume表中已存在该记录';

            select count (*)
              into i_count
              from rec_city_localcardconsume a
             where     a.customerunitcode = prmcustunitcode
                   and a.cardno = prmcardasn
                   and a.wallettype = n_wallettype
                   and a.opdt = d_opdt;

            if i_count > 0
            then
                return;
            end if;

            if n_wallettype = 1
            then
                n_acccode := 221; --交通部本地卡异地钱包消费
            elsif n_wallettype = 4
            then
                n_acccode := 224; --交通部本地卡异地电子现金消费
            end if;

            out_result := -1008;
            out_msg := '取交易科目描述信息失败！';

            select nvl (max (a.accdscrp), '未知')
              into v_accdscrp
              from base_acc_type a
             where a.acccode = n_acccode;

            ---------------------------账号信息验证和取值--------------------------------------------
            out_result := -1008;
            out_msg := '获取本地卡账户信息失败';
            proc_get_customer (n_cardno,
                               n_cardsn,
                               n_customerid,
                               d_opdt,
                               prmcustunitcode,
                               n_opcount,
                               n_wallettype,
                               i_badrectype,
                               prmmaincardtype,
                               n_iscurcard,
                               n_isnewconsume,
                               out_result,
                               out_msg);

            if (out_result <> 100)
            then
                rollback;
                return;
            end if;

            -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
            out_result := -1009;
            out_msg := '验证终端,车辆，线路，部门是否正确';
            proc_validatetermbusline (prmposcode,
                                      prmcustunitcode,
                                      n_busid,
                                      n_buslineid,
                                      v_deptcode,
                                      i_badrectype,
                                      out_result,
                                      out_msg);

            if (out_result <> 100)
            then
                rollback;
                return;
            end if;

            out_result := -1010;
            out_msg := '当前卡账目信息处理失败';

            if (n_iscurcard = 1)
            then
                update base_customers a
                   set a.electroddfareacc = electroddfareacc - n_opfare
                 where     customerid = n_customerid
                       and a.cardno = n_cardno
                       and a.customerunitcode = prmcustunitcode;
            end if;

            out_result := -1011;
            out_msg :=
                   'customerid:'
                || n_customerid
                || ',cardno:'
                || n_cardno
                || ',cardsn:'
                || n_cardsn
                || ',opcount:'
                || n_opcount
                || ',入rec_city_localcardconsume';

            --获取消费记录流水号
            select seq_city_localcardconsume.nextval
              into n_cashaccfc
              from dual;

            out_result := -1012;
            out_msg := '本地卡异地消费形成正式消费记录失败';

            --形成电子钱包消费记录
            insert into rec_city_localcardconsume (cstaccfc,
                                                   customerid,
                                                   cardno,
                                                   cardtype,
                                                   opdt,
                                                   sumelectraddfare,
                                                   electronoddfare,
                                                   electronopfare,
                                                   acccode,
                                                   dscrp,
                                                   cardsn,
                                                   opcount,
                                                   dealtype,
                                                   collectdt,
                                                   uploaddate,
                                                   busid,
                                                   driverid,
                                                   poscode,
                                                   samcardno,
                                                   cardkind,
                                                   traderecno,
                                                   tac,
                                                   samtradeno,
                                                   buslineid,
                                                   totalrecno,
                                                   discount,
                                                   tradetype,
                                                   linedept,
                                                   cardasn,
                                                   tradecitycode,
                                                   ownercitycode,
                                                   maincardtype,
                                                   assocardtype,
                                                   cardversion,
                                                   tradekind,
                                                   testflag,
                                                   collectpoint,
                                                   operatorpoint,
                                                   customerunitcode,
                                                   saveopcount,
                                                   accountdate,
                                                   settlementdate,
                                                   filecreatedate,
                                                   filename)
                 values (
                            n_cashaccfc,
                            n_customerid,
                            n_cardno,
                            prmcardtype,
                            d_opdt,
                            0,
                            n_oddfare,
                            n_opfare,
                            n_acccode,
                            v_accdscrp,
                            n_cardsn,
                            n_opcount,
                            prmdealtype,
                            to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                            sysdate,
                            n_busid,
                            prmdriverid,
                            prmposcode,
                            prmsamcardno,
                            prmcardkind,
                            prmtraderecno,
                            prmtac,
                            prmsamtradeno,
                            n_buslineid,
                            prmtotalrecno,
                            0,
                            prmtradetype,
                            v_deptcode,
                            prmcardasn,
                            prmtradecitycode,
                            prmownercitycode,
                            prmmaincardtype,
                            prmassocardtype,
                            prmcardversion,
                            prmtradekind,
                            prmtestflag,
                            prmcollectpoint,
                            prmoperatorpoint,
                            prmcustunitcode,
                            0,
                            d_accountdate,
                            d_accountdate,
                            to_date (prmfilecreatedate,
                                     'yyyy/mm/dd hh24:mi:ss'),
                            prmfilename);

            out_result := -1013;
            out_msg := '消费记录即时统计失败';
            --消费记录即时统计
            pkg_st_payment.proc_nolocalaccount_online (
                to_char (d_opdt, 'yyyy-mm-dd'),
                n_opfare,
                n_acccode,
                0,
                prmcardkind,
                prmcardtype,
                prmdriverid,
                prmposcode,
                prmsamcardno,
                n_buslineid,
                v_deptcode,
                n_busid,
                n_wallettype, --钱包类型 电子钱包
                0, --0正常 1回滚统计操作
                prmcustunitcode,
                to_char (d_accountdate, 'yyyy-mm-dd'),
                to_char (d_accountdate, 'yyyy-mm-dd'),
                prmfilecreatedate,
                out_msg,
                out_result,
                prmmaincardtype);

            if (out_result <> 100)
            then
                rollback;
                out_msg :=
                       '记录上传统计失败！错误代码：'
                    || out_result
                    || ' 错误信息：'
                    || out_msg;
                out_result := 101;
                return;
            end if;
        end if;

        out_result := 100;
        out_msg := '部级下发的差错数据ad处理本地卡异地消费原始记录成功';
        commit;
        return;
    exception
        when others
        then
            out_result := -10000;
            out_msg := out_msg || ':' || to_char (sqlcode) || '_+_' || sqlerrm;
    end;
end;/
create or replace package        pkg_rec_emp_indent
is
--
-- to modify this template, edit file pkgspec.txt in template
-- directory of sql navigator
--
-- purpose: briefly explain the functionality of the package
--
-- modification history
-- person      date    comments
-- ---------   ------  ------------------------------------------
-- enter package declarations as shown below
   procedure insert_indent (
      prmindentno           in       number,
      prmindentcount        in       number,
      prmindenttype         in       number,
      prmindentempid        in       number,
      prmindenttime         in       date,
      prmempid              in       number,
      prmbegintime          in       date,
      prmendtime            in       date,
      prmfinishcount        in       number,
      prmremaindercount     in       number,
      prmfailcount          in       number,
      prmremarks            in       varchar2,
      prmisfinish           in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure update_indent (
      prmindentcount              number,
      prmindenttype               number,
      prmindentempid              number,
      prmempid                    number,
      prmfinishcount              number,
      prmremaindercount           number,
      prmfailcount                number,
      prmremarks                  varchar2,
      prmbegintime                date,
      prmendtime                  date,
      prmisfinish                 number,
      prmindentno                 number,
      prmcustomerunitcode         varchar2,
      out_result            out   number,
      out_msg               out   varchar2
   );
end;                                                           -- package spec


 
 
 
 /
create or replace package body        pkg_rec_emp_indent
is
--
-- to modify this template, edit file pkgbody.txt in template
-- directory of sql navigator
--
-- purpose: briefly explain the functionality of the package body
--
-- modification history
-- person      date    comments
-- ---------   ------  ------------------------------------------
-- enter procedure, function bodies as shown below
   procedure insert_indent (
      prmindentno           in       number,
      prmindentcount        in       number,
      prmindenttype         in       number,
      prmindentempid        in       number,
      prmindenttime         in       date,
      prmempid              in       number,
      prmbegintime          in       date,
      prmendtime            in       date,
      prmfinishcount        in       number,
      prmremaindercount     in       number,
      prmfailcount          in       number,
      prmremarks            in       varchar2,
      prmisfinish           in       number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   )
   is
   -- enter the procedure variables here. as shown below
   begin
      out_result := 100;
      out_msg := '插入成功';

      insert into rec_emp_indent
                  (indentcount, indenttype, indentempid,
                   indenttime, empid, begintime, endtime,
                   finishcount, remaindercount, failcount,
                   remarks, isfinish, customerunitcode
                  )
           values (prmindentcount, prmindenttype, prmindentempid,
                   prmindenttime, prmempid, prmbegintime, prmendtime,
                   prmfinishcount, prmremaindercount, prmfailcount,
                   prmremarks, prmisfinish, prmcustomerunitcode
                  );

      commit;
   exception
      when others
      then
         out_result := -100;
         out_msg := '插入失败';
   end;

   procedure update_indent (
      prmindentcount                 number,
      prmindenttype                  number,
      prmindentempid                 number,
      prmempid                       number,
      prmfinishcount                 number,
      prmremaindercount              number,
      prmfailcount                   number,
      prmremarks                     varchar2,
      prmbegintime                   date,
      prmendtime                     date,
      prmisfinish                    number,
      prmindentno                    number,
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   )
   is
   -- enter the procedure variables here. as shown below
   begin
      out_result := 100;
      out_msg := '修改成功';

      update rec_emp_indent
         set indentcount = prmindentcount,
             indenttype = prmindenttype,
             indentempid = prmindentempid,
             empid = prmempid,
             finishcount = prmfinishcount,
             remaindercount = prmremaindercount,
             failcount = prmfailcount,
             remarks = prmremarks,
             begintime = prmbegintime,
             endtime = prmendtime,
             isfinish = prmisfinish
       where indentno = prmindentno and customerunitcode = prmcustomerunitcode;

      commit;
   exception
      when others
      then
         out_result := -100;
         out_msg := '修改失败';
   end;
-- enter further code below as specified in the package spec.
end;

/
create or replace package pkg_rec_income_fare
is
   procedure recorde_rec_cash_income_acc (
      prmbuslineid      in       number,                           --线路编号
      prmbusno          in       number,                           --车辆编号
      prmdriverid       in       number,                           --司机编号
      prmrecordempid    in       number,                         --录入员编号
      prmsumfare        in       number,                           --投币收入
      prmopdt           in       varchar2,             --交易时间'yyyy-mm-dd'
      prmtac            in       number,
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      number,
      out_msg           out      varchar2
   );

   procedure proc_modifycoin_acc (
      prmcstaccfc       in       number,                           --记录流水
      prmbuslineid      in       number,                           --线路编号
      prmbusno          in       varchar2,                         --车辆编号
      prmdriverid       in       number,                           --司机编号
      prmcollectempid   in       number,                         --录入员编号
      prmopfare         in       number,                           --投币收入
      prmopdt           in       varchar2,             --交易时间'yyyy-mm-dd'
      prmtac            in       number,
      prmstatus         in       number,                --状态
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      number,
      out_msg           out      varchar2
   );

   procedure audite_rec_cash_income_acc (
      prmcstaccfc       in       number,
      prmauditempid     in       number,
      prmoptype         in       number,
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      number,
      out_msg           out      varchar2
   );

   procedure proc_deletecoin_acc (
      prmcstaccfc       in       number,                           --记录流水
      prmdeleteempid    in       number,                           --审核员id
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      number,
      out_msg           out      varchar2
   );
end;


 

 
 
 
/
create or replace package body pkg_rec_income_fare
is
   procedure recorde_rec_cash_income_acc (
      prmbuslineid      in       number,                           --线路编号
      prmbusno          in       number,                           --车辆编号
      prmdriverid       in       number,                           --司机编号
      prmrecordempid    in       number,                         --录入员编号
      prmsumfare        in       number,                           --投币收入
      prmopdt           in       varchar2,             --交易时间'yyyy-mm-dd'
      prmtac            in       number,
      prmcustunitcode   in       varchar2,                         --客户代码
      out_result        out      number,
      out_msg           out      varchar2
   )
   as
        /*
      ----------------------------------------------------------------------------
      --存储过程：recorde_rec_cash_income_acc
      --作　　者：朱鹏飞
      --时　　间：2009-06-23
      --说　　明：录入投币收入
      --输入参数：
      --输出参数：
      --  out_result     返回值100成功 其他失败
      ----------------------------------------------------------------------------
      --作　　者：周晓娜
      --时　　间：2012-11-07
      --说　　明：增加客户代码和去掉分区信息处理
      ----------------------------------------------------------------------------
      */
      i_count            integer;
      v_linedept         varchar (10);
      i_linedeptareaid   integer;                          --线路部门分区编号
   begin
      out_result := -1001;
      out_msg := '开始处理此记录！';

      select nvl (count (*), 0)
        into i_count
        from base_bus
       where busno = prmbusno and customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1003;
         out_msg := '此车辆编号不存在，录入失败!';
         return;
      end if;

      select nvl (count (*), 0)
        into i_count
        from base_emp
       where empid = prmrecordempid and customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1005;
         out_msg := '录入职员编号不存在，录入失败!';
         return;
      end if;

      select nvl (count (*), 0)
        into i_count
        from base_emp
       where empid = prmdriverid and customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1007;
         out_msg := '司机编号不存在，录入失败!';
         return;
      end if;

      select nvl (count (*), 0)
        into i_count
        from base_busline a, base_dept b
       where a.dptcode = b.dptcode
         and a.customerunitcode = b.customerunitcode
         and a.lineid = prmbuslineid
         and a.isdelete = 0
         and a.customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1007;
         out_msg := '线路信息异常';
         return;
      end if;

      select a.dptcode
        into v_linedept
        from base_busline a, base_dept b
       where a.dptcode = b.dptcode
         and a.customerunitcode = b.customerunitcode
         and a.lineid = prmbuslineid
         and a.isdelete = 0
         and a.customerunitcode = prmcustunitcode;

      insert into rec_coin_acc_pre
                  (buslineid, busno, driverid, collectempid,
                   opdt, opfare, deptcode,
                   collectdt, status, tac, customerunitcode
                  )
           values (prmbuslineid, prmbusno, prmdriverid, prmrecordempid,
                   to_date (prmopdt, 'yyyy-mm-dd'), prmsumfare, v_linedept,
                   sysdate, 0, prmtac, prmcustunitcode
                  );

      out_result := 100;
      out_msg := '操作成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1001;
         out_msg := '录入异常：' || sqlerrm;
   end;

   procedure proc_modifycoin_acc (
      prmcstaccfc       in       number,                            --记录流水
      prmbuslineid      in       number,                            --线路编号
      prmbusno          in       varchar2,                          --车辆编号
      prmdriverid       in       number,                            --司机编号
      prmcollectempid   in       number,                          --录入员编号
      prmopfare         in       number,                            --投币收入
      prmopdt           in       varchar2,              --交易时间'yyyy-mm-dd'
      prmtac            in       number,
      prmstatus         in       number,                                --状态
      prmcustunitcode   in       varchar2,                          --客户代码
      out_result        out      number,
      out_msg           out      varchar2
   )
   as
      /*
      -----------------------------------------------------------------------
      --存储过程：proc_modifycoin_acc
      --作　　者：朱鹏飞
      --时　　间：2009-06-23
      --说　　明：修改录入数据
      --输入参数：
      --输出参数：
      --  out_result     返回值100成功 其他失败
      -----------------------------------------------------------------------
      --作　　者：周晓娜
      --时　　间：2012-11-07
      --说　　明：增加客户代码和去掉分区信息处理
      ----------------------------------------------------------------------------
      */
      i_count            integer;
      v_opdt             varchar2 (30);
      n_opfare           number;
      n_driverid         number;
      n_buslineid        number;
      n_busid            number;
      v_linedept         varchar (10);
      v_tac              varchar (20);
      i_linedeptareaid   integer;                          --线路部门分区编号
      v_userid           varchar2 (20);                            --职员工号
      v_empname          varchar2 (20);                            --职员姓名
   begin
      select count (*)
        into i_count
        from base_emp a
       where a.empid = prmcollectempid and customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1002;
         out_msg := '职员不存在或者已删除empid:' || to_char (prmcollectempid);
         return;
      end if;

      select a.userid, a.empname
        into v_userid, v_empname
        from base_emp a
       where a.empid = prmcollectempid and customerunitcode = prmcustunitcode;

      select nvl (count (*), 0)
        into i_count
        from rec_coin_acc_pre
       where cstaccfc = prmcstaccfc and customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1002;
         out_msg := '此流水号不存在，审核失败!';
         return;
      end if;

      --根据下面判断条件
      select nvl (count (*), 0)
        into i_count
        from base_bus
       where busno = prmbusno and customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1003;
         out_msg := '此车辆编号不存在，录入失败!';
         return;
      end if;

      select nvl (count (*), 0)
        into i_count
        from base_emp
       where empid = prmcollectempid and customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1005;
         out_msg := '录入职员编号不存在，录入失败!';
         return;
      end if;

      select nvl (count (*), 0)
        into i_count
        from base_emp
       where empid = prmdriverid and customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1007;
         out_msg := '司机编号不存在，录入失败!';
         return;
      end if;

      select nvl (count (*), 0)
        into i_count
        from base_busline a, base_dept b
       where a.dptcode = b.dptcode
         and a.customerunitcode = b.customerunitcode
         and a.lineid = prmbuslineid
         and a.isdelete = 0
         and a.customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1007;
         out_msg := '线路信息异常';
         return;
      end if;

      select a.dptcode
        into v_linedept
        from base_busline a, base_dept b
       where a.dptcode = b.dptcode
         and a.customerunitcode = b.customerunitcode
         and a.lineid = prmbuslineid
         and a.isdelete = 0
         and a.customerunitcode = prmcustunitcode;

      select to_char (opdt, 'yyyy-mm-dd'), opfare, driverid, buslineid,
             busno, tac
        into v_opdt, n_opfare, n_driverid, n_buslineid,
             n_busid, v_tac
        from rec_coin_acc_pre
       where cstaccfc = prmcstaccfc and customerunitcode = prmcustunitcode;

      update rec_coin_acc_pre
         set buslineid = prmbuslineid,
             busno = prmbusno,
             driverid = prmdriverid,
             collectempid = prmcollectempid,
             opdt = to_date (prmopdt, 'yyyy-mm-dd'),
             opfare = prmopfare,
             tac = prmtac,
             status = prmstatus,
             deptcode = v_linedept
       where cstaccfc = prmcstaccfc and customerunitcode = prmcustunitcode;

      /* insert into log_operation
                   (stationid, systemid,
                    message,
                    logtype, recordlevel, createdate, outid, name,
                    customerunitcode, empcode, empid
                   )
            values (0, 3,
                       '审核投币记录已修改。线路['
                    || to_char (n_buslineid)
                    || '->'
                    || to_char (prmbuslineid)
                    || ']，车辆'
                    || to_char (n_busid)
                    || '->'
                    || to_char (prmbusno)
                    || ']，司机'
                    || to_char (n_driverid)
                    || '->'
                    || to_char (prmdriverid)
                    || ']，操作日期'
                    || v_opdt
                    || '->'
                    || prmopdt
                    || ']，金额'
                    || to_char (n_opfare, 'fm99990.99')
                    || '->'
                    || to_char (prmopfare, 'fm99990.99')
                    || ']，tac'
                    || v_tac
                    || '->'
                    || to_char (prmtac),
                    14, 0, sysdate, null, v_userid,
                    prmcustunitcode, v_empname, prmcollectempid
                   );*/
      out_result := 100;
      out_msg := '修改成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1001;
         out_msg := '修改失败：' || sqlerrm;
   end;

   procedure proc_deletecoin_acc (
      prmcstaccfc       in       number,                            --记录流水
      prmdeleteempid    in       number,                            --审核员id
      prmcustunitcode   in       varchar2,                          --客户代码
      out_result        out      number,
      out_msg           out      varchar2
   )
   as
         /*
      -----------------------------------------------------------------------
      --存储过程：proc_deletecoin_acc
      --作　　者：朱鹏飞
      --时　　间：2009-06-23
      --说　　明：修改录入数据
      --输入参数：
      --输出参数：
      --  out_result     返回值100成功 其他失败
      -----------------------------------------------------------------------
      --作　　者：周晓娜
      --时　　间：2012-11-07
      --说　　明：增加客户代码和去掉分区信息处理
      ----------------------------------------------------------------------------
      */
      --
      i_count     integer;
      v_userid    varchar2 (20);                                   --职员工号
      v_empname   varchar2 (20);                                   --职员姓名
   begin
      select count (*)
        into i_count
        from base_emp a
       where a.empid = prmdeleteempid and a.customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1002;
         out_msg := '职员不存在或者已删除empid:' || to_char (prmdeleteempid);
         return;
      end if;

      select a.userid, a.empname
        into v_userid, v_empname
        from base_emp a
       where a.empid = prmdeleteempid and a.customerunitcode = prmcustunitcode;

      insert into rec_coin_acc_dellog
                  (cstaccfc, buslineid, busno, driverid, collectempid, opdt,
                   opfare, deptcode, collectdt, status, tac, deletedt,
                   customerunitcode)
         select a.cstaccfc, a.buslineid, a.busno, a.driverid, a.collectempid,
                a.opdt, a.opfare, a.deptcode, a.collectdt, a.status, a.tac,
                sysdate, prmcustunitcode
           from rec_coin_acc_pre a
          where cstaccfc = prmcstaccfc
                and a.customerunitcode = prmcustunitcode;

      if (sql%rowcount) <> 1
      then
         out_result := -1002;
         out_msg := '形成删除投币记录明细失败';
         return;
      end if;

      delete from rec_coin_acc_pre
            where cstaccfc = prmcstaccfc
                  and customerunitcode = prmcustunitcode;

/*
      insert into log_operation
                  (stationid, systemid, message,
                   logtype, recordlevel, createdate, empid, outid, name,
                   customerunitcode, empcode
                  )
           values (0, 3, '投币记录已删除。流水：' || to_char (prmcstaccfc),
                   15, 0, sysdate, prmdeleteempid, v_userid, v_empname,
                   prmcustunitcode, v_empname
                  );*/
      out_result := 100;
      out_msg := '删除成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1001;
         out_msg := '删除失败：' || sqlerrm;
   end;

   procedure audite_rec_cash_income_acc (
      prmcstaccfc       in       number,                            --记录流水
      prmauditempid     in       number,                            --审核员id
      prmoptype         in       number,               --1：审核通过 2：未通过
      prmcustunitcode   in       varchar2,                          --客户代码
      out_result        out      number,
      out_msg           out      varchar2
   )
   as
      /*
      -----------------------------------------------------------------------
      --存储过程：audite_rec_cash_income_acc
      --作　　者：梁小凯
      --时　　间：2009-05-26
      --说　　明：审核投币收入并及时统计
      --输入参数：
      --  prmcstaccfc    审核记录流水
      --输出参数：
      --  out_result     返回值100成功 其他失败
      -----------------------------------------------------------------------
      --修改标示：王俊贵 2009-06-10
      --修改说明：获取待审核记录时增加busid
      -----------------------------------------------------------------------
      --修改标示：王俊贵 2009-07-01
      --修改说明：修改审核未通过返回信息，去掉返回流水号
      -----------------------------------------------------------------------
      --修改标示：朱鹏飞 2009-08-07
      --修改说明：投币录入科目统计错误原为401，科目不存在，现修改为400
      --    2、增加根据车辆id获取poscode，psamcardno
      -----------------------------------------------------------------------
      --作　　者：周晓娜
      --时　　间：2012-11-07
      --说　　明：增加客户代码和去掉分区信息处理
      ----------------------------------------------------------------------------
      --作　　者：周晓娜
      --时　　间：2012-12-24
      --说　　明：增加系统账户-出纳收支账目的处理
      ----------------------------------------------------------------------------
      */
      i_count              integer;
      --待审核记录信息
      i_status             integer;
      v_opdt               varchar2 (30);
      n_opfare             number;
      n_driverid           number;
      n_buslineid          number;
      n_busid              number;
      v_linedeptcode       varchar2 (20);                      --线路所属部门
      i_lineareaid         integer;                                --线路分区
      v_userid             varchar2 (20);                          --职员工号
      v_empname            varchar2 (20);                          --职员姓名
      n_poscode            number;
      n_psamcardno         number;
      n_acccode   constant number          := 400;             --投币录入科目
      --增加收支账目处理
      n_empid              number;                         --录入投币信息人员
      n_empaccountype      number;                         --录入人员账户类型
      n_cstaccfc           number;                           --原始记录流水号
      v_dptcode            varchar2 (9);                   --线路所属部门编码
      n_isflag             number;                     --车辆是否绑定多台终端
      v_poscodelist        varchar2 (1000);
      --车辆对应多个终端时的设备编号组合
      n_empoddfare         number (20, 2);                     --出纳账户余额
      v_empdptcode         varchar2 (9);                       --职员所属部门
   begin
      out_result := -1000;
      out_msg := '上传记录开始';
      --
      n_poscode := 0;
      n_psamcardno := 0;

      if (prmoptype <> 1 and prmoptype <> 2)
      then
         out_result := -1002;
         out_msg := '参数错误prmoptype：' || to_char (prmoptype);
         return;
      end if;

      select count (*)
        into i_count
        from base_emp a
       where a.empid = prmauditempid and a.customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1002;
         out_msg := '职员不存在或者已删除empid:' || to_char (prmauditempid);
         return;
      end if;

      select a.userid, a.empname
        into v_userid, v_empname
        from base_emp a
       where a.empid = prmauditempid and a.customerunitcode = prmcustunitcode;

      select nvl (count (*), 0)
        into i_count
        from rec_coin_acc_pre
       where cstaccfc = prmcstaccfc and customerunitcode = prmcustunitcode;

      if i_count = 0
      then
         out_result := -1002;
         out_msg := '此流水号不存在，审核失败!';
         return;
      end if;

      select nvl (count (*), 0)
        into i_count
        from base_emp
       where empid = prmauditempid
         and status = 1
         and customerunitcode = prmcustunitcode;

      if i_count <> 1
      then
         out_result := -1005;
         out_msg :=
             '审计职员信息不存在或状态异常empid：' || to_char (prmauditempid);
         return;
      end if;

      select status, to_char (opdt, 'yyyy-mm-dd hh24:mi:ss'), opfare,
             driverid, buslineid, deptcode, busno
        into i_status, v_opdt, n_opfare,
             n_driverid, n_buslineid, v_linedeptcode, n_busid
        from rec_coin_acc_pre
       where cstaccfc = prmcstaccfc and customerunitcode = prmcustunitcode;

      --检查车辆是否选择了终端
      select count (*)
        into i_count
        from base_bus a, base_term b
       where (   a.poscode = b.poscode
              or (   instr (a.poscodelist, '|' || b.poscode || '', -1, 1) != 0
                  or instr (a.poscodelist, '' || b.poscode || '|', -1, 1) != 0
                 )
             )
         and a.customerunitcode = b.customerunitcode
         and a.busno = n_busid
         and a.customerunitcode = prmcustunitcode;

      if i_count > 0
      then
         --检查车辆是否选择了终端
         select a.isflag
           into n_isflag
           from base_bus a
          where a.busno = n_busid and a.customerunitcode = prmcustunitcode;

         if n_isflag = 0       --如果车辆和终端是一一对应关系，直接取poscode值
         then
            --根据车辆id，获取到终端信息
            select a.poscode, b.psamcardno
              into n_poscode, n_psamcardno
              from base_bus a, base_term b
             where a.poscode = b.poscode
               and a.customerunitcode = b.customerunitcode
               and a.busno = n_busid
               and a.customerunitcode = prmcustunitcode;
         else          --如果车辆和终端是一对多关系，取其中一个poscode形成记录
            --获取该车辆对应的终端编号字符串
            select a.poscodelist
              into v_poscodelist
              from base_bus a
             where a.busno = n_busid and a.customerunitcode = prmcustunitcode;

            --获取多个终端编号中的第一个编号
            select column_value
              into n_poscode
              from (select *
                      from table
                              (split
                                  ((select replace
                                              ((select b.poscodelist
                                                  from base_bus b
                                                 where b.isflag = 1
                                                   and b.customerunitcode =
                                                               prmcustunitcode
                                                   and b.poscodelist =
                                                             ''
                                                          || v_poscodelist
                                                          || ''),
                                               '|',
                                               ','
                                              )
                                      from dual),
                                   ','
                                  )
                              ))
             where rownum = 1;

            --根据车辆id，获取到终端信息
            /*select b.psamcardno
              into n_psamcardno
              from base_bus a, base_term b
             where a.poscode = b.poscode
               and b.poscode = n_poscode
               and a.customerunitcode = b.customerunitcode
               and a.busno = n_busid
               and a.customerunitcode = prmcustunitcode;*/

            --目前设备唯一编号和psam卡号是同一个值，直接取poscode值赋值给psam卡号
            n_psamcardno := n_poscode;
         end if;
      end if;

      if prmoptype = 1                                              --正常操作
      then
         --进行账目及时统计
         pkg_st_payment.proc_custdataaccount_online
                                  (v_opdt,
                                   n_opfare,
                                   n_acccode,
                                   0,                       --prmdiscountfare,
                                   0,                           --prmcardkind,
                                   0,                           --prmcardtype,
                                   n_driverid,
                                   n_poscode,                    --prmposcode,
                                   n_psamcardno,               --prmsamcardno,
                                   n_buslineid,
                                   v_linedeptcode,
                                   n_busid,
                                   0, --钱包类型0无钱包类型 1电子钱包2补助钱包
                                   0,               --操作类型 0：正常 1：回滚
                                   prmcustunitcode,
                                   out_msg,
                                   out_result
                                  );

         --判断返回值
         if out_result <> 100                                       --统计成功
         then
            rollback;
            out_result := -1001;
            out_msg := '投币记录统计失败，' || out_msg;
            return;
         end if;

         insert into rec_coin_acc
                     (cstaccfc, buslineid, busno, driverid, recordempid, opdt,
                      opfare, deptcode, collectdt, auditingid, auditingdt,
                      tac, customerunitcode)
            select a.cstaccfc, a.buslineid, a.busno, a.driverid,
                   a.collectempid, a.opdt, a.opfare, a.deptcode, a.collectdt,
                   prmauditempid, sysdate, a.tac, prmcustunitcode
              from rec_coin_acc_pre a
             where a.cstaccfc = prmcstaccfc
               and a.customerunitcode = prmcustunitcode;

         if (sql%rowcount <> 1)
         then
            rollback;
            out_result := -1001;
            out_msg := '形成投币明细记录失败';
            return;
         end if;

         -----------------形成系统账户-出纳收支数据----------------------------
         --资产算操作的出纳账户，负债类-线路对应的部门（商户账户）账户增加
         --获取原始记录流水号和录入人员信息
         select a.cstaccfc, a.collectempid, a.deptcode
           into n_cstaccfc, n_empid, v_dptcode
           from rec_coin_acc_pre a
          where a.cstaccfc = prmcstaccfc
            and a.customerunitcode = prmcustunitcode;

         --获取录入人员账户信息
         select a.accounttype, a.dptcode
           into n_empaccountype, v_empdptcode
           from base_emp a
          where a.empid = n_empid and a.customerunitcode = prmcustunitcode;

         --获取该出纳的账户信息

------------------------------------------------------------------------
         delete from rec_coin_acc_pre a
               where a.cstaccfc = prmcstaccfc
                 and a.customerunitcode = prmcustunitcode;

         /*
         insert into log_operation
                     (stationid, systemid,
                      message,
                      logtype, recordlevel, createdate, empid, outid, name,
                      customerunitcode, empcode
                     )
              values (0, 3,
                         '审核投币记录通过。金额['
                      || to_char (n_opfare, 'fm99990.99')
                      || ']元',
                      16, 0, sysdate, prmauditempid, v_userid, v_empname,
                      prmcustunitcode, v_empname
                     );
              */
         out_result := 100;
         out_msg := '操作成功';
         commit;
      else                                      --审核记录未通过，允许再次修改
         update rec_coin_acc_pre
            set status = 1
          where cstaccfc = prmcstaccfc and customerunitcode = prmcustunitcode;

          /*
         insert into log_operation
                     (stationid, systemid,
                      message,
                      logtype, recordlevel, createdate, empid, outid, name,
                      customerunitcode, empcode
                     )
              values (0, 0,
                         '审核投币记录通过。金额['
                      || to_char (n_opfare, 'fm99990.99')
                      || ']元',
                      0, 0, sysdate, prmauditempid, v_userid, v_empname,
                      prmcustunitcode, v_empname
                     );
                     */
         out_result := 100;
         out_msg := '操作成功';
         commit;
         return;
      end if;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '审计异常：' || sqlerrm;
   end;
end;

/
create or replace package pkg_rec_loss
is
    procedure cust_loss (prmcardno             in     number,
                         prmidcardno           in     varchar2,
                         prmlosstype           in     number,
                         prmopdesc             in     varchar2, --
                         prmopempid            in     number, --操作员
                         prmsuorcetype         in     number, --
                         prmsourceip           in     varchar2, --
                         prmpsamcardno         in     number, --终端psam卡号
                         prmcardkind           in     number, --卡片类型
                         prmposcode            in     number, --终端设备唯一编号,必须存在
                         prmcustomerunitcode   in     varchar2, --客户代码
                         out_result               out number,
                         out_msg                  out varchar2);

    procedure proc_build_bllt (prmoptype             in     number,
                               prmcardid             in     number,
                               prmcardno             in     number,
                               prmcardtypedetailid   in     number,
                               prmsuorcetype         in     number,
                               prmsourceip           in     varchar2,
                               prmcustomerunitcode   in     varchar2, --客户代码
                               prmisinteroperability in     number, --是否分客户下载标识 0:不分 1：分(oda传过来的话是)
                               prmcardownbusiness    in     number, --卡所属行业，0市民卡，1银联卡，2岭南通卡 (oda传过来的话是1)
                               out_result               out number,
                               out_msg                  out varchar2);

    procedure cust_unloss (prmoptype             in     number,
                           prmcustid             in     number,
                           prmoldcardno          in     number,
                           prmcardsn             in     number,
                           prmopempid            in     number,
                           prmsuorcetype         in     number,
                           prmsourceip           in     varchar2,
                           prmpsamcardno         in     number,
                           prmcardkind           in     number,
                           prmposcode            in     number,
                           prmopdesc             in     varchar2,
                           prmcustomerunitcode   in     varchar2, --客户代码
                           prmoutvalue              out number,
                           out_result               out number,
                           out_msg                  out varchar2);

    procedure emp_loss (prmcardno             in     number,
                        prmidcardno           in     varchar2,
                        prmlosstype           in     number,
                        prmopempid            in     number,
                        prmsuorcetype         in     number,
                        prmsourceip           in     varchar2,
                        prmpsamcardno         in     number,
                        prmcardkind           in     number,
                        prmposcode            in     number,
                        prmopdesc             in     varchar2,
                        prmcustomerunitcode   in     varchar2, --客户代码
                        out_result               out number,
                        out_msg                  out varchar2);

    procedure emp_unloss (prmempid              in     number,
                          prmcardtypedetailid   in     number,
                          prmoldcardno          in     number,
                          prmcardsn             in     number,
                          prmoptype             in     number,
                          prmopempid            in     number,
                          prmsuorcetype         in     number,
                          prmsourceip           in     varchar2,
                          prmpsamcardno         in     number,
                          prmcardkind           in     number,
                          prmposcode            in     number,
                          prmopdesc             in     varchar2,
                          prmcustomerunitcode   in     varchar2, --客户代码
                          prmoutvalue              out number,
                          out_result               out number,
                          out_msg                  out varchar2);
end;
 

 
 
 /
create or replace package body pkg_rec_loss
is
    --挂失
    procedure cust_loss (prmcardno             in     number,
                         prmidcardno           in     varchar2,
                         prmlosstype           in     number,
                         prmopdesc             in     varchar2, --
                         prmopempid            in     number, --操作员
                         prmsuorcetype         in     number, --
                         prmsourceip           in     varchar2, --
                         prmpsamcardno         in     number, --终端psam卡号
                         prmcardkind           in     number, --卡片类型
                         prmposcode            in     number, --终端设备唯一编号,必须存在
                         prmcustomerunitcode   in     varchar2, --客户代码
                         out_result               out number,
                         out_msg                  out varchar2)
    as
        vcount              number;
        vstatus             number;
        vcardno             number;
        vcardsn             number;
        vareaid             number;
        vcustomerid         number;
        vcardtypedetailid   number;
        vnonameflag         number;
        vbllttype           number;
        vscardsnr           varchar2 (8); --十六进制卡唯一号
        vblltno             number;
    begin
        -----------------------sqlcode;---------------------------------------------------------
        vcardtypedetailid := 0;
        vcustomerid := 0;
        --------------------------------------------------------------------------------
        out_result := -1000;
        out_msg := '挂失操作开始！';
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        --------------------------------------------------------------------------------

        --1、验证poscode、psam卡号、psam卡状态、职员
        pkg_common.check_psam_emp_term (prmopempid,
                                        0,
                                        prmposcode,
                                        prmpsamcardno,
                                        prmcustomerunitcode,
                                        out_result,
                                        out_msg);

        if out_result <> 100
        then
            --验证失败，返回错误
            out_result := out_result;
            out_msg := '基本信息验证失败' || out_msg;
            return;
        end if;

        --验证系统参数表
        select nvl (count (*), 0)
          into vcount
          from base_syspara a;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := '系统参数表不能为空！';
            return;
        end if;

        --获取黑名单类型
        select a.bllttype
          into vbllttype
          from base_syspara a;

        --------------------------------------------------------------------------------
        --2、校验账户是否存在
        select count (*)
          into vcount
          from base_customers a
         where     a.cardno = prmcardno
               and a.customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1002;
            out_msg := '卡号不存在！';
            return;
        end if;

        if vcount <> 1
        then
            out_result := -1002;
            out_msg := '此卡号存在多条记录！';
            return;
        end if;

        --3、获取账户信息
        --zxn 20121107 去掉分区信息
        select customerid,
               cardno,
               cardsn,
               status,
               cardtypedetailid,
               nonameflag,
               scardsnr
          into vcustomerid,
               vcardno,
               vcardsn,
               vstatus,
               vcardtypedetailid,
               vnonameflag,
               vscardsnr
          from base_customers a
         where     a.cardno = prmcardno
               and a.customerunitcode = prmcustomerunitcode;

        --------------------------------------------------------------------------------
        out_result := -1005;
        out_msg := '生成黑名单！';
        --4、生成黑名单
        proc_build_bllt (1,
                         vcustomerid,
                         vcardno,
                         vcardtypedetailid,
                         prmlosstype,--2017.07.31 修改为prmlosstype
                         prmsourceip,
                         prmcustomerunitcode,
                         0,
                         0,
                         out_result,
                         out_msg);

        if out_result <> 10
        then
            out_result := -1003;
            out_msg := '生成黑名单失败：' || out_msg;
            return;
        end if;

        out_result := -1004;
        out_msg := '开始形成挂失明细';

        --5、验证是否启用月票
        select nvl (count (*), 0)
          into vcount
          from base_customers_monticket
         where     customerid = vcustomerid
               and customerunitcode = prmcustomerunitcode;

        --------------------------------------------------------------------------------
        select status
          into vstatus
          from base_customers a
         where     a.customerid = vcustomerid
               and a.cardno = prmcardno
               and a.customerunitcode = prmcustomerunitcode;

        if vstatus <> 3
        then
            update base_customers a
               set status = 3
             where     a.customerid = vcustomerid
                   and a.cardno = prmcardno
                   and a.customerunitcode = prmcustomerunitcode;

            --zxn 20121108 去掉分区字段
            insert into rec_loss (lossfc,
                                  customerid,
                                  cardno,
                                  opdt,
                                  cardsn,
                                  empid,
                                  optype,
                                  losstype,
                                  poscode,
                                  sourceip,
                                  cardtypedetailid,
                                  opdesc,
                                  hasunloss,
                                  customerunitcode)
                 values (0,
                         vcustomerid,
                         vcardno,
                         sysdate,
                         vcardsn,
                         prmopempid,
                         0,
                         prmlosstype,
                         prmposcode,
                         prmsourceip,
                         vcardtypedetailid,
                         prmopdesc,
                         0,
                         prmcustomerunitcode);

            --及时统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                605,
                prmopempid,
                prmposcode,
                prmpsamcardno,
                1,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '挂失次数统计出错，' || out_msg;
                return;
            end if;

            out_result := 100;
            out_msg := '挂失操作成功！';
            commit;
        else
            out_result := 100;
            out_msg := '此卡已挂失，无需进行多次挂失！';
            commit;
        end if;
    --------------------------------------------------------------------------------
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := '挂失异常：' || to_char (sqlcode) || '||||' || sqlerrm;
    end;

    --生成黑名单
    procedure proc_build_bllt (prmoptype             in     number,--如果是oda黑名单的话传过来的是：0挂失 1解挂
                               prmcardid             in     number,
                               prmcardno             in     number,
                               prmcardtypedetailid   in     number,
                               prmsuorcetype         in     number,
                               prmsourceip           in     varchar2,
                               prmcustomerunitcode   in     varchar2, --客户代码
                               prmisinteroperability in     number, --是否分客户下载标识 0:分 1：不分(oda传过来的话是1)
                               prmcardownbusiness    in     number, --卡所属行业，0市民卡，1银联卡，2岭南通卡 (oda传过来的话是1)
                               out_result               out number,
                               out_msg                  out varchar2)
    as
        vcount       number;
        vnousedate   date;
        vstate       number;
    begin
        out_result := -1100;
        out_msg := '生成黑名单开始！';
        vstate := 0;

        if prmisinteroperability = 1
        then
          vstate := prmoptype;
        end if;

        if prmisinteroperability = 0
        then
            --2、获取失效日期
            if prmoptype = 1 --乘车卡
            then
                select nousedate
                  into vnousedate
                  from base_customers a
                 where     a.customerid = prmcardid
                       and a.customerunitcode = prmcustomerunitcode
                       and a.cardno = prmcardno;
            elsif prmoptype = 2 --功能卡
            then
                select nousedate
                  into vnousedate
                  from base_emp_card a
                 where     a.empid = prmcardid
                       and a.carddetailid = prmcardtypedetailid
                       and a.customeruintcode = prmcustomerunitcode
                       and empcardno = prmcardno;
            else
                vnousedate := sysdate + 1460;
            end if;
        end if;

        if vnousedate is null
        then
            vnousedate := sysdate + 1460;
        end if;

        --3、查询黑名单中是否有记录
        select count (*)
          into vcount
          from rec_bllt a
         where     a.cardno = prmcardno
               and a.customerunitcode = prmcustomerunitcode;

        --4、没有则插入一条黑名单记录
        if vcount = 0
        then
            insert into rec_bllt (cardno,
                                  lossdt,
                                  suorcetype,
                                  suorceip,
                                  nousedate,
                                  state,
                                  cardasn,
                                  cardownbusiness,
                                  customerunitcode,
                                  isinteroperability)
                 values (prmcardno,
                         sysdate,
                         prmsuorcetype,
                         prmsourceip,
                         vnousedate,
                         vstate,
                         prmcardno,
                         prmcardownbusiness,
                         prmcustomerunitcode,
                         prmisinteroperability);
        --5、如果有黑名单记录
        else
            if prmisinteroperability = 0
            then
                --5.1查询黑名单中是否该记录
                select count (*)
                  into vcount
                  from rec_bllt a
                 where     a.cardno = prmcardno
                       and a.state = 0
                       and a.customerunitcode = prmcustomerunitcode;

                --5.2黑名单表中已经存在此黑名单，并且状态不是挂失状态
                if vcount = 0
                then
                    --5.3将记录状态更新成挂失状态
                    update rec_bllt a
                       set a.state = 0,
                           losscount = losscount + 1,
                           lossdt = sysdate
                     where     a.cardno = prmcardno
                           and a.customerunitcode = prmcustomerunitcode;
                end if;
             end if;

             --oda传过来的已经存在的数据
             if prmisinteroperability = 1
             then
                select a.state
                  into vcount
                  from rec_bllt a
                 where     a.cardno = prmcardno
                       and a.customerunitcode = prmcustomerunitcode;

                if vcount = 1  --已存在该卡号记录，且库里状态为解挂
                then
                    if vstate = 0 --操作：挂失
                    then
                        update rec_bllt a
                           set a.state = 0,
                               losscount = losscount + 1,
                               lossdt = sysdate
                         where     a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;
                    end if;
                elsif  vcount = 0  --已存在该卡号记录，且库里状态为挂失
                then
                    if vstate = 0  --操作：挂失
                    then
                        update rec_bllt a
                           set a.state = 0,
                               losscount = losscount + 1,
                               lossdt = sysdate
                         where     a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;
                    else   --操作：解挂
                        update rec_bllt a
                           set a.state = 1
                         where     a.cardno = prmcardno
                               and a.customerunitcode = prmcustomerunitcode;
                    end if;
                end if;
             end if;
        end if;

        out_result := 10;
        out_msg := '生成黑名单结束！';
    exception
        when others
        then
            out_result := -1;
            out_msg :=
                '验证黑名单异常：' || to_char (sqlcode) || '||||' || sqlerrm;
    end;

    procedure cust_unloss (prmoptype             in     number, --1为解挂2为回滚
                           prmcustid             in     number,
                           prmoldcardno          in     number,
                           prmcardsn             in     number,
                           prmopempid            in     number,
                           prmsuorcetype         in     number,
                           prmsourceip           in     varchar2,
                           prmpsamcardno         in     number,
                           prmcardkind           in     number,
                           prmposcode            in     number,
                           prmopdesc             in     varchar2,
                           prmcustomerunitcode   in     varchar2, --客户代码
                           prmoutvalue              out number,
                           out_result               out number,
                           out_msg                  out varchar2)
    as
        vcount              number;
        vcardno             number;
        vcardsn             number;
        vhasunloss          number;
        vstatus             number;
        vcardtypedetailid   number;
        vareaid             number;
        vnousedate          date;
        vidcardno           varchar2 (30);
        vnonameflag         number;
        vbllttype           number;
        vscardsnr           varchar2 (8);
        vblltno             number;
        vsourcetype         number;
    begin
        out_result := -1000;
        out_msg := '开始执行解挂操作！';
        prmoutvalue := 0;
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        --------------------------------------------------------------------------------
        --验证系统参数表
        select nvl (count (*), 0)
          into vcount
          from base_syspara a;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := '系统参数表不能为空！';
            return;
        end if;

        --获取黑名单类型
        select a.bllttype
          into vbllttype
          from base_syspara a;

        --------------------------------------------------------------------------------
        select nvl (count (*), 0)
          into vcount
          from base_customers a
         where     a.customerid = prmcustid
               and a.cardno = prmoldcardno
               and a.cardsn = prmcardsn
               and a.customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1000;
            out_msg := '不存在此账户！';
            return;
        end if;

        if prmoptype <> 1 and prmoptype <> 2
        then
            out_result := -1001;
            out_msg := '操作类型错误，解挂失败！！';
            return;
        end if;

        select cardno,
               cardsn,
               status,
               cardtypedetailid,
               nousedate,
               nonameflag,
               scardsnr
          into vcardno,
               vcardsn,
               vstatus,
               vcardtypedetailid,
               vnousedate,
               vnonameflag,
               vscardsnr
          from base_customers a
         where     a.customerid = prmcustid
               and a.cardno = prmoldcardno
               and a.cardsn = prmcardsn
               and a.customerunitcode = prmcustomerunitcode;

        if prmoptype = 1
        then
            if vnonameflag = 1
            then
                --不记名标记（0：记名；1：不记名）
                out_result := -1001;
                out_msg := '不记名不允许进行解挂操作！';
                return;
            end if;

            if vcardsn <> prmcardsn
            then
                out_result := -1002;
                out_msg := '卡需要验证失败！';
                return;
            end if;

            if vnousedate is null
            then
                out_result := -1004;
                out_msg := '库中卡失效期异常，无法解挂！';
                return;
            end if;

            if vnousedate < sysdate
            then
                out_result := -1005;
                out_msg := '已到失效期，无法解挂！';
                return;
            end if;

            select nvl (count (*), 0)
              into vcount
              from rec_loss a
             where     a.customerid = prmcustid
                   and a.cardno = prmoldcardno
                   and a.optype = 0
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount = 0
            then
                out_result := -1006;
                out_msg := '无挂失记录，无法解挂！';
                return;
            end if;

            --验证是否存在黑名单
            select nvl (count (*), 0)
              into vcount
              from rec_bllt a
             where     a.cardno = prmoldcardno
                   and a.state = 0
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount = 1
            then
                select a.suorcetype
                  into vsourcetype
                  from rec_bllt a
                 where     a.cardno = prmoldcardno
                       and a.state = 0
                       and a.customerunitcode = prmcustomerunitcode;

                if vsourcetype = 6
                then
                    out_result := -1009;
                    out_msg :=
                        '该挂失类型不能解挂,必须出示有效身份证件进行补卡操作.';
                    return;
                end if;
            end if;


            --修改账本表
            update base_customers
               set status = 1
             where     customerid = prmcustid
                   and cardno = prmoldcardno
                   and cardsn = prmcardsn
                   and customerunitcode = prmcustomerunitcode;

            --修改挂失记录中卡号
            update rec_loss
               set newcardno = prmoldcardno, hasunloss = 1
             where     customerid = prmcustid
                   and cardno = prmoldcardno
                   and optype = 0
                   and hasunloss <> 1
                   and customerunitcode = prmcustomerunitcode;

            --------------------------------------------------------------------------------
            out_result := -1007;
            out_msg := '生成白名单！';

            --验证是否存在黑名单
            select nvl (count (*), 0)
              into vcount
              from rec_bllt a
             where     a.cardno = prmoldcardno
                   and a.state = 0
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount = 1
            then
                --修改黑名单表中的状态
                update rec_bllt
                   set state = 1
                 where     cardno = prmoldcardno
                       and customerunitcode = prmcustomerunitcode;
            end if;

            --------------------------------------------------------------------------------
            --形成解挂明细
            insert into rec_loss (lossfc,
                                  customerid,
                                  cardno,
                                  opdt,
                                  cardsn,
                                  empid,
                                  optype,
                                  losstype,
                                  poscode,
                                  sourceip,
                                  cardtypedetailid,
                                  opdesc,
                                  newcardno,
                                  hasunloss,
                                  bllttype,
                                  customerunitcode)
                 values (0,
                         prmcustid,
                         prmoldcardno,
                         sysdate,
                         prmcardsn,
                         prmopempid,
                         1,
                         0,
                         prmposcode,
                         prmsourceip,
                         vcardtypedetailid,
                         prmopdesc,
                         prmoldcardno,
                         1,
                         1,
                         prmcustomerunitcode);

            --及时统计
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                606,
                prmopempid,
                prmposcode,
                prmpsamcardno,
                vcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '解挂次数统计出错，' || out_msg;
                return;
            end if;

            out_result := 100;
            out_msg := '解挂操作成功！';
            commit;

            select count (*) into vcount from rec_bllt;

            if vcount > 0
            then
                select max (id) --暂时以id当板本号
                               into prmoutvalue from rec_bllt;
            else
                prmoutvalue := 1;
            end if;
        --------------------------------------------------------------------------------
        --回滚操作
        else
            update base_customers
               set cardno = prmoldcardno, status = 3
             where     customerid = prmcustid
                   and customerunitcode = prmcustomerunitcode;

            update rec_loss
               set newcardno = 0, hasunloss = 0
             where     customerid = prmcustid
                   and cardno = prmoldcardno
                   and optype = 0
                   and hasunloss = 1
                   and customerunitcode = prmcustomerunitcode;

            delete from rec_loss
                  where     customerid = prmcustid
                        and cardno = prmoldcardno
                        and optype = 1
                        and newcardno = prmoldcardno
                        and customerunitcode = prmcustomerunitcode;

            --------------------------------------------------------------------------------
            out_result := -1007;
            out_msg := '回滚白名单！';

            select nvl (count (*), 0)
              into vcount
              from rec_bllt a
             where     a.cardno = prmoldcardno
                   and a.state = 1
                   and a.customerunitcode = prmcustomerunitcode;

            if vcount = 1
            then
                --修改黑名单表中的状态
                update rec_bllt
                   set state = 0
                 where cardno = prmoldcardno;
            end if;

            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                606,
                prmopempid,
                prmposcode,
                prmpsamcardno,
                vcardtypedetailid,
                prmcardkind,
                --交易卡类型 1：m1卡 2：cpu卡
                1,
                --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '解挂回滚次数统计出错，' || out_msg;
                return;
            end if;

            --------------------------------------------------------------------------------
            prmoutvalue := 0;
            out_result := 100;
            out_msg := '解挂回滚操作成功！';
            commit;
        end if;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := '解挂异常：' || to_char (sqlcode) || '||||' || sqlerrm;
    end;

    procedure emp_loss (prmcardno             in     number,
                        prmidcardno           in     varchar2,
                        prmlosstype           in     number,
                        prmopempid            in     number,
                        prmsuorcetype         in     number,
                        prmsourceip           in     varchar2,
                        prmpsamcardno         in     number,
                        prmcardkind           in     number,
                        prmposcode            in     number,
                        prmopdesc             in     varchar2,
                        prmcustomerunitcode   in     varchar2, --客户代码
                        out_result               out number,
                        out_msg                  out varchar2)
    as
        vcount              number;
        vstatus             number;
        vcardtypedetailid   number;
        vcardsn             number;
        vareaid             number;
        vempid              number;
        vuserid             varchar2 (30);
        vbllttype           number;
        vcardno             number;
        vscardsnr           varchar2 (8);
        vblltno             number;
    begin
        --------------------------------------------------------------------------------
        out_result := -1000;
        out_msg := '挂失操作开始！';
        vbllttype := 1; --全用白名单模式
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        --------------------------------------------------------------------------------
        --验证系统参数表
        select nvl (count (*), 0)
          into vcount
          from base_syspara a;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := '系统参数表不能为空！';
            return;
        end if;

        --获取黑名单类型
        select a.bllttype
          into vbllttype
          from base_syspara a;

        --------------------------------------------------------------------------------

        --根据工号找职员
        select nvl (count (*), 0)
          into vcount
          from base_emp
         where     idcardno = prmidcardno
               and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := '不存在此员工！';
            return;
        end if;

        select empid, areaid, userid
          into vempid, vareaid, vuserid
          from base_emp a
         where     idcardno = prmidcardno
               and a.customerunitcode = prmcustomerunitcode;

        select nvl (count (*), 0)
          into vcount
          from base_emp_card
         where     empid = vempid
               and empcardno = prmcardno
               and customeruintcode = prmcustomerunitcode;

        if vcount <> 1
        then
            out_result := -1001;
            out_msg := '此员工没有此功能卡！';
            return;
        end if;

        select cardsn, carddetailid, scardsnr
          into vcardsn, vcardtypedetailid, vscardsnr
          from base_emp_card
         where     empid = vempid
               and empcardno = prmcardno
               and customeruintcode = prmcustomerunitcode;

        --------------------------------------------------------------------------------
        if vbllttype = 0
        then
            out_result := -1005;
            out_msg := '生成黑名单！';
            --生成黑名单
            proc_build_bllt (2,
                             vempid,
                             prmcardno,
                             vcardtypedetailid,
                             prmlosstype,--2017.07.31 修改为prmlosstype
                             prmsourceip,
                             prmcustomerunitcode,
                             0,
                             0,
                             out_result,
                             out_msg);
        else
            out_result := -1005;
            out_msg := '生成白名单！';
            --用十进制的卡唯一号作为卡号
            vblltno := to_number (vscardsnr, 'xxxxxxxx');

            --验证卡号是否已经挂失
            select nvl (count (*), 0)
              into vcount
              from rec_bllt
             where     cardno = vblltno
                   and state = 0
                   and customerunitcode = prmcustomerunitcode;

            if vcount < 1
            then
                --生成黑名单
                proc_build_bllt (2,
                                 vempid,
                                 vblltno,
                                 vcardtypedetailid,
                                 prmlosstype,--2017.07.31 修改为prmlosstype
                                 prmsourceip,
                                 prmcustomerunitcode,
                                 0,
                                 0,
                                 out_result,
                                 out_msg);
            end if;
        end if;

        if out_result <> 10
        then
            rollback;
            out_result := -1002;
            out_msg := '生成黑名单失败：' || out_msg;
            return;
        end if;

        --------------------------------------------------------------------------------
        select cardstatus
          into vstatus
          from base_emp_card
         where     empcardno = prmcardno
               and customeruintcode = prmcustomerunitcode;

        if vstatus <> 3
        then
            update base_emp_card
               set cardstatus = 3
             where     empcardno = prmcardno
                   and customeruintcode = prmcustomerunitcode;

            out_msg := '挂失操作成功！';
        end if;

        select nvl (count (*), 0)
          into vcount
          from rec_emp_loss
         where     cardno = prmcardno
               and optype = 0
               and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            insert into rec_emp_loss (opdt,
                                      areaid,
                                      userid,
                                      empid,
                                      opempid,
                                      cardno,
                                      cardsn,
                                      losstype,
                                      optype,
                                      sourceip,
                                      poscode,
                                      cardtypedetailid,
                                      opdesc,
                                      hasunloss,
                                      customerunitcode)
                 values (sysdate,
                         vareaid,
                         vuserid,
                         vempid,
                         prmopempid,
                         prmcardno,
                         vcardsn,
                         prmlosstype,
                         0,
                         prmsourceip,
                         prmposcode,
                         vcardtypedetailid,
                         prmopdesc,
                         0,
                         prmcustomerunitcode);
        else
            update rec_emp_loss
               set hasunloss = 0
             where     cardno = prmcardno
                   and optype = 0
                   and customerunitcode = prmcustomerunitcode;
        end if;

        --及时统计
        pkg_st_payment.proc_emptradeaccount_online (
            to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
            0,
            605,
            prmopempid,
            prmposcode,
            prmpsamcardno,
            1,
            prmcardkind,
            --交易卡类型 1：m1卡 2：cpu卡
            0, --操作类型 0：正常 1：回滚
            prmcustomerunitcode,
            out_msg,
            out_result);

        if out_result <> 100
        then
            --统计失败，回滚，返回错误
            rollback;
            out_result := out_result;
            out_msg := '挂失次数统计出错，' || out_msg;
            return;
        end if;

        out_result := 100;
        out_msg := '挂失操作成功';
        commit;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := '挂失异常：' || to_char (sqlcode) || '||||' || sqlerrm;
    end;

    procedure emp_unloss (prmempid              in     number,
                          prmcardtypedetailid   in     number,
                          prmoldcardno          in     number,
                          prmcardsn             in     number,
                          prmoptype             in     number,
                          prmopempid            in     number,
                          prmsuorcetype         in     number,
                          prmsourceip           in     varchar2,
                          prmpsamcardno         in     number,
                          prmcardkind           in     number,
                          prmposcode            in     number,
                          prmopdesc             in     varchar2,
                          prmcustomerunitcode   in     varchar2, --客户代码
                          prmoutvalue              out number,
                          out_result               out number,
                          out_msg                  out varchar2)
    as
        vcount        number;
        voldcardno    number;
        vuserid       varchar2 (30);
        vareaid       number;
        vcardsn       number;
        vcardstatus   number;
        vstatus       number;
        vnousedate    date;
        vbllttype     number;
        vscardsnr     varchar2 (8);
        vcardno       number;
        vblltno       number;
    begin
        prmoutvalue := 0;
        vbllttype := 1; --全用白名单模式
        -------检查是否正在数据结算-----------
        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := -1001;
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        select nvl (count (*), 0)
          into vcount
          from base_emp
         where empid = prmempid and customerunitcode = prmcustomerunitcode;

        if vcount = 0
        then
            out_result := -1001;
            out_msg := '不存在此员工';
            return;
        end if;

        select status
          into vstatus
          from base_emp
         where empid = prmempid and customerunitcode = prmcustomerunitcode;

        if vstatus <> 1
        then
            out_result := -1002;
            out_msg := '此员工账户状态异常，不允许进行解挂操作！';
            return;
        end if;

        if prmoptype <> 1 and prmoptype <> 2
        then
            out_result := -1003;
            out_msg := '操作类型错误，解挂失败！！';
            return;
        end if;

        select nvl (count (*), 0)
          into vcount
          from base_emp_card
         where     empid = prmempid
               and carddetailid = prmcardtypedetailid
               and customeruintcode = prmcustomerunitcode
               and empcardno = prmoldcardno;

        if vcount = 0
        then
            out_result := -1004;
            out_msg := '此员工无此类卡！';
            return;
        end if;

        select areaid, userid, areaid
          into vareaid, vuserid, vareaid
          from base_emp
         where empid = prmempid and customerunitcode = prmcustomerunitcode;

        select empcardno,
               cardsn,
               cardstatus,
               nousedate
          into voldcardno,
               vcardsn,
               vcardstatus,
               vnousedate
          from base_emp_card
         where     empid = prmempid
               and carddetailid = prmcardtypedetailid
               and customeruintcode = prmcustomerunitcode
               and empcardno = prmoldcardno;

        if prmoptype = 1
        then
            if voldcardno <> prmoldcardno
            then
                out_result := -1005;
                out_msg := '卡号验证错误，无法解挂！';
                return;
            end if;

            if vcardsn <> prmcardsn
            then
                out_result := -1006;
                out_msg := '卡序号验证错误，无法解挂！';
                return;
            end if;

            if vcardstatus <> 3
            then
                out_result := -1007;
                out_msg := '非挂失状态，无法解挂！';
                return;
            end if;

            if vnousedate is null
            then
                out_result := -1001;
                out_msg := '库中卡失效期异常，无法解挂！';
                return;
            end if;

            select nvl (count (*), 0)
              into vcount
              from rec_emp_loss
             where     optype = 0
                   and cardno = prmoldcardno
                   and hasunloss = 0
                   and customerunitcode = prmcustomerunitcode;

            if vcount = 0
            then
                out_result := -1009;
                out_msg := '解挂失败：未找到此卡的挂失记录';
                return;
            end if;

            --修改挂失记录中的标示
            update rec_emp_loss
               set hasunloss = 1, newcardno = prmoutvalue
             where     optype = 0
                   and cardno = prmoldcardno
                   and hasunloss = 0
                   and customerunitcode = prmcustomerunitcode;

            if vbllttype = 0
            then
                out_result := -1011;
                out_msg := '生成黑名单！';

                select nvl (count (*), 0)
                  into vcount
                  from rec_bllt_safe
                 where     cardno = prmoldcardno
                       and customerunitcode = prmcustomerunitcode;

                if vcount = 0
                then
                    insert into rec_bllt_safe (id,
                                               cardno,
                                               lossdt,
                                               finddt,
                                               oppsn,
                                               suorcetype,
                                               suorceip,
                                               systemid,
                                               nousedate,
                                               blltver,
                                               poscode,
                                               customerunitcode)
                        (select 0,
                                cardno,
                                lossdt,
                                sysdate,
                                id,
                                prmsuorcetype,
                                prmsourceip,
                                1,
                                vnousedate,
                                id,
                                prmposcode,
                                prmcustomerunitcode
                           from rec_bllt
                          where     cardno = prmoldcardno
                                and customerunitcode = prmcustomerunitcode);
                end if;

                ---处理旧的卡号，删除黑名单
                delete from rec_bllt a
                      where     cardno = prmoldcardno
                            and customerunitcode = prmcustomerunitcode;
            else
                out_result := -1012;
                out_msg := '生成白名单！';

                --用十进制的卡唯一号作为卡号

                --vblltno := to_number (vscardsnr, 'xxxxxxxx');

                --验证是否存在黑名单
                select nvl (count (*), 0)
                  into vcount
                  from rec_bllt
                 where     cardno = prmoldcardno
                       and state = 0
                       and customerunitcode = prmcustomerunitcode;

                if vcount = 1
                then
                    --修改黑名单表中的状态
                    update rec_bllt
                       set state = 1
                     where     cardno = prmoldcardno
                           and customerunitcode = prmcustomerunitcode;
                end if;
            end if;

            select count (*)
              into vcount
              from rec_emp_loss a
             where     a.optype = 1
                   and a.cardno = prmoldcardno
                   and customerunitcode = prmcustomerunitcode;

            if vcount = 0
            then
                --形成解挂明细
                insert into rec_emp_loss (opdt,
                                          areaid,
                                          userid,
                                          empid,
                                          opempid,
                                          cardno,
                                          cardsn,
                                          losstype,
                                          optype,
                                          sourceip,
                                          poscode,
                                          cardtypedetailid,
                                          opdesc,
                                          newcardno,
                                          hasunloss,
                                          customerunitcode)
                     values (sysdate,
                             vareaid,
                             vuserid,
                             prmempid,
                             prmopempid,
                             prmoldcardno,
                             prmcardsn,
                             0,
                             1,
                             prmsourceip,
                             prmposcode,
                             prmcardtypedetailid,
                             prmopdesc,
                             prmoutvalue,
                             2,
                             prmcustomerunitcode);
            end if;

            update base_emp_card
               set cardstatus = 1
             where     empid = prmempid
                   and empcardno = prmoldcardno
                   and customeruintcode = prmcustomerunitcode;

            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                606,
                prmopempid,
                prmposcode,
                prmpsamcardno,
                prmcardtypedetailid,
                prmcardkind,
                0, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '制卡数据统计出错，' || out_msg;
                return;
            end if;

            out_result := 100;
            out_msg := '解挂操作成功！';
            commit;
        --回滚操作
        else
            --修改挂失记录
            update rec_emp_loss
               set hasunloss = 0
             where lossfc in
                       (select max (lossfc)
                          from rec_emp_loss
                         where     empid = prmempid
                               and optype = 0
                               and cardno = prmoldcardno
                               and customerunitcode = prmcustomerunitcode);

            update base_emp_card
               set cardstatus = 3
             where     empid = prmempid
                   and carddetailid = prmcardtypedetailid
                   and customeruintcode = prmcustomerunitcode
                   and empcardno = prmoldcardno;

            --------------------------------------------------------------------------------
            if vbllttype = 0
            then
                out_result := -1013;
                out_msg := '回滚黑名单！';

                select nvl (count (*), 0)
                  into vcount
                  from rec_bllt
                 where     cardno = prmoldcardno
                       and customerunitcode = prmcustomerunitcode;

                if vcount = 0
                then
                    insert into rec_bllt (cardno,
                                          lossdt,
                                          nousedate,
                                          suorcetype,
                                          suorceip,
                                          customerunitcode)
                         values (prmoldcardno,
                                 sysdate,
                                 sysdate + 1460,
                                 prmsuorcetype,
                                 prmsourceip,
                                 prmcustomerunitcode);
                end if;
            else
                out_result := -1014;
                out_msg := '回滚白名单！';
                --用十进制的卡唯一号作为卡号
                vblltno := to_number (vscardsnr, 'xxxxxxxx');

                select nvl (count (*), 0)
                  into vcount
                  from rec_bllt
                 where     cardno = vblltno
                       and state = 1
                       and customerunitcode = prmcustomerunitcode;

                if vcount = 1
                then
                    --修改黑名单表中的状态
                    update rec_bllt
                       set state = 0
                     where     cardno = vblltno
                           and customerunitcode = prmcustomerunitcode;
                end if;
            end if;

            --------------------------------------------------------------------------------
            pkg_st_payment.proc_emptradeaccount_online (
                to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss'),
                0,
                606,
                prmopempid,
                prmposcode,
                prmpsamcardno,
                prmcardtypedetailid,
                prmcardkind,
                1, --操作类型 0：正常 1：回滚
                prmcustomerunitcode,
                out_msg,
                out_result);

            if out_result <> 100
            then
                --统计失败，回滚，返回错误
                rollback;
                out_result := out_result;
                out_msg := '回滚解挂统计出错，' || out_msg;
                return;
            end if;

            out_result := 100;
            out_msg := '回滚解挂成功！';
            commit;
        end if;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := '解挂异常：' || to_char (sqlcode) || '||||' || sqlerrm;
    end;
end;/
create or replace package pkg_rec_term
is
   procedure proc_adddrivecard_record (
      prmdriverid           in       number,
      prmposcode            in       number,
      prmdrivercardno       in       number,
      prmdrivercardsn       in       number,
      prmoptype             in       number,
      prmbuslineid          in       number,
      prmbusid              in       number,
      prmopdt               in       varchar2,
      prmdeptcode           in       varchar2,
      prmcollectdt          in       varchar2,
      prmposrecno           in       number,
      prmcardasn            in       number,                       --卡应用号
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   );
   procedure proc_addstation (
      prmstationname   in       varchar2,
      prmipaddr        in       varchar2,
      prmstationtype   in       number,
      prmoutvalue      out      number,
      out_result       out      number,
      out_msg          out      varchar2
   );

   procedure proc_updatestation (
      prmstationid     in       number,
      prmstationname   in       varchar2,
      prmipaddr        in       varchar2,
      prmstationtype   in       number,
      out_result       out      number,
      out_msg          out      varchar2
   );

   procedure proc_checkstation (
      prmstationid   in       number,
      out_result     out      number,
      out_msg        out      varchar2
   );

   procedure proc_updateappinfo (
      prmid                in       number,
      prmstationid         in       number,
      prmapptypeid         in       number,
      prmisused            in       number,
      prmappver            in       varchar2,
      prmip                in       varchar2,
      prmmemo              in       varchar2,
      prmsaltkey           in       varchar2,
      prmtimestamp         in       number,
      prmisenablemonitor   in       number,
      prmmonitorpwd        in       varchar2,
      prmappname           in       varchar2,
      out_result           out      number,
      out_msg              out      varchar2
   );

   procedure proc_checkappinfo (
      prmappid     in       number,
      out_result   out      number,
      out_msg      out      varchar2
   );

   procedure proc_addappport (
      prmappid      in       number,
      prmport       in       number,
      prmportname   in       varchar2,
      prmip         in       varchar2,
      prmportpty    in       number,
      out_result    out      number,
      out_msg       out      varchar2
   );

   procedure proc_updateappport (
      prmid         in       number,
      prmappid      in       number,
      prmport       in       number,
      prmportname   in       varchar2,
      prmip         in       varchar2,
      prmportpty    in       number,
      out_result    out      number,
      out_msg       out      varchar2
   );

   procedure proc_adddrivecardsumfare (
      prmposcode            in       number,
      prmdriverid           in       number,
      prmcheckstartdt       in       varchar2,
      prmcheckenddt         in       varchar2,
      prmsumno              in       number,
      prmsumfare            in       number,
      prmpsamcardno         in       number,
      prmrecno              in       number,
      prmbusid              in       number,
      prmbuslineid          in       number,
      prmdeptcode           in       varchar2,
      prmtac                in       varchar2,
      prmcollectdt          in       varchar2,
      prmempid              in       number,
      prmcustomerunitcode   in       varchar2,
      prmvicecardno         in       number,
      out_result            out      number,
      out_msg               out      varchar2
   );

   procedure proc_addappinfo (
      prmapptypeid         in       number,
      prmipaddess          in       varchar2,
      prmappver            in       varchar2,
      prmisused            in       number,
      prmtimestamp         in       number,
      prmsaltkey           in       varchar2,
      prmmemo              in       varchar2,
      prmstationid         in       number,
      prmisenablemonitor   in       number,
      prmmonitorpwd        in       varchar2,
      prmappname           in       varchar2,
      prmoutvalue          out      number,
      out_result           out      number,
      out_msg              out      varchar2
   );
end;


 

 
 
 /
create or replace package body pkg_rec_term
is
   procedure proc_adddrivecard_record (
      prmdriverid           in       number,
      prmposcode            in       number,
      prmdrivercardno       in       number,
      prmdrivercardsn       in       number,
      prmoptype             in       number,
      prmbuslineid          in       number,
      prmbusid              in       number,
      prmopdt               in       varchar2,
      prmdeptcode           in       varchar2,
      prmcollectdt          in       varchar2,
      prmposrecno           in       number,
      prmcardasn            in       number,                       --卡应用号
      prmcustomerunitcode   in       varchar2,
      out_result            out      number,
      out_msg               out      varchar2
   )
   as
      vbusid      number;
      vcount      number;
      vdeptcode   varchar2 (9);
   begin
      /*
              ----------------------------------------------------------------------------
              --存储过程：proc_adddrivecard_record
              --作　　者：梁小凯
              --时　　间：2009-05-26
              --说　　明：添加司机卡刷卡记录
              --输入参数：
              --输出参数：
              --    out_result: 100 成功

              --------------------------------------------------------------------------
              */
      out_result := -1000;
      out_msg := '添加司机刷卡记录失败';
      vbusid := prmbusid;

      --车辆编号为零时根据设备唯一运行编号查询车辆编号
      if vbusid = 0
      then
         select count (*)
           into vcount
           from base_term
          where poscode = prmposcode
                and customerunitcode = prmcustomerunitcode;

         if vcount = 1
         then
            select count (*)
              into vcount
              from base_bus
             where (   poscode = prmposcode
                    or poscodelist like '%' || prmposcode || '%'
                   )
               and customerunitcode = prmcustomerunitcode;

            if vcount <> 1
            then
               out_result := -1001;
               out_msg := '无车辆选择此设备';
               return;
            end if;

            select nvl (busno, 0)
              into vbusid
              from base_bus
             where (   poscode = prmposcode
                    or poscodelist like '%' || prmposcode || '%'
                   )
               and customerunitcode = prmcustomerunitcode;
         else
            out_result := -1001;
            out_msg := '无此设备';
            return;
         end if;
      end if;

      --检验司机信息是否合法
      select count (*)
        into vcount
        from base_emp
       where empid = prmdriverid and customerunitcode = prmcustomerunitcode;

      if vcount = 0
      then
         out_result := -1002;
         out_msg := '无此司机信息';
         return;
      end if;

      select a.dptcode
        into vdeptcode
        from base_emp a
       where a.empid = prmdriverid
             and a.customerunitcode = prmcustomerunitcode;

      --修改人：梁小凯
      --修改日期：20090708
      --修改说明：增加prmposrecno参数
      --修改人：职旗
      --修改日期：20090708
      --修改说明：增加prmcardasn参数
      insert into rec_drivecard_record
                  (id, driverid, poscode, drivercardno,
                   drivercardsn, optype, buslineid, busid,
                   opdt, deptcode,
                   collectdt, uploaddt,
                   posrecno, cardasn, customerunitcode
                  )
           values (0, prmdriverid, prmposcode, prmdrivercardno,
                   prmdrivercardsn, prmoptype, prmbuslineid, vbusid,
                   to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), vdeptcode,
                   to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'), sysdate,
                   prmposrecno, prmcardasn, prmcustomerunitcode
                  );

      out_result := 100;
      out_msg := '添加司机刷卡记录成功';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加司机卡刷卡记录异常：' || sqlerrm;
   end;
   procedure proc_addstation (
      prmstationname   in       varchar2,
      prmipaddr        in       varchar2,
      prmstationtype   in       number,
      prmoutvalue      out      number,
      out_result       out      number,
      out_msg          out      varchar2
   )
   as
      vcount   number;
      vmaxid   number;
   begin
      /*
             ----------------------------------------------------------------------------
             --存储过程：proc_addstation
             --作　　者：梁小凯
             --时　　间：2009-05-26
             --说　　明：添加工作站
             --输入参数：
             --输出参数：
             --    out_result: 100 成功
             --------------------------------------------------------------------------
             */
      out_result := -1000;
      out_msg := '添加工作站失败！';

      select count (*)
        into vcount
        from base_station
       where stationname = prmstationname;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '工作站已存在！';
         return;
      end if;

      select count (*)
        into vcount
        from base_station
       where ipaddr = prmipaddr;

      if vcount > 0
      then
         out_result := -1002;
         out_msg := 'ip地址已存在！';
         return;
      end if;

      select nvl (max (stationid), 0)
        into vmaxid
        from base_station;

      vmaxid := vmaxid + 1;
      prmoutvalue := vmaxid;

      insert into base_station
                  (stationid, stationname, stationtype, ipaddr,
                   enablemonitor, monitorpwd, ver
                  )
           values (vmaxid, prmstationname, prmstationtype, prmipaddr,
                   1, '1234', 0
                  );

      out_result := 100;
      out_msg := '添加工作站成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加工作站记录异常：' || sqlerrm;
   end;

   procedure proc_updatestation (
      prmstationid     in       number,
      prmstationname   in       varchar2,
      prmipaddr        in       varchar2,
      prmstationtype   in       number,
      out_result       out      number,
      out_msg          out      varchar2
   )
   as
      /*
      --------------------------------------------------------------------------
      --存储过程：proc_updatestation
      --作　　者：梁小凯
      --时　　间：2009-05-26
      --说　　明：更新工作站
      --输入参数：
      --输出参数：
      --    out_result: 100 成功
      --------------------------------------------------------------------------
      --修改标示：朱鹏飞 2009-06-26
      --修改说明：修改工作站类型时，检查工作站下是否有其他类应用。
      --    如将综合类工作站修改采集类，先检查工作站下是否有采集类不允许的应用
      --------------------------------------------------------------------------
      --修改标示：朱鹏飞 2009-06-30
      --修改说明：解决一个参数错误的bug
      --------------------------------------------------------------------------
      */
      vstaionid   number;
      vcount      number;
      v_applist   varchar2 (40);
      v_sql       varchar (1000);
   begin
      select a.apptype
        into v_applist
        from base_station_type a
       where a.typeid = prmstationtype;

      v_sql :=
            'select count (*) from base_app_info a where a.stationid = '
         || prmstationid
         || ' and a.apptypeid not in ('
         || v_applist
         || ')';

      execute immediate v_sql
                   into vcount;

      if vcount > 0
      then
         out_result := -1002;
         out_msg := '工作站下已存在其他类型应用';
         return;
      end if;

      out_result := -1000;
      out_msg := '添加工作站失败！';

      select nvl (count (*), 0)
        into vcount
        from base_station
       where stationname = prmstationname;

      if vcount = 1
      then
         select stationid
           into vstaionid
           from base_station
          where stationname = prmstationname;

         if vstaionid <> prmstationid
         then
            out_result := -1001;
            out_msg := '工作站名称已存在！';
            return;
         end if;
      end if;

      update base_station
         set stationname = prmstationname,
             ipaddr = prmipaddr,
             stationtype = prmstationtype
       where stationid = prmstationid;

      out_result := 100;
      out_msg := '修改工作站成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加工作站记录异常：' || sqlerrm;
   end;

   procedure proc_checkstation (
      prmstationid   in       number,
      out_result     out      number,
      out_msg        out      varchar2
   )
   as
      vcount   number;
   begin
      /*
                ----------------------------------------------------------------------------
                --存储过程：proc_checkappinfo
                --作　　者：梁小凯
                --时　　间：2009-05-26
                --说　　明：检查工作站
                --输入参数：
                --输出参数：
                --    out_result: 100 成功
                --------------------------------------------------------------------------
                */
      select nvl (count (*), 0)
        into vcount
        from base_app_info
       where stationid = prmstationid;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '工作站下有应用无法删除！';
         return;
      end if;

      out_result := 100;
      out_msg := '可以删除此工作站！';
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '异常：' || sqlerrm;
   end;

   procedure proc_updateappinfo (
      prmid                in       number,
      prmstationid         in       number,
      prmapptypeid         in       number,
      prmisused            in       number,
      prmappver            in       varchar2,
      prmip                in       varchar2,
      prmmemo              in       varchar2,
      prmsaltkey           in       varchar2,
      prmtimestamp         in       number,
      prmisenablemonitor   in       number,
      prmmonitorpwd        in       varchar2,
      prmappname           in       varchar2,
      out_result           out      number,
      out_msg              out      varchar2
   )
   as
      vid      number;
      vcount   number;
   begin
            /*
      ----------------------------------------------------------------------------
      --存储过程：proc_updateappinfo
      --作　　者：梁小凯
      --时　　间：2009-05-26
      --说　　明：修改应用信息
      --输入参数：
      --输出参数：
      --    out_result: 100 成功
      --------------------------------------------------------------------------
                         */
      select nvl (count (*), 0)
        into vcount
        from base_app_info
       where apptypeid = prmapptypeid and stationid = prmstationid;

      if vcount = 1
      then
         select id
           into vid
           from base_app_info
          where apptypeid = prmapptypeid and stationid = prmstationid;

         if vid <> prmid
         then
            out_result := -1000;
            out_msg := '此工作站下已有此应用类型，修改信息失败！';
            return;
         end if;
      end if;

      update base_app_info
         set stationid = prmstationid,
             apptypeid = prmapptypeid,
             isused = prmisused,
             appver = prmappver,
             ipaddess = prmip,
             memo = prmmemo,
             saltkey = prmsaltkey,
             timestamp = prmtimestamp,
             isenablemonitor = prmisenablemonitor,
             monitorpwd = prmmonitorpwd,
             appname = prmappname
       where id = prmid;

      out_result := 100;
      out_msg := '修改应用信息成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '异常：' || sqlerrm;
   end;

   procedure proc_checkappinfo (
      prmappid     in       number,
      out_result   out      number,
      out_msg      out      varchar2
   )
   as
      vcount   number;
   begin
      /*
                ----------------------------------------------------------------------------
                --存储过程：proc_checkappinfo
                --作　　者：梁小凯
                --时　　间：2009-05-26
                --说　　明：检查应用
                --输入参数：
                --输出参数：
                --    out_result: 100 成功
                --------------------------------------------------------------------------
                */
      select nvl (count (*), 0)
        into vcount
        from base_app_term
       where appid = prmappid;

      if vcount > 0
      then
         out_result := -1001;
         out_msg := '应用下有设备终端，无法删除！';
         return;
      end if;

      out_result := 100;
      out_msg := '可以删除此应用！';
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '异常：' || sqlerrm;
   end;

   procedure proc_addappport (
      prmappid      in       number,
      prmport       in       number,
      prmportname   in       varchar2,
      prmip         in       varchar2,
      prmportpty    in       number,
      out_result    out      number,
      out_msg       out      varchar2
   )
   as
      vcount   number;
   begin
      /*
         ----------------------------------------------------------------------------
         --存储过程：proc_addappport
         --作　　者：梁小凯
         --时　　间：2009-05-26
         --说　　明：添加应用终端
         --输入参数：
         --输出参数：
         --    out_result: 100 成功
         ------------------------------------------------------------------
         --修改标识：王俊贵20090812
         --修改原因：同一应用下名称不能重复
        ---------------------------------------------------------------------
         */
      select nvl (count (*), 0)
        into vcount
        from base_app_port
       where appid = prmappid
         and portname = prmportname
         and portpty = prmportpty;

      if vcount > 0
      then
         out_result := -1000;
         out_msg := '此应用此名称已存在！';
         return;
      end if;

      select nvl (count (*), 0)
        into vcount
        from base_app_port
       where appid = prmappid and port = prmport and portpty = prmportpty;

      if vcount > 0
      then
         out_result := -1000;
         out_msg := '此应用已占用此端口！';
         return;
      end if;

      insert into base_app_port
                  (id, appid, port, portname, ipaddr, portpty
                  )
           values (0, prmappid, prmport, prmportname, prmip, prmportpty
                  );

      out_result := 100;
      out_msg := '添加应用端口成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '异常：' || sqlerrm;
   end;

   procedure proc_updateappport (
      prmid         in       number,
      prmappid      in       number,
      prmport       in       number,
      prmportname   in       varchar2,
      prmip         in       varchar2,
      prmportpty    in       number,
      out_result    out      number,
      out_msg       out      varchar2
   )
   as
      vcount   number;
      vid      number;
   begin
      /*
      ----------------------------------------------------------------------------
      --存储过程：proc_updateappport
      --作　　者：梁小凯
      --时　　间：2009-05-26
      --说　　明：更新应用终端
      --输入参数：
      --输出参数：
      --    out_result: 100 成功
      ------------------------------------------------------------------
      --修改标识：王俊贵20090812
      --修改原因：同一应用下名称不能重复
      ---------------------------------------------------------------------
      */
      select nvl (count (*), 0)
        into vcount
        from base_app_port
       where appid = prmappid
         and portname = prmportname
         and portpty = prmportpty;

      if vcount = 1
      then
         select id
           into vid
           from base_app_port
          where appid = prmappid
            and portname = prmportname
            and portpty = prmportpty;

         if vid <> prmid
         then
            out_result := -1000;
            out_msg := '此应用已占用此名称！';
            return;
         end if;
      end if;

      select nvl (count (*), 0)
        into vcount
        from base_app_port
       where appid = prmappid and port = prmport and portpty = prmportpty;

      if vcount = 1
      then
         select id
           into vid
           from base_app_port
          where appid = prmappid and port = prmport and portpty = prmportpty;

         if vid <> prmid
         then
            out_result := -1000;
            out_msg := '此应用已占用此端口！';
            return;
         end if;
      end if;

      update base_app_port
         set appid = prmappid,
             port = prmport,
             portname = prmportname,
             ipaddr = prmip,
             portpty = prmportpty
       where id = prmid;

      out_result := 100;
      out_msg := '更新应用端口成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '异常：' || sqlerrm;
   end;

   procedure proc_adddrivecardsumfare (
      prmposcode            in       number,
      prmdriverid           in       number,
      prmcheckstartdt       in       varchar2,
      prmcheckenddt         in       varchar2,
      prmsumno              in       number,
      prmsumfare            in       number,
      prmpsamcardno         in       number,
      prmrecno              in       number,
      prmbusid              in       number,
      prmbuslineid          in       number,
      prmdeptcode           in       varchar2,
      prmtac                in       varchar2,
      prmcollectdt          in       varchar2,
      prmempid              in       number,
      prmcustomerunitcode   in       varchar2,
      prmvicecardno         in       number,
      out_result            out      number,
      out_msg               out      varchar2
   )
   as
-----------------------------------------------------------------------------
--修改标识：程文平 20110713
--修改说明：司机签退记录和司机当班总额记录作为一条记录上传。
--          司机当班总额记录上传同时形成一条司机签退记录。
-----------------------------------------------------------------------------
--修改标识：周晓娜 20120823
--修改说明：司机当班总额中增加三个字段，一实际的签到司机编号，二客户代码，三 次卡汇总
-----------------------------------------------------------------------------
      n_count       number;
      n_empcardno   number;
      n_cardsn      number;
      vbusid        number;
      vcount        number;
      vdeptcode     varchar2 (9);
   begin
      out_result := -1000;
      out_msg := '添加司机当班刷卡总额失败';
      vbusid := prmbusid;

      --车辆编号为零时根据设备唯一运行编号查询车辆编号
      if vbusid = 0
      then
         select count (*)
           into vcount
           from base_term
          where poscode = prmposcode
                and customerunitcode = prmcustomerunitcode;

         if vcount = 1
         then
            select count (*)
              into vcount
              from base_bus
             where (   poscode = prmposcode
                    or poscodelist like '%' || prmposcode || '%'
                   )
               and customerunitcode = prmcustomerunitcode;

            if vcount <> 1
            then
               out_result := -1001;
               out_msg := '无车辆选择此设备';
               return;
            end if;

            select nvl (busno, 0)
              into vbusid
              from base_bus
             where (   poscode = prmposcode
                    or poscodelist like '%' || prmposcode || '%'
                   )
               and customerunitcode = prmcustomerunitcode;
         else
            out_result := -1001;
            out_msg := '无此设备';
            return;
         end if;
      end if;

      --检验司机信息是否合法
      select count (*)
        into vcount
        from base_emp
       where empid = prmdriverid and customerunitcode = prmcustomerunitcode;

      if vcount = 0
      then
         out_result := -1002;
         out_msg := '无此司机信息';
         return;
      end if;

      select a.dptcode
        into vdeptcode
        from base_emp a
       where a.empid = prmdriverid
             and a.customerunitcode = prmcustomerunitcode;

      select count (*)
        into n_count
        from base_emp_card a
       where a.empid = prmdriverid
             and a.customeruintcode = prmcustomerunitcode;

      if n_count = 1
      then
         --获取司机卡号
         select a.empcardno, a.cardsn
           into n_empcardno, n_cardsn
           from base_emp_card a
          where a.empid = prmdriverid
            and a.customeruintcode = prmcustomerunitcode;
      else
         --司机编号不存在，卡号填0
         n_empcardno := 0;
         n_cardsn := 0;
      end if;

      insert into rec_drivecard_sumfare
                  (id, poscode, driverid,
                   checkstartdt,
                   checkenddt,
                   sumno, sumfare, psamcardno, recno, busid,
                   buslineid, deptcode, tac,
                   opdt, uploaddt,
                   collectdt, empid,
                   customerunitcode, vicecardno
                  )
           values (0, prmposcode, prmdriverid,
                   to_date (prmcheckstartdt, 'yyyy-mm-dd hh24:mi:ss'),
                   to_date (prmcheckenddt, 'yyyy-mm-dd hh24:mi:ss'),
                   prmsumno, prmsumfare, prmpsamcardno, prmrecno, vbusid,
                   prmbuslineid, vdeptcode, prmtac,
                   to_date (prmcheckenddt, 'yyyy-mm-dd hh24:mi:ss'), sysdate,
                   to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'), prmempid,
                   prmcustomerunitcode, prmvicecardno
                  );

      --形成司机签退记录
      --终端形成签退记录，平台不用再根据当班记录进行拆分
      /*insert into rec_drivecard_record
                  (id, driverid, poscode, drivercardno, drivercardsn, optype,
                   buslineid, busid,
                   opdt,
                   deptcode,
                   collectdt, uploaddt,
                   posrecno, cardasn, customerunitcode
                  )
           values (0, prmdriverid, prmposcode, n_empcardno, n_cardsn, 0,
                   prmbuslineid, vbusid,
                   to_date (prmcheckenddt, 'yyyy-mm-dd hh24:mi:ss'),
                   vdeptcode,
                   to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'), sysdate,
                   prmrecno, n_empcardno, prmcustomerunitcode
                  );*/
      out_result := 100;
      out_msg := '添加司机当班刷卡总额成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '异常：' || sqlerrm;
   end;

   procedure proc_addappinfo (
      prmapptypeid         in       number,
      prmipaddess          in       varchar2,
      prmappver            in       varchar2,
      prmisused            in       number,
      prmtimestamp         in       number,
      prmsaltkey           in       varchar2,
      prmmemo              in       varchar2,
      prmstationid         in       number,
      prmisenablemonitor   in       number,
      prmmonitorpwd        in       varchar2,
      prmappname           in       varchar2,
      prmoutvalue          out      number,
      out_result           out      number,
      out_msg              out      varchar2
   )
   as
      vmaxid   number;
   begin
      select nvl (max (id), 0)
        into vmaxid
        from base_app_info;

      prmoutvalue := vmaxid + 1;

      insert into base_app_info
                  (id, apptypeid, ipaddess, appver,
                   isused, timestamp, saltkey, memo,
                   stationid, isenablemonitor, monitorpwd, appname
                  )
           values (prmoutvalue, prmapptypeid, prmipaddess, prmappver,
                   prmisused, prmtimestamp, prmsaltkey, prmmemo,
                   prmstationid, prmisenablemonitor, prmmonitorpwd, prmappname
                  );

      out_result := 100;
      out_msg := '添加应用成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := '添加应用异常：' || sqlerrm;
   end;
end;

/
create or replace package pkg_rec_thirdapi
is
    type ref_cursor is ref cursor; --游标类型定义，用于返回数据集

    --缴费申请接口
    procedure proc_request_premiumrecord (
        prmappid              in     varchar2, --appid
        prmcustomerid         in     number, --customerid
        prmcardno             in     number, --卡号
        prmoutid              in     varchar2, --市民卡卡号
        prmcardtype           in     number, --卡类型id
        prmwallettype         in     number, --钱包类型
        prmbankcardno         in     varchar2, --银行卡号
        prmphone              in     varchar2, --手机号
        prmopfare             in     number, --交易金额（单位分）
        prmempid              in     number, --职员id
        prmposcode            in     number, --终端编号
        prmcustomerunitcode   in     varchar2, --客户法人
        -----返回值-------------------
        prmsystracenum           out varchar2, --缴费系统跟踪号(格式：yymmddhh24mi+6位循环利用递增序列号)
        out_result               out number,
        out_msg                  out varchar2);

    --缴费提交接口
    procedure proc_commit_premiumrecord (
        prmsystracenum        in     varchar2, --缴费系统跟踪号
        prmappid              in     varchar2, --appid
        prmcustomerid         in     number, --customerid
        prmcardno             in     number, --卡号
        prmoutid              in     varchar2, --市民卡卡号
        prmbankserialnum      in     varchar2, --银行流水号
        prmpaytime            in     varchar2, --缴费时间
        prmpayrespcode        in     varchar2, --缴费响应码
        prmpayrespmsg         in     varchar2, --缴费响应信息
        prmcustomerunitcode   in     varchar2, --客户法人
        -----返回值-------------------
        out_result               out number,
        out_msg                  out varchar2);

    --圈存机待领款记录
    procedure proc_get_waitdrawrecord (
        prmcustomerid         in     number, --customerid
        prmcustomerunitcode   in     varchar2, --客户法人
        -----返回值-------------------
        out_result               out number,
        out_msg                  out varchar2,
        out_cursor               out ref_cursor);

    --圈存机领款提交
    procedure proc_commit_drawrecord (prmcustomerid         in     number, --customerid
                                      prmcustomerunitcode   in     varchar2, --客户法人
                                      prmplanid             in     number, --planid
                                      -----返回值-------------------
                                      out_result               out number,
                                      out_msg                  out varchar2);

    --对账接口
    procedure premiumfiledz (prmsystracenum        in     varchar2, --公交流水号
                             prmopfare             in     number, --银行对账金额
                             prmcustomerunitcode   in     varchar2, --客户代码
                             prmexterninfo         in     varchar2, --预留扩展字段
                             out_result               out number,
                             out_msg                  out varchar2);
end pkg_rec_thirdapi;/
create or replace package body pkg_rec_thirdapi
is
    --缴费申请接口
    procedure proc_request_premiumrecord (
        prmappid              in     varchar2, --appid
        prmcustomerid         in     number, --customerid
        prmcardno             in     number, --卡号
        prmoutid              in     varchar2, --市民卡卡号
        prmcardtype           in     number, --卡类型id
        prmwallettype         in     number, --钱包类型
        prmbankcardno         in     varchar2, --银行卡号
        prmphone              in     varchar2, --手机号
        prmopfare             in     number, --交易金额（单位分）
        prmempid              in     number, --职员id
        prmposcode            in     number, --终端编号
        prmcustomerunitcode   in     varchar2, --客户法人
        -----返回值-------------------
        prmsystracenum           out varchar2, --缴费系统跟踪号(格式：yymmddhh24mi+6位循环利用递增序列号)
        out_result               out number,
        out_msg                  out varchar2)
    ----------------------------------------------------------------------------
    --作　　者：闫丽平
    --时　　间：2018-05-31
    --说　　明：缴费申请接口
    ----------------------------------------------------------------------------
    is
        i_count           number;
        i_factor          int;
        n_opfare          number (10, 2);
        v_status          number;
        d_vicestartdate   date;
        d_viceenddate     date;
    begin
        out_result := -1000;
        out_msg := '缴费申请初始化字段';
        i_count := 0;
        i_factor := 100; --根据分和元之间的转换（100）赋默认值
        n_opfare := 0;
        v_status := 0;

        ------------------------获取系统跟踪号-------------------------
        prmsystracenum :=
               to_char (sysdate, 'yymmddhh24mi')
            || lpad (seq_rec_premium_systracenum.nextval, 6, '0');

        ------------------------获取次卡开始结束日期-------------------------
        out_result := -1001;
        out_msg := '获取次卡开始结束日期失败';

        get_premium_expirydateandstate (prmcustomerid,
                                        prmcustomerunitcode,
                                        v_status,
                                        d_vicestartdate,
                                        d_viceenddate,
                                        out_result,
                                        out_msg);

        if out_result <> 100
        then
            return;
        end if;

        if v_status <> 0
        then
            out_result := -1002;
            out_msg := '您还在有效期内，不需要再缴保险费';
            return;
        end if;

        ------------------------验证该人是否已经交过保费-------------------------
        out_result := -1003;
        out_msg := '获取保费记录失败';

        select count (*)
          into i_count
          from rec_premium a
         where     a.cardno = prmcardno
               and a.outid = prmoutid
               and a.vicestartdate = d_vicestartdate
               and a.viceenddate = d_viceenddate
               and a.paystate = 1
               and customerunitcode = prmcustomerunitcode;

        if i_count > 0
        then
            out_result := -1004;
            out_msg := '该人已交过保费';
            return;
        end if;

        ------------------------验证客户信息是否合法-------------------------
        out_result := -1005;
        out_msg := '检查客户法人信息是否合法';

        select count (a.id)
          into i_count
          from base_legal_person a
         where a.customerunitcode = prmcustomerunitcode;

        if i_count <> 1
        then
            out_result := -1006;
            out_msg :=
                   '客户法人信息不合法！customerunitcode：'
                || to_char (prmcustomerunitcode);
            return;
        end if;

        --------------------------获取转换因子---------------------------------
        --获取最小货币单位和通用货币单位间的转换因子
        out_result := -1007;
        out_msg := '获取货币转换因子失败！';

        select nvl (max (a.paramvalue), -1)
          into i_factor
          from base_param a
         where a.paramname = 'hexadecimal' and a.paramgroupid = 1002;

        if (i_factor < 0)
        then
            out_result := -1008;
            out_msg := '获取转换因子失败！factor：' || i_factor;
            return;
        end if;

        n_opfare := prmopfare / i_factor;

        ---------------------------消费记录入账处理---------------------------
        out_result := -1009;
        out_msg := '缴费记录入账失败！';

        select count (*)
          into i_count
          from rec_premium a
         where a.systracenum = prmsystracenum;

        if i_count > 0
        then
            out_result := -1010;
            out_msg := '该记录已入库';
            return;
        end if;

        insert into rec_premium (systracenum,
                                 appid,
                                 customerid,
                                 cardno,
                                 outid,
                                 cardtype,
                                 wallettype,
                                 bankcardno,
                                 phone,
                                 opfare,
                                 vicestartdate,
                                 viceenddate,
                                 empid,
                                 poscode,
                                 customerunitcode)
             values (prmsystracenum,
                     prmappid,
                     prmcustomerid,
                     prmcardno,
                     prmoutid,
                     prmcardtype,
                     prmwallettype,
                     prmbankcardno,
                     prmphone,
                     n_opfare,
                     d_vicestartdate,
                     d_viceenddate,
                     prmempid,
                     prmposcode,
                     prmcustomerunitcode);

        out_result := 100;
        out_msg := '该记录成功入库';
        commit;
        return;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，异常信息为：' || sqlerrm;
            return;
    end;

    --缴费提交接口
    procedure proc_commit_premiumrecord (
        prmsystracenum        in     varchar2, --缴费系统跟踪号
        prmappid              in     varchar2, --appid
        prmcustomerid         in     number, --customerid
        prmcardno             in     number, --卡号
        prmoutid              in     varchar2, --市民卡卡号
        prmbankserialnum      in     varchar2, --银行流水号
        prmpaytime            in     varchar2, --缴费时间
        prmpayrespcode        in     varchar2, --缴费响应码
        prmpayrespmsg         in     varchar2, --缴费响应信息
        prmcustomerunitcode   in     varchar2, --客户法人
        -----返回值-------------------
        out_result               out number,
        out_msg                  out varchar2)
    ----------------------------------------------------------------------------
    --作　　者：闫丽平
    --时　　间：2018-05-31
    --说　　明：缴费提交接口
    ----------------------------------------------------------------------------
    is
        i_count            number;
        v_status           number;
        v_paystatus        number;
        v_drawstatus       number;
        d_vicestartdate    date;
        d_viceenddate      date;
        custom_exception   exception; --自定义错误
    begin
        out_result := -1000;
        out_msg := '缴费提交初始化字段';
        i_count := 0;
        v_status := 0;
        v_paystatus := 0;
        v_drawstatus := -1;

        if prmpayrespcode = '00'
        then
            v_paystatus := 1;
            v_drawstatus := 0;
        else
            v_paystatus := 2;
        end if;

        out_result := -1001;
        out_msg := '不存在申请记录';

        select count (*)
          into i_count
          from rec_premium a
         where a.systracenum = prmsystracenum;

        if i_count <> 1
        then
            out_result := -1002;
            out_msg := '该记录不存在或存在多条';
            return;
        end if;

        select a.paystate
          into v_status
          from rec_premium a
         where a.systracenum = prmsystracenum;

        if v_status = 1
        then
            out_result := -1003;
            out_msg := '该记录已交过费，无需再缴';
            return;
        end if;

        out_result := -1004;
        out_msg := '查询记录次卡开始结束日期失败';

        select a.vicestartdate, a.viceenddate
          into d_vicestartdate, d_viceenddate
          from rec_premium a
         where a.systracenum = prmsystracenum;

        select count (*)
          into i_count
          from rec_premium a
         where     a.cardno = prmcardno
               and a.outid = prmoutid
               and a.vicestartdate = d_vicestartdate
               and a.viceenddate = d_viceenddate
               and a.paystate = 1
               and customerunitcode = prmcustomerunitcode;

        if i_count > 0
        then
            out_result := -1005;
            out_msg := '该阶段您已交过保费，无需再缴';
            return;
        end if;

        out_result := -1006;
        out_msg := '查询当前日期是否还在有效期内';

        get_premium_expirydateandstate (prmcustomerid,
                                        prmcustomerunitcode,
                                        v_status,
                                        d_vicestartdate,
                                        d_viceenddate,
                                        out_result,
                                        out_msg);

        if out_result <> 100
        then
            return;
        end if;

        if v_status <> 0
        then
            out_result := -1007;
            out_msg := '您还在有效期内，不需要再缴保险费';
            return;
        end if;

        update rec_premium a
           set a.bankserialnum = prmbankserialnum,
               a.paystate = v_paystatus,
               a.paytime = to_date (prmpaytime, 'yyyy-mm-dd hh24:mi:ss'),
               a.paylocaltime = sysdate,
               a.payrespcode = prmpayrespcode,
               a.payrespmsg = prmpayrespmsg,
               a.drawstate = v_drawstatus
         where a.systracenum = prmsystracenum;

        out_result := 100;
        out_msg := '保费缴费成功';
        commit;
        return;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '，异常信息为：' || sqlerrm;
            return;
    end;

    --圈存机待领款记录
    procedure proc_get_waitdrawrecord (
        prmcustomerid         in     number, --customerid
        prmcustomerunitcode   in     varchar2, --客户法人
        -----返回值-------------------
        out_result               out number,
        out_msg                  out varchar2,
        out_cursor               out ref_cursor)
    ----------------------------------------------------------------------------
    --作　　者：闫丽平
    --时　　间：2018-05-31
    --说　　明：返回最早一条待领款记录
    ----------------------------------------------------------------------------
    is
        v_systracenum   varchar2(40);
        returnrec       ref_cursor;
    begin
        out_result := -1000;
        out_msg := '获取待领款记录失败';

        -----------------------对游标赋初始值----------------------------
        open returnrec for
            select prmcustomerid as customerid,
                   prmcustomerunitcode as customerunitcode,
                   trunc (sysdate) as vicestartdate,
                   trunc (sysdate) as viceenddate
              from dual;

        out_cursor := returnrec;

        ------------------------获取次卡开始结束日期-------------------------
        out_result := -1001;
        out_msg := '获取最早缴费成功且未领款的系统跟踪号';

        get_premium_firstpaysuccess (prmcustomerid,
                                     prmcustomerunitcode,
                                     v_systracenum,
                                     out_result,
                                     out_msg);

        if (out_result <> 100)
        then
            return;
        end if;

        open returnrec for
            select m.*
              from rec_premium m
             where m.systracenum = v_systracenum;

        out_cursor := returnrec;
        out_result := 100;
        out_msg := '获取记录成功';
        return;
    exception
        when others
        then
            out_result := -1;
            out_msg := out_msg || '，异常信息为：' || sqlerrm;
            return;
    end;

    --圈存机领款提交
    procedure proc_commit_drawrecord (prmcustomerid         in     number, --customerid
                                      prmcustomerunitcode   in     varchar2, --客户法人
                                      prmplanid             in     number, --planid
                                      -----返回值-------------------
                                      out_result               out number,
                                      out_msg                  out varchar2)
    ----------------------------------------------------------------------------
    --作　　者：闫丽平
    --时　　间：2018-05-31
    --说　　明：圈存机领款提交
    ----------------------------------------------------------------------------
    is
        v_systracenum   varchar2(40);
    begin
        out_result := -1000;
        out_msg := '领款提交失败';

        ------------------------获取次卡开始结束日期-------------------------
        out_result := -1001;
        out_msg := '获取最早缴费成功且未领款的系统跟踪号';

        get_premium_firstpaysuccess (prmcustomerid,
                                     prmcustomerunitcode,
                                     v_systracenum,
                                     out_result,
                                     out_msg);

        if (out_result <> 100)
        then
            return;
        end if;

        out_result := -1002;
        out_msg := '更新领款状态失败';

        update rec_premium a
           set a.planid = prmplanid, a.drawstate = 1, a.drawtime = sysdate
         where a.systracenum = v_systracenum;

        out_result := 100;
        out_msg := '更新成功';
        return;
    exception
        when others
        then
            out_result := -1;
            out_msg := out_msg || '，异常信息为：' || sqlerrm;
            return;
    end;

    procedure premiumfiledz (prmsystracenum        in     varchar2, --公交流水号
                             prmopfare             in     number, --银行对账金额
                             prmcustomerunitcode   in     varchar2, --客户代码
                             prmexterninfo         in     varchar2, --预留扩展字段
                             out_result               out number,
                             out_msg                  out varchar2)
    /*
       --------------------------------------------------------------------------
         --修改标示：杨英豪
         --时　　间：2018-05-31
         --修改说明：app线上缴纳保险费用对账流程(返回值100 101正常)
         --------------------------------------------------------------------------
      */
    is
        varrowsucced   number (3);
        varrowopfare   number (10, 2);
        varrowbankdz   number (2);
    begin
        out_result := 20;
        out_msg := 'ora_线上缴纳保险费处理开始';

        varrowsucced := 0;
        varrowopfare := 0;
        varrowbankdz := 0;

        --------------------------------------------------------------------------
        --查库内的对应记录
        begin
            select paystate, --缴费状态（0：未缴费；1：缴费成功；2：缴费失败）
                            opfare, --交易金额（单位元）
                                   accountstate --清算状态（0：未清算；1：已清算）
              into varrowsucced, varrowopfare, varrowbankdz
              from rec_premium
             where     systracenum = prmsystracenum
                   and customerunitcode = prmcustomerunitcode;
        exception
            when no_data_found
            then
                out_result := 21;
                out_msg :=
                       'ora_记录数量[0]无效prmsystracenum:'
                    || to_char (prmsystracenum);
                return;
            when too_many_rows
            then
                out_result := 22;
                out_msg :=
                       'ora_记录数量[rows]prmsystracenum:'
                    || to_char (prmsystracenum);
                return;
            when others
            then
                out_result := 23;
                out_msg :=
                       'ora_记录数量无效prmsystracenum:'
                    || to_char (prmsystracenum)
                    || '--'
                    || sqlerrm;
                return;
        end;

        --------------------------------------------------------------------------
        --检查双方交易金额是否一致
        if varrowopfare != prmopfare
        then
            out_result := 24;
            out_msg :=
                'ora_银行回应金额无效' || to_char (prmsystracenum);
            return;
        end if;

        --------------------------------------------------------------------------
        --检查是否已经处理过,处理过不再处理
        if (varrowbankdz != 0)
        then
            goto okret;
        end if;

        --------------------------------------------------------------------------
        --圈存成功并且对帐也成功,只修改对帐标记
        if varrowsucced = 1
        then
            update rec_premium
               set accountstate = 1, --清算状态（0：未清算；1：已清算）
                                    accounttime = sysdate
             where     systracenum = prmsystracenum
                   and customerunitcode = prmcustomerunitcode;

            goto okret;
        end if;

        --------------------------------------------------------------------------
        --圈存没有成功，但是对帐成功
        --0：保险费用申请状态 2：银行回应扣款失败（0：未缴费；1：缴费成功；2：缴费失败）
        if (varrowsucced = 0 or varrowsucced = 2)
        then
            update rec_premium
               set paystate = 1, --缴费状态（0：未缴费；1：缴费成功；2：缴费失败）
                   drawstate = 0, --领款状态（-1：初始状态；0：待领款；1：已领款）
                   accountstate = 1, --清算状态（0：未清算；1：已清算）
                   accounttime = sysdate
             where     systracenum = prmsystracenum
                   and customerunitcode = prmcustomerunitcode;

            out_result := 100;
            out_msg := 'ora_圈存补帐成功';
            commit;
            return;
        end if;

       <<okret>>
        out_result := 101;
        out_msg := 'ora_银行回应成功';
        commit;
        return;
    exception
        when others
        then
            out_result := 25;
            out_msg := out_msg || to_char (sqlcode) || '_+_' || sqlerrm;
            rollback;
    end;
end pkg_rec_thirdapi;/
create or replace package pkg_rec_thirdrecord is
  type ref_cursor is ref cursor;

  --交易数据入库
  procedure proc_upload_thirdrecord(
                                    -------终端信息---------
                                    prmposcode       in number, --设备唯一运营编号
                                    prmtraderecno    in number, --终端交易流水号
                                    prmbuslineid     in number, --线路编号
                                    prmbusid         in number, --车辆id
                                    prmdriverid      in number, --司机编号
                                    prmstopid        in number, --站点编号
                                    prmopdt          in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                    prmlinedirection in number, --线路方向  0上行 1下行 分段计费时使用
                                    -------交易信息---------
                                    prmcollectdt    in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                    prmoddfare      in number, --消费后余额，单位分
                                    prmopfare       in number, --消费金额，单位分
                                    prmdiscountfare in number, --打折金额，单位分
                                    prmtestflag     in number, --测试标记（0：正常，1：测试）
                                    prmtradekind    in number, --交易性质  公交 地铁 出租车
                                    prmrecordtype   in number, --记录类型  0普通记录  1分段计费
                                    prmtradetype    in number, --交易应用类型  0：消费记录 1：电子钱包充值 2：月票充值 9：清零记录
                                    prmmaincardtype in number, --主卡类型
                                    prmwallettype   in number, --钱包类型
                                    prmcardtype     in number, --卡类型
                                    -------第三方信息---------
                                    prmaccountid         in varchar2, --账户id
                                    prmappid             in varchar2, --应用id
                                    prmuid               in varchar2, --用户id
                                    prmthirdcardno       in varchar2, --第三方卡号
                                    prmthirdtermid       in varchar2, --第三方终端编号
                                    prmthirdmerchantcode in varchar2, --第三方商户编号
                                    prmordertype         in varchar2, --订单类型 01 正常行程单  02 带人行程单  03 换乘订单
                                    prmrecordinfo        in varchar2, --脱机记录信息
                                    prmextentvalue       in varchar2, --扩展域
                                    -------业务信息---------
                                    prmsystracenum  in varchar2, --银联联机业务（银联终端编号+批次号+受卡方系统跟踪号），非银联联机业务（商户订单号），脱机业务（消费时间+poscode+终端交易流水）
                                    prmdealtype     in number, --记录类型  1：正常 2：灰色 3：mac错误...
                                    prmcustunitcode in varchar2, --客户代码
                                    --坏账处理---
                                    prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                    -------清算结果---------
                                    prmaccountdate     in varchar2, --清算时间
                                    prmresponsecode    in varchar2, --应答码
                                    prmresponsemessage in varchar2, --应答信息
                                    prmnexttime        in varchar2, --下次清算时间
                                    --返回值-------------------
                                    out_result out number,
                                    out_msg    out varchar2);

  --成功的数据入库
  procedure proc_thirdrecord_successresult(prmcstaccfc in number, --流水号
                                           -------终端信息---------
                                           prmposcode       in number, --设备唯一运营编号
                                           prmtraderecno    in number, --终端交易流水号
                                           prmbuslineid     in number, --线路编号
                                           prmbusid         in number, --车辆id
                                           prmdriverid      in number, --司机编号
                                           prmstopid        in number, --站点编号
                                           prmopdt          in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                           prmlinedirection in number, --线路方向  0上行 1下行 分段计费时使用
                                           -------交易信息---------
                                           prmcollectdt    in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                           prmoddfare      in number, --消费后余额，单位分
                                           prmopfare       in number, --消费金额，单位分
                                           prmdiscountfare in number, --打折金额，单位分
                                           prmtestflag     in number, --测试标记（0：正常，1：测试）
                                           prmtradekind    in number, --交易性质  公交 地铁 出租车
                                           prmrecordtype   in number, --记录类型  0普通记录  1分段计费
                                           prmtradetype    in number, --交易应用类型  0：消费记录 1：电子钱包充值 2：月票充值 9：清零记录
                                           prmmaincardtype in number, --主卡类型
                                           prmwallettype   in number, --钱包类型
                                           prmcardtype     in number, --卡类型
                                           -------第三方信息---------
                                           prmaccountid         in varchar2, --账户id
                                           prmappid             in varchar2, --应用id
                                           prmuid               in varchar2, --用户id
                                           prmthirdcardno       in varchar2, --第三方卡号
                                           prmthirdtermid       in varchar2, --第三方终端编号
                                           prmthirdmerchantcode in varchar2, --第三方商户编号
                                           prmordertype         in varchar2, --订单类型 01 正常行程单  02 带人行程单  03 换乘订单
                                           prmrecordinfo        in varchar2, --脱机记录信息
                                           prmextentvalue       in varchar2, --扩展域
                                           -------业务信息---------
                                           prmsystracenum  in varchar2, --银联联机业务（银联终端编号+批次号+受卡方系统跟踪号），非银联联机业务（商户订单号），脱机业务（消费时间+poscode+终端交易流水）
                                           prmdealtype     in number, --记录类型  1：正常 2：灰色 3：mac错误...
                                           prmcustunitcode in varchar2, --客户代码
                                           -----坏账处理------
                                           prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                           -------清算结果---------
                                           prmaccountdate     in varchar2, --清算时间
                                           prmresponsecode    in varchar2, --应答码
                                           prmresponsemessage in varchar2, --应答信息
                                           prmfilename        in varchar2, --清算文件名
                                           --返回值-------------------
                                           out_result out number,
                                           out_msg    out varchar2);

  --重复记录入库
  procedure proc_thirdrecord_repeat(prmopfare            in number, --消费金额，单位元
                                    prmoddfare           in number, --消费后余额，单位元
                                    prmdiscountfare      in number, --打折金额，单位元
                                    prmacccode           in number, --科目代码
                                    prmdscrp             in varchar2, --科目描述
                                    prmbusid             in number, --车辆编号
                                    prmdriverid          in number, --司机编号
                                    prmbuslineid         in number, --线路编号
                                    prmlinedept          in varchar2, --线路部门
                                    prmmaincardtype      in number, --主卡类型
                                    prmcardtype          in number, --子卡类型
                                    prmposcode           in number, --设备唯一运营编号
                                    prmtraderecno        in number, --终端交易流水号
                                    prmopdt              in varchar2, --交易时间
                                    prmcollectdt         in varchar2, --采集时间
                                    prmtestflag          in number, --测试标记（0：正常，1：测试）
                                    prmrecordtype        in number, --记录类型 0普通记录  1分段计费
                                    prmthirdtermid       in varchar2, --第三方终端编号
                                    prmthirdmerchantcode in varchar2, --第三方商户编号
                                    prmcustomerunitcode  in varchar2, --客户代码
                                    prmaccountdate       in varchar2, --清算日期
                                    prmresponsecode      in varchar2, --应答码
                                    prmresponsemessage   in varchar2, --应答信息
                                    prmextentvalue       in varchar2, --扩展域
                                    prmnexttime          in varchar2, --下次清算时间
                                    prmuserid            in varchar2, --用户id
                                    prmthirdcardno       in varchar2, --卡号
                                    prmaccountid         in varchar2, --账户id
                                    prmsystracenum       in varchar2, --银联联机业务（银联终端编号+批次号+受卡方系统跟踪号），非银联联机业务（商户订单号），脱机业务（消费时间+poscode+终端交易流水）
                                    prmstopid            in number, --站点编号
                                    prmordertype         in varchar2, --订单类型 01 正常行程单  02 带人行程单  03 换乘订单
                                    prmtradekind         in number, --交易性质  公交 地铁 出租车
                                    prmwallettype        in number, --钱包类型
                                    prmrecordinfo        in varchar2, --脱机记录信息
                                    prmappid             in varchar2, --应用id
                                    prmlinedirection     in number, --线路方向  0上行 1下行 分段计费时使用
                                    prmstatus            in number, --状态 0：未处理 1：已处理
                                    prmdealtype          in number, --记录类型  1：正常 2：灰色 3：mac错误...
                                    out_result           out number,
                                    out_msg              out varchar2);
                                    
  --银联oda银联反馈结果入库
  procedure proc_unionpay_oda_result(prmbankcardno    in varchar2, --银联卡号
                                     prmmerchantcode  in varchar2, --商户编号
                                     prmuniontermid   in varchar2, --银联终端编号
                                     prmtraderecno    in number, --终端交易流水号
                                     prmopdt          in varchar2, --交易时间，yyyymmddhhmiss
                                     prmopfare        in number, --交易金额
                                     prmunioncstaccfc in varchar2, --银联交易流水号
                                     prmaccountdate   in varchar2, --银联账务日期,yyyymmdd
                                     out_msg          out varchar2,
                                     out_result       out integer,
                                     prmcstaccfc      in number,
                                     prmresponsecode  in varchar2,
                                     prmgpflag        in number,
                                     prmfilename      in varchar2);
                                     
end pkg_rec_thirdrecord;
/
create or replace package body pkg_rec_thirdrecord is
  --交易数据入库
  procedure proc_upload_thirdrecord(
                                    -------终端信息---------
                                    prmposcode       in number, --设备唯一运营编号
                                    prmtraderecno    in number, --终端交易流水号
                                    prmbuslineid     in number, --线路编号
                                    prmbusid         in number, --车辆id
                                    prmdriverid      in number, --司机编号
                                    prmstopid        in number, --站点编号
                                    prmopdt          in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                    prmlinedirection in number, --线路方向  0上行 1下行 分段计费时使用
                                    -------交易信息---------
                                    prmcollectdt    in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                    prmoddfare      in number, --消费后余额，单位分
                                    prmopfare       in number, --消费金额，单位分
                                    prmdiscountfare in number, --打折金额，单位分
                                    prmtestflag     in number, --测试标记（0：正常，1：测试）
                                    prmtradekind    in number, --交易性质  公交 地铁 出租车
                                    prmrecordtype   in number, --记录类型  0普通记录  1分段计费
                                    prmtradetype    in number, --交易应用类型  0：消费记录 1：电子钱包充值 2：月票充值 9：清零记录
                                    prmmaincardtype in number, --主卡类型
                                    prmwallettype   in number, --钱包类型
                                    prmcardtype     in number, --卡类型
                                    -------第三方信息---------
                                    prmaccountid         in varchar2, --账户id
                                    prmappid             in varchar2, --应用id
                                    prmuid               in varchar2, --用户id
                                    prmthirdcardno       in varchar2, --第三方卡号
                                    prmthirdtermid       in varchar2, --第三方终端编号
                                    prmthirdmerchantcode in varchar2, --第三方商户编号
                                    prmordertype         in varchar2, --订单类型 01 正常行程单  02 带人行程单  03 换乘订单
                                    prmrecordinfo        in varchar2, --脱机记录信息
                                    prmextentvalue       in varchar2, --扩展域
                                    -------业务信息---------
                                    prmsystracenum  in varchar2, --银联联机业务（银联终端编号+批次号+受卡方系统跟踪号），非银联联机业务（商户订单号），脱机业务（消费时间+poscode+终端交易流水）
                                    prmdealtype     in number, --记录类型  1：正常 2：灰色 3：mac错误...
                                    prmcustunitcode in varchar2, --客户代码
                                    -----坏账处理------
                                    prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                    -------清算结果---------
                                    prmaccountdate     in varchar2, --清算时间
                                    prmresponsecode    in varchar2, --应答码
                                    prmresponsemessage in varchar2, --应答信息
                                    prmnexttime        in varchar2, --下次清算时间
                                    --返回值-------------------
                                    out_result out number,
                                    out_msg    out varchar2) as
    /*
    --------------------------------------------------------------------------
    --存储过程：proc_upload_thirdrecord
    --说　　明：交易数据入库
    --输入参数：
    --输出参数：
    --返回值和返回信息定义：
    --100 ：记录上传成功，帐目统计成功， 其他失败
    --------------------------------------------------------------------------
    */
    i_count        integer;
    i_badrectype   integer; --坏账类型
    n_acccode      integer;
    v_accdscrp     varchar2(20);
    n_busid        integer;
    n_lineid       integer;
    n_oddfare      number(10, 2);
    n_opfare       number(10, 2);
    n_discountfare number(10, 2);
    i_factor       int;
    i_status       int;
    v_deptcode     varchar2(10);
    custom_exception exception; --自定义错误
    n_cstaccfc       number;
    v_systracenum    varchar(60);
  begin
    out_result     := -1000;
    out_msg        := '初始化变量';
    i_count        := 0;
    i_badrectype   := 0;
    n_busid        := prmbusid;
    n_lineid       := prmbuslineid;
    n_oddfare      := 0;
    n_opfare       := 0;
    n_discountfare := 0;
    i_factor       := 100; --根据分和元之间的转换（100）赋默认值
    v_deptcode     := '000';
    v_systracenum  := prmsystracenum;

    ------------------------先验证客户信息是否合法-------------------------
    out_result := -1001;
    out_msg    := '检查客户法人信息是否合法';

    select count(a.id)
      into i_count
      from base_legal_person a
     where a.customerunitcode = prmcustunitcode;

    if i_count <> 1 then
      out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
      out_msg    := '客户法人信息不合法！customerunitcode：' ||
                    to_char(prmcustunitcode);
      return;
    end if;

    --------------------------获取转换因子---------------------------------
    --获取最小货币单位和通用货币单位间的转换因子
    out_result := -1002;
    out_msg    := '获取货币转换因子失败！';

    select nvl(max(a.paramvalue), -1)
      into i_factor
      from base_param a
     where a.paramname = 'hexadecimal'
       and a.paramgroupid = 1002;

    if (i_factor < 0) then
      out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
      out_msg    := '获取转换因子失败！factor：' || i_factor;
      return;
    end if;

    n_oddfare      := prmoddfare / i_factor;
    n_opfare       := prmopfare / i_factor;
    n_discountfare := prmdiscountfare / i_factor;

    ------------------------------科目赋值--------------------------------
    out_result := -1003;
    out_msg    := '取交易科目描述信息失败！';

    proc_get_acccode(prmmaincardtype,
                     n_acccode,
                     v_accdscrp,
                     out_result,
                     out_msg);

    --------------------验证终端,车辆，线路，部门是否正确-------------------
    out_result := -1004;
    out_msg    := '验证终端,车辆，线路，部门是否正确';

    proc_validatetermbusline(prmposcode,
                             prmcustunitcode,
                             n_busid,
                             n_lineid,
                             v_deptcode,
                             i_badrectype,
                             out_result,
                             out_msg);

    ---------------------------消费记录入账处理---------------------------
    out_result := -1005;
    out_msg    := '消费记录入账失败！';

    --存在更新清算结果信息
    select count(*)
      into i_count
      from rec_thirdrecord a
     where a.systracenum = v_systracenum;

    if i_count > 0 then
      --非首次清算清算结果更新
      if prmresponsecode is not null then
        update rec_thirdrecord a
           set a.status          = i_status,
               a.accountdate     = to_date(prmaccountdate,
                                           'yyyy-mm-dd hh24:mi:ss'),
               a.responsecode    = prmresponsecode,
               a.responsemessage = prmresponsemessage,
               a.nexttime        = to_date(prmnexttime,
                                           'yyyy-mm-dd hh24:mi:ss')
         where a.systracenum = v_systracenum;

        commit;
        out_result := 100;
        out_msg    := '入明细账成功';
        return;
      else
        i_badrectype := 3;
        goto insert_consumrec_repeat;
      end if;
    end if;

    --判断重复
    i_count := 0;

    select count(*)
      into i_count
      from rec_thirdrecord_sucess a
     where a.systracenum = v_systracenum;

    if i_count > 0 then
      i_badrectype := 3;
      goto insert_consumrec_repeat;
    end if;

    n_cstaccfc := seq_rec_thirdrecord.nextval;

    if(n_acccode=208 or n_acccode=205) then --如果是oda记录，为和现有服务保持一致，唯一编号存自增序列
        v_systracenum := n_cstaccfc;
    end if;

    --形成待清算信息
    insert into rec_thirdrecord
      (cstaccfc,
       opfare,
       oddfare,
       discountfare,
       acccode,
       dscrp,
       busid,
       driverid,
       buslineid,
       linedept,
       maincardtype,
       cardtype,
       poscode,
       traderecno,
       opdt,
       collectdt,
       testflag,
       recordtype,
       dealtype,
       thirdtermid,
       thirdmerchantcode,
       customerunitcode,
       accountdate,
       responsecode,
       responsemessage,
       extentvalue,
       nexttime,
       userid,
       thirdcardno,
       accountid,
       systracenum,
       stopid,
       ordertype,
       tradekind,
       wallettype,
       recordinfo,
       appid,
       linedirection)
    values
      (n_cstaccfc,
       n_opfare,
       n_oddfare,
       n_discountfare,
       n_acccode,
       v_accdscrp,
       n_busid,
       prmdriverid,
       n_lineid,
       v_deptcode,
       prmmaincardtype,
       prmcardtype,
       prmposcode,
       prmtraderecno,
       to_date(prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
       to_date(prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
       prmtestflag,
       prmrecordtype,
       prmdealtype,
       prmthirdtermid,
       prmthirdmerchantcode,
       prmcustunitcode,
       to_date(prmaccountdate, 'yyyy-mm-dd hh24:mi:ss'),
       prmresponsecode,
       prmresponsemessage,
       prmextentvalue,
       to_date(prmnexttime, 'yyyy-mm-dd hh24:mi:ss'),
       prmuid,
       prmthirdcardno,
       prmaccountid,
       v_systracenum,
       prmstopid,
       prmordertype,
       prmtradekind,
       prmwallettype,
       prmrecordinfo,
       prmappid,
       prmlinedirection);

    commit;
    out_result := 100;
    out_msg    := '入明细账成功';
    return;

    -----------------------------重复帐记录入重复表-------------------------
    <<insert_consumrec_repeat>>
    out_result := -1016;
    out_msg    := '处理重复记录失败';

    proc_thirdrecord_repeat(n_opfare,
                            n_oddfare,
                            n_discountfare,
                            n_acccode,
                            v_accdscrp,
                            n_busid,
                            prmdriverid,
                            n_lineid,
                            v_deptcode,
                            prmmaincardtype,
                            prmcardtype,
                            prmposcode,
                            prmtraderecno,
                            prmopdt,
                            prmcollectdt,
                            prmtestflag,
                            prmrecordtype,
                            prmthirdtermid,
                            prmthirdmerchantcode,
                            prmcustunitcode,
                            prmaccountdate,
                            prmresponsecode,
                            prmresponsemessage,
                            prmextentvalue,
                            prmnexttime,
                            prmuid,
                            prmthirdcardno,
                            prmaccountid,
                            v_systracenum,
                            prmstopid,
                            prmordertype,
                            prmtradekind,
                            prmwallettype,
                            prmrecordinfo,
                            prmappid,
                            prmlinedirection,
                            0, --状态
                            prmdealtype,
                            out_result,
                            out_msg);

    commit;
    out_result := 100;
    out_msg    := '插入重复表成功';
    return;
  exception
    when custom_exception -----先处理自定义异常
     then
      rollback;

      if out_result > 0 then
        out_result := out_result * -1;
      else
        out_result := out_result;
      end if;
    when others then
      rollback;
      out_result := -1000;
      out_msg    := '记录上传失败，处理[' || out_msg || ']异常，具体原因为：' || sqlerrm;
  end;

  --成功的数据入库
  procedure proc_thirdrecord_successresult(prmcstaccfc in number, --流水号
                                           -------终端信息---------
                                           prmposcode       in number, --设备唯一运营编号
                                           prmtraderecno    in number, --终端交易流水号
                                           prmbuslineid     in number, --线路编号
                                           prmbusid         in number, --车辆id
                                           prmdriverid      in number, --司机编号
                                           prmstopid        in number, --站点编号
                                           prmopdt          in varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
                                           prmlinedirection in number, --线路方向  0上行 1下行 分段计费时使用
                                           -------交易信息---------
                                           prmcollectdt    in varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
                                           prmoddfare      in number, --消费后余额，单位分
                                           prmopfare       in number, --消费金额，单位分
                                           prmdiscountfare in number, --打折金额，单位分
                                           prmtestflag     in number, --测试标记（0：正常，1：测试）
                                           prmtradekind    in number, --交易性质  公交 地铁 出租车
                                           prmrecordtype   in number, --记录类型  0普通记录  1分段计费
                                           prmtradetype    in number, --交易应用类型  0：消费记录 1：电子钱包充值 2：月票充值 9：清零记录
                                           prmmaincardtype in number, --主卡类型
                                           prmwallettype   in number, --钱包类型
                                           prmcardtype     in number, --卡类型
                                           -------第三方信息---------
                                           prmaccountid         in varchar2, --账户id
                                           prmappid             in varchar2, --应用id
                                           prmuid               in varchar2, --用户id
                                           prmthirdcardno       in varchar2, --第三方卡号
                                           prmthirdtermid       in varchar2, --第三方终端编号
                                           prmthirdmerchantcode in varchar2, --第三方商户编号
                                           prmordertype         in varchar2, --订单类型 01 正常行程单  02 带人行程单  03 换乘订单
                                           prmrecordinfo        in varchar2, --脱机记录信息
                                           prmextentvalue       in varchar2, --扩展域
                                           -------业务信息---------
                                           prmsystracenum  in varchar2, --银联联机业务（银联终端编号+批次号+受卡方系统跟踪号），非银联联机业务（商户订单号），脱机业务（消费时间+poscode+终端交易流水）
                                           prmdealtype     in number, --记录类型  1：正常 2：灰色 3：mac错误...
                                           prmcustunitcode in varchar2, --客户代码
                                           -----坏账处理------
                                           prmbadid in number, --处理坏账时，坏账流水号，正常消费记录上传为0
                                           -------清算结果---------
                                           prmaccountdate     in varchar2, --清算时间
                                           prmresponsecode    in varchar2, --应答码
                                           prmresponsemessage in varchar2, --应答信息
                                           prmfilename        in varchar2, --清算文件名
                                           --返回值-------------------
                                           out_result out number,
                                           out_msg    out varchar2) as
    /*
    --------------------------------------------------------------------------
    --存储过程：proc_thirdrecord_successresult
    --说　　明：交易成功的数据入库
    --输入参数：
    --输出参数：
    --返回值和返回信息定义：
    --100 ：记录上传成功，帐目统计成功， 其他失败
    --------------------------------------------------------------------------
    */
    i_count        integer;
    i_badrectype   integer; --坏账类型
    n_acccode      integer;
    v_accdscrp     varchar2(20);
    n_busid        integer;
    n_lineid       integer;
    n_oddfare      number(10, 2);
    n_opfare       number(10, 2);
    n_discountfare number(10, 2);
    i_factor       int;
    v_deptcode     varchar2(20);
    v_response     varchar2(20);
    d_uploaddate   date;
    custom_exception exception; --自定义错误
  begin
    out_result     := -1000;
    out_msg        := '初始化变量';
    i_count        := 0;
    i_badrectype   := 0;
    n_busid        := prmbusid;
    n_lineid       := prmbuslineid;
    n_oddfare      := 0;
    n_opfare       := 0;
    n_discountfare := 0;
    i_factor       := 100; --根据分和元之间的转换（100）赋默认值
    v_deptcode     := '000';

    ------------------------检查是否正在数据结算-------------------------
    out_result := -1001;
    out_msg    := '检查当前是否正在结算';

    proc_validateisbalance(out_result, out_msg);

    if (out_result <> 0) --0当前系统未进行结算
     then
      out_msg := '判断账目结算状态异常，' || out_msg;
      return;
    end if;

    ------------------------先验证客户信息是否合法-------------------------
    out_result := -1002;
    out_msg    := '检查客户法人信息是否合法';

    select count(a.id)
      into i_count
      from base_legal_person a
     where a.customerunitcode = prmcustunitcode;

    if i_count <> 1 then
      out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
      out_msg    := '客户法人信息不合法！customerunitcode：' ||
                    to_char(prmcustunitcode);
      return;
    end if;

    --------------------------获取转换因子---------------------------------
    --获取最小货币单位和通用货币单位间的转换因子
    out_result := -1003;
    out_msg    := '获取货币转换因子失败！';

    select nvl(max(a.paramvalue), -1)
      into i_factor
      from base_param a
     where a.paramname = 'hexadecimal'
       and a.paramgroupid = 1002;

    if (i_factor < 0) then
      out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
      out_msg    := '获取转换因子失败！factor：' || i_factor;
      return;
    end if;

    n_oddfare      := prmoddfare / i_factor;
    n_opfare       := prmopfare / i_factor;
    n_discountfare := prmdiscountfare / i_factor;

    ----------------------------查询科目-------------------------
    out_result := -1004;
    out_msg    := '取交易科目描述信息失败！';

    proc_get_acccode(prmmaincardtype,
                     n_acccode,
                     v_accdscrp,
                     out_result,
                     out_msg);

    -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
    out_result := -1005;
    out_msg    := '验证终端,车辆，线路，部门信息失败';

    -------验证终端信息-----------
    proc_validatetermbusline(prmposcode,
                             prmcustunitcode,
                             n_busid,
                             n_lineid,
                             v_deptcode,
                             i_badrectype,
                             out_result,
                             out_msg);

    --------------------------查询成功表中是否已存在----------------------------
    out_result := -1006;
    out_msg    := '消费记录在成功表中已存在！';

    select count(*)
      into i_count
      from rec_thirdrecord_sucess a
     where a.systracenum = prmsystracenum;

    if i_count > 0 then
      i_badrectype := 3;
      goto insert_consumrec_repeat;
    end if;

    ------------------------处理数据---------------------
    out_result := -1006;
    out_msg    := '处理消费记录插入成功表失败！';

    select a.uploaddate
       into d_uploaddate
       from rec_thirdrecord a
    where a.systracenum = prmsystracenum;

    insert into rec_thirdrecord_sucess
      (opfare,
       oddfare,
       discountfare,
       acccode,
       dscrp,
       busid,
       driverid,
       buslineid,
       linedept,
       maincardtype,
       cardtype,
       poscode,
       traderecno,
       opdt,
       collectdt,
       uploaddate,
       testflag,
       recordtype,
       dealtype,
       thirdtermid,
       thirdmerchantcode,
       customerunitcode,
       accountdate,
       responsecode,
       responsemessage,
       extentvalue,
       userid,
       thirdcardno,
       accountid,
       filename,
       systracenum,
       stopid,
       ordertype,
       tradekind,
       wallettype,
       recordinfo,
       appid,
       linedirection)
    values
      (n_opfare,
       n_oddfare,
       n_discountfare,
       n_acccode,
       v_accdscrp,
       n_busid,
       prmdriverid,
       n_lineid,
       v_deptcode,
       prmmaincardtype,
       prmcardtype,
       prmposcode,
       prmtraderecno,
       to_date(prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
       to_date(prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
       d_uploaddate,
       prmtestflag,
       prmrecordtype,
       prmdealtype,
       prmthirdtermid,
       prmthirdmerchantcode,
       prmcustunitcode,
       to_date(prmaccountdate, 'yyyy-mm-dd hh24:mi:ss'),
       prmresponsecode,
       prmresponsemessage,
       prmextentvalue,
       prmuid,
       prmthirdcardno,
       prmaccountid,
       prmfilename,
       prmsystracenum,
       prmstopid,
       prmordertype,
       prmtradekind,
       prmwallettype,
       prmrecordinfo,
       prmappid,
       prmlinedirection);

    --修改原始记录状态
    delete from rec_thirdrecord a where a.systracenum = prmsystracenum;

    out_result := -1007;
    out_msg    := '插入统计表失败';

    --消费记录即时统计
    pkg_st_payment.proc_nolocalaccount_online(prmopdt,
                                              n_opfare,
                                              n_acccode,
                                              n_discountfare, --prmdiscountfare
                                              2, --prmcardkind
                                              prmcardtype,
                                              prmdriverid,
                                              prmposcode,
                                              prmposcode,
                                              n_lineid,
                                              v_deptcode,
                                              n_busid,
                                              prmwallettype, --prmwallettype, --1, --钱包类型 电子钱包
                                              0, --0正常 1回滚统计操作
                                              prmcustunitcode,
                                              --prmthirdmerchantcode,
                                              --prmthirdtermid,
                                              prmaccountdate, --清算日期
                                              prmaccountdate, --结算日期
                                              prmaccountdate, --文件创建日期
                                              out_msg,
                                              out_result,
                                              prmmaincardtype);

    if out_result <> 100 then
      rollback;
      return;
    end if;

    commit;
    out_result := 100;
    out_msg    := '处理成功';
    return;

    -----------------------------重复帐记录入重复表-------------------------
    <<insert_consumrec_repeat>>
    out_result := -1016;
    out_msg    := '处理重复记录失败';

    proc_thirdrecord_repeat(n_opfare,
                            n_oddfare,
                            n_discountfare,
                            n_acccode,
                            v_accdscrp,
                            n_busid,
                            prmdriverid,
                            n_lineid,
                            v_deptcode,
                            prmmaincardtype,
                            prmcardtype,
                            prmposcode,
                            prmtraderecno,
                            prmopdt,
                            prmcollectdt,
                            prmtestflag,
                            prmrecordtype,
                            prmthirdtermid,
                            prmthirdmerchantcode,
                            prmcustunitcode,
                            prmaccountdate,
                            prmresponsecode,
                            prmresponsemessage,
                            prmextentvalue,
                            sysdate,
                            prmuid,
                            prmthirdcardno,
                            prmaccountid,
                            prmsystracenum,
                            prmstopid,
                            prmordertype,
                            prmtradekind,
                            prmwallettype,
                            prmrecordinfo,
                            prmappid,
                            prmlinedirection,
                            1, --状态
                            prmdealtype,
                            out_result,
                            out_msg);

    commit;
    out_result := 100;
    out_msg    := '插入重复表成功';
    return;
  exception
    when custom_exception -----先处理自定义异常
     then
      rollback;

      if out_result > 0 then
        out_result := out_result * -1;
      else
        out_result := out_result;
      end if;
    when others then
      rollback;
      out_result := -1000;
      out_msg    := '记录上传失败，处理[' || out_msg || ']异常，具体原因为：' || sqlerrm;
  end;

  --重复记录入库
  procedure proc_thirdrecord_repeat(prmopfare            in number, --消费金额，单位元
                                    prmoddfare           in number, --消费后余额，单位元
                                    prmdiscountfare      in number, --打折金额，单位元
                                    prmacccode           in number, --科目代码
                                    prmdscrp             in varchar2, --科目描述
                                    prmbusid             in number, --车辆编号
                                    prmdriverid          in number, --司机编号
                                    prmbuslineid         in number, --线路编号
                                    prmlinedept          in varchar2, --线路部门
                                    prmmaincardtype      in number, --主卡类型
                                    prmcardtype          in number, --子卡类型
                                    prmposcode           in number, --设备唯一运营编号
                                    prmtraderecno        in number, --终端交易流水号
                                    prmopdt              in varchar2, --交易时间
                                    prmcollectdt         in varchar2, --采集时间
                                    prmtestflag          in number, --测试标记（0：正常，1：测试）
                                    prmrecordtype        in number, --记录类型 0普通记录  1 分段计费
                                    prmthirdtermid       in varchar2, --第三方终端编号
                                    prmthirdmerchantcode in varchar2, --第三方商户编号
                                    prmcustomerunitcode  in varchar2, --客户代码
                                    prmaccountdate       in varchar2, --清算日期
                                    prmresponsecode      in varchar2, --应答码
                                    prmresponsemessage   in varchar2, --应答信息
                                    prmextentvalue       in varchar2, --扩展域
                                    prmnexttime          in varchar2, --下次清算时间
                                    prmuserid            in varchar2, --用户id
                                    prmthirdcardno       in varchar2, --卡号
                                    prmaccountid         in varchar2, --账户id
                                    prmsystracenum       in varchar2, --银联联机业务（银联终端编号+批次号+受卡方系统跟踪号），非银联联机业务（商户订单号），脱机业务（消费时间+poscode+终端交易流水）
                                    prmstopid            in number, --站点编号
                                    prmordertype         in varchar2, --订单类型 01 正常行程单  02 带人行程单 03 换乘订单
                                    prmtradekind         in number, --交易性质  公交 地铁 出租车
                                    prmwallettype        in number, --钱包类型
                                    prmrecordinfo        in varchar2, --脱机记录信息
                                    prmappid             in varchar2, --应用id
                                    prmlinedirection     in number, --线路方向  0上行 1下行 分段计费时使用
                                    prmstatus            in number, --状态 0：未处理 1：已处理
                                    prmdealtype          in number, --记录类型  1：正常 2：灰色 3：mac错误...
                                    out_result           out number,
                                    out_msg              out varchar2) as
    i_count integer;
  begin
    insert into rec_thirdrecord_repeat
      (opfare,
       oddfare,
       discountfare,
       acccode,
       dscrp,
       busid,
       driverid,
       buslineid,
       linedept,
       maincardtype,
       cardtype,
       poscode,
       traderecno,
       opdt,
       collectdt,
       testflag,
       recordtype,
       dealtype,
       thirdtermid,
       thirdmerchantcode,
       customerunitcode,
       accountdate,
       responsecode,
       responsemessage,
       extentvalue,
       nexttime,
       userid,
       thirdcardno,
       accountid,
       systracenum,
       stopid,
       ordertype,
       tradekind,
       wallettype,
       recordinfo,
       appid,
       linedirection,
       status)
    values
      (prmopfare,
       prmoddfare,
       prmdiscountfare,
       prmacccode,
       prmdscrp,
       prmbusid,
       prmdriverid,
       prmbuslineid,
       prmlinedept,
       prmmaincardtype,
       prmcardtype,
       prmposcode,
       prmtraderecno,
       to_date(prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
       to_date(prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
       prmtestflag,
       prmrecordtype,
       prmdealtype,
       prmthirdtermid,
       prmthirdmerchantcode,
       prmcustomerunitcode,
       to_date(prmaccountdate, 'yyyy-mm-dd hh24:mi:ss'),
       prmresponsecode,
       prmresponsemessage,
       prmextentvalue,
       to_date(prmnexttime, 'yyyy-mm-dd hh24:mi:ss'),
       prmuserid,
       prmthirdcardno,
       prmaccountid,
       prmsystracenum,
       prmstopid,
       prmordertype,
       prmtradekind,
       prmwallettype,
       prmrecordinfo,
       prmappid,
       prmlinedirection,
       prmstatus);

    return;
  exception
    when others then
      rollback;
      out_result := out_result;
      out_msg    := out_msg || '异常_+_' || sqlerrm;
  end;

  --银联oda银联反馈结果入库
  procedure proc_unionpay_oda_result(prmbankcardno    in varchar2, --银联卡号
                                     prmmerchantcode  in varchar2, --商户编号
                                     prmuniontermid   in varchar2, --银联终端编号
                                     prmtraderecno    in number, --终端交易流水号
                                     prmopdt          in varchar2, --交易时间，yyyymmddhhmiss
                                     prmopfare        in number, --交易金额
                                     prmunioncstaccfc in varchar2, --银联交易流水号
                                     prmaccountdate   in varchar2, --银联账务日期,yyyymmdd
                                     out_msg          out varchar2,
                                     out_result       out integer,
                                     prmcstaccfc      in number,
                                     prmresponsecode  in varchar2,
                                     prmgpflag        in number,
                                     prmfilename      in varchar2) as
    n_count          number;
    d_unionopdt      date;
    d_accountdate    date;
    n_status         number;
    d_opdt           date;
    n_acccode        number;
    n_discount       number(10, 2);
    n_cardkind       number;
    n_cardtype       number;
    n_driverid       number;
    n_poscode        number;
    n_buslineid      number;
    v_linedept       varchar2(10);
    n_busid          number;
    n_wallettype     number;
    v_merchantcode   varchar2(15);
    v_uniontermid    varchar2(8);
    n_opfare number(12, 2);
    n_isuseflag      number; --是否分段计费记录，1分段计费 0 普通票价
    n_flag           number; --是否逃票记录 0 正常记录 1 逃票记录
    -- n_tbusno         number; --逃票车辆
    n_tposcode number; --逃票终端编号

    v_custunitcode  varchar2(12);
    v_poscode       number;
    v_accdesc       varchar2(50);
    v_termthirdno   number; --银联对账终端序列号
    n_maincardtype      number;
    v_unioncstaccfc varchar2(6);
    v_responsecode  varchar2(12);
  begin
    out_result := -1000;
    out_msg    := '记录入库异常';
    n_status   := 0;
    --
    d_unionopdt   := to_date(prmopdt, 'yyyy/mm/dd hh24:mi:ss');
    d_accountdate := to_date(prmaccountdate, 'yyyy/mm/dd hh24:mi:ss');
    out_result    := -1001;
    out_msg       := '开始形成银联电子现金交易记录';

    select count(*)
      into n_count
      from rec_thirdrecord a
     where a.cstaccfc = prmcstaccfc;

    if n_count > 0 then
      --获取统计过程参数
      select a.opdt,
             a.acccode,
             a.discountfare,
             a.driverid,
             a.poscode,
             a.buslineid,
             a.linedept,
             a.busid,
             a.cardtype,
             a.wallettype,
             a.maincardtype,
             a.thirdmerchantcode,
             a.thirdtermid,
             a.opfare,
             a.recordtype,
             a.flag,
             a.customerunitcode,
             a.responsecode
        into d_opdt,
             n_acccode,
             n_discount,
             n_driverid,
             n_poscode,
             n_buslineid,
             v_linedept,
             n_busid,
             n_cardtype,
             n_wallettype,
             n_maincardtype,
             v_merchantcode,
             v_uniontermid,
             n_opfare,
             n_isuseflag,
             n_flag,
             v_custunitcode,
             v_responsecode
        from rec_thirdrecord a
       where a.cstaccfc = prmcstaccfc;

      --上传的记录是异常记录
      if prmresponsecode <> '00' then
        --如果消费记录重复上传，则返回成功
        if v_responsecode = prmresponsecode then
          commit;
          out_result := 100;
          out_msg    := '记录入异常账目表成功';
          return;
        end if;

        --更新临时记录表
        update rec_thirdrecord
           set status       = 1,
               responsecode = prmresponsecode,
               accountdate  = d_accountdate
         where cstaccfc = prmcstaccfc;

        --更新临时记录表
        update rec_thirdrecord_tb
           set status = 1, updatedate = sysdate
         where acquirerserialnum = prmcstaccfc;

        commit;
        out_result := 100;
        out_msg    := '记录入异常账目表成功';
        --银联校验成功
      else
        --如果消费记录重复上传，则返回成功
        select count(*)
          into n_count
          from rec_thirdrecord_sucess a
         where a.cstaccfc = prmcstaccfc;

        if n_count > 0 then
          commit;
          out_result := 100;
          out_msg    := '记录入正常账目表成功';
          return;
        end if;

        --增加客户法人字段 (张垒 2013-12-24)
        insert into rec_thirdrecord_sucess
          (cstaccfc,
           thirdcardno,
           opdt,
           opfare,
           acccode,
           dscrp,
           collectdt,
           uploaddate,
           busid,
           driverid,
           poscode,
           traderecno,
           buslineid,
           discountfare,
           linedept,
           maincardtype,
           cardtype,
           testflag,
           accountdate,
           thirdtermid,
           extentvalue,
           thirdmerchantcode,
           recordtype,
           flag,
           customerunitcode,
           gpflag,
           oddfare,
           responsecode,
           responsemessage,
           userid,
           accountid,
           filename,
           transferdate,
           systracenum,
           stopid,
           ordertype,
           tradekind,
           wallettype,
           recordinfo,
           appid,
           linedirection,
           dealtype)
          select a.cstaccfc,
                 a.thirdcardno,
                 a.opdt,
                 a.opfare,
                 a.acccode,
                 a.dscrp,
                 a.collectdt,
                 a.uploaddate,
                 a.busid,
                 a.driverid,
                 a.poscode,
                 a.traderecno,
                 a.buslineid,
                 a.discountfare,
                 a.linedept,
                 a.maincardtype,
                 a.cardtype,
                 a.testflag,
                 d_accountdate,
                 a.thirdtermid,
                 a.extentvalue,
                 a.thirdmerchantcode,
                 a.recordtype,
                 a.flag,
                 v_custunitcode,
                 prmgpflag,
                 a.oddfare,
                 prmresponsecode,
                 prmresponsecode,
                 a.userid,
                 a.accountid,
                 prmfilename,
                 sysdate,
                 a.systracenum,
                 a.stopid,
                 a.ordertype,
                 a.tradekind,
                 a.wallettype,
                 a.recordinfo,
                 a.appid,
                 a.linedirection,
                 a.dealtype
            from rec_thirdrecord a
           where a.cstaccfc = prmcstaccfc;

        --将记录入统计记录表
        pkg_st_payment.proc_nolocalaccount_online(to_char(d_opdt, 'yyyymmddhh24miss'),
                                                 n_opfare,
                                                 n_acccode,
                                                 n_discount,
                                                 2,
                                                 n_cardtype,
                                                 n_driverid,
                                                 n_poscode,
                                                 n_poscode, --n_samcardno,
                                                 n_buslineid,
                                                 v_linedept,
                                                 n_busid,
                                                 n_wallettype,--钱包类型
                                                 0, --0正常 1回滚统计操作
                                                 v_custunitcode,
                                                 --v_merchantcode,
                                                 --v_uniontermid,
                                                 prmaccountdate,
                                                 prmaccountdate,
                                                 prmaccountdate,
                                                 out_msg,
                                                 out_result,
                                                 n_maincardtype);

        if (out_result <> 100) then
          out_result := out_result;
          out_msg    := '记录上传统计失败,' || out_msg;
          rollback;
          return;
        end if;

        --交易入成功表后删除临时记录表
        /*  update rec_thirdrecord
          set status       = 1,
              responsecode = prmresponsecode,
              accountdate  = d_accountdate
        where cstaccfc = prmcstaccfc;*/
        delete from rec_thirdrecord where cstaccfc = prmcstaccfc;

        --更新临时记录表
        update rec_thirdrecord_tb
           set status = 1, updatedate = sysdate
         where acquirerserialnum = prmcstaccfc;

        commit;
        out_result := 100;
        out_msg    := '记录入正常账目表成功';
      end if;

    end if;
  exception
    when others then
      rollback;
      out_result := out_result;
      out_msg    := out_msg || '异常_+_' || sqlerrm;
  end;

end pkg_rec_thirdrecord;/
create or replace package pkg_rec_unionthird
is
    --交易数据入库
    procedure proc_upload_thirdrecord (prmaccountid         in     varchar2, --支付宝记录唯一标志
                                       prmappid             in     varchar2, --应用id
                                       prmposcode           in     number, --设备运营唯一编号
                                       prmbusid             in     number, --车辆id
                                       prmbuslineid         in     number, --线路id
                                       prmopdt              in     varchar2, --交易时间
                                       prmtraderecno        in     number, --pos交易流水号（交易记录）
                                       prmdriverid          in     number, --司机id
                                       prmopfare            in     number, --交易金额
                                       prmoddfare           in     number, --卡余额
                                       prmacccode           in     varchar2,
                                       prmdscrp             in     varchar2,
                                       prmcollectdt         in     varchar2, --采集时间
                                       prmuploaddate        in     varchar2, --上传时间
                                       prmaccountdate       in     varchar2, --清算时间
                                       prmmaincardtype      in     number, --主卡类型
                                       prmcardtype          in     number, --卡类型
                                       prmextentvalue       in     varchar2, --扩展字段
                                       prmstatus            in     number, --处理标志
                                       prmresponsecode      in     varchar2, --应答码
                                       prmresponsemessage   in     varchar2, --应答信息
                                       prmnexttime          in     varchar2, --下次执行时间
                                       prmuserid            in     varchar2,
                                       prmuniontermid       in     varchar2, --银联终端编号
                                       prmmerchantcode      in     varchar2, --银联商户编号
                                       out_result              out number,
                                       out_msg                 out varchar2);

    --返回支付宝交易成功的数据入库
    procedure proc_thirdrecord_result (prmcstaccfc          in     number, --流水号
                                       prmsystracenum       in     number, --系统跟踪号
                                       prmaccountid         in     varchar2, --支付宝记录唯一标志
                                       prmappid             in     varchar2, --应用id
                                       prmposcode           in     number, --设备运营唯一编号
                                       prmbusid             in     number, --车辆id
                                       prmbuslineid         in     number, --线路id
                                       prmopdt              in     date, --交易时间
                                       prmtraderecno        in     number, --pos交易流水号（交易记录）
                                       prmdriverid          in     number, --司机id
                                       prmopfare            in     number, --交易金额
                                       prmoddfare           in     number, --卡余额
                                       prmacccode           in     varchar2,
                                       prmdscrp             in     varchar2,
                                       prmcollectdt         in     date, --采集时间
                                       prmuploaddate        in     date, --上传时间
                                       prmaccountdate       in     date, --清算时间
                                       prmmaincardtype      in     number, --主卡类型
                                       prmcardtype          in     number, --卡类型
                                       prmextentvalue       in     varchar2, --扩展字段
                                       prmstatus            in     number, --处理标志
                                       prmresponsecode      in out varchar2, --应答码
                                       prmresponsemessage   in out varchar2, --应答信息
                                       prmuserid            in     varchar2,
                                       out_result              out number,
                                       out_msg                 out varchar2);
/*
    --返回银联交易成功的数据入库
    procedure proc_unionthirdrecord_result (
        prmbankcardno        in     varchar2, --银联卡号
        prmuniontermid       in     varchar2, --银联终端编号
        prmopdt              in     varchar2, --交易时间，yyyymmddhhmiss
        prmopfare            in     number, --交易金额
        prmunionsearchnum    in     varchar2, --银联交易流水号
        prmaccountdate       in     varchar2, --银联账务日期,yyyymmdd
        prmcstaccfc          in     number, --银联反馈结果表中流水号
        prmresponsecode      in     varchar2,
        prmfilename          in     varchar2, --文件名
        prmtradetype         in     varchar2, --报文类型
        prmtradetypecode     in     varchar2, --交易类型吗
        prmserverinputtype   in     varchar2, --服务点输入方式
        prmbankcode          in     varchar2, --银行代码
        prmmerchantcode      in     varchar2, --商户代码
        out_msg                 out varchar2,
        out_result              out integer);
        */
end pkg_rec_unionthird;
/
create or replace package body pkg_rec_unionthird
is
    --交易数据入库
    procedure proc_upload_thirdrecord (prmaccountid         in     varchar2, --支付宝记录唯一标志
                                       prmappid             in     varchar2, --应用id
                                       prmposcode           in     number, --设备运营唯一编号
                                       prmbusid             in     number, --车辆id
                                       prmbuslineid         in     number, --线路id
                                       prmopdt              in     varchar2, --交易时间
                                       prmtraderecno        in     number, --pos交易流水号（交易记录）
                                       prmdriverid          in     number, --司机id
                                       prmopfare            in     number, --交易金额
                                       prmoddfare           in     number, --卡余额
                                       prmacccode           in     varchar2, --双免：209 二维码：210
                                       prmdscrp             in     varchar2,
                                       prmcollectdt         in     varchar2, --采集时间
                                       prmuploaddate        in     varchar2, --上传时间
                                       prmaccountdate       in     varchar2, --清算时间
                                       prmmaincardtype      in     number, --主卡类型
                                       prmcardtype          in     number, --卡类型 10:双免 11：二维码
                                       prmextentvalue       in     varchar2, --扩展字段
                                       prmstatus            in     number, --处理标志
                                       prmresponsecode      in     varchar2, --应答码
                                       prmresponsemessage   in     varchar2, --应答信息
                                       prmnexttime          in     varchar2, --下次执行时间
                                       prmuserid            in     varchar2,
                                       prmuniontermid       in     varchar2, --银联终端编号
                                       prmmerchantcode      in     varchar2, --银联商户编号
                                       out_result              out number,
                                       out_msg                 out varchar2)
    as
        /*
        --------------------------------------------------------------------------
        --存储过程：proc_upload_alipay_record
        --说　　明：交易数据入库
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：记录上传成功，帐目统计成功， 其他失败
        --------------------------------------------------------------------------
        */
        i_count            integer;
        i_badrectype       integer; --坏账类型
        n_acccode          integer;
        v_accdscrp         varchar2 (20);
        v_dptcode          varchar2 (20);
        n_busid            integer;
        n_lineid           integer;
        custom_exception   exception; --自定义错误
    begin
        i_count := 0;
        i_badrectype := 0;
        n_busid := prmbusid;
        n_lineid := prmbuslineid;
        n_acccode := 209; --科目赋值

        if prmcardtype = 11
        then
            n_acccode := 210;
        end if;

        ------------------------验证科目信息是否合法------------------------
        out_result := -1001;
        out_msg := '获取科目名称信息失败';

        select nvl (max (a.accdscrp), '未知')
          into v_accdscrp
          from base_acc_type a
         where a.acccode = n_acccode;

        -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
        out_result := -1002;
        out_msg := '检查终端合法性';

        -------验证终端信息-----------
        proc_elecconsum_validateterm (prmposcode, --设备唯一运营编号
                                      prmposcode, --psam卡号
                                      '',
                                      n_busid, --终端对应的车辆id
                                      to_char (sysdate, 'yyyymmddhh24miss'),
                                      out_result, --100终端合法
                                      out_msg);

        -------验证线路信息-----------
        select count (*)
          into i_count
          from base_busline a
         where a.lineid = n_lineid;

        if i_count <= 0
        then
            out_result := -1003;
            out_msg := '线路不存在';
        end if;

        select nvl (a.dptcode, '未知')
          into v_dptcode
          from base_busline a
         where a.lineid = n_lineid;

        --------------------------查询原始消费----------------------------
        out_result := -1004;
        out_msg := '查询原始消费记录失败！';

        select count (*)
          into i_count
          from rec_thirdrecord a
         where a.accountid = prmaccountid;

        ------------------------修改原始消费记录---------------------
        out_result := -1005;
        out_msg := '消费记录处理失败！';

        if i_count > 0
        then
            update rec_thirdrecord a
               set a.accountdate =
                       to_date (prmaccountdate, 'yyyy-mm-dd hh24:mi:ss'),
                   a.responsecode = prmresponsecode,
                   a.responsemessage = prmresponsemessage,
                   a.nexttime = to_date (prmnexttime, 'yyyy-mm-dd hh24:mi:ss')
             where a.accountid = prmaccountid;
        else
            insert into rec_thirdrecord (accountid,
                                         appid,
                                         poscode,
                                         busid,
                                         buslineid,
                                         linedept,
                                         opdt,
                                         traderecno,
                                         driverid,
                                         opfare,
                                         oddfare,
                                         acccode,
                                         dscrp,
                                         collectdt,
                                         uploaddate,
                                         accountdate,
                                         uniontermid,
                                         merchantcode,
                                         maincardtype,
                                         cardtype,
                                         extentvalue,
                                         status,
                                         responsecode,
                                         responsemessage,
                                         userid,
                                         nexttime)
                 values (prmaccountid,
                         prmappid,
                         prmposcode,
                         n_busid,
                         n_lineid,
                         v_dptcode,
                         to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                         prmtraderecno,
                         prmdriverid,
                         prmopfare,
                         prmoddfare,
                         n_acccode,
                         v_accdscrp,
                         to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'),
                         to_date (prmuploaddate, 'yyyy-mm-dd hh24:mi:ss'),
                         to_date (prmaccountdate, 'yyyy-mm-dd hh24:mi:ss'),
                         prmuniontermid,
                         prmmerchantcode,
                         prmmaincardtype,
                         prmcardtype,
                         prmextentvalue,
                         prmstatus,
                         prmresponsecode,
                         prmresponsemessage,
                         prmuserid,
                         to_date (prmnexttime, 'yyyy-mm-dd hh24:mi:ss'));
        end if;

        commit;
        out_result := 100;
        out_msg := '处理成功';
        return;
    exception
        when custom_exception -----先处理自定义异常
        then
            rollback;

            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;
        when others
        then
            rollback;
            out_result := -1000;
            out_msg :=
                   '记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
    end;

    --返回支付宝交易成功的数据入库
    procedure proc_thirdrecord_result (prmcstaccfc          in     number, --流水号
                                       prmsystracenum       in     number, --系统跟踪号
                                       prmaccountid         in     varchar2, --支付宝记录唯一标志
                                       prmappid             in     varchar2, --应用id
                                       prmposcode           in     number, --设备运营唯一编号
                                       prmbusid             in     number, --车辆id
                                       prmbuslineid         in     number, --线路id
                                       prmopdt              in     date, --交易时间
                                       prmtraderecno        in     number, --pos交易流水号（交易记录）
                                       prmdriverid          in     number, --司机id
                                       prmopfare            in     number, --交易金额
                                       prmoddfare           in     number, --卡余额
                                       prmacccode           in     varchar2,
                                       prmdscrp             in     varchar2,
                                       prmcollectdt         in     date, --采集时间
                                       prmuploaddate        in     date, --上传时间
                                       prmaccountdate       in     date, --清算时间
                                       prmmaincardtype      in     number, --主卡类型
                                       prmcardtype          in     number, --卡类型
                                       prmextentvalue       in     varchar2, --扩展字段
                                       prmstatus            in     number, --处理标志
                                       prmresponsecode      in out varchar2, --应答码
                                       prmresponsemessage   in out varchar2, --应答信息
                                       prmuserid            in     varchar2,
                                       out_result              out number,
                                       out_msg                 out varchar2)
    as
        /*
        --------------------------------------------------------------------------
        --存储过程：proc_upload_alipay_record
        --说　　明：支付宝返回交易成功的数据入库
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：记录上传成功，帐目统计成功， 其他失败
        --------------------------------------------------------------------------
        */
        i_count            integer;
        i_badrectype       integer; --坏账类型
        n_acccode          integer;
        v_accdscrp         varchar2 (20);
        v_dptcode          varchar2 (20);
        n_busid            integer;
        n_lineid           integer;
        v_response         varchar2 (20);
        custom_exception   exception; --自定义错误
    begin
        i_count := 0;
        i_badrectype := 0;
        n_busid := prmbusid;
        n_lineid := prmbuslineid;

        ------------------------检查是否正在数据结算-------------------------
        out_result := -1001;
        out_msg := '检查当前是否正在结算';

        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        ----------------------------查询科目-------------------------
        out_result := -1003;
        out_msg := '获取科目描述信息失败！';
        n_acccode := 207;

        select nvl (max (a.accdscrp), '未知')
          into v_accdscrp
          from base_acc_type a
         where a.acccode = n_acccode;

        -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
        out_result := -1004;
        out_msg := '验证终端,车辆，线路，部门信息失败';
        v_dptcode := '001';
        /*
        proc_elecconsum_validateterm (prmposcode, --设备唯一运营编号
                                      prmposcode, --psam卡号
                                      n_busid, --终端对应的车辆id
                                      out_result, --100终端合法
                                      out_msg);
                                      */
        -------验证终端信息-----------
        proc_elecconsum_validateterm (prmposcode, --设备唯一运营编号
                                      prmposcode, --psam卡号
                                      '',
                                      n_busid, --终端对应的车辆id
                                      to_char (sysdate, 'yyyymmddhh24miss'),
                                      out_result, --100终端合法
                                      out_msg);

        if (out_result <> 100) --使用此终端的车辆不存在
        then
            prmresponsecode := out_result;
            prmresponsemessage := out_msg;
        end if;

        --------------------------查询成功表中是否已存在----------------------------
        out_result := -1005;
        out_msg := '消费记录在成功表中已存在！';

        select count (*)
          into i_count
          from rec_thirdrecord_sucess a
         where a.accountid = prmaccountid;

        if i_count > 0
        then
            select responsecode
              into v_response
              from rec_thirdrecord_sucess a
             where a.accountid = prmaccountid;

            if v_response <> '00'
            then
                update rec_thirdrecord_sucess
                   set accountdate = prmaccountdate,
                       busid = n_busid,
                       buslineid = n_lineid,
                       linedept = v_dptcode,
                       responsecode = prmresponsecode,
                       responsemessage = prmresponsemessage
                 where accountid = prmaccountid;
            end if;
        else
            ------------------------处理数据---------------------
            out_result := -1006;
            out_msg := '处理消费记录失败！';

            insert into rec_thirdrecord_sucess (accountid,
                                                appid,
                                                poscode,
                                                busid,
                                                buslineid,
                                                linedept,
                                                opdt,
                                                traderecno,
                                                driverid,
                                                opfare,
                                                oddfare,
                                                acccode,
                                                dscrp,
                                                collectdt,
                                                uploaddate,
                                                accountdate,
                                                maincardtype,
                                                cardtype,
                                                extentvalue,
                                                status,
                                                userid,
                                                responsecode,
                                                responsemessage,
                                                systracenum)
                 values (prmaccountid,
                         prmappid,
                         prmposcode,
                         n_busid,
                         n_lineid,
                         v_dptcode,
                         prmopdt,
                         prmtraderecno,
                         prmdriverid,
                         prmopfare,
                         prmoddfare,
                         n_acccode,
                         v_accdscrp,
                         prmcollectdt,
                         prmuploaddate,
                         prmaccountdate,
                         prmmaincardtype,
                         prmcardtype,
                         prmextentvalue,
                         prmstatus,
                         prmuserid,
                         prmresponsecode,
                         prmresponsemessage,
                         prmsystracenum);

            delete from rec_thirdrecord a
                  where a.cstaccfc = prmcstaccfc; --此次数据为第二次处理时，需将原始表中数据删除
        end if;

        if prmresponsecode = '00'
        then
            --消费记录即时统计
            pkg_st_payment.proc_custdataaccount_online (prmopdt,
                                                        prmopfare,
                                                        n_acccode,
                                                        0, --prmdiscountfare
                                                        4, --prmcardkind
                                                        prmcardtype,
                                                        prmdriverid,
                                                        prmposcode,
                                                        prmposcode,
                                                        n_lineid,
                                                        v_dptcode,
                                                        n_busid,
                                                        4, --prmwallettype, --1, --钱包类型 电子钱包
                                                        0, --0正常 1回滚统计操作
                                                        -'', --prmcustunitcode,
                                                        out_msg,
                                                        out_result,
                                                        prmmaincardtype); --2017-12-26  新增主卡类型
        end if;

        if out_result <> 100
        then
            return;
        end if;

        commit;
        out_result := 100;
        out_msg := '处理成功';
        return;
    exception
        when custom_exception -----先处理自定义异常
        then
            rollback;

            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;
        when others
        then
            rollback;
            out_result := -1000;
            out_msg :=
                   '记录上传失败，处理['
                || out_msg
                || ']异常，具体原因为：'
                || sqlerrm;
    end;

    --银联反馈文件处理
    procedure proc_thirdrecord_result (prmbankcardno        in     varchar2, --银联卡号
                                       prmuniontermid       in     varchar2, --银联终端编号
                                       prmopdt              in     varchar2, --交易时间，yyyymmddhhmiss
                                       prmopfare            in     number, --交易金额
                                       prmunionsearchnum    in     varchar2, --银联交易流水号
                                       prmaccountdate       in     varchar2, --银联账务日期,yyyymmdd
                                       prmcstaccfc          in     number, --银联反馈结果表中流水号
                                       prmresponsecode      in     varchar2,
                                       prmfilename          in     varchar2, --文件名
                                       prmtradetype         in     varchar2, --报文类型
                                       prmtradetypecode     in     varchar2, --交易类型码
                                       prmserverinputtype   in     varchar2, --服务点输入方式 032:二维码,072:双免 042：oda
                                       prmbankcode          in     varchar2, --银行代码
                                       prmmerchantcode      in     varchar2, --银联商户代码
                                       out_msg                 out varchar2,
                                       out_result              out integer)
    as
        n_count              number;
        n_maincardtype       number; --主卡类型9：银联oda 10：银联双免 11：银联二维码
        d_unionopdt          date;
        d_accountdate        date;
        n_acccode            number; --科目：208：银联oda 209：银联双免 210：银联二维码
        v_accdscrp           varchar (20); --科目描述
        n_discount           number (10, 2);
        n_driverid           number;
        n_poscode            number;
        n_samcardno          number;
        n_buslineid          number;
        v_linedept           varchar2 (10);
        n_busid              number;
        i_badrectype         number;
        v_customerunitcode   varchar (20);
        n_optype             number;
    begin
        out_result := -1000;
        out_msg := '记录入库异常';
        i_badrectype := 0;
        --
        d_unionopdt := to_date (prmopdt, 'yyyy/mm/dd hh24:mi:ss');
        d_accountdate := to_date (prmaccountdate, 'yyyy/mm/dd');
        n_discount := 0;
        n_driverid := 0;
        n_busid := 0;
        n_buslineid := 0;
        v_linedept := '001';

        out_result := -1001;
        out_msg := '开始形成银联电子现金交易记录';

        ----------------------------------目前0420标示消费冲正的记录，暂时不做处理----------------------------
        ----------------------------------后续和银联沟通好，在做处理------------------------------------------
        /*  if prmtradetype = '0420' then
            out_result := -1;
            out_msg    := '目前0420标示消费冲正的记录，暂时不做处理';
            return;
          end if;*/

        ------------------------检查是否正在数据结算-------------------------
        out_result := -1001;
        out_msg := '检查当前是否正在结算';

        proc_validateisbalance (out_result, out_msg);

        if (out_result <> 0) --0当前系统未进行结算
        then
            out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
            out_msg := '判断账目结算状态异常，' || out_msg;
            return;
        end if;

        ------------------------设置主卡类型------------------------------
        --032:二维码,072:双免 042：oda
        --主卡类型：9：银联oda 10：银联双免 11：银联二维码
        --科目：208：银联oda 209：银联双免 210：银联二维码
        if prmserverinputtype = '032'
        then
            n_maincardtype := 11;
            n_acccode := 210;
        elsif prmserverinputtype = '072'
        then
            n_maincardtype := 10;
            n_acccode := 209;
        elsif prmserverinputtype = '042'
        then
            n_maincardtype := 9;
            n_acccode := 208;
        else
            n_maincardtype := 0;
            n_acccode := 0;
        end if;

        if prmtradetype = '0420'
        then
            n_acccode := 243; --银联第三方消费冲正
        end if;

        -------------------------------获取科目描述----------------------
        out_result := -1002;
        out_msg := '取交易科目描述信息失败！';

        select nvl (max (a.accdscrp), '未知')
          into v_accdscrp
          from base_acc_type a
         where a.acccode = n_acccode;

        -----------------------------查询银联商户号--------------------------------
        out_result := -1003;
        out_msg := '获取商户编号及终端编号失败！';

        select count (*)
          into n_count
          from base_term_union a
         where     a.unionposcode = prmuniontermid
               and a.unionmerchantcode = prmmerchantcode;

        if n_count <> 1
        then
            --更新临时记录表
            update rec_thirdrecord_acoma a
               set a.status = 1,
                   a.updatedate = sysdate,
                   a.resultcode = '0001',
                   a.resultdsc = '找不到对应的商户及终端'
             where cstaccfc = prmcstaccfc;

            out_result := 100;
            out_msg := '测试数据找不到对应的商户及终端，原始数据处理成功';
            commit;
            return;
        end if;

        select a.customerunitcode, a.poscode
          into v_customerunitcode, n_poscode
          from base_term_union a
         where     a.unionposcode = prmuniontermid
               and a.unionmerchantcode = prmmerchantcode;

        n_samcardno := n_poscode;


        -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
        out_result := -1004;
        out_msg := '验证终端,车辆，线路，部门是否正确';
        proc_validatetermbusline (n_poscode,
                                  v_customerunitcode,
                                  n_busid,
                                  n_buslineid,
                                  v_linedept,
                                  i_badrectype,
                                  out_result,
                                  out_msg);

        if (out_result <> 100)
        then
            out_result := out_result;
            out_msg := '查询终端，车辆，线路信息失败,' || out_msg;
            rollback;
            return;
        end if;

        --上传的记录是异常记录
        if prmresponsecode <> '00'
        then
            out_result := -1005;
            out_msg := '消费记录如统计失败表时，上传统计失败';

            --更新临时记录表
            update rec_thirdrecord_acoma a
               set a.status = 1,
                   a.updatedate = sysdate,
                   a.resultcode = '0002',
                   a.resultdsc = '记录银联返回为异常账,解析帐目处理成功',
                   a.customerunitcode = v_customerunitcode
             where cstaccfc = prmcstaccfc;

            out_result := 100;
            out_msg := '记录银联返回为异常账,解析帐目处理成功';
            commit;
            return;
        end if;

        out_result := -1006;
        out_msg := '查询双免成功表中数据是否存在！';

        --如果消费记录重复上传，则返回成功
        select count (*)
          into n_count
          from rec_thirdrecord_sucess a
         where     a.thirdcardno = prmbankcardno
               --and a.unioncstaccfc = prmunionsearchnum
               and a.opdt = d_unionopdt
               and a.uniontermid = prmuniontermid
               and a.acccode = n_acccode
               and a.customerunitcode = v_customerunitcode;

        if n_count > 0
        then
            out_msg := '银联记录入正常表数据重复';
            return;
        end if;

        out_result := -1007;
        out_msg := '原始消费记录入正常表';

        insert into rec_thirdrecord_sucess (thirdcardno,
                                            opdt,
                                            opfare,
                                            acccode,
                                            dscrp,
                                            collectdt,
                                            uploaddate,
                                            busid,
                                            driverid,
                                            poscode,
                                            traderecno,
                                            buslineid,
                                            discount,
                                            linedept,
                                            maincardtype,
                                            cardtype,
                                            testflag,
                                            accountdate,
                                            uniontermid,
                                            status,
                                            extentvalue,
                                            merchantcode,
                                            customerunitcode,
                                            filename)
             values (prmbankcardno,
                     d_unionopdt,
                     prmopfare,
                     n_acccode,
                     v_accdscrp,
                     sysdate,
                     sysdate,
                     n_busid,
                     n_driverid,
                     n_poscode,
                     0,
                     n_buslineid,
                     n_discount,
                     v_linedept,
                     n_maincardtype,
                     0,
                     0,
                     d_accountdate,
                     prmuniontermid,
                     1,
                     prmbankcode,
                     prmmerchantcode,
                     v_customerunitcode,
                     prmfilename);

        --判断统计时是正常账目还是回滚账目 0正常 1回滚统计操作
        if n_acccode = 243
        then
            n_optype := 1;
        else
            n_optype := 0;
        end if;

        --将记录入统计记录表
        pkg_st_payment.proc_nolocalaccount_online (
            to_char (d_unionopdt, 'yyyymmddhh24miss'),
            prmopfare,
            n_acccode,
            n_discount,
            2,
            100, --银联卡卡类型
            n_driverid,
            n_poscode,
            n_samcardno,
            n_buslineid,
            v_linedept,
            n_busid,
            1,
            --钱包类型
            n_optype, --0,
            --0正常 1回滚统计操作
            v_customerunitcode,
            to_char (d_accountdate, 'yyyy-mm-dd hh24:mi:ss'),
            to_char (d_accountdate, 'yyyy-mm-dd hh24:mi:ss'),
            to_char (d_accountdate, 'yyyy-mm-dd hh24:mi:ss'),
            out_msg,
            out_result,
            n_maincardtype); --2017-12-26 新增主卡类型

        if (out_result <> 100)
        then
            out_result := out_result;
            out_msg := '消费记录如统计失败表时，上传统计失败,' || out_msg;
            rollback;
            return;
        end if;

        --更新临时记录表
        update rec_thirdrecord_acoma a
           set a.status = 1,
               a.updatedate = sysdate,
               a.resultcode = '0000',
               a.resultdsc = '处理为正常帐成功',
               a.customerunitcode = v_customerunitcode
         where cstaccfc = prmcstaccfc;

        commit;
        out_result := 100;
        out_msg := '记录入正常账目表成功';
        return;
    exception
        when others
        then
            rollback;
            out_result := out_result;
            out_msg := out_msg || '异常_+_' || sqlerrm;
    end;
end pkg_rec_unionthird;
/
create or replace package pkg_rpt_alipay_record is

  -- author  : 林成行
  -- created : 2017/12/2 15:17:12
  -- purpose : 支付宝消费明细、汇总报表

  type ref_cursor is ref cursor;
  
  -- 支付宝对账消费明细报表
  procedure rec_alipay_record_detail_sp(prmdatatype  in varchar2, --数据类型
                                        prmstartdate in varchar2, --开始日期
                                        prmenddate   in varchar2, --结束日期
                                        prmdatetype  in varchar2, --日期类型
                                        io_allrec    out ref_cursor);

  -- 支付宝对账消费汇总报表
  procedure rec_alipay_record_group_sp(prmstartdate in varchar2, --开始日期
                                       prmenddate   in varchar2, --结束日期
                                       io_allrec out ref_cursor);

end pkg_rpt_alipay_record;
/
create or replace package body pkg_rpt_alipay_record is

  procedure rec_alipay_record_detail_sp(prmdatatype  in varchar2, --数据类型
                                        prmstartdate in varchar2, --开始日期
                                        prmenddate   in varchar2, --结束日期
                                        prmdatetype  in varchar2, --日期类型
                                        io_allrec    out ref_cursor) as
    pflag    varchar2(10);
    sqlstr   varchar2(4000);
    wherestr varchar2(4000);
  begin
  
    if prmdatatype = 0 then
      --全部
      pflag := '''''';
    elsif prmdatatype = 1 then
      --清算成功
      pflag    := '''''';
      wherestr := ' and datatype = 2';
    elsif prmdatatype = 2 then
      --待清算
      pflag    := 0;
      wherestr := ' and datatype = 1';
    elsif prmdatatype = 3 then
      --清算失败
      pflag    := 1;
      wherestr := ' and datatype = 1';
    end if;
  
    if prmdatetype = 0 then
      --交易日期
      sqlstr := ' (v.opdt is null or (v.opdt >= to_date(' || '''' ||
                prmstartdate || '''' ||
                ',''yyyy-mm-dd hh24:mi:ss'') 
                and v.opdt <= to_date(' || '''' ||
                prmenddate || '''' || ',''yyyy-mm-dd hh24:mi:ss'')))';
    elsif prmdatetype = 1 then
      --上传日期
      sqlstr := ' (v.uploaddate is null or (v.uploaddate >= to_date(' || '''' ||
                prmstartdate || '''' ||
                ',''yyyy-mm-dd hh24:mi:ss'') 
                and v.uploaddate <= to_date(' || '''' ||
                prmenddate || '''' || ',''yyyy-mm-dd hh24:mi:ss'')))';
    elsif prmdatetype = 2 then
      --清算日期
      sqlstr := ' (v.accountdate is null or ( to_date(v.accountdate,''yyyy-mm-dd hh24:mi:ss'') >= to_date(' || '''' ||
                prmstartdate || '''' ||
                ',''yyyy-mm-dd hh24:mi:ss'') 
                and to_date(v.accountdate,''yyyy-mm-dd hh24:mi:ss'') <= to_date(' || '''' ||
                prmenddate || '''' || ',''yyyy-mm-dd hh24:mi:ss'')))';
    end if;
  
    sqlstr := 'select v.poscode, v.busid, v.busnumber, v.linename, v.empname, v.acccode, v.opfare, v.opdt, 
                      v.uploaddate, v.accountdate,v.flag, v.responsemessage 
                      from v_rec_alipay_record_all v 
                      where (' || pflag ||
              ' is null or (v.flag_type = ' || pflag || '))' || wherestr ||
              ' and ' || sqlstr;
  
    open io_allrec for sqlstr;
  end;

  procedure rec_alipay_record_group_sp(prmstartdate in varchar2, --开始日期
                                       prmenddate   in varchar2, --结束日期
                                       io_allrec out ref_cursor) as
    sqlstr varchar2(4000);
  begin
    sqlstr := 'with datagroup as
            (select v.accountdate,
                 v.opfare,
                 v.flag,
                 v.responsemessage,
                 v.flag_type,
                 v.datatype
            from v_rec_alipay_record_all v
               where to_date(v.accountdate,''yyyy-mm-dd hh24:mi:ss'') >=' ||
              ' to_date(''' || prmstartdate ||
              ''',''yyyy-mm-dd hh24:mi:ss'')' ||
              ' and to_date(v.accountdate,''yyyy-mm-dd hh24:mi:ss'') <=' ||
              ' to_date(''' || prmenddate ||
              ''',''yyyy-mm-dd hh24:mi:ss''))' ||
              ' select datetable.accountdate,
               successtable.opfrequency as sopfrequency,
               successtable.opfare as sopfare,
               nvl(failedtable.opfrequency,0) as fopfrequency,
               nvl(failedtable.opfare,0) as fopfare
          from (select distinct g.accountdate from datagroup g) datetable
          left join (select s.accountdate,
                            count(1) as opfrequency,
                            sum(s.opfare) as opfare
                       from datagroup s
                      where s.datatype = 2
                      group by s.accountdate) successtable
            on datetable.accountdate = successtable.accountdate
          left join (select f.accountdate,
                            count(1) as opfrequency,
                            sum(f.opfare) as opfare
                       from datagroup f
                      where f.datatype = 1
                        and f.flag_type = 0
                      group by f.accountdate) failedtable
            on datetable.accountdate = failedtable.accountdate';
            
    open io_allrec for sqlstr;
  end;

end pkg_rpt_alipay_record;
/
create or replace package pkg_rpt_balance
as
/*
----------------------------------------------------------------------------
--过程包名：pkg_rpt_balance
--作　　者：朱鹏飞
--时　　间： 2009-07-20
--说　　明：平衡报表包，用于提供平衡报表中各报表数据
----------------------------------------------------------------------------
*/
   type ref_cursor is ref cursor;

   procedure getaccdatabygroupid (
      prmaccgroupid   in       integer,                          --交易大类id
      prmstartdate    in       varchar2,                       --统计开始日期
      prmenddate      in       varchar2,                       --统计结束日期
      prmreporttype   in       integer, --报表类型0-日报 1-月报 2-年报 3-期报
      io_allrec       out      ref_cursor
   );

end pkg_rpt_balance;


 

 
 
 /
create or replace package body pkg_rpt_balance
as
/*
----------------------------------------------------------------------------
--过程包名：pkg_rpt_balance
--作　　者：周晓娜
--时　　间： 2012-05-26
--说　　明：平衡报表包，用于提供平衡报表中各报表数据
----------------------------------------------------------------------------
*/
   procedure getaccdatabygroupid (
      prmaccgroupid   in       integer,                           --交易大类id
      prmstartdate    in       varchar2,                        --统计开始日期
      prmenddate      in       varchar2,                        --统计结束日期
      prmreporttype   in       integer,  --报表类型0-日报 1-月报 2-年报 3-期报
      io_allrec       out      ref_cursor
   )
   as
      t_startdate   date;                                      --查询开始日期
      t_enddate     date;                                      --查询结束日期
      t_month       date;                                              --月份
      t_year        date;                                              --年份
   begin
      /*
      --------------------------------------------------------------------------
      --存储过程：getaccdatabygroupid
      --作　　者：周晓娜
      --时　　间：2012-05-26
      --说　　明：平衡报表－系统收支汇总表_根据大类获得科目的统计数据
      --输入参数：
      --输出参数：
      --  io_allrec      所获得的数据集
      --------------------------------------------------------------------------
      */
      t_startdate := to_date (prmstartdate, 'yyyy-mm-dd');
      t_enddate := to_date (prmenddate, 'yyyy-mm-dd');
      t_month := trunc (t_startdate, 'mm');
      t_year := trunc (t_startdate, 'yyyy');

      if prmreporttype = 0
      then
         -----日报
         open io_allrec for
            select   t2.acccode, t2.accdscrp,
                     nvl (sum (t1.operno), 0) as operno,
                     nvl (sum (t1.opermn * t2.dir * t3.dir * t3.location),
                          0
                         ) as opermn
                from base_acc_type t2 left join st_payment_day t1
                     on t1.acccode = t2.acccode
                     join base_acc_group t3 on t2.groupid = t3.id
               where t1.balancedate = t_startdate
                 and t2.groupid = prmaccgroupid
            group by t2.acccode, t2.accdscrp, t2.sortid, t2.dir
            order by t2.sortid, t2.acccode;
      elsif prmreporttype = 1
      then
         -----月报
         --月报增加本年累计
         open io_allrec for
            select   t2.acccode, t2.accdscrp,
                     nvl (sum (t1.operno), 0) as operno,
                     nvl (sum (t1.opermn * t2.dir * t3.dir * t3.location),
                          0
                         ) as opermn,

                       --本年累计
                       nvl (sum (t4.opermn * t2.dir * t3.dir * t3.location),
                            0
                           )
                     / count (*) as thisyeartotalmn
                from base_acc_type t2 join st_payment_month t1
                     on t1.acccode = t2.acccode
                     join base_acc_group t3 on t2.groupid = t3.id
                     join

                     --过滤数据，只取当月及当月之前的这一年数据
                     (select   trunc (a.statmonth, 'yyyy') as statyear,
                               a.acccode, sum (a.operno) as operno,
                               sum (a.opermn) as opermn
                          from st_payment_month a
                         where a.statmonth >= t_year
                           and a.statmonth <= t_month
                      group by trunc (a.statmonth, 'yyyy'), a.acccode) t4
                     on t4.acccode = t2.acccode
               where t1.statmonth = t_month
                 and t2.groupid = prmaccgroupid
                 --and t4.statyear = t_year
                 and t4.acccode = t1.acccode
            group by t2.acccode, t2.accdscrp, t2.sortid, t2.dir
            order by t2.sortid, t2.acccode;
      elsif prmreporttype = 2
      then
         -----年报
         open io_allrec for
            select   t2.acccode, t2.accdscrp,
                     nvl (sum (t1.operno), 0) as operno,
                     nvl (sum (t1.opermn * t2.dir * t3.dir * t3.location),
                          0
                         ) as opermn
                from base_acc_type t2 left join st_payment_year t1
                     on t1.acccode = t2.acccode
                     join base_acc_group t3 on t2.groupid = t3.id
               where t1.statyear = t_year and t2.groupid = prmaccgroupid
            group by t2.acccode, t2.accdscrp, t2.sortid, t2.dir
            order by t2.sortid, t2.acccode;
      else
         -----期报
         open io_allrec for
            select   t2.acccode, t2.accdscrp,
                     nvl (sum (t1.operno), 0) as operno,
                     nvl (sum (t1.opermn * t2.dir * t3.dir * t3.location),
                          0
                         ) as opermn
                from base_acc_type t2 left join st_payment_day t1
                     on t1.acccode = t2.acccode
                     join base_acc_group t3 on t2.groupid = t3.id
               where t1.balancedate >= t_startdate
                 and t1.balancedate <= t_enddate
                 and t2.groupid = prmaccgroupid
            group by t2.acccode, t2.accdscrp, t2.sortid, t2.dir
            order by t2.sortid, t2.acccode;
      end if;
   end;
end;

/
create or replace package pkg_rpt_cashinput is

  -- author  : administrator
  -- created : 2016/3/11 15:05:04
  -- purpose : 投币报表

  type ref_cursor is ref cursor;

--
--员工工作量统计
   procedure rpt_workloadquery (
      prmworktype       in       varchar2,                              --节点值
      prmopno           in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      io_allrec      out      ref_cursor
   );
   procedure rpt_coinreportquery (
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      io_allrec      out      ref_cursor
   );

    procedure rpt_incomequery (
      prmdatakind       in       varchar2,                              --节点值
      prmsearchkind     in       varchar2,
      prmsearchvalue    in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      io_allrec        out      ref_cursor
   );
end pkg_rpt_cashinput;
/
create or replace package body pkg_rpt_cashinput is

 procedure rpt_workloadquery (
      prmworktype       in       varchar2,                              --节点值
      prmopno           in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      io_allrec      out      ref_cursor
   )
   as
      allrec       ref_cursor;
   begin
       if prmopno <> 'all' then
      if prmworktype =0  then
         open allrec for
               select b.opno,b.opname,
               sum(nvl(a.m100,0)) as m100,
               sum(nvl(a.m50,0)) as m50,
               sum(nvl(a.m20,0)) as m20,
               sum(nvl(a.m10,0)) as m10,
               sum(nvl(a.m5,0)) as m5,
               sum(nvl(a.m2,0)) as m2,
               /*sum(a.m1+a.c1) as m1,
               sum(a.m05+a.c05) as m05,
               sum(a.m02+a.c02) as m02,
               sum(a.m01+a.c01) as m01,
               sum(a.m005+a.c005) as m005,
               sum(a.m002+a.c002) as m002,
               sum(a.m001+a.c001) as m001,       */
               sum(nvl(a.m1,0)) as m1,
               sum(nvl(a.m05,0)) as m05,
               sum(nvl(a.m02,0)) as m02,
               sum(nvl(a.m01,0)) as m01,
               sum(nvl(a.m005,0)) as m005,
               sum(nvl(a.m002,0)) as m002,
               sum(nvl(a.m001,0)) as m001,
                nvl(sum(day_totalsum-a.c1-a.c05-a.c02-a.c01-a.c005-a.c002-a.c001),0) as day_totalsum,
               nvl( sum(sheet),0) as sheet,
               nvl( sum(day_totalmoney-a.c1-a.c05*0.5-a.c02*0.2-a.c01*0.1-a.c005*0.05-a.c002*0.02-a.c001*0.01),0) as day_totalmoney

               from rec_cash_input_today a
               right join table(split(prmopno))
               on a.countbillopno=column_value
               join rec_cash_input_counterinfo b
               on a.countbillopno=b.opno
               and a.customerunitcode=b.customerunitcode
               and b.type=0
               and  a.input_date >=prmsdate
               and a.input_date <=prmedate
               and a.customerunitcode=prmcustomercode
               where 1=1
               group by b.opno,b.opname
               order by to_number(b.opno);
               io_allrec := allrec;
      else
              open allrec for
               select b.opno,b.opname,
               sum(nvl(a.m100,0)) as m100,
               sum(nvl(a.m50,0)) as m50,
               sum(nvl(a.m20,0)) as m20,
               sum(nvl(a.m10,0)) as m10,
               sum(nvl(a.m5,0)) as m5,
               sum(nvl(a.m2,0)) as m2,
               /*
               sum(a.m1+a.c1) as m1,
               sum(a.m05+a.c05) as m05,
               sum(a.m02+a.c02) as m02,
               sum(a.m01+a.c01) as m01,
               sum(a.m005+a.c005) as m005,
               sum(a.m002+a.c001) as m002,
               sum(a.m001+a.c001) as m001,*/
               sum(nvl(a.m1,0)) as m1,
               sum(nvl(a.m05,0)) as m05,
               sum(nvl(a.m02,0)) as m02,
               sum(nvl(a.m01,0)) as m01,
               sum(nvl(a.m005,0)) as m005,
               sum(nvl(a.m002,0)) as m002,
               sum(nvl(a.m001,0)) as m001,
               nvl(sum(day_totalsum-a.c1-a.c05-a.c02-a.c01-a.c005-a.c002-a.c001),0) as day_totalsum,
                nvl(sum(sheet),0) as sheet,
               nvl( sum(day_totalmoney-a.c1-a.c05*0.5-a.c02*0.2-a.c01*0.1-a.c005*0.05-a.c002*0.02-a.c001*0.01),0) as day_totalmoney


                from rec_cash_input_today a
               right  join table(split(prmopno))
               on a.checkopno=column_value
               join rec_cash_input_counterinfo b
               on a.checkopno=b.opno
               and a.customerunitcode=b.customerunitcode
               and b.type=1
               and  a.input_date >=prmsdate
               and a.input_date <=prmedate
               and a.customerunitcode=prmcustomercode
               where 1=1
               group by b.opno,b.opname
               order by to_number(b.opno);
               io_allrec := allrec;
      end if;
      else
                if prmworktype =0  then
         open allrec for
               select b.opno,b.opname,
               sum(nvl(a.m100,0)) as m100,
               sum(nvl(a.m50,0)) as m50,
               sum(nvl(a.m20,0)) as m20,
               sum(nvl(a.m10,0)) as m10,
               sum(nvl(a.m5,0)) as m5,
               sum(nvl(a.m2,0)) as m2,
               /*
               sum(a.m1+a.c1) as m1,
               sum(a.m05+a.c05) as m05,
               sum(a.m02+a.c02) as m02,
               sum(a.m01+a.c01) as m01,
               sum(a.m005+a.c005) as m005,
               sum(a.m002+a.c002) as m002,
               sum(a.m001+a.c001) as m001,*/
               sum(nvl(a.m1,0)) as m1,
               sum(nvl(a.m05,0)) as m05,
               sum(nvl(a.m02,0)) as m02,
               sum(nvl(a.m01,0)) as m01,
               sum(nvl(a.m005,0)) as m005,
               sum(nvl(a.m002,0)) as m002,
               sum(nvl(a.m001,0)) as m001,
               nvl(sum(day_totalsum-a.c1-a.c05-a.c02-a.c01-a.c005-a.c002-a.c001),0) as day_totalsum,
               nvl(sum(sheet),0) as sheet,
               nvl(sum(day_totalmoney-a.c1-a.c05*0.5-a.c02*0.2-a.c01*0.1-a.c005*0.05-a.c002*0.02-a.c001*0.01),0) as day_totalmoney

               from rec_cash_input_today a
               right join rec_cash_input_counterinfo b
               on a.countbillopno=b.opno
               and a.customerunitcode=b.customerunitcode
               and b.type=0
               and a.input_date >=prmsdate
               and a.input_date <=prmedate
               and a.customerunitcode=prmcustomercode
               where 1=1
               group by b.opno,b.opname
               order by to_number(b.opno);
               io_allrec := allrec;
         else
              open allrec for
               select b.opno,b.opname,
               sum(nvl(a.m100,0)) as m100,
               sum(nvl(a.m50,0)) as m50,
               sum(nvl(a.m20,0)) as m20,
               sum(nvl(a.m10,0)) as m10,
               sum(nvl(a.m5,0)) as m5,
               sum(nvl(a.m2,0)) as m2,
               /*
               sum(a.m1+a.c1) as m1,
               sum(a.m05+a.c05) as m05,
               sum(a.m02+a.c02) as m02,
               sum(a.m01+a.c01) as m01,
               sum(a.m005+a.c005) as m005,
               sum(a.m002+a.c002) as m002,
               sum(a.m001+a.c001) as m001,*/
               sum(nvl(a.m1,0)) as m1,
               sum(nvl(a.m05,0)) as m05,
               sum(nvl(a.m02,0)) as m02,
               sum(nvl(a.m01,0)) as m01,
               sum(nvl(a.m005,0)) as m005,
               sum(nvl(a.m002,0)) as m002,
               sum(nvl(a.m001,0)) as m001,
               nvl(sum(day_totalsum-a.c1-a.c05-a.c02-a.c01-a.c005-a.c002-a.c001),0) as day_totalsum,
               sum(nvl(sheet,0)) as sheet,
               nvl(sum(day_totalmoney-a.c1-a.c05*0.5-a.c02*0.2-a.c01*0.1-a.c005*0.05-a.c002*0.02-a.c001*0.01),0) as day_totalmoney

               from rec_cash_input_today a
               right join rec_cash_input_counterinfo b
               on a.checkopno=b.opno
               and a.customerunitcode=b.customerunitcode
               and b.type=1
               and a.input_date >=prmsdate
               and a.input_date <=prmedate
               and a.customerunitcode=prmcustomercode
               where 1=1
               group by b.opno,b.opname
               order by to_number(b.opno);
               io_allrec := allrec;
      end if;
      end if;
   end;


   procedure rpt_coinreportquery (
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      io_allrec         out      ref_cursor
   )
   as
      allrec       ref_cursor;
    begin
       open allrec for
               select
               '硬币' as coin,
               sum(a.c1) as c1,
               sum(a.c05) as c05,
               sum(a.c02) as c02,
               sum(a.c01) as c01,
               sum(a.c005) as c005,
               sum(a.c002) as c002,
               sum(a.c001) as c001,
               sum(a.c1+a.c05+a.c02+a.c01+a.c005+a.c002+a.c001) as totalsum,
               sum(a.c1+a.c05*0.5+a.c02*0.2+a.c01*0.1+a.c005*0.05+a.c002*0.02+a.c001*0.01) as totalmoney
               from rec_cash_input_today a
               where a.input_date >=prmsdate
               and a.input_date <=prmedate
               and a.customerunitcode=prmcustomercode;
       io_allrec := allrec;
    end;


    procedure rpt_incomequery (
      prmdatakind       in       varchar2,                              --节点值
      prmsearchkind     in       varchar2,
      prmsearchvalue    in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      io_allrec        out      ref_cursor
   )
   as  allrec       ref_cursor;
       v_firstday   varchar2(10);
    begin
       v_firstday := to_char(to_date(prmedate,'yyyymmdd'),'yyyymm')||'01';
      if prmdatakind = '0' then  --无人售票
        if prmsearchkind = '0' then --线路
             open allrec for
             select a.dept_name,a.line_name, a.sheet,a.totalmoney,b.sheet as t_sheet,b.totalmoney as t_totalmoney
             from (
             (select b.dept_name,b.line_name
             ,sum(nvl(sheet,0)) as sheet
             ,sum(nvl(a.day_totalmoney,0)) as totalmoney,
             a.line_no,a.dept_no,a.customerunitcode  from  rec_cash_input_businfo b
             left join rec_cash_input_today a
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and b.busnumber=a.bus_no
             where a.input_date>=prmedate
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             group by b.line_name,b.dept_name,a.customerunitcode, a.line_no,a.dept_no) a
             join
             (select b.dept_name,b.line_name
             ,sum(nvl(sheet,0)) as sheet
             ,sum(nvl(a.day_totalmoney,0)) as totalmoney,
              a.line_no,a.dept_no,a.customerunitcode  from rec_cash_input_businfo b
             left join rec_cash_input_today a
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and b.busnumber=a.bus_no
             where a.input_date>=v_firstday
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             group by b.line_name,b.dept_name,a.customerunitcode, a.line_no,a.dept_no
             order by a.dept_no ,a.line_no) b
             on a.customerunitcode=b.customerunitcode
             and a.line_no=b.line_no
             and a.dept_no=b.dept_no)

             ;

             io_allrec := allrec;
             elsif  prmsearchkind = '1' then  --车辆
               open allrec for

             select  a.dept_name,a.line_name,a.bus_no, a.sheet,a.totalmoney,b.sheet as t_sheet,b.totalmoney as t_totalmoney
             from (
             (select  b.dept_name,b.line_name,a.bus_no,sum(sheet) as sheet,sum(a.day_totalmoney) as totalmoney,
             a.line_no,a.customerunitcode , b.dept_no from rec_cash_input_today a
             inner join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             where a.input_date>=prmedate
             and  a.input_date<=prmedate
             and a.dept_no=prmsearchvalue
             and a.customerunitcode=prmcustomercode
             group by b.line_name, b.dept_name,a.customerunitcode, a.line_no,a.bus_no ,b.dept_no) a
             join
             (select  b.dept_name,b.line_name,a.bus_no,sum(sheet) as sheet,sum(a.day_totalmoney) as totalmoney,
              a.line_no,a.customerunitcode ,b.dept_no  from rec_cash_input_today a
             join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             where a.input_date>=v_firstday
             and  a.input_date<=prmedate
             and a.dept_no=prmsearchvalue
             and a.customerunitcode=prmcustomercode
             group by b.line_name, b.dept_name,a.customerunitcode, a.line_no,a.bus_no ,b.dept_no
             order by b.dept_no, a.line_no,a.bus_no
             ) b
             on a.customerunitcode=b.customerunitcode
             and a.line_no=b.line_no
             and a.bus_no=b.bus_no);
             io_allrec := allrec;

             elsif  prmsearchkind = '2' then --司机
               open allrec for
             select  a.dept_name,a.line_name,a.bus_no,a.driveropno,a.drivername, a.sheet,a.totalmoney,b.sheet as t_sheet,b.totalmoney as t_totalmoney
             from (
             (select  b.dept_name,b.line_name,a.bus_no,a.driveropno,c.drivername,sum(sheet) as sheet,sum(a.day_totalmoney) as totalmoney,
             a.line_no,a.customerunitcode ,b.dept_no from rec_cash_input_today a
             inner join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             inner join rec_cash_input_driverinfo c
             on a.customerunitcode=c.customerunitcode
             and a.driveropno=c.driveropno
             where a.input_date>=prmedate
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             and a.dept_no=prmsearchvalue
             group by b.line_name, b.dept_name,a.customerunitcode, a.line_no,a.bus_no,a.driveropno,c.drivername,b.dept_no) a
             join
             (select  b.dept_name,b.line_name,a.bus_no,a.driveropno,c.drivername,sum(sheet) as sheet,sum(a.day_totalmoney) as totalmoney,
              a.line_no,a.customerunitcode,b.dept_no  from rec_cash_input_today a
             join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             inner join rec_cash_input_driverinfo c
             on a.customerunitcode=c.customerunitcode
             and a.driveropno=c.driveropno
             where a.input_date>=v_firstday
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             and a.dept_no=prmsearchvalue
             group by  b.dept_name,b.line_name,a.customerunitcode, a.line_no,a.bus_no,a.driveropno,c.drivername,b.dept_no
             order by b.dept_no,a.driveropno
             ) b
             on a.customerunitcode=b.customerunitcode
             and a.dept_no=b.dept_no
             and a.line_no=b.line_no
             and a.bus_no=b.bus_no
             and a.driveropno =b.driveropno
             );
             io_allrec := allrec;
             else   --部门
               open allrec for
             select a.dept_name, a.sheet,a.totalmoney,b.sheet as t_sheet,b.totalmoney as t_totalmoney
             from (
             (
             select b.dept_name,sum(sheet) as sheet,sum(a.day_totalmoney) as totalmoney,
             a.customerunitcode ,b.dept_no from rec_cash_input_today a
             inner join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             where a.input_date>=prmedate
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             group by a.customerunitcode,b.dept_no, b.dept_name) a
             join
             (select b.dept_name,sum(sheet) as sheet,sum(a.day_totalmoney) as totalmoney,
            a.customerunitcode,b.dept_no  from rec_cash_input_today a
             join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             where a.input_date>=v_firstday
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             group by a.customerunitcode, b.dept_no, b.dept_name
             order by  b.dept_no
             ) b
             on a.customerunitcode=b.customerunitcode
             and a.dept_no=b.dept_no);
             io_allrec := allrec;
             end if;

      else
            if prmsearchkind = '0' then --线路

             open allrec for
             select a.dept_name,a.line_name, a.sheet,a.totalmoney,b.sheet as t_sheet,b.totalmoney as t_totalmoney
             from (
             (select b.dept_name,b.line_name,sum(sheetnum) as sheet,sum(a.totalmoney) as totalmoney,
             a.line_no,a.dept_no,a.customerunitcode  from rec_cash_input_tickets a
             join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             where a.input_date>=prmedate
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             group by b.line_name,b.dept_name,a.customerunitcode, a.line_no,a.dept_no) a
             join
             (select b.dept_name,b.line_name,sum(sheetnum) as sheet,sum(a.totalmoney) as totalmoney,
              a.line_no,a.dept_no,a.customerunitcode  from rec_cash_input_tickets a
             join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             where a.input_date>=v_firstday
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             group by b.line_name,b.dept_name,a.customerunitcode, a.line_no,a.dept_no
              order by a.dept_no,a.line_no
             ) b
             on a.customerunitcode=b.customerunitcode
             and a.line_no=b.line_no
             and a.dept_no=b.dept_no);

             io_allrec := allrec;
             elsif  prmsearchkind = '1' then  --车辆
               open allrec for

             select  a.dept_name,a.line_name,a.bus_no, a.sheet,a.totalmoney,b.sheet as t_sheet,b.totalmoney as t_totalmoney
             from (
             (select  b.dept_name,b.line_name,a.bus_no,sum(sheetnum) as sheet,sum(a.totalmoney) as totalmoney,
             a.line_no,a.customerunitcode , b.dept_no from rec_cash_input_tickets a
             inner join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             where a.input_date>=prmedate
             and  a.input_date<=prmedate
             and a.dept_no=prmsearchvalue
             and a.customerunitcode=prmcustomercode
             group by  b.dept_name,b.line_name,a.customerunitcode, a.line_no,a.bus_no ,b.dept_no) a
             join
             (select  b.dept_name,b.line_name,a.bus_no,sum(sheetnum) as sheet,sum(a.totalmoney) as totalmoney,
              a.line_no,a.customerunitcode ,b.dept_no  from rec_cash_input_tickets a
             join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             where a.input_date>=v_firstday
             and  a.input_date<=prmedate
             and a.dept_no=prmsearchvalue
             and a.customerunitcode=prmcustomercode
             group by  b.dept_name,b.line_name,a.customerunitcode, a.line_no,a.bus_no ,b.dept_no
             order by b.dept_no,a.line_no,a.bus_no
             ) b
             on a.customerunitcode=b.customerunitcode
             and a.line_no=b.line_no
             and a.bus_no=b.bus_no);
             io_allrec := allrec;

             elsif  prmsearchkind = '2' then  --司机
               open allrec for
             select  a.dept_name,a.line_name,a.bus_no,a.driveropno,a.drivername, a.sheet,a.totalmoney,b.sheet as t_sheet,b.totalmoney as t_totalmoney
             from (
             (select  b.dept_name,b.line_name,a.bus_no,a.driveropno,c.drivername,sum(sheetnum) as sheet,sum(a.totalmoney) as totalmoney,
             a.line_no,a.customerunitcode ,b.dept_no from rec_cash_input_tickets a
             inner join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             inner join rec_cash_input_driverinfo c
             on a.customerunitcode=c.customerunitcode
             and a.driveropno=c.driveropno
             where a.input_date>=prmedate
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             and a.dept_no=prmsearchvalue
             group by b.dept_name,b.line_name,a.customerunitcode, a.line_no,a.bus_no,a.driveropno,c.drivername,b.dept_no) a
             join
             (select  b.dept_name,b.line_name,a.bus_no,a.driveropno,c.drivername,sum(sheetnum) as sheet,sum(a.totalmoney) as totalmoney,
              a.line_no,a.customerunitcode,b.dept_no  from rec_cash_input_tickets a
             join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             inner join rec_cash_input_driverinfo c
             on a.customerunitcode=c.customerunitcode
             and a.driveropno=c.driveropno
             where a.input_date>=v_firstday
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             and a.dept_no=prmsearchvalue
             group by  b.dept_name,b.line_name,a.customerunitcode, a.line_no,a.bus_no,a.driveropno,c.drivername,b.dept_no
             order by b.dept_no,a.driveropno) b
             on a.customerunitcode=b.customerunitcode
             and a.dept_no=b.dept_no
             and a.line_no=b.line_no
             and a.bus_no=b.bus_no
             and a.driveropno =b.driveropno
             );
             io_allrec := allrec;
             else   --部门
               open allrec for
             select a.dept_name, a.sheet,a.totalmoney,b.sheet as t_sheet,b.totalmoney as t_totalmoney
             from (
             (select b.dept_name,sum(sheetnum) as sheet,sum(a.totalmoney) as totalmoney,
             a.customerunitcode ,b.dept_no from rec_cash_input_tickets a
             inner join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             where a.input_date>=prmedate
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             group by a.customerunitcode,b.dept_no, b.dept_name) a
             join
             (select b.dept_name,sum(sheetnum) as sheet,sum(a.totalmoney) as totalmoney,
             a.customerunitcode,b.dept_no  from rec_cash_input_tickets a
             join rec_cash_input_businfo b
             on a.customerunitcode=b.customerunitcode
             --and a.line_no=b.line_no
             and a.bus_no=b.busnumber
             where a.input_date>=v_firstday
             and  a.input_date<=prmedate
             and a.customerunitcode=prmcustomercode
             group by a.customerunitcode, b.dept_no, b.dept_name
             order by b.dept_no
             ) b
             on a.customerunitcode=b.customerunitcode
             and a.dept_no=b.dept_no);
             io_allrec := allrec;
             end if;
      end if;
    end;



end pkg_rpt_cashinput;
/
create or replace package pkg_rpt_customizereport is

  -- author  : administrator
  -- created : 2016/3/15 16:52:56
  -- purpose : 客户定制的报表

  type ref_cursor is ref cursor;

   procedure rpt_consumegroupquery (
      prmdatakind       in       varchar2,
      prmsearchkind     in       varchar2,
      prmsearchvalue    in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      io_allrec        out      ref_cursor
   );

   procedure rpt_consumedetailquery (
      prmdatakind       in       varchar2,
      prmsearchkind     in       varchar2,
      prmsearchvalue    in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      prmdeptcode       in       varchar2,
      io_allrec        out      ref_cursor
   );
   procedure rpt_drivercheckquery (
      prmdatakind       in       varchar2,
      prmsearchkind     in       varchar2,
      prmsearchvalue    in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      prmdeptcode       in       varchar2,
      io_allrec        out      ref_cursor
   );

   procedure rpt_cardmakercheckquery (
      prmdatakind       in       varchar2,
      prmsearchkind     in       varchar2,
      prmsearchvalue    in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      prmdeptcode       in       varchar2,
      io_allrec        out      ref_cursor
   );

end pkg_rpt_customizereport;
/
create or replace package body pkg_rpt_customizereport is

   procedure rpt_consumegroupquery (
      prmdatakind       in       varchar2,
      prmsearchkind     in       varchar2,
      prmsearchvalue    in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      io_allrec         out      ref_cursor
   )
   as     allrec                 ref_cursor;
          v_monthfirstdate       varchar2(100);

    begin
          v_monthfirstdate:=to_char(to_date(prmsdate,'yyyymmdd'),'yyyymm')||'01';

      if prmsearchvalue = 'root' or prmsearchvalue = '001' then  --部门条件为  root 则查询所有的部门
        if prmdatakind = '0' then --线路
             open allrec for
               select dptname,linename,
                         day_opno_t,
                         day_opmn_t,
                         mon_opno_t,
                         mon_opmn_t,
                         day_opno_c,
                         day_opmn_c,
                         mon_opno_c,
                         mon_opmn_c,
                         day_opno_i,
                         day_opmn_i,
                         mon_opno_i,
                         mon_opmn_i,

                         decode((day_opno_t+day_opno_c+day_opno_i),0,100,(round(day_opno_i/(day_opno_t+day_opno_c+day_opno_i)*100,4))) as percent_day_opno,
                         decode((day_opmn_t+day_opmn_c+day_opmn_i),0,100,(round(day_opmn_i/(day_opmn_t+day_opmn_c+day_opmn_i)*100,4))) as percent_day_opmn,
                         decode((mon_opno_t+mon_opno_c+mon_opno_i),0,100,(round(mon_opno_i/(mon_opno_t+mon_opno_c+mon_opno_i)*100,4))) as percent_mon_opno,
                         decode((mon_opmn_t+mon_opmn_c+mon_opmn_i),0,100,(round(mon_opmn_i/(mon_opmn_t+mon_opmn_c+mon_opmn_i)*100,4))) as percent_mon_opmn,

                         (day_opno_t+day_opno_c+day_opno_i) as day_opno,
                         (day_opmn_t+day_opmn_c+day_opmn_i) as day_opmn,
                         (mon_opno_t+mon_opno_c+mon_opno_i) as mon_opno,
                         (mon_opmn_t+mon_opmn_c+mon_opmn_i) as mon_opmn

                            from
                           (select
                           ta.lineno,ta.customerunitcode,l.linename,d.dptname,
                           nvl(round(ta.opno),0) as day_opno_t,
                           nvl(ta.opmn,0) as day_opmn_t,
                           nvl(round(tb.opno),0) as mon_opno_t,
                           nvl(tb.opmn,0) as mon_opmn_t,
                           nvl(round(ca.opno),0) as day_opno_c,
                           nvl(ca.opmn,0) as day_opmn_c,
                           nvl(round(cb.opno),0) as mon_opno_c,
                           nvl(cb.opmn,0) as mon_opmn_c,
                           nvl(round(ia.opno),0) as day_opno_i,
                           nvl(ia.opmn,0) as day_opmn_i,
                           nvl(round(ib.opno),0) as mon_opno_i,
                           nvl(ib.opmn,0) as mon_opmn_i
                           from

                           (select a.lineid as lineno,a.dptcode as deptno,a.linename as linename,a.customerunitcode from base_busline a) l
                           left join
                           (select * from base_dept) d
                           on l.deptno=d.dptcode
                           and l.customerunitcode=d.customerunitcode
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn ,a.line_no as lineno ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by a.line_no,a.customerunitcode,a.dept_no)  ta
                           on l.lineno=ta.lineno
                           --and l.deptno=ta.deptno
                           and l.customerunitcode = ta.customerunitcode
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn ,a.line_no as lineno ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <=prmedate
                           and a.customerunitcode=prmcustomercode
                           group by a.line_no,a.customerunitcode,a.dept_no)  tb
                           on l.lineno = tb.lineno
                           --and l.deptno = tb.deptno
                           and l.customerunitcode = tb.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn ,a.line_no as lineno ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by a.line_no,a.customerunitcode,a.dept_no)  ca
                           on l.lineno = ca.lineno
                           --and l.deptno = ca.deptno
                           and l.customerunitcode = ca.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn ,a.line_no as lineno ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <= prmedate
                           and a.customerunitcode= prmcustomercode
                           group by a.line_no,a.customerunitcode,a.dept_no)  cb
                           on l.lineno = cb.lineno
                           --and l.deptno = cb.deptno
                           and l.customerunitcode = cb.customerunitcode
                           left join
                           (select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn ,lineno, customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.buslineid as lineno, a.customerunitcode,a.dptcode  as deptno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(prmsdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.lineno,a.customerunitcode,a.deptno
                           )  ia
                           on l.lineno = ia.lineno
                           --and l.deptno = ia.deptno
                           and l.customerunitcode = ia.customerunitcode
                           left join
                           (
                           select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn ,lineno, customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.buslineid as lineno, a.customerunitcode,a.dptcode  as deptno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(v_monthfirstdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.lineno,a.customerunitcode,a.deptno
                           )  ib
                           on l.lineno = ib.lineno
                           --and l.deptno = ib.deptno
                           and l.customerunitcode = ib.customerunitcode
                           order by l.lineno
                           );

             io_allrec := allrec;
             elsif  prmdatakind = '1' then  --车辆
               open allrec for

                           select dptname,busno,
                                 day_opno_t,
                                 day_opmn_t,
                                 mon_opno_t,
                                 mon_opmn_t,
                                 day_opno_c,
                                 day_opmn_c,
                                 mon_opno_c,
                                 mon_opmn_c,
                                 day_opno_i,
                                 day_opmn_i,
                                 mon_opno_i,
                                 mon_opmn_i,

                       decode((day_opno_t+day_opno_c+day_opno_i),0,100,(round(day_opno_i/(day_opno_t+day_opno_c+day_opno_i)*100,4))) as percent_day_opno,
                       decode((day_opmn_t+day_opmn_c+day_opmn_i),0,100,(round(day_opmn_i/(day_opmn_t+day_opmn_c+day_opmn_i)*100,4))) as percent_day_opmn,
                       decode((mon_opno_t+mon_opno_c+mon_opno_i),0,100,(round(mon_opno_i/(mon_opno_t+mon_opno_c+mon_opno_i)*100,4))) as percent_mon_opno,
                       decode((mon_opmn_t+mon_opmn_c+mon_opmn_i),0,100,(round(mon_opmn_i/(mon_opmn_t+mon_opmn_c+mon_opmn_i)*100,4))) as percent_mon_opmn,

                                 (day_opno_t+day_opno_c+day_opno_i) as day_opno,
                                 (day_opmn_t+day_opmn_c+day_opmn_i) as day_opmn,
                                 (mon_opno_t+mon_opno_c+mon_opno_i) as mon_opno,
                                 (mon_opmn_t+mon_opmn_c+mon_opmn_i) as mon_opmn

                           from (select
                            ta.customerunitcode,b.busno,b.busnumber,
                           d.dptname,
                           nvl(round(ta.opno),0) as day_opno_t,
                           nvl(ta.opmn,0) as day_opmn_t,
                           nvl(round(tb.opno),0) as mon_opno_t,
                           nvl(tb.opmn,0) as mon_opmn_t,
                           nvl(round(ca.opno),0) as day_opno_c,
                           nvl(ca.opmn,0) as day_opmn_c,
                           nvl(round(cb.opno),0) as mon_opno_c,
                           nvl(cb.opmn,0) as mon_opmn_c,
                           nvl(round(ia.opno),0) as day_opno_i,
                           nvl(ia.opmn,0) as day_opmn_i,
                           nvl(round(ib.opno),0) as mon_opno_i,
                           nvl(ib.opmn,0) as mon_opmn_i
                           from
                           (select a.busno,a.busnumber,a.lineid as lineno,a.dptcode as deptno,a.customerunitcode  from base_bus a) b
                           ---left join
                           ---(select a.lineid as lineno,a.dptcode as deptno,a.linename as linename,a.customerunitcode from base_busline a) l
                           ---on b.lineno = l.lineno
                           --and b.deptno = l.deptno
                           ---and b.customerunitcode = l.customerunitcode
                           --and l.deptno=prmsearchvalue
                           left join
                           (select * from base_dept) d
                           on b.deptno=d.dptcode
                           and b.customerunitcode=d.customerunitcode
                           --and d.dptcode=prmsearchvalue
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn , a.bus_no as busno , a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode= prmcustomercode
                           --and a.dept_no=prmsearchvalue
                           group by a.bus_no , a.customerunitcode,a.dept_no)  ta
                           on b.busnumber=ta.busno
                           ---and l.lineno=ta.lineno
                           --and l.deptno=ta.deptno
                           and b.customerunitcode = ta.customerunitcode
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn , a.bus_no as busno , a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <= prmedate
                           and a.customerunitcode= prmcustomercode
                           --and a.dept_no=prmsearchvalue
                           group by  a.bus_no , a.customerunitcode,a.dept_no)  tb
                           on b.busnumber=tb.busno
                           ---and l.lineno = tb.lineno
                           --and l.deptno = tb.deptno
                           and b.customerunitcode = tb.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn , a.bus_no as busno , a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode= prmcustomercode
                           --and a.dept_no=prmsearchvalue
                           group by  a.bus_no  , a.customerunitcode,a.dept_no)  ca
                           on b.busnumber=ca.busno
                           ---and l.lineno = ca.lineno
                           --and l.deptno = ca.deptno
                           and b.customerunitcode = ca.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn , a.bus_no as busno , a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <=prmedate
                           and a.customerunitcode= prmcustomercode
                           --and a.dept_no=prmsearchvalue
                           group by  a.bus_no  , a.customerunitcode,a.dept_no)  cb
                           on b.busnumber=cb.busno
                           ---and l.lineno = cb.lineno
                           --and l.deptno = cb.deptno
                           and b.customerunitcode = cb.customerunitcode
                           left join
                           (select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn ,busno,  customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.buslineid as lineno, a.customerunitcode,a.dptcode  as deptno,a.busid as busno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(prmsdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.busno, a.customerunitcode,a.deptno
                           )  ia
                           on b.busno = ia.busno
                           ---and l.lineno = ia.lineno
                           --and l.deptno = ia.deptno
                           and b.customerunitcode = ia.customerunitcode
                           left join
                           (
                           select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn ,busno, customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.buslineid as lineno, a.customerunitcode,a.dptcode  as deptno,a.busid as busno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(v_monthfirstdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.busno, a.customerunitcode,a.deptno
                           )  ib
                           on b.busno = ib.busno
                           ---and l.lineno = ib.lineno
                           --and l.deptno = ib.deptno
                           and b.customerunitcode = ib.customerunitcode
                           --where b.deptno=prmsearchvalue
                           order by b.busno
                           );

             io_allrec := allrec;

           /*  elsif  prmdatakind = '2' then --司机
               open allrec for


                 select dptname,empcode,empname,
                       day_opno_t,
                       day_opmn_t,
                       mon_opno_t,
                       mon_opmn_t,
                       day_opno_c,
                       day_opmn_c,
                       mon_opno_c,
                       mon_opmn_c,
                       day_opno_i,
                       day_opmn_i,
                       mon_opno_i,
                       mon_opmn_i,

                       decode((day_opno_t+day_opno_c+day_opno_i),0,100,(round(day_opno_i/(day_opno_t+day_opno_c+day_opno_i)*100,4))) as percent_day_opno,
                       decode((day_opmn_t+day_opmn_c+day_opmn_i),0,100,(round(day_opmn_i/(day_opmn_t+day_opmn_c+day_opmn_i)*100,4))) as percent_day_opmn,
                       decode((mon_opno_t+mon_opno_c+mon_opno_i),0,100,(round(mon_opno_i/(mon_opno_t+mon_opno_c+mon_opno_i)*100,4))) as percent_mon_opno,
                       decode((mon_opmn_t+mon_opmn_c+mon_opmn_i),0,100,(round(mon_opmn_i/(mon_opmn_t+mon_opmn_c+mon_opmn_i)*100,4))) as percent_mon_opmn,

                       (day_opno_t+day_opno_c+day_opno_i) as day_opno,
                       (day_opmn_t+day_opmn_c+day_opmn_i) as day_opmn,
                       (mon_opno_t+mon_opno_c+mon_opno_i) as mon_opno,
                       (mon_opmn_t+mon_opmn_c+mon_opmn_i) as mon_opmn

                       from (
                           select
                           ta.customerunitcode,l.empname,d.dptname,l.empcode,
                           nvl(round(ta.opno),0) as day_opno_t,
                           nvl(ta.opmn,0) as day_opmn_t,
                           nvl(round(tb.opno),0) as mon_opno_t,
                           nvl(tb.opmn,0) as mon_opmn_t,
                           nvl(round(ca.opno),0) as day_opno_c,
                           nvl(ca.opmn,0) as day_opmn_c,
                           nvl(round(cb.opno),0) as mon_opno_c,
                           nvl(cb.opmn,0) as mon_opmn_c,
                           nvl(round(ia.opno),0) as day_opno_i,
                           nvl(ia.opmn,0) as day_opmn_i,
                           nvl(round(ib.opno),0) as mon_opno_i,
                           nvl(ib.opmn,0) as mon_opmn_i
                           from

                           (select a.empid  as driverno ,a.dptcode as deptno,a.empcode ,a.empname as empname,a.customerunitcode,a.postid from base_emp a) l
                           left join
                           (select * from base_dept) d
                           on l.deptno=d.dptcode
                           and l.customerunitcode=d.customerunitcode
                           --and d.dptcode=prmsearchvalue
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn ,  a.driveropno as driverno,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           --and a.dept_no=prmsearchvalue
                           group by a.driveropno,a.customerunitcode,a.dept_no)  ta

                           --on l.deptno=ta.deptno
                           on l.empcode=ta.driverno
                           and l.customerunitcode = ta.customerunitcode
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn , a.driveropno as driverno ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <=prmedate
                           and a.customerunitcode=prmcustomercode
                           --and a.dept_no=prmsearchvalue
                           group by   a.driveropno,a.customerunitcode,a.dept_no)  tb

                           --on l.deptno = tb.deptno
                           on l.empcode=tb.driverno
                           and l.customerunitcode = tb.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn , a.driveropno as driverno ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           --and a.dept_no=prmsearchvalue
                           group by  a.driveropno,a.customerunitcode,a.dept_no)  ca

                           --on l.deptno = ca.deptno
                           on l.empcode=ca.driverno
                           and l.customerunitcode = ca.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn , a.driveropno as driverno ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <=prmedate
                           and a.customerunitcode=prmcustomercode
                           --and a.dept_no=prmsearchvalue
                           group by   a.driveropno,a.customerunitcode,a.dept_no)  cb

                           --on l.deptno = cb.deptno
                           on l.empcode=cb.driverno
                           and l.customerunitcode = cb.customerunitcode
                           left join
                           (select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn ,driverno, customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.buslineid as lineno, a.customerunitcode,a.dptcode  as deptno,a.driverid as driverno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(prmsdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.driverno,a.customerunitcode,a.deptno
                           )  ia

                           on l.driverno = ia.driverno
                           --and l.deptno = ia.deptno
                           and l.customerunitcode = ia.customerunitcode
                           left join
                           (
                           select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn ,driverno,  customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.buslineid as lineno, a.customerunitcode,a.dptcode  as deptno,a.driverid as driverno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(v_monthfirstdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.driverno,a.customerunitcode,a.deptno
                           )  ib
                           --on l.deptno = ib.deptno
                           on l.driverno=ib.driverno
                           and l.customerunitcode = ib.customerunitcode
                           where l.postid=2
                           --and l.deptno=prmsearchvalue
                           order by l.driverno asc
                           );

             io_allrec := allrec;*/ 
            else   --部门
               open allrec for


                       select dptname,
                       day_opno_t,
                       day_opmn_t,
                       mon_opno_t,
                       mon_opmn_t,
                       day_opno_c,
                       day_opmn_c,
                       mon_opno_c,
                       mon_opmn_c,
                       day_opno_i,
                       day_opmn_i,
                       mon_opno_i,
                       mon_opmn_i,

                       decode((day_opno_t+day_opno_c+day_opno_i),0,100,(round(day_opno_i/(day_opno_t+day_opno_c+day_opno_i)*100,4))) as percent_day_opno,
                       decode((day_opmn_t+day_opmn_c+day_opmn_i),0,100,(round(day_opmn_i/(day_opmn_t+day_opmn_c+day_opmn_i)*100,4))) as percent_day_opmn,
                       decode((mon_opno_t+mon_opno_c+mon_opno_i),0,100,(round(mon_opno_i/(mon_opno_t+mon_opno_c+mon_opno_i)*100,4))) as percent_mon_opno,
                       decode((mon_opmn_t+mon_opmn_c+mon_opmn_i),0,100,(round(mon_opmn_i/(mon_opmn_t+mon_opmn_c+mon_opmn_i)*100,4))) as percent_mon_opmn,

                       (day_opno_t+day_opno_c+day_opno_i) as day_opno,
                       (day_opmn_t+day_opmn_c+day_opmn_i) as day_opmn,
                       (mon_opno_t+mon_opno_c+mon_opno_i) as mon_opno,
                       (mon_opmn_t+mon_opmn_c+mon_opmn_i) as mon_opmn

                       from (
                           select
                           ta.customerunitcode,d.dptname,
                           nvl(round(ta.opno),0) as day_opno_t,
                           nvl(ta.opmn,0) as day_opmn_t,
                           nvl(round(tb.opno),0) as mon_opno_t,
                           nvl(tb.opmn,0) as mon_opmn_t,
                           nvl(round(ca.opno),0) as day_opno_c,
                           nvl(ca.opmn,0) as day_opmn_c,
                           nvl(round(cb.opno),0) as mon_opno_c,
                           nvl(cb.opmn,0) as mon_opmn_c,
                           nvl(round(ia.opno),0) as day_opno_i,
                           nvl(ia.opmn,0) as day_opmn_i,
                           nvl(round(ib.opno),0) as mon_opno_i,
                           nvl(ib.opmn,0) as mon_opmn_i
                           from

                           (select a.dptcode as deptno,a.dptname as dptname ,a.dptcode_p,a.customerunitcode,a.issubcompany from base_dept a) d
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn , a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by a.customerunitcode,a.dept_no)  ta

                           on d.deptno=ta.deptno
                           and d.customerunitcode = ta.customerunitcode
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by  a.customerunitcode,a.dept_no)  tb

                           on d.deptno = tb.deptno
                           and d.customerunitcode = tb.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by  a.customerunitcode,a.dept_no)  ca

                           on d.deptno = ca.deptno
                           and d.customerunitcode = ca.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by  a.customerunitcode,a.dept_no)  cb

                           on d.deptno = cb.deptno
                           and d.customerunitcode = cb.customerunitcode
                           left join
                            (select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn , customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.customerunitcode,a.dptcode  as deptno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(prmsdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.customerunitcode,a.deptno
                           )  ia

                           on d.deptno = ia.deptno
                           and d.customerunitcode = ia.customerunitcode
                           left join
                           (
                           select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn , customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.customerunitcode,a.dptcode  as deptno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(v_monthfirstdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.customerunitcode,a.deptno
                           )  ib
                           on d.deptno = ib.deptno
                           and d.customerunitcode = ib.customerunitcode
                           where d.dptcode_p='001'
                           and d.issubcompany ='1'
                           order by d.deptno asc
                           );
                           io_allrec := allrec;
             end if;
      else   --参数部门的code　不为　root 时 　
             if prmdatakind = '0' then --线路
             open allrec for
               select dptname,linename,
                         day_opno_t,
                         day_opmn_t,
                         mon_opno_t,
                         mon_opmn_t,
                         day_opno_c,
                         day_opmn_c,
                         mon_opno_c,
                         mon_opmn_c,
                         day_opno_i,
                         day_opmn_i,
                         mon_opno_i,
                         mon_opmn_i,

                         decode((day_opno_t+day_opno_c+day_opno_i),0,100,(round(day_opno_i/(day_opno_t+day_opno_c+day_opno_i)*100,4))) as percent_day_opno,
                         decode((day_opmn_t+day_opmn_c+day_opmn_i),0,100,(round(day_opmn_i/(day_opmn_t+day_opmn_c+day_opmn_i)*100,4))) as percent_day_opmn,
                         decode((mon_opno_t+mon_opno_c+mon_opno_i),0,100,(round(mon_opno_i/(mon_opno_t+mon_opno_c+mon_opno_i)*100,4))) as percent_mon_opno,
                         decode((mon_opmn_t+mon_opmn_c+mon_opmn_i),0,100,(round(mon_opmn_i/(mon_opmn_t+mon_opmn_c+mon_opmn_i)*100,4))) as percent_mon_opmn,

                         (day_opno_t+day_opno_c+day_opno_i) as day_opno,
                         (day_opmn_t+day_opmn_c+day_opmn_i) as day_opmn,
                         (mon_opno_t+mon_opno_c+mon_opno_i) as mon_opno,
                         (mon_opmn_t+mon_opmn_c+mon_opmn_i) as mon_opmn

                          from
                          (select
                           ta.lineno,ta.customerunitcode,l.linename,d.dptname,
                           nvl(round(ta.opno),0) as day_opno_t,
                           nvl(ta.opmn,0) as day_opmn_t,
                           nvl(round(tb.opno),0) as mon_opno_t,
                           nvl(tb.opmn,0) as mon_opmn_t,
                           nvl(round(ca.opno),0) as day_opno_c,
                           nvl(ca.opmn,0) as day_opmn_c,
                           nvl(round(cb.opno),0) as mon_opno_c,
                           nvl(cb.opmn,0) as mon_opmn_c,
                           nvl(round(ia.opno),0) as day_opno_i,
                           nvl(ia.opmn,0) as day_opmn_i,
                           nvl(round(ib.opno),0) as mon_opno_i,
                           nvl(ib.opmn,0) as mon_opmn_i
                           from

                           (select a.lineid as lineno,a.dptcode as deptno,a.linename as linename,a.customerunitcode from base_busline a) l
                           left join
                           (select * from base_dept) d
                           on l.deptno=d.dptcode
                           and l.customerunitcode=d.customerunitcode
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn ,a.line_no as lineno ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by a.line_no,a.customerunitcode,a.dept_no)  ta
                           on l.lineno=ta.lineno
                           --and l.deptno=ta.deptno
                           and l.customerunitcode = ta.customerunitcode
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn ,a.line_no as lineno ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <=prmedate
                           and a.customerunitcode=prmcustomercode
                           group by a.line_no,a.customerunitcode,a.dept_no)  tb
                           on l.lineno = tb.lineno
                           --and l.deptno = tb.deptno
                           and l.customerunitcode = tb.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn ,a.line_no as lineno ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by a.line_no,a.customerunitcode,a.dept_no)  ca
                           on l.lineno = ca.lineno
                           --and l.deptno = ca.deptno
                           and l.customerunitcode = ca.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn ,a.line_no as lineno ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <= prmedate
                           and a.customerunitcode= prmcustomercode
                           group by a.line_no,a.customerunitcode,a.dept_no)  cb
                           on l.lineno = cb.lineno
                           --and l.deptno = cb.deptno
                           and l.customerunitcode = cb.customerunitcode
                           left join
                           (select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn ,lineno, customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.buslineid as lineno, a.customerunitcode,a.dptcode  as deptno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(prmsdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.lineno,a.customerunitcode,a.deptno
                           )  ia
                           on l.lineno = ia.lineno
                           --and l.deptno = ia.deptno
                           and l.customerunitcode = ia.customerunitcode
                           left join
                           (
                           select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn ,lineno, customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.buslineid as lineno, a.customerunitcode,a.dptcode  as deptno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(v_monthfirstdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.lineno,a.customerunitcode,a.deptno
                           )  ib
                           on l.lineno = ib.lineno
                           --and l.deptno = ib.deptno
                           and l.customerunitcode = ib.customerunitcode
                           where l.deptno = prmsearchvalue
                           order by l.lineno
                           );
                           io_allrec := allrec;
             elsif  prmdatakind = '1' then  --车辆
               open allrec for

                           select dptname,busno,
                                 day_opno_t,
                                 day_opmn_t,
                                 mon_opno_t,
                                 mon_opmn_t,
                                 day_opno_c,
                                 day_opmn_c,
                                 mon_opno_c,
                                 mon_opmn_c,
                                 day_opno_i,
                                 day_opmn_i,
                                 mon_opno_i,
                                 mon_opmn_i,

                       decode((day_opno_t+day_opno_c+day_opno_i),0,100,(round(day_opno_i/(day_opno_t+day_opno_c+day_opno_i)*100,4))) as percent_day_opno,
                       decode((day_opmn_t+day_opmn_c+day_opmn_i),0,100,(round(day_opmn_i/(day_opmn_t+day_opmn_c+day_opmn_i)*100,4))) as percent_day_opmn,
                       decode((mon_opno_t+mon_opno_c+mon_opno_i),0,100,(round(mon_opno_i/(mon_opno_t+mon_opno_c+mon_opno_i)*100,4))) as percent_mon_opno,
                       decode((mon_opmn_t+mon_opmn_c+mon_opmn_i),0,100,(round(mon_opmn_i/(mon_opmn_t+mon_opmn_c+mon_opmn_i)*100,4))) as percent_mon_opmn,

                                 (day_opno_t+day_opno_c+day_opno_i) as day_opno,
                                 (day_opmn_t+day_opmn_c+day_opmn_i) as day_opmn,
                                 (mon_opno_t+mon_opno_c+mon_opno_i) as mon_opno,
                                 (mon_opmn_t+mon_opmn_c+mon_opmn_i) as mon_opmn

                           from (select
                           ta.customerunitcode,b.busno,b.busnumber,
                           d.dptname,
                           nvl(round(ta.opno),0) as day_opno_t,
                           nvl(ta.opmn,0) as day_opmn_t,
                           nvl(round(tb.opno),0) as mon_opno_t,
                           nvl(tb.opmn,0) as mon_opmn_t,
                           nvl(round(ca.opno),0) as day_opno_c,
                           nvl(ca.opmn,0) as day_opmn_c,
                           nvl(round(cb.opno),0) as mon_opno_c,
                           nvl(cb.opmn,0) as mon_opmn_c,
                           nvl(round(ia.opno),0) as day_opno_i,
                           nvl(ia.opmn,0) as day_opmn_i,
                           nvl(round(ib.opno),0) as mon_opno_i,
                           nvl(ib.opmn,0) as mon_opmn_i
                           from
                           (select a.busno,a.busnumber,a.lineid as lineno,a.dptcode as deptno,a.customerunitcode  from base_bus a) b
                           --left join
                           --(select a.lineid as lineno,a.dptcode as deptno,a.linename as linename,a.customerunitcode from base_busline a) l
                           --on b.lineno = l.lineno
                           --and b.deptno = l.deptno
                           ---and b.customerunitcode = l.customerunitcode
                           ---and l.deptno=prmsearchvalue
                           left join
                           (select * from base_dept) d
                           on b.deptno=d.dptcode
                           and b.customerunitcode=d.customerunitcode
                           ---and d.dptcode=prmsearchvalue
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn , a.bus_no as busno , a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode= prmcustomercode
                           and a.dept_no=prmsearchvalue
                           group by a.bus_no , a.customerunitcode,a.dept_no)  ta
                           on b.busnumber=ta.busno
                           --and l.lineno=ta.lineno
                           --and l.deptno=ta.deptno
                           and b.customerunitcode = ta.customerunitcode
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn , a.bus_no as busno , a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <= prmedate
                           and a.customerunitcode= prmcustomercode
                           and a.dept_no=prmsearchvalue
                           group by  a.bus_no , a.customerunitcode,a.dept_no)  tb
                           on b.busnumber=tb.busno
                           --and l.lineno = tb.lineno
                           --and l.deptno = tb.deptno
                           and b.customerunitcode = tb.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn , a.bus_no as busno , a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode= prmcustomercode
                           and a.dept_no=prmsearchvalue
                           group by  a.bus_no  , a.customerunitcode,a.dept_no)  ca
                           on b.busnumber=ca.busno
                           --and l.lineno = ca.lineno
                           --and l.deptno = ca.deptno
                           and b.customerunitcode = ca.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn , a.bus_no as busno , a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <=prmedate
                           and a.customerunitcode= prmcustomercode
                           and a.dept_no=prmsearchvalue
                           group by  a.bus_no  , a.customerunitcode,a.dept_no)  cb
                           on b.busnumber=cb.busno
                           --and l.lineno = cb.lineno
                           --and l.deptno = cb.deptno
                           and b.customerunitcode = cb.customerunitcode
                           left join
                           (select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn ,busno,  customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.buslineid as lineno, a.customerunitcode,a.dptcode  as deptno,a.busid as busno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(prmsdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.busno, a.customerunitcode,a.deptno
                           )  ia
                           on b.busno = ia.busno
                           --and l.lineno = ia.lineno
                           --and l.deptno = ia.deptno
                           and b.customerunitcode = ia.customerunitcode
                           left join
                           (
                           select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn ,busno, customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.buslineid as lineno, a.customerunitcode,a.dptcode  as deptno,a.busid as busno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(v_monthfirstdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.busno, a.customerunitcode,a.deptno
                           )  ib
                           on b.busno = ib.busno
                           --and l.lineno = ib.lineno
                           --and l.deptno = ib.deptno
                           and b.customerunitcode = ib.customerunitcode
                           where b.deptno=prmsearchvalue
                           order by b.busno
                           );

             io_allrec := allrec;

             elsif  prmdatakind = '2' then --司机
                 open allrec for

                 select *
                      from (select dptname,
                                   empcode,
                                   empname,
                                   day_opno_t,
                                   day_opmn_t,
                                   mon_opno_t,
                                   mon_opmn_t,
                                   day_opno_c,
                                   day_opmn_c,
                                   mon_opno_c,
                                   mon_opmn_c,
                                   day_opno_i,
                                   day_opmn_i,
                                   mon_opno_i,
                                   mon_opmn_i,
                                   
                                   decode((day_opno_t + day_opno_c + day_opno_i),
                                          0,
                                          100,
                                          (round(day_opno_i /
                                                 (day_opno_t + day_opno_c + day_opno_i) * 100,
                                                 4))) as percent_day_opno,
                                   decode((day_opmn_t + day_opmn_c + day_opmn_i),
                                          0,
                                          100,
                                          (round(day_opmn_i /
                                                 (day_opmn_t + day_opmn_c + day_opmn_i) * 100,
                                                 4))) as percent_day_opmn,
                                   decode((mon_opno_t + mon_opno_c + mon_opno_i),
                                          0,
                                          100,
                                          (round(mon_opno_i /
                                                 (mon_opno_t + mon_opno_c + mon_opno_i) * 100,
                                                 4))) as percent_mon_opno,
                                   decode((mon_opmn_t + mon_opmn_c + mon_opmn_i),
                                          0,
                                          100,
                                          (round(mon_opmn_i /
                                                 (mon_opmn_t + mon_opmn_c + mon_opmn_i) * 100,
                                                 4))) as percent_mon_opmn,
                                   
                                   (day_opno_t + day_opno_c + day_opno_i) as day_opno,
                                   (day_opmn_t + day_opmn_c + day_opmn_i) as day_opmn,
                                   (mon_opno_t + mon_opno_c + mon_opno_i) as mon_opno,
                                   (mon_opmn_t + mon_opmn_c + mon_opmn_i) as mon_opmn
                            
                              from (select l.customerunitcode,
                                           l.empname,
                                           (select d.dptname
                                              from base_dept d
                                             where d.dptcode = prmsearchvalue
                                               and d.customerunitcode = '08600000001') dptname,
                                           l.userid empcode,
                                           nvl(round(ta.opno), 0) as day_opno_t,
                                           nvl(ta.opmn, 0) as day_opmn_t,
                                           nvl(round(tb.opno), 0) as mon_opno_t,
                                           nvl(tb.opmn, 0) as mon_opmn_t,
                                           nvl(round(ca.opno), 0) as day_opno_c,
                                           nvl(ca.opmn, 0) as day_opmn_c,
                                           nvl(round(cb.opno), 0) as mon_opno_c,
                                           nvl(cb.opmn, 0) as mon_opmn_c,
                                           nvl(round(ia.opno), 0) as day_opno_i,
                                           nvl(ia.opmn, 0) as day_opmn_i,
                                           nvl(round(ib.opno), 0) as mon_opno_i,
                                           nvl(ib.opmn, 0) as mon_opmn_i
                                      from (select a.empid            as driverno,
                                                   a.empcode,
                                                   a.userid,
                                                   a.empname          as empname,
                                                   a.customerunitcode,
                                                   a.postid
                                              from base_emp a
                                             where a.postid = 2
                                               and isdelete = 0) l
                                      left join (select sum(a.totalmoney) as opno,
                                                       sum(a.totalmoney) as opmn,
                                                       a.driveropno as driverno,
                                                       a.customerunitcode
                                                  from rec_cash_input_tickets a
                                                 where a.input_date >= prmsdate
                                                   and a.input_date <= prmedate
                                                   and a.customerunitcode = prmcustomercode
                                                   and a.dept_no = prmsearchvalue
                                                 group by a.driveropno, a.customerunitcode) ta
                                        on l.userid = ta.driverno
                                       and l.customerunitcode = ta.customerunitcode
                                    
                                      left join (select sum(a.totalmoney) as opno,
                                                       sum(a.totalmoney) as opmn,
                                                       a.driveropno as driverno,
                                                       a.customerunitcode
                                                  from rec_cash_input_tickets a
                                                 where a.input_date >= v_monthfirstdate
                                                   and a.input_date <= prmedate
                                                   and a.customerunitcode =prmcustomercode
                                                   and a.dept_no =prmsearchvalue
                                                 group by a.driveropno, a.customerunitcode) tb
                                        on l.userid = tb.driverno
                                       and l.customerunitcode = tb.customerunitcode
                                    
                                      left join (select sum(a.day_totalmoney) as opno,
                                                       sum(a.day_totalmoney) as opmn,
                                                       a.driveropno as driverno,
                                                       a.customerunitcode
                                                  from rec_cash_input_today a
                                                 where a.input_date >= prmsdate
                                                   and a.input_date <= prmedate
                                                   and a.customerunitcode = prmcustomercode
                                                   and a.dept_no = prmsearchvalue
                                                 group by a.driveropno, a.customerunitcode) ca
                                        on l.userid = ca.driverno
                                       and l.customerunitcode = ca.customerunitcode
                                    
                                      left join (select sum(a.day_totalmoney) as opno,
                                                       sum(a.day_totalmoney) as opmn,
                                                       a.driveropno as driverno,
                                                       a.customerunitcode
                                                  from rec_cash_input_today a
                                                 where a.input_date >= v_monthfirstdate
                                                   and a.input_date <= prmedate
                                                   and a.customerunitcode =prmcustomercode
                                                   and a.dept_no =prmsearchvalue
                                                 group by a.driveropno, a.customerunitcode) cb
                                        on l.userid = cb.driverno
                                       and l.customerunitcode = cb.customerunitcode
                                    
                                      left join (select sum(opno) as opno,
                                                       sum(trunc(opmn, 2)) as opmn,
                                                       driverno,
                                                       customerunitcode
                                                  from (select (a.operno) as opno,
                                                               decode(a.acccode,
                                                                      '201',
                                                                      a.opermn,
                                                                      '203',
                                                                      a.opermn * param_b.paramvalue / param_a.paramvalue) as opmn,
                                                               a.buslineid as lineno,
                                                               a.customerunitcode,
                                                               a.driverid as driverno
                                                          from st_payment_consum_day a
                                                          left join base_param param_a
                                                            on param_a.paramname =
                                                               'monthtopuptimes'
                                                           and param_a.customerunitcode =
                                                               a.customerunitcode
                                                           and a.cardtype = param_a.paramgroupid
                                                          left join base_param param_b
                                                            on param_b.paramname =
                                                               'mintopupfarebypermonth'
                                                           and param_b.customerunitcode =
                                                               a.customerunitcode
                                                           and a.cardtype = param_b.paramgroupid
                                                        
                                                         where a.statdate >=
                                                               to_date(prmsdate, 'yyyymmdd')
                                                           and a.statdate <=
                                                               to_date(prmedate, 'yyyymmdd')
                                                           and a.customerunitcode = prmcustomercode
                                                          and a.dptcode = prmsearchvalue
                                                           and a.acccode in ('201', '203')) a
                                                 group by a.driverno, a.customerunitcode) ia
                                    
                                        on l.driverno = ia.driverno
                                       and l.customerunitcode = ia.customerunitcode
                                    
                                      left join (select sum(opno) as opno,
                                                       sum(trunc(opmn, 2)) as opmn,
                                                       driverno,
                                                       customerunitcode
                                                  from (select (a.operno) as opno,
                                                               decode(a.acccode,
                                                                      '201',
                                                                      a.opermn,
                                                                      '203',
                                                                      a.opermn * param_b.paramvalue / param_a.paramvalue) as opmn,
                                                               a.buslineid as lineno,
                                                               a.customerunitcode,
                                                               a.driverid as driverno
                                                          from st_payment_consum_day a
                                                          left join base_param param_a
                                                            on param_a.paramname =
                                                               'monthtopuptimes'
                                                           and param_a.customerunitcode =
                                                               a.customerunitcode
                                                           and a.cardtype = param_a.paramgroupid
                                                          left join base_param param_b
                                                            on param_b.paramname =
                                                               'mintopupfarebypermonth'
                                                           and param_b.customerunitcode =
                                                               a.customerunitcode
                                                           and a.cardtype = param_b.paramgroupid
                                                        
                                                         where a.statdate >=
                                                               to_date(v_monthfirstdate, 'yyyymmdd')
                                                           and a.statdate <=
                                                               to_date(prmedate, 'yyyymmdd')
                                                           and a.customerunitcode =prmcustomercode
                                                           and a.dptcode = prmsearchvalue
                                                           and a.acccode in ('201', '203')) a
                                                 group by a.driverno, a.customerunitcode) ib
                                        on l.driverno = ib.driverno
                                       and l.customerunitcode = ib.customerunitcode
                                     order by l.driverno asc))
                     where day_opmn <> 0
                       and mon_opmn <> 0 ;

             io_allrec := allrec;
             else   --部门
               open allrec for


                       select dptname,
                       day_opno_t,
                       day_opmn_t,
                       mon_opno_t,
                       mon_opmn_t,
                       day_opno_c,
                       day_opmn_c,
                       mon_opno_c,
                       mon_opmn_c,
                       day_opno_i,
                       day_opmn_i,
                       mon_opno_i,
                       mon_opmn_i,

                       decode((day_opno_t+day_opno_c+day_opno_i),0,100,(round(day_opno_i/(day_opno_t+day_opno_c+day_opno_i)*100,4))) as percent_day_opno,
                       decode((day_opmn_t+day_opmn_c+day_opmn_i),0,100,(round(day_opmn_i/(day_opmn_t+day_opmn_c+day_opmn_i)*100,4))) as percent_day_opmn,
                       decode((mon_opno_t+mon_opno_c+mon_opno_i),0,100,(round(mon_opno_i/(mon_opno_t+mon_opno_c+mon_opno_i)*100,4))) as percent_mon_opno,
                       decode((mon_opmn_t+mon_opmn_c+mon_opmn_i),0,100,(round(mon_opmn_i/(mon_opmn_t+mon_opmn_c+mon_opmn_i)*100,4))) as percent_mon_opmn,

                       (day_opno_t+day_opno_c+day_opno_i) as day_opno,
                       (day_opmn_t+day_opmn_c+day_opmn_i) as day_opmn,
                       (mon_opno_t+mon_opno_c+mon_opno_i) as mon_opno,
                       (mon_opmn_t+mon_opmn_c+mon_opmn_i) as mon_opmn

                       from (
                           select
                           ta.customerunitcode,d.dptname,
                           nvl(round(ta.opno),0) as day_opno_t,
                           nvl(ta.opmn,0) as day_opmn_t,
                           nvl(round(tb.opno),0) as mon_opno_t,
                           nvl(tb.opmn,0) as mon_opmn_t,
                           nvl(round(ca.opno),0) as day_opno_c,
                           nvl(ca.opmn,0) as day_opmn_c,
                           nvl(round(cb.opno),0) as mon_opno_c,
                           nvl(cb.opmn,0) as mon_opmn_c,
                           nvl(round(ia.opno),0) as day_opno_i,
                           nvl(ia.opmn,0) as day_opmn_i,
                           nvl(round(ib.opno),0) as mon_opno_i,
                           nvl(ib.opmn,0) as mon_opmn_i
                           from

                           (select a.dptcode as deptno,a.dptname as dptname ,a.customerunitcode from base_dept a) d
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn , a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by a.customerunitcode,a.dept_no)  ta

                           on d.deptno=ta.deptno
                           and d.customerunitcode = ta.customerunitcode
                           left join
                           (select sum(a.totalmoney) as opno,sum(a.totalmoney) as opmn ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_tickets a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by  a.customerunitcode,a.dept_no)  tb

                           on d.deptno = tb.deptno
                           and d.customerunitcode = tb.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= prmsdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by  a.customerunitcode,a.dept_no)  ca

                           on d.deptno = ca.deptno
                           and d.customerunitcode = ca.customerunitcode
                           left join
                           (select sum(a.day_totalmoney) as opno,sum(a.day_totalmoney) as opmn ,a.customerunitcode,a.dept_no as deptno
                           from rec_cash_input_today a
                           where a.input_date >= v_monthfirstdate
                           and a.input_date <= prmedate
                           and a.customerunitcode=prmcustomercode
                           group by  a.customerunitcode,a.dept_no)  cb

                           on d.deptno = cb.deptno
                           and d.customerunitcode = cb.customerunitcode
                           left join
                            (select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn , customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.customerunitcode,a.dptcode  as deptno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(prmsdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.customerunitcode,a.deptno
                           )  ia

                           on d.deptno = ia.deptno
                           and d.customerunitcode = ia.customerunitcode
                           left join
                           (
                           select  sum(opno) as opno ,sum(trunc(opmn,2)) as opmn , customerunitcode, deptno from(
                           select (a.operno) as opno ,decode(a.acccode,'201',a.opermn,'203',a.opermn*param_b.paramvalue/param_a.paramvalue) as opmn ,
                           a.customerunitcode,a.dptcode  as deptno
                           from st_payment_consum_day a
                           left join    base_param param_a
                           on param_a.paramname ='monthtopuptimes'
                           and param_a.customerunitcode=a.customerunitcode
                           and a.cardtype =param_a.paramgroupid
                           left join    base_param param_b
                           on param_b.paramname ='mintopupfarebypermonth'
                           and param_b.customerunitcode=a.customerunitcode
                           and a.cardtype =param_b.paramgroupid

                           where a.statdate >=to_date(v_monthfirstdate,'yyyymmdd')
                           and  a.statdate <=to_date(prmedate,'yyyymmdd')
                           and a.customerunitcode=prmcustomercode
                           and a.acccode in('201','203')) a
                           group by a.customerunitcode,a.deptno
                           )  ib
                           on d.deptno = ib.deptno
                           and d.customerunitcode = ib.customerunitcode
                           where d.deptno = prmsearchvalue
                           and   d.customerunitcode = prmcustomercode
                           order by d.deptno asc
                           );
                           io_allrec := allrec;
             end if;
      end if;
    end;

     procedure rpt_consumedetailquery (
      prmdatakind       in       varchar2,
      prmsearchkind     in       varchar2,
      prmsearchvalue    in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      prmdeptcode       in       varchar2,
      io_allrec        out      ref_cursor
   )
    as
      allrec          ref_cursor;
      v_deptcode      varchar2 (9);
    begin
          if prmdeptcode = 'root' then
             v_deptcode:='001';
          else
            v_deptcode:=prmdeptcode;
          end if;

        if prmdatakind = '0' then --线路
             open allrec for

             select dptname,linename,detailname,round(elec_opno),elec_opmn,round(mon_opno),mon_opmn　　from (
              --投币数据
              select cast(cash.dept_name as  nvarchar2(20)) as dptname
              ,cash.line_name as linename
              ,cash.detailname
              ,dept_no as dptcode
              ,cast(line_no as number) as lineid
                ,cardtype
              ,nvl(cash.elec_opno,0) as elec_opno
              ,nvl(cash.elec_opmn,0) as elec_opmn
              ,nvl(cash.mon_opno,0) as mon_opno
              ,nvl(cash.mon_opmn,0) as mon_opmn
              from
              (
              select a.customerunitcode,a.dept_no,a.dept_name,a.line_no,a.line_name,'投币' as detailname,0 as cardtype,
              sum(day_totalmoney) as elec_opno,sum(day_totalmoney) as elec_opmn,0 mon_opno,0 as mon_opmn
              from rec_cash_input_businfo a
              left join  rec_cash_input_today b
              on a.line_no =b.line_no
              and a.dept_no=b.dept_no
              and a.bus_no=b.bus_no
              and a.customerunitcode=b.customerunitcode
              where a.customerunitcode = prmcustomercode
              and b.input_date >= prmsdate
              and b.input_date <= prmedate
              and a.dept_no  in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
              group by a.customerunitcode,a.dept_no,a.dept_name, a.line_no,a.line_name) cash
              union
              --有人售票数据
              select cast(ticket.dept_name as  nvarchar2(20)) as dptname
              ,ticket.line_name as linename
              ,ticket.detailname
              ,dept_no as dptcode
              ,cast(line_no as number) as lineid
              ,cardtype
              ,nvl(ticket.elec_opno,0) as elec_opno
              ,nvl(ticket.elec_opmn,0) as elec_opmn
              ,nvl(ticket.mon_opno,0) as mon_opno
              ,nvl(ticket.mon_opmn,0) as mon_opmn
              from (
              select a.customerunitcode,a.dept_no,a.dept_name,a.line_no,a.line_name,'售票' as detailname,0 as cardtype ,
              sum(totalmoney) as elec_opno,sum(totalmoney) as elec_opmn,0 mon_opno,0 as mon_opmn
              from rec_cash_input_businfo a
              left join  rec_cash_input_tickets b
              on a.line_no =b.line_no
              and a.dept_no=b.dept_no
              and a.bus_no=b.bus_no
              and a.customerunitcode=b.customerunitcode
              where a.customerunitcode = prmcustomercode
              and b.input_date >= prmsdate
              and b.input_date <= prmedate
              and a.dept_no  in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
              group by a.customerunitcode,a.dept_no,a.dept_name, a.line_no,a.line_name) ticket

              union
              --刷卡数据  电子钱包和月票
              select elect.dptname
              ,elect.linename
              ,elect.detailname
              ,elect.dptcode
              ,elect.lineid
              ,elect.cardtype
              ,elec_opno
              ,trunc(elec_opmn,2) as elec_opmn
              ,mon_opno
              ,trunc((elect.mon_opmn) ,2) as mon_opmn
               from (                 --电子钱包
               select
               c.dptname, a.linename,d.detailname, a.dptcode,a.lineid,b.cardtype,a.customerunitcode,
               sum(decode(b.acccode ,'201',nvl(b.operno,0),0)) as elec_opno,
               sum(decode(b.acccode ,'201',nvl(b.opermn,0),0)) as elec_opmn,
               sum(decode(b.acccode ,'203',nvl(b.operno,0),0)) as mon_opno,
               sum(decode(b.acccode ,'203',trunc(nvl(b.opermn,0)*param_b.paramvalue/param_a.paramvalue,2),0)) as mon_opmn,
               nvl(param_b.paramvalue/param_a.paramvalue,0) as rate
               from base_busline a
               left join  base_dept c
               on a.dptcode=c.dptcode
               and a.customerunitcode=c.customerunitcode
               left join  st_payment_consum_day b
               on a.lineid=b.buslineid
               and a.customerunitcode=b.customerunitcode
              -- left join
              inner join--hff 20170406
               table( split(prmsearchvalue) )　ct
               on ct.column_value= b.cardtype
               left join
               (
               select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
               a.paragroupid, a.walletusetype, a.isvisible, a.cashyearcheckmons,
               a.customerunitcode
               from base_cardtype_detail_temp a
               where a.customerunitcode = prmcustomercode
                union
               select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
               a.paragroupid, a.walletusetype, a.isvisible, a.cashyearcheckmons,
               prmcustomercode as customerunitcode
               from base_cardtype_detail a
               where a.detailid not in (select detailid from base_cardtype_detail_temp where customerunitcode = prmcustomercode )
               ) d

               on b.cardtype= d.detailid
               and b.customerunitcode=d.customerunitcode
               left join base_param param_a
               on param_a.paramname ='monthtopuptimes'
               and b.cardtype = param_a.paramgroupid
               and b.customerunitcode = param_a.customerunitcode
               left join base_param param_b
               on param_b.paramname ='mintopupfarebypermonth'
               and param_b.customerunitcode=b.customerunitcode
               and b.cardtype =param_b.paramgroupid

               where a.customerunitcode= prmcustomercode
               and b.acccode in ( '201','203')
               and b.statdate >= to_date(prmsdate,'yyyymmdd')
               and b.statdate <= to_date(prmedate,'yyyymmdd')
               group by a.customerunitcode,a.dptcode, c.dptname,a.lineid,a.linename,b.cardtype,d.detailname
               ,param_a.paramvalue,param_b.paramvalue
               ) elect

               where  elect.dptcode in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
               )
               order by dptcode,lineid,cardtype;

             io_allrec := allrec;
             elsif  prmdatakind = '1' then  --车辆
               open allrec for

               select  dptname,linename,busno,detailname,round(elec_opno),elec_opmn,round(mon_opno),mon_opmn　　
               from (
              --投币数据
              select cast(cash.dept_name as  nvarchar2(20)) as dptname
              ,cash.line_name as linename
              ,cash.detailname
              ,dept_no as dptcode
              ,cast(line_no as number) as lineid
              ,busno
                ,cardtype
              ,nvl(cash.elec_opno,0) as elec_opno
              ,nvl(cash.elec_opmn,0) as elec_opmn
              ,nvl(cash.mon_opno,0) as mon_opno
              ,nvl(cash.mon_opmn,0) as mon_opmn
              from
              (
              select a.customerunitcode,a.dept_no,a.dept_name,a.line_no,a.line_name,
              a.busnumber as busno,
              '投币' as detailname,0 as cardtype,
              sum(day_totalmoney) as elec_opno,sum(day_totalmoney) as elec_opmn,0 mon_opno,0 as mon_opmn
              from rec_cash_input_businfo a
              left join  rec_cash_input_today b
              on a.line_no =b.line_no
              and a.dept_no=b.dept_no
              and a.busnumber= b.bus_no
              and a.customerunitcode=b.customerunitcode
              where a.customerunitcode = prmcustomercode
              and b.input_date >=prmsdate
              and b.input_date <=prmedate
              and a.dept_no  in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
              group by a.customerunitcode,a.dept_no,a.dept_name, a.line_no,a.line_name,a.busnumber) cash
              union
              --有人售票数据
              select cast(ticket.dept_name as  nvarchar2(20)) as dptname
              ,ticket.line_name as linename
              ,ticket.detailname
              ,dept_no as dptcode
              ,cast(line_no as number) as lineid
              ,busno
              ,cardtype
              ,nvl(ticket.elec_opno,0) as elec_opno
              ,nvl(ticket.elec_opmn,0) as elec_opmn
              ,nvl(ticket.mon_opno,0) as mon_opno
              ,nvl(ticket.mon_opmn,0) as mon_opmn
              from (
              select a.customerunitcode,a.dept_no,a.dept_name,a.line_no
              ,a.busnumber as busno
              ,a.line_name,'售票' as detailname,0 as cardtype ,
              sum(totalmoney) as elec_opno,sum(totalmoney) as elec_opmn,0 mon_opno,0 as mon_opmn
              from rec_cash_input_businfo a
              left join  rec_cash_input_tickets b
              on a.line_no =b.line_no
              and a.dept_no=b.dept_no
              and a.busnumber= b.bus_no
              and a.customerunitcode=b.customerunitcode
              where a.customerunitcode = prmcustomercode
              and b.input_date >=prmsdate
              and b.input_date <=prmedate
               and a.dept_no  in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
              group by a.customerunitcode,a.dept_no,a.dept_name, a.line_no,a.line_name, a.busnumber) ticket

              union
              --刷卡数据  电子钱包和月票
              select elect.dptname
              ,elect.linename
              ,elect.detailname
              ,elect.dptcode
              ,elect.lineid
              ,busno
              ,elect.cardtype
              ,elec_opno
              ,trunc(elec_opmn,2) elec_opmn
              ,mon_opno
              ,trunc((elect.mon_opmn) ,2) as mon_opmn
               from (                 --电子钱包
               select
               c.dptname, a.linename,d.detailname, e.dptcode,e.lineid,e.busnumber as busno,b.cardtype,e.customerunitcode,
               sum(decode(b.acccode ,'201',nvl(b.operno,0),0)) as elec_opno,
               sum(decode(b.acccode ,'201',nvl(b.opermn,0),0)) as elec_opmn,
               sum(decode(b.acccode ,'203',nvl(b.operno,0),0)) as mon_opno,
               sum(decode(b.acccode ,'203',trunc(nvl(b.opermn,0)*param_b.paramvalue/param_a.paramvalue,2),0)) as mon_opmn,
               nvl(param_b.paramvalue/param_a.paramvalue,0) as rate
               from base_bus e
               left join  base_busline a
               on e.lineid=a.lineid
               and e.customerunitcode=a.customerunitcode
               left join  base_dept c
               on e.dptcode=c.dptcode
               and e.customerunitcode=c.customerunitcode
               left join  st_payment_consum_day b
               on e.lineid=b.buslineid
               and e.busno =b.busid
               and e.customerunitcode=b.customerunitcode
              -- left join
               inner join--hff 20170406
               table( split(prmsearchvalue) )　ct
               on ct.column_value= b.cardtype
               left join
               (
               select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
               a.paragroupid, a.walletusetype, a.isvisible, a.cashyearcheckmons,
               a.customerunitcode
               from base_cardtype_detail_temp a
               where a.customerunitcode = prmcustomercode
                union
               select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
               a.paragroupid, a.walletusetype, a.isvisible, a.cashyearcheckmons,
               prmcustomercode as customerunitcode
               from base_cardtype_detail a
               where a.detailid not in (select detailid from base_cardtype_detail_temp where customerunitcode = prmcustomercode )
               ) d
               on b.cardtype= d.detailid
               and b.customerunitcode=d.customerunitcode

               left join base_param param_a
               on param_a.paramname ='monthtopuptimes'
               and b.cardtype = param_a.paramgroupid
               and b.customerunitcode = param_a.customerunitcode
               left join base_param param_b
               on param_b.paramname ='mintopupfarebypermonth'
               and param_b.customerunitcode=b.customerunitcode
               and b.cardtype =param_b.paramgroupid

               where a.customerunitcode= prmcustomercode
               and b.acccode in ('201','203')
               and b.statdate >= to_date(prmsdate,'yyyymmdd')
               and b.statdate <= to_date(prmedate,'yyyymmdd')
               --and e.dptcode = prmsearchvalue
               group by e.customerunitcode,e.dptcode, c.dptname,e.lineid,a.linename,b.cardtype,d.detailname,e.busno,e.busnumber
               ,param_a.paramvalue,param_b.paramvalue
               order by e.dptcode,e.lineid,e.busnumber
               ) elect

               where  elect.dptcode in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
               )
               order by dptcode,lineid,busno,cardtype;

             io_allrec := allrec;

             elsif  prmdatakind = '2' then --司机
               open allrec for


             select dptname,empcode,drivername,detailname,round(elec_opno),elec_opmn,round(mon_opno),mon_opmn　from (
              --投币数据
              select   dptname,empcode
              ,cash.drivername
              ,cash.detailname
              ,dptcode
                ,cardtype
              ,nvl(cash.elec_opno,0) as elec_opno
              ,nvl(cash.elec_opmn,0) as elec_opmn
              ,nvl(cash.mon_opno,0) as mon_opno
              ,nvl(cash.mon_opmn,0) as mon_opmn
              from
              (
              select a.customerunitcode,c.dptcode,c.dptname,a.drivername, '投币' as detailname,0 as cardtype,a.driveropno as empcode,
              sum(day_totalmoney) as elec_opno
              ,sum(day_totalmoney) as elec_opmn
              ,0 mon_opno,0 as mon_opmn
              from rec_cash_input_driverinfo a
              left join  rec_cash_input_today b
              on a.driveropno = b.driveropno
              and a.dept_no = b.dept_no
              and a.customerunitcode = b.customerunitcode
              join base_dept c
              on c.dptcode = a.dept_no
              and c.customerunitcode = a.customerunitcode
              where a.customerunitcode = prmcustomercode
              and b.input_date >=prmsdate
              and b.input_date <=prmedate
              --and a.dept_no= prmsearchvalue
              and a.dept_no  in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
              group by a.customerunitcode,c.dptcode,c.dptname, a.driveropno ,a.drivername) cash
              union
              --有人售票数据
              select  dptname ,empcode
              ,ticket.drivername
              ,ticket.detailname
              ,dptcode
              ,cardtype
              ,nvl(ticket.elec_opno,0) as elec_opno
              ,nvl(ticket.elec_opmn,0) as elec_opmn
              ,nvl(ticket.mon_opno,0) as mon_opno
              ,nvl(ticket.mon_opmn,0) as mon_opmn
              from (
              select a.customerunitcode,c.dptcode,c.dptname,a.drivername,'售票' as detailname,0 as cardtype ,a.driveropno as empcode,
              sum(totalmoney) as elec_opno,sum(totalmoney) as elec_opmn,0 mon_opno,0 as mon_opmn
              from rec_cash_input_driverinfo a
              left join  rec_cash_input_tickets b
              on a.driveropno = b.driveropno
              and a.dept_no=b.dept_no
              and a.customerunitcode=b.customerunitcode
              join base_dept c
              on c.dptcode = a.dept_no
              and c.customerunitcode = a.customerunitcode
              where a.customerunitcode = prmcustomercode
              and b.input_date >=prmsdate
              and b.input_date <=prmedate
              --and a.dept_no= prmsearchvalue
              and a.dept_no  in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
              group by a.customerunitcode,c.dptcode,c.dptname,a.driveropno ,a.drivername) ticket

              union
              --刷卡数据  电子钱包和月票
              select elect.dptname, elect.empcode,elect.drivername
              ,elect.detailname
              ,elect.dptcode
              ,elect.cardtype
              ,elec_opno
              ,trunc(elec_opmn,2) elec_opmn
              ,mon_opno
              ,trunc((elect.mon_opmn) ,2) as mon_opmn
               from (                 --电子钱包
               select
               c.dptname,d.detailname,a.dptcode,b.cardtype,a.customerunitcode,a.empcode,a.empname as drivername,
               sum(decode(b.acccode ,'201',nvl(b.operno,0),0)) as elec_opno,
               sum(decode(b.acccode ,'201',nvl(b.opermn,0),0)) as elec_opmn,
               sum(decode(b.acccode ,'203',nvl(b.operno,0),0)) as mon_opno,
               sum(decode(b.acccode ,'203',trunc(nvl(b.opermn,0)*param_b.paramvalue/param_a.paramvalue,2),0)) as mon_opmn,
               nvl(param_b.paramvalue/param_a.paramvalue,0) as rate
               from base_emp a
               left join  base_dept c
               on a.dptcode=c.dptcode
               and a.customerunitcode=c.customerunitcode
               left join  st_payment_consum_day b
               on a.empid=b.driverid
               and a.customerunitcode=b.customerunitcode
               --left join
                inner join--hff 20170406
               table( split(prmsearchvalue) )　ct
               on ct.column_value= b.cardtype
               left join
               (
               select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
               a.paragroupid, a.walletusetype, a.isvisible, a.cashyearcheckmons,
               a.customerunitcode
               from base_cardtype_detail_temp a
               where a.customerunitcode = prmcustomercode
                union
               select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
               a.paragroupid, a.walletusetype, a.isvisible, a.cashyearcheckmons,
               prmcustomercode as customerunitcode
               from base_cardtype_detail a
               where a.detailid not in (select detailid from base_cardtype_detail_temp where customerunitcode = prmcustomercode )
               ) d
               on b.cardtype= d.detailid
               and b.customerunitcode=d.customerunitcode

               left join base_param param_a
               on param_a.paramname ='monthtopuptimes'
               and b.cardtype = param_a.paramgroupid
               and b.customerunitcode = param_a.customerunitcode
               left join base_param param_b
               on param_b.paramname ='mintopupfarebypermonth'
               and param_b.customerunitcode=b.customerunitcode
               and b.cardtype =param_b.paramgroupid

               where a.customerunitcode= prmcustomercode
               and b.acccode in ('201','203')
               and b.statdate >= to_date(prmsdate,'yyyymmdd')
               and b.statdate <= to_date(prmedate,'yyyymmdd')
               --and a.dptcode = prmsearchvalue
               group by a.customerunitcode,a.dptcode, c.dptname,a.empid,a.empcode,a.empname,b.cardtype,d.detailname
               ,param_a.paramvalue,param_b.paramvalue
               ) elect

               where  elect.dptcode in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
               )
               order by dptcode,empcode,cardtype;

             io_allrec := allrec;
             else   --部门
               open allrec for

             select dptname,detailname,round(elec_opno),elec_opmn,round(mon_opno),mon_opmn　from (
              --投币数据
              select   dptname
              ,cash.detailname
              ,dptcode
                ,cardtype
              ,nvl(cash.elec_opno,0) as elec_opno
              ,nvl(cash.elec_opmn,0) as elec_opmn
              ,nvl(cash.mon_opno,0) as mon_opno
              ,nvl(cash.mon_opmn,0) as mon_opmn
              from
              (
              select b.customerunitcode,c.dptcode,c.dptname, '投币' as detailname,0 as cardtype,
              sum(day_totalmoney) as elec_opno
              ,sum(day_totalmoney) as elec_opmn
              ,0 mon_opno,0 as mon_opmn
              from  base_dept c
              join
              rec_cash_input_today b
              on c.dptcode = b.dept_no
              and c.customerunitcode = b.customerunitcode
              where c.customerunitcode = prmcustomercode
              and b.input_date >=prmsdate
              and b.input_date <=prmedate
              and b.dept_no  in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
              group by b.customerunitcode,c.dptcode,c.dptname) cash
              union
              --有人售票数据
              select  dptname
              ,ticket.detailname
              ,dptcode
              ,cardtype
              ,nvl(ticket.elec_opno,0) as elec_opno
              ,nvl(ticket.elec_opmn,0) as elec_opmn
              ,nvl(ticket.mon_opno,0) as mon_opno
              ,nvl(ticket.mon_opmn,0) as mon_opmn
              from (
              select b.customerunitcode,c.dptcode,c.dptname,'售票' as detailname,0 as cardtype ,
              sum(totalmoney) as elec_opno,sum(totalmoney) as elec_opmn,0 mon_opno,0 as mon_opmn

                from  base_dept c
              join rec_cash_input_tickets b
              on c.dptcode = b.dept_no
              and c.customerunitcode = b.customerunitcode
              where c.customerunitcode = prmcustomercode
              and b.input_date >=prmsdate
              and b.input_date <=prmedate
              and b.dept_no  in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
              group by b.customerunitcode,c.dptcode,c.dptname) ticket

              union
              --刷卡数据  电子钱包和月票
              select elect.dptname,elect.detailname
              ,elect.dptcode
              ,elect.cardtype
              ,elec_opno
              ,trunc(elec_opmn,2) as elec_opmn
              ,mon_opno
              ,trunc((elect.mon_opmn) ,2) as mon_opmn
               from (                 --电子钱包
               select
               c.dptname,d.detailname,b.dptcode,b.cardtype,b.customerunitcode,
               sum(decode(b.acccode ,'201',nvl(b.operno,0),0)) as elec_opno,
               sum(decode(b.acccode ,'201',nvl(b.opermn,0),0)) as elec_opmn,
               sum(decode(b.acccode ,'203',nvl(b.operno,0),0)) as mon_opno,
               sum(decode(b.acccode ,'203',trunc(nvl(b.opermn,0)*param_b.paramvalue/param_a.paramvalue,2),0)) as mon_opmn
               ,nvl(param_b.paramvalue/param_a.paramvalue,0) as rate
               from base_dept c
               left join  st_payment_consum_day b
               on c.dptcode=b.dptcode
               and c.customerunitcode=b.customerunitcode
              -- left join
               inner join--hff 20170406
               table( split(prmsearchvalue) )　ct
               on ct.column_value= b.cardtype
               left join
               (
               select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
               a.paragroupid, a.walletusetype, a.isvisible, a.cashyearcheckmons,
               a.customerunitcode
               from base_cardtype_detail_temp a
               where a.customerunitcode =prmcustomercode
                union
               select a.detailid, a.detailname, a.groupid, a.sortid, a.ver,
               a.paragroupid, a.walletusetype, a.isvisible, a.cashyearcheckmons,
               prmcustomercode as customerunitcode
               from base_cardtype_detail a
               where a.detailid not in (select detailid from base_cardtype_detail_temp where customerunitcode = prmcustomercode)
               ) d
               on b.cardtype= d.detailid
               and b.customerunitcode=d.customerunitcode

               left join base_param param_a
               on param_a.paramname ='monthtopuptimes'
               and b.cardtype = param_a.paramgroupid
               and b.customerunitcode = param_a.customerunitcode
               left join base_param param_b
               on param_b.paramname ='mintopupfarebypermonth'
               and param_b.customerunitcode= b.customerunitcode
               and b.cardtype =param_b.paramgroupid

               where b.customerunitcode= prmcustomercode
               and b.acccode in('201','203')
               and b.statdate >=to_date(prmsdate,'yyyymmdd')
               and b.statdate <=to_date(prmedate,'yyyymmdd')
               group by b.customerunitcode,b.dptcode, c.dptname,b.cardtype,d.detailname
               ,param_a.paramvalue,param_b.paramvalue
               ) elect


               where  elect.dptcode in
                    (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
               )
               order by dptcode,cardtype;

             io_allrec := allrec;

             end if;
    end;

      procedure rpt_drivercheckquery (
      prmdatakind       in       varchar2,
      prmsearchkind     in       varchar2,
      prmsearchvalue    in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      prmdeptcode       in       varchar2,
      io_allrec        out      ref_cursor
   )
   as
       allrec       ref_cursor;
        v_deptcode     varchar2(9);
   begin
      if prmdeptcode = '' then
           v_deptcode := '001';
        elsif prmdeptcode = 'root' then
           v_deptcode := '001';
           else
           v_deptcode:=prmdeptcode;
        end if;
     if prmdatakind = '3' then
          open allrec for

          select to_char(c.dptcode) as dptcode,c.dptname,count(distinct busid ) as buscheck
          ,count(distinct driverid ) as drivercheck
          ,to_char(trunc(a.opdt),'yyyymmdd') as checkdate　
          from base_dept c
          left join rec_drivecard_record  a
          on a.deptcode =c.dptcode
          and a.customerunitcode = c.customerunitcode
          where  a.customerunitcode = prmcustomercode
          and   ( a.opdt) >=to_date(prmsdate,'yyyymmdd')
          and   (a.opdt) <to_date(prmedate,'yyyymmdd')+1
          and    a.deptcode  in
          (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)
          group by c.dptcode,c.dptname,to_char(trunc(a.opdt),'yyyymmdd')
          order by c.dptcode ;

          io_allrec := allrec;
     else
         open allrec for

          select  to_char(b.lineid) as dptcode , b.linename as dptname  ,count(distinct busid ) as buscheck
          ,count(distinct driverid ) as drivercheck

          ,to_char(trunc(a.opdt),'yyyymmdd') as checkdate　
          from   base_busline b
          left join rec_drivecard_record  a
          on a.customerunitcode=b.customerunitcode
          and a.buslineid=b.lineid
          left join base_dept c
          on a.deptcode =c.dptcode
          and a.customerunitcode = c.customerunitcode
          where  a.customerunitcode = prmcustomercode
           and   ( a.opdt) >=to_date(prmsdate,'yyyymmdd')
          and    (a.opdt) < to_date(prmedate,'yyyymmdd')+1
          and    a.deptcode  in
          (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=v_deptcode
                                                and customerunitcode =prmcustomercode)

          group by b.lineid,b.linename,a.deptcode,c.dptname,to_char(trunc(a.opdt),'yyyymmdd')
          order by deptcode,b.lineid;

          io_allrec := allrec;
     end if;
   end;

    procedure rpt_cardmakercheckquery (
      prmdatakind       in       varchar2,
      prmsearchkind     in       varchar2,
      prmsearchvalue    in       varchar2,
      prmsdate          in       varchar2,
      prmedate          in       varchar2,
      prmcustomercode   in       varchar2,
      prmdeptcode       in       varchar2,
      io_allrec        out      ref_cursor
   )
   as
       allrec       ref_cursor;

   begin
        if prmdeptcode = 'root' then
        open allrec for

        select  c.dptname,a.usercode,b.empname
        , to_char( trunc(logindate),'yyyy/mm/dd') as checkdate
        --, trunc(logindate) as checkdate
        ,min(a.logindate) as checkindate
        ,max(a.logindate) as checkoutdate
        from base_emp b
        join log_login a
        on a.usercode=b.empcode
        and a.customerunitcode=b.customerunitcode
        join base_dept c
        on c.dptcode=b.dptcode
        and c.customerunitcode=b.customerunitcode
        where a.stationid like '%制卡中心%'

        and  trunc(a.logindate) >= to_date(prmsdate,'yyyymmdd')
        and  trunc(a.logindate) <=to_date(prmedate,'yyyymmdd')
        and a.customerunitcode=prmcustomercode
        and c.dptcode in
        (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode_p=prmdeptcode
                                  and customerunitcode =prmcustomercode)
        group by a.usercode,c.dptname,b.empname, trunc(a.logindate)
        order by a.usercode,checkdate;
        io_allrec := allrec;

        else
           open allrec for
         select  c.dptname,a.usercode,b.empname
        , to_char( trunc(logindate),'yyyy/mm/dd') as checkdate
        --, trunc(logindate) as checkdate
        ,min(a.logindate) as checkindate
        ,max(a.logindate) as checkoutdate
        from base_emp b
        join log_login a
        on a.usercode=b.empcode
        and a.customerunitcode=b.customerunitcode
        join base_dept c
        on c.dptcode=b.dptcode
        and c.customerunitcode=b.customerunitcode
        where a.stationid like '%制卡中心%'

        and  trunc(a.logindate) >= to_date(prmsdate,'yyyymmdd')
        and  trunc(a.logindate) <=to_date(prmedate,'yyyymmdd')
        and a.customerunitcode=prmcustomercode
        and c.dptcode in
        (select dptcode from base_dept connect by dptcode_p = prior dptcode
                                  start with dptcode=prmdeptcode
                                  and customerunitcode =prmcustomercode)
        group by a.usercode,c.dptname,b.empname, trunc(a.logindate)
        order by a.usercode,checkdate;

             io_allrec := allrec;
        end if;

   end;

end pkg_rpt_customizereport;
/
create or replace package pkg_rpt_query
is
   type ref_cursor is ref cursor;

--
--售卡充值汇总查询
   procedure rpt_sellcardquery (
      prmnodevalue   in       varchar2,                              --节点值
      prmcardtype    in       number,
      prmsdate       in       varchar2,
      prmedate       in       varchar2,
      io_allrec      out      ref_cursor
   );

   --消费汇总查询 按线路
  procedure rpt_consumequerybyline(prmstartdate    in varchar2, --统计开始日期
                                   prmenddate      in varchar2, --统计结束日期
                                   prmdeptcode     in varchar2, --部门id
                                   prmlineids      in varchar2, --线路
                                   prmmerchantcode in varchar2, --商户code
                                   io_allrec       out ref_cursor);

  --消费汇总查询 按车辆
  procedure rpt_consumequerybybus(prmstartdate    in varchar2, --统计开始日期
                                  prmenddate      in varchar2, --统计结束日期
                                  prmisdpt        in varchar2, --是否为部门
                                  prmdeptcode     in varchar2, --部门id
                                  prmbusids       in varchar2, --车辆
                                  prmmerchantcode in varchar2, --商户code
                                  io_allrec       out ref_cursor);
end;                                                           -- package spec
 
 
 
 /
create or replace package body pkg_rpt_query
is
--
 --售卡充值汇总查询
   --售卡充值汇总查询
   procedure rpt_sellcardquery (
      prmnodevalue   in       varchar2,                              --节点值
      prmcardtype    in       number,
      prmsdate       in       varchar2,
      prmedate       in       varchar2,
      io_allrec      out      ref_cursor
   )
   as
      n_allno      number (20, 0);                                 --新卡张数
      n_operno     number (20, 0);                             --收费新卡张数
      n_opermn     number (20, 2);                                 --收费金额
      n_nofareno   number (20, 0);                           --新卡不收费张数
      n_freemn     number (20, 2);                         --新卡免收费用金额
      b_allno      number (20, 0);                                 --补卡张数
      b_operno     number (20, 0);                             --收费补卡张数
      b_opermn     number (20, 2);                                 --补卡金额
      b_nofareno   number (20, 0);                           --补卡不收费张数
      b_freemn     number (20, 2);                             --补卡免收金额
      h_operno     number (20, 0);                                 --换卡次数
      h_opermn     number (20, 2);                                 --换卡金额
      g_operno     number (20, 0);                                 --挂失次数
      g_opermn     number (20, 2);                                 --挂失金额
      j_operno     number (20, 0);                                 --解挂次数
      j_opermn     number (20, 2);                               --解挂手续费
      zh_operno    number (20, 0);                                 --退卡张数
      zh_opermn    number (20, 2);                                 --退卡金额
      /*
              ----------------------------------------------------------------------------
              --过程包名：rpt_sellcardquery
              --作　　者：周晓娜
              --时　　间：2011-05-11
              --说　　明：售卡充值汇总查询
              --参    数： prmempcode  职员编码

                            prmsdate  开始时间
                            prmedate   结束时间
              --输    出：数据集

              ------------------------------------------------------------------
              */
      allrec       ref_cursor;
   begin
      --初始化变量
      n_allno := 0;
      n_operno := 0;
      n_opermn := 0;
      n_nofareno := 0;
      n_freemn := 0;
      b_allno := 0;
      b_operno := 0;
      b_opermn := 0;
      b_nofareno := 0;
      b_freemn := 0;
      h_operno := 0;
      h_opermn := 0;
      g_operno := 0;
      g_opermn := 0;
      j_operno := 0;
      j_opermn := 0;
      zh_operno := 0;
      zh_opermn := 0;

      --办理新卡张数
      select count (*)
        into n_allno
        from rec_card_make_acc a
       where a.pty = 0
         and a.cardtypedetailid = prmcardtype
         and a.opdt > to_date (prmsdate, 'yyyy-mm-dd')
         and a.opdt < to_date (prmedate, 'yyyy-mm-dd') + 1
         and a.empid = prmnodevalue;

      --办理新卡免费张数(因为rec_city_fare_acc表中同时形成成本费和手续费都未0的两条记录，所以限定一个科目)
      select count (*)
        into n_nofareno
        from rec_card_make_acc a, rec_selfmoney_acc b
       where a.scardsnr = b.scardsnr
         and a.pty = 0
         and a.cardtypedetailid = prmcardtype
         and b.opfare = 0
         and b.acccode = '700'
         and a.opdt > to_date (prmsdate, 'yyyy-mm-dd')
         and a.opdt < to_date (prmedate, 'yyyy-mm-dd') + 1
         and a.empid = prmnodevalue;

      --办理新卡费用
      select nvl (sum (b.opfare), 0)
        into n_opermn
        from rec_card_make_acc a, rec_selfmoney_acc b
       where a.scardsnr = b.scardsnr
         and a.pty = 0
         and a.cardtypedetailid = prmcardtype
         and a.opdt > to_date (prmsdate, 'yyyy-mm-dd')
         and a.opdt < to_date (prmedate, 'yyyy-mm-dd') + 1
         and a.empid = prmnodevalue;

      --办理新卡免收的费用（应收而未收）卡成本和手续费取其中一条记录即可
      select nvl (sum (b.mangefare), 0)
        into n_freemn
        from rec_card_make_acc a, rec_selfmoney_acc b
       where a.scardsnr = b.scardsnr
         and a.pty = 0
         and a.cardtypedetailid = prmcardtype
         and b.opfare = 0
         and b.acccode = '700'                              --出纳员应收而未收
         and a.opdt > to_date (prmsdate, 'yyyy-mm-dd')
         and a.opdt < to_date (prmedate, 'yyyy-mm-dd') + 1
         and a.empid = prmnodevalue;

      --办理补卡张数
      select count (*)
        into b_allno
        from rec_card_make_acc a
       where a.pty = 1
         and a.cardtypedetailid = prmcardtype
         and a.opdt > to_date (prmsdate, 'yyyy-mm-dd')
         and a.opdt < to_date (prmedate, 'yyyy-mm-dd') + 1
         and a.empid = prmnodevalue;

      --办理补卡免费张数卡成本和手续费取其中一条记录即可
      select count (*)
        into b_nofareno
        from rec_card_make_acc a, rec_selfmoney_acc b
       where a.scardsnr = b.scardsnr
         and a.pty = 1
         and a.cardtypedetailid = prmcardtype
         and b.opfare = 0
         and b.acccode = '702'
         and a.opdt > to_date (prmsdate, 'yyyy-mm-dd')
         and a.opdt < to_date (prmedate, 'yyyy-mm-dd') + 1
         and a.empid = prmnodevalue;

      --办理补卡费用
      select nvl (sum (b.opfare), 0)
        into b_opermn
        from rec_card_make_acc a, rec_selfmoney_acc b
       where a.scardsnr = b.scardsnr
         and a.pty = 1
         and a.cardtypedetailid = prmcardtype
         and a.opdt > to_date (prmsdate, 'yyyy-mm-dd')
         and a.opdt < to_date (prmedate, 'yyyy-mm-dd') + 1
         and a.empid = prmnodevalue;

      --办理补卡免收费用（应收而未收）卡成本和手续费取其中一条记录即可
      select nvl (sum (b.mangefare), 0)
        into b_freemn
        from rec_card_make_acc a, rec_selfmoney_acc b
       where a.scardsnr = b.scardsnr
         and a.pty = 1
         and a.cardtypedetailid = prmcardtype
         and b.opfare = 0
         and b.acccode = '702'                              --出纳员应收而未收
         and a.opdt > to_date (prmsdate, 'yyyy-mm-dd')
         and a.opdt < to_date (prmedate, 'yyyy-mm-dd') + 1
         and a.empid = prmnodevalue;

      --办理换卡张数
      select count (*)
        into h_operno
        from rec_card_make_acc a
       where a.pty = 2
         and a.cardtypedetailid = prmcardtype
         and a.opdt > to_date (prmsdate, 'yyyy-mm-dd')
         and a.opdt < to_date (prmedate, 'yyyy-mm-dd') + 1
         and a.empid = prmnodevalue;

      --办理换卡费用
      select nvl (sum (b.opfare), 0)
        into h_opermn
        from rec_card_make_acc a, rec_selfmoney_acc b
       where a.scardsnr = b.scardsnr
         and a.pty = 2
         and b.acccode = '700'                                    --换卡手续费
         and a.cardtypedetailid = prmcardtype
         and a.opdt > to_date (prmsdate, 'yyyy-mm-dd')
         and a.opdt < to_date (prmedate, 'yyyy-mm-dd') + 1
         and a.empid = prmnodevalue;

      open allrec for
         select n_allno as n_allno, n_nofareno as n_nofareno,
                (n_allno - n_nofareno) as n_operno, n_opermn as n_opermn,
                b_allno as b_allno, b_nofareno as b_nofareno,
                (b_allno - b_nofareno) as b_operno, b_opermn as b_opermn,
                h_operno as h_operno, h_opermn as h_opermn,
                g_operno as g_operno, g_opermn as g_opermn,
                j_operno as j_operno, j_opermn as j_opermn, 0 as zh_operno,
                0 as zh_opermn, n_freemn as n_freemn, b_freemn as b_freemn
           from dual;

      io_allrec := allrec;
   end;

   --消费汇总查询  by 线路
  procedure rpt_consumequerybyline(prmstartdate    in varchar2, --统计开始日期
                                   prmenddate      in varchar2, --统计结束日期
                                   prmdeptcode     in varchar2, --部门id
                                   prmlineids      in varchar2, --线路id
                                   prmmerchantcode in varchar2, --商户code
                                   io_allrec       out ref_cursor) as
    t_startdate date; --查询开始日期
    t_enddate   date; --查询结束日期
  begin
    t_startdate := to_date(prmstartdate, 'yyyy-mm-dd');
    t_enddate   := to_date(prmenddate, 'yyyy-mm-dd');
    open io_allrec for
      select a.buslineid as lineid,
             c.linename as linename,
             a.dptcode,
             e.dptname,
             sum(decode(a.cardtype, 0, a.operno, 0)) as normalcardopno,
             sum(decode(a.cardtype, 0, a.opermn, 0)) as normalcardopmn,
             sum(decode(a.cardtype, 1, a.operno, 0)) as oldpeoplecardno,
             --sum(decode(a.cardtype,1,a.opermn,0)) as oldpeoplecardmn,
             0 as oldpeoplecardmn,
             sum(decode(a.cardtype, 3, a.operno, 0)) as studentcardno,
             sum(decode(a.cardtype, 3, a.opermn, 0)) as studentcardmn,
             sum(decode(a.cardtype, 6, a.operno, 0)) as zxt_cardno,
             sum(decode(a.cardtype, 6, a.opermn, 0)) as zxt_cardmn,
             sum(decode(a.cardtype, 5, a.operno, 0)) as bt_cardno,
             --sum(decode(a.cardtype,5,a.opermn,0)) as bt_cardmn,
             0 as bt_cardmn,
             sum(decode(a.cardtype, 19, a.operno, 0)) as yc_cardno,
             sum(decode(a.cardtype, 19, a.opermn, 0)) as yc_cardmn,
             sum(decode(a.cardtype, 20, a.operno, 0)) as third_cardno,
             sum(decode(a.cardtype, 20, a.opermn, 0)) as third_cardmn,
             sum(decode(a.cardtype, 21, a.operno, 0)) as city_cardno,
             sum(decode(a.cardtype, 21, a.opermn, 0)) as city_cardmn,
             sum(a.operno) as sumno,
             sum(a.opermn) as summn
        from st_payment_consum_day a
       inner join base_busline c
          on a.buslineid = c.lineid
         and a.customerunitcode = c.customerunitcode
        join table(split(prmlineids)) d
          on d.column_value = a.buslineid
        join base_dept e
          on a.dptcode = e.dptcode
         and a.customerunitcode = e.customerunitcode
       where trunc(a.balancedate, 'dd') >= t_startdate
         and trunc(a.balancedate, 'dd') <= t_enddate
         and a.customerunitcode = prmmerchantcode
         and (a.dptcode in
              (select dptcode
                 from base_dept t5
               connect by t5.dptcode_p = prior t5.dptcode
                start with t5.dptcode_p = prmdeptcode
                       and t5.customerunitcode = prmmerchantcode) or
              a.dptcode = prmdeptcode)
       group by a.buslineid, c.linename, a.dptcode, e.dptname
       order by a.buslineid;

  end;

  --消费汇总查询  by 车辆
  procedure rpt_consumequerybybus(prmstartdate    in varchar2, --统计开始日期
                                  prmenddate      in varchar2, --统计结束日期
                                  prmisdpt        in varchar2, --是否为部门
                                  prmdeptcode     in varchar2, --部门id
                                  prmbusids       in varchar2, --车辆
                                  prmmerchantcode in varchar2, --商户code
                                  io_allrec       out ref_cursor) as
    t_startdate date; --查询开始日期
    t_enddate   date; --查询结束日期
  begin
    t_startdate := to_date(prmstartdate, 'yyyy-mm-dd');
    t_enddate   := to_date(prmenddate, 'yyyy-mm-dd');
    if prmisdpt = '1' then
      if prmbusids = 'all' then
        open io_allrec for
          select a.dptcode,
                 b.dptname,
                 a.buslineid,
                 c.linename,
                 a.busid,
                 d.busnumber,
                 sum(decode(a.cardtype, 0, a.operno, 0)) as normalcardno,
                 sum(decode(a.cardtype, 0, a.opermn, 0)) as normalcardmn,
                 sum(decode(a.cardtype, 1, a.operno, 0)) as oldpeoplecardno,
                 --sum(decode(a.cardtype,1,a.opermn,0)) as oldpeoplecardmn,
                 0 as oldpeoplecardmn,
                 sum(decode(a.cardtype, 3, a.operno, 0)) as studentcardno,
                 sum(decode(a.cardtype, 3, a.opermn, 0)) as studentcardmn,
                 sum(decode(a.cardtype, 6, a.operno, 0)) as zxt_cardno,
                 sum(decode(a.cardtype, 6, a.opermn, 0)) as zxt_cardmn,
                 sum(decode(a.cardtype, 5, a.operno, 0)) as bt_cardno,
                 --sum(decode(a.cardtype,5,a.opermn,0)) as bt_cardmn,
                 0 as bt_cardmn,
                 sum(decode(a.cardtype, 19, a.operno, 0)) as yc_cardno,
                 sum(decode(a.cardtype, 19, a.opermn, 0)) as yc_cardmn,
                 sum(decode(a.cardtype, 20, a.operno, 0)) as third_cardno,
                 sum(decode(a.cardtype, 20, a.opermn, 0)) as third_cardmn,
                 sum(decode(a.cardtype, 21, a.operno, 0)) as city_cardno,
                 sum(decode(a.cardtype, 21, a.opermn, 0)) as city_cardmn,
                 sum(a.operno) as sumno,
                 sum(a.opermn) as summn
            from st_payment_consum_day a
           inner join base_dept b
              on a.customerunitcode = b.customerunitcode
             and a.dptcode = b.dptcode
           inner join base_busline c
              on a.buslineid = c.lineid
             and a.customerunitcode = c.customerunitcode
           inner join base_bus d
              on a.busid = d.busno
             and a.customerunitcode = d.customerunitcode

           where trunc(a.balancedate, 'dd') >= t_startdate
             and trunc(a.balancedate, 'dd') <= t_enddate
             and a.customerunitcode = prmmerchantcode
             and (b.dptcode in
                  (select dptcode
                     from base_dept t5
                   connect by t5.dptcode_p = prior t5.dptcode
                    start with t5.dptcode_p = prmdeptcode
                           and t5.customerunitcode = prmmerchantcode) or
                  b.dptcode = prmdeptcode)
           group by a.dptcode,
                    b.dptname,
                    c.linename,
                    a.buslineid,
                    a.busid,
                    d.busnumber
           order by a.dptcode, a.buslineid;
      else
        open io_allrec for
          select a.dptcode,
                 b.dptname,
                 a.buslineid,
                 c.linename,
                 a.busid,
                 d.busnumber,
                 sum(decode(a.cardtype, 0, a.operno, 0)) as normalcardno,
                 sum(decode(a.cardtype, 0, a.opermn, 0)) as normalcardmn,
                 sum(decode(a.cardtype, 1, a.operno, 0)) as oldpeoplecardno,
                 --sum(decode(a.cardtype,1,a.opermn,0)) as oldpeoplecardmn,
                 0 as oldpeoplecardmn,
                 sum(decode(a.cardtype, 3, a.operno, 0)) as studentcardno,
                 sum(decode(a.cardtype, 3, a.opermn, 0)) as studentcardmn,
                 sum(decode(a.cardtype, 6, a.operno, 0)) as zxt_cardno,
                 sum(decode(a.cardtype, 6, a.opermn, 0)) as zxt_cardmn,
                 sum(decode(a.cardtype, 5, a.operno, 0)) as bt_cardno,
                 0 as bt_cardmn,
                 --sum(decode(a.cardtype,5,a.opermn,0)) as bt_cardmn,
                 sum(decode(a.cardtype, 19, a.operno, 0)) as yc_cardno,
                 sum(decode(a.cardtype, 19, a.opermn, 0)) as yc_cardmn,
                 sum(decode(a.cardtype, 20, a.operno, 0)) as third_cardno,
                 sum(decode(a.cardtype, 20, a.opermn, 0)) as third_cardmn,
                 sum(decode(a.cardtype, 21, a.operno, 0)) as city_cardno,
                 sum(decode(a.cardtype, 21, a.opermn, 0)) as city_cardmn,
                 sum(a.operno) as sumno,
                 sum(a.opermn) as summn
            from st_payment_consum_day a
           inner join base_dept b
              on a.customerunitcode = b.customerunitcode
             and a.dptcode = b.dptcode
           inner join base_busline c
              on a.buslineid = c.lineid
             and a.customerunitcode = c.customerunitcode
           inner join base_bus d
              on a.busid = d.busno
             and a.customerunitcode = d.customerunitcode
            join table(split(prmbusids)) e
              on a.busid = e.column_value
           where trunc(a.balancedate, 'dd') >= t_startdate
             and trunc(a.balancedate, 'dd') <= t_enddate
             and a.customerunitcode = prmmerchantcode
             and (b.dptcode in
                  (select dptcode
                     from base_dept t5
                   connect by t5.dptcode_p = prior t5.dptcode
                    start with t5.dptcode_p = prmdeptcode
                           and t5.customerunitcode = prmmerchantcode) or
                  b.dptcode = prmdeptcode)
           group by a.dptcode,
                    b.dptname,
                    c.linename,
                    a.buslineid,
                    a.busid,
                    d.busnumber
           order by a.dptcode, a.buslineid;
      end if;
    else

      if prmbusids = 'all' then
        open io_allrec for
          select a.dptcode,
                 b.dptname,
                 a.buslineid,
                 c.linename,
                 a.busid,
                 d.busnumber,
                 sum(decode(a.cardtype, 0, a.operno, 0)) as normalcardno,
                 sum(decode(a.cardtype, 0, a.opermn, 0)) as normalcardmn,
                 sum(decode(a.cardtype, 1, a.operno, 0)) as oldpeoplecardno,
                 --sum(decode(a.cardtype,1,a.opermn,0)) as oldpeoplecardmn,
                 0 as oldpeoplecardmn,
                 sum(decode(a.cardtype, 3, a.operno, 0)) as studentcardno,
                 sum(decode(a.cardtype, 3, a.opermn, 0)) as studentcardmn,
                 sum(decode(a.cardtype, 6, a.operno, 0)) as zxt_cardno,
                 sum(decode(a.cardtype, 6, a.opermn, 0)) as zxt_cardmn,
                 sum(decode(a.cardtype, 5, a.operno, 0)) as bt_cardno,
                 0 as bt_cardmn,
                 sum(decode(a.cardtype, 19, a.operno, 0)) as yc_cardno,
                 sum(decode(a.cardtype, 19, a.opermn, 0)) as yc_cardmn,
                 sum(decode(a.cardtype, 20, a.operno, 0)) as third_cardno,
                 sum(decode(a.cardtype, 20, a.opermn, 0)) as third_cardmn,
                 sum(decode(a.cardtype, 21, a.operno, 0)) as city_cardno,
                 sum(decode(a.cardtype, 21, a.opermn, 0)) as city_cardmn,
                 --sum(decode(a.cardtype,5,a.opermn,0)) as bt_cardmn,
                 sum(a.operno) as sumno,
                 sum(a.opermn) as summn
            from st_payment_consum_day a
           inner join base_dept b
              on a.customerunitcode = b.customerunitcode
             and a.dptcode = b.dptcode
           inner join base_busline c
              on a.buslineid = c.lineid
             and a.customerunitcode = c.customerunitcode
           inner join base_bus d
              on a.busid = d.busno
             and a.customerunitcode = d.customerunitcode
           where trunc(a.balancedate, 'dd') >= t_startdate
             and trunc(a.balancedate, 'dd') <= t_enddate
             and a.customerunitcode = prmmerchantcode
             and a.buslineid = prmdeptcode
           group by a.dptcode,
                    b.dptname,
                    c.linename,
                    a.buslineid,
                    a.busid,
                    d.busnumber
           order by a.dptcode, a.buslineid;

      else
        open io_allrec for
          select a.dptcode,
                 b.dptname,
                 a.buslineid,
                 c.linename,
                 a.busid,
                 d.busnumber,
                 sum(decode(a.cardtype, 0, a.operno, 0)) as normalcardno,
                 sum(decode(a.cardtype, 0, a.opermn, 0)) as normalcardmn,
                 sum(decode(a.cardtype, 1, a.operno, 0)) as oldpeoplecardno,
                 --sum(decode(a.cardtype,1,a.opermn,0)) as oldpeoplecardmn,
                 0 as oldpeoplecardmn,
                 sum(decode(a.cardtype, 3, a.operno, 0)) as studentcardno,
                 sum(decode(a.cardtype, 3, a.opermn, 0)) as studentcardmn,
                 sum(decode(a.cardtype, 6, a.operno, 0)) as zxt_cardno,
                 sum(decode(a.cardtype, 6, a.opermn, 0)) as zxt_cardmn,
                 sum(decode(a.cardtype, 5, a.operno, 0)) as bt_cardno,
                 0 as bt_cardmn,
                 sum(decode(a.cardtype, 19, a.operno, 0)) as yc_cardno,
                 sum(decode(a.cardtype, 19, a.opermn, 0)) as yc_cardmn,
                 sum(decode(a.cardtype, 20, a.operno, 0)) as third_cardno,
                 sum(decode(a.cardtype, 20, a.opermn, 0)) as third_cardmn,
                 sum(decode(a.cardtype, 21, a.operno, 0)) as city_cardno,
                 sum(decode(a.cardtype, 21, a.opermn, 0)) as city_cardmn,
                 --sum(decode(a.cardtype,5,a.opermn,0)) as bt_cardmn,
                 sum(a.operno) as sumno,
                 sum(a.opermn) as summn
            from st_payment_consum_day a
           inner join base_dept b
              on a.customerunitcode = b.customerunitcode
             and a.dptcode = b.dptcode
           inner join base_busline c
              on a.buslineid = c.lineid
             and a.customerunitcode = c.customerunitcode
           inner join base_bus d
              on a.busid = d.busno
             and a.customerunitcode = d.customerunitcode
            join table(split(prmbusids)) e
              on a.busid = e.column_value
           where trunc(a.balancedate, 'dd') >= t_startdate
             and trunc(a.balancedate, 'dd') <= t_enddate
             and a.customerunitcode = prmmerchantcode
             and a.buslineid = prmdeptcode
           group by a.dptcode,
                    b.dptname,
                    c.linename,
                    a.buslineid,
                    a.busid,
                    d.busnumber
           order by a.dptcode, a.buslineid;
      end if;
    end if;
  end;

end;/
create or replace package pkg_rpt_sellcard_query
is
   type refcursortype is ref cursor;           --游标类型定义，用于返回数据集

   /*
   ----------------------------------------------------------------------------
   --过程包名：pkg_rpt_sellcard_query
   --作　　者：王亚
   --时　　间：2012-01-17
   --说　　明：用于广安智能公交项目--售卡统计数据查询(包头定义)
   ----------------------------------------------------------------------------
   */

   --售卡数量统计报表
   procedure proc_sellcardcount (
      begintime    in       varchar2,                              --开始时间
      endtime      in       varchar2,                              --结束时间
      dptcode      in       varchar2,                              --部门代码
      out_cursor   out      refcursortype
   );

end;


 

 
 
 /
create or replace package body pkg_rpt_sellcard_query
is
   --售卡数量统计报表
   procedure proc_sellcardcount (
      begintime    in       varchar2,                              --开始时间
      endtime      in       varchar2,                              --结束时间
      dptcode      in       varchar2,                              --部门代码
      out_cursor   out      refcursortype                    --返回数据集游标
   )
   /*
   -------------------------------------------------------------------------
   --存储过程：proc_sellcardcount
   --作　　者：王亚
   --时　　间：2012-01-17
   --说　　明：售卡数量统计报表
   --输入参数：开始时间、结束时间、部门编码
   --输出参数：返回结果数据集游标
   -------------------------------------------------------------------------
   --作　　者：周晓娜
   --时　　间：2012-02-20
   --说　　明：修改过程（原始查询过程查询表错误，造成数据不对）
   --------------------------------------------------------------------------
   */
   as
      v_sdate   date;
      v_edate   date;
      v_code    varchar2 (50);
   begin
      v_sdate := to_date (begintime, 'yyyy-mm-dd');
      v_edate := to_date (endtime, 'yyyy-mm-dd');
      v_code := dptcode;

      --查询全部充值员数据
      if dptcode = 'root'
      then
         open out_cursor for
            select   e.empname, nvl (t1.publiccard, 0) as publiccard,
                     nvl (t2.tianyicard, 0) as tianyicard,
                     nvl (t3.studentcard, 0) as studentcard,
                     nvl (t4.jinglaocard, 0) as jinglaocard,
                     nvl (t5.youfucard, 0) as youfucard
                from (select   a.empid, sum (a.operno) as publiccard
                          from st_emp_trade a
                         where a.statdt >= v_sdate
                           and a.statdt <= v_edate
                           and a.cardtype in (1)                      --普通卡
                           and a.acccode = 602
                           and a.deptcode in (
                                        select     dptcode
                                              from base_dept b
                                        connect by b.dptcode_p =
                                                                prior b.dptcode
                                        start with b.dptcode_p = v_code)
                      group by a.empid) t1
                     left join
                     (select   a.empid, sum (a.operno) as tianyicard
                          from st_emp_trade a
                         where a.statdt >= v_sdate
                           and a.statdt <= v_edate
                           and a.cardtype in (6)                      --天翼卡
                           and a.acccode = 602
                           and a.deptcode in (
                                        select     dptcode
                                              from base_dept b
                                        connect by b.dptcode_p =
                                                                prior b.dptcode
                                        start with b.dptcode_p = v_code)
                      group by a.empid) t2 using (empid)
                     left join
                     (select   a.empid, sum (a.operno) as studentcard
                          from st_emp_trade a
                         where a.statdt >= v_sdate
                           and a.statdt <= v_edate
                           and a.cardtype in (3)                      --学生卡
                           and a.acccode = 602
                           and a.deptcode in (
                                        select     dptcode
                                              from base_dept b
                                        connect by b.dptcode_p =
                                                                prior b.dptcode
                                        start with b.dptcode_p = v_code)
                      group by a.empid) t3 using (empid)
                     left join
                     (select   a.empid, sum (a.operno) as jinglaocard
                          from st_emp_trade a
                         where a.statdt >= v_sdate
                           and a.statdt <= v_edate
                           and a.cardtype in (7)                      --敬老卡
                           and a.acccode = 602
                           and a.deptcode in (
                                        select     dptcode
                                              from base_dept b
                                        connect by b.dptcode_p =
                                                                prior b.dptcode
                                        start with b.dptcode_p = v_code)
                      group by a.empid) t4 using (empid)
                     left join
                     (select   a.empid, sum (a.operno) as youfucard
                          from st_emp_trade a
                         where a.statdt >= v_sdate
                           and a.statdt <= v_edate
                           and a.cardtype in
                                     (8, 9) --优抚卡(现场包括优抚卡a和优抚卡b)
                           and a.acccode = 602
                           and a.deptcode in (
                                        select     dptcode
                                              from base_dept b
                                        connect by b.dptcode_p =
                                                                prior b.dptcode
                                        start with b.dptcode_p = v_code)
                      group by a.empid) t5 using (empid)
                     left join base_emp e using (empid)
            order by e.empname;
      --查询dptcode部门下充值员数据
      else
         open out_cursor for
            select   e.empname, nvl (t1.publiccard, 0) as publiccard,
                     nvl (t2.tianyicard, 0) as tianyicard,
                     nvl (t3.studentcard, 0) as studentcard,
                     nvl (t4.jinglaocard, 0) as jinglaocard,
                     nvl (t5.youfucard, 0) as youfucard
                from (select   a.empid, sum (a.operno) as publiccard
                          from st_emp_trade a
                         where a.statdt >= v_sdate
                           and a.statdt <= v_edate
                           and a.cardtype in (1)                      --普通卡
                           and a.acccode = 602
                           and a.deptcode in (
                                        select     dptcode
                                              from base_dept b
                                        connect by b.dptcode_p =
                                                                prior b.dptcode
                                        start with b.dptcode = v_code)
                      group by a.empid) t1
                     left join
                     (select   a.empid, sum (a.operno) as tianyicard
                          from st_emp_trade a
                         where a.statdt >= v_sdate
                           and a.statdt <= v_edate
                           and a.cardtype in (6)                      --天翼卡
                           and a.acccode = 602
                           and a.deptcode in (
                                        select     dptcode
                                              from base_dept b
                                        connect by b.dptcode_p =
                                                                prior b.dptcode
                                        start with b.dptcode = v_code)
                      group by a.empid) t2 using (empid)
                     left join
                     (select   a.empid, sum (a.operno) as studentcard
                          from st_emp_trade a
                         where a.statdt >= v_sdate
                           and a.statdt <= v_edate
                           and a.cardtype in (3)                      --学生卡
                           and a.acccode = 602
                           and a.deptcode in (
                                        select     dptcode
                                              from base_dept b
                                        connect by b.dptcode_p =
                                                                prior b.dptcode
                                        start with b.dptcode = v_code)
                      group by a.empid) t3 using (empid)
                     left join
                     (select   a.empid, sum (a.operno) as jinglaocard
                          from st_emp_trade a
                         where a.statdt >= v_sdate
                           and a.statdt <= v_edate
                           and a.cardtype in (7)                      --敬老卡
                           and a.acccode = 602
                           and a.deptcode in (
                                        select     dptcode
                                              from base_dept b
                                        connect by b.dptcode_p =
                                                                prior b.dptcode
                                        start with b.dptcode = v_code)
                      group by a.empid) t4 using (empid)
                     left join
                     (select   a.empid, sum (a.operno) as youfucard
                          from st_emp_trade a
                         where a.statdt >= v_sdate
                           and a.statdt <= v_edate
                           and a.cardtype in
                                     (8, 9) --优抚卡(现场包括优抚卡a和优抚卡b)
                           and a.acccode = 602
                           and a.deptcode in (
                                        select     dptcode
                                              from base_dept b
                                        connect by b.dptcode_p =
                                                                prior b.dptcode
                                        start with b.dptcode = v_code)
                      group by a.empid) t5 using (empid)
                     left join base_emp e using (empid)
            order by e.empname;
      end if;
   end proc_sellcardcount;                            --proc_sellcardcount结束

end pkg_rpt_sellcard_query;

/
create or replace package        pkg_rpt_statistics
is
/*
----------------------------------------------------------------------------
--过程包名：pkg_rpt_statistics
--作　　者：任大伟
--时　　间： 2013-01-30
--说　　明：结算报表包，用于提供 统计分析数据集
----------------------------------------------------------------------------
*/
   type refcursortype is ref cursor;           --游标类型定义，用于返回数据集

   procedure rpt_cardtypecollect (
      prmbegindate          in       varchar2,                 --查询开始时间
      prmenddate            in       varchar2,                 --查询结束时间
      prmcode               in       varchar2,                     --部门代码
      prmcardtypes          in       varchar2,
      prmcustomerunitcode   in       varchar2,
      --查询的卡类型集合，多个卡类型之间用,隔开
      out_cursor            out      refcursortype
   );

   procedure rpt_drivercollect (
      prmbegindate          in       varchar2,                 --查询开始时间
      prmenddate            in       varchar2,                 --查询结束时间
      prmcode               in       varchar2,         --部门代码 或 司机编码
      prmcodetype           in       number,   --查询类型，总目录，部门，司机
      prmcustomerunitcode   in       varchar2,
      out_cursor            out      refcursortype
   );

   procedure rpt_buslinecollect (
      prmbegindate          in       varchar2,                 --查询开始时间
      prmenddate            in       varchar2,                 --查询结束时间
      prmcode               in       varchar2,         --部门代码 或 线路编码
      prmcodetype           in       number,   --查询类型，总目录，部门，线路
      prmcustomerunitcode   in       varchar2,                     --客户代码
      prmlineids            in       varchar2,
      out_cursor            out      refcursortype
   );

   procedure rpt_buscollect (
      prmbegindate          in       varchar2,                 --查询开始时间
      prmenddate            in       varchar2,                 --查询结束时间
      prmcode               in       varchar2,                     --部门代码
      prmbusids             in       varchar2,
                                        --查询的车辆集合，多个车辆之间用,隔开
      prmcustomerunitcode   in       varchar2,
      out_cursor            out      refcursortype
   );
end;                                                           -- package spec


 
 
 
 /
create or replace package body        pkg_rpt_statistics
is
--
-- to modify this template, edit file pkgbody.txt in template
-- directory of sql navigator
--
-- purpose: briefly explain the functionality of the package body
--
-- modification history
-- person      date    comments
-- ---------   ------  ------------------------------------------
-- enter procedure, function bodies as shown below
   procedure rpt_cardtypecollect (
      prmbegindate          in       varchar2,                 --查询开始时间
      prmenddate            in       varchar2,                 --查询结束时间
      prmcode               in       varchar2,                     --部门代码
      prmcardtypes          in       varchar2,
      --查询的卡类型集合，多个卡类型之间用,隔开
      prmcustomerunitcode   in       varchar2,
      out_cursor            out      refcursortype
   )
   as
      /*
      --------------------------------------------------------------------------
      --存储过程：rpt_cardtypecollect
      --作　　者：张秋玲
      --时　　间：2009-06-10
      --说　　明：卡交易汇总表（按卡类型进行查询）
      --输入参数：
      --输出参数：
      ------------------------------------------------------------------
      --修改标识：张秋玲20090620
      --修改原因：以前的统计速度太慢，因此增加了一个表“st_payment_consum_day”
               专用于这类统计

      --修改标识：张秋玲20090622
       --修改原因：按卡类型统计时，没有按部门进行查询统计
      ------------------------------------------------------------------
       --修改标识：zxn 20110926
      --修改说明：增加打折金额的统计、统计的消费数据，所以要限定查询的大类为消费类
      --          次卡的消费单独统计
      -------------------------------------------------------------------
       --修改标识：叶体强20120503
       --修改原因：屏蔽虚拟职员empid=0的记录
      -------------------------------------------------------------------
      */
      begindate   date;
      enddate     date;
      querysql    varchar2 (32767);                           --查询sql字符串
   begin
      begindate := to_date (prmbegindate, 'yyyy-mm-dd');
      enddate := to_date (prmenddate, 'yyyy-mm-dd');

      if prmcode = 'root'
      --选择的顶级部门 显示该顶级部门及所有下级部门下的卡交易数据
      then
         if prmcardtypes is null or prmcardtypes = ''
         then
            open out_cursor for
               --查询电子钱包消费和月票消费
               select   cardtype, nvl (sum (operno), 0) as operno,
                        nvl (sum (opermoney), 0) as opermoney,
                        nvl (sum (discountmn), 0) as discountmn,
                        nvl (sum (viceoperno), 0) as viceoperno,
                        nvl (sum (viceopermn), 0) as viceopermn
                   from (                                 --电子钱包和月票钱包
                         select   t2.detailname as cardtype,
                                  nvl (sum (t1.operno), 0) operno,
                                  nvl (sum (t1.opermn), 0) opermoney,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  0 as viceoperno, 0 as viceopermn
                             from st_payment_day t1 left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                                  left join base_emp
                                  on t1.empid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_acc_type a
                                  on t1.acccode = a.acccode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and t1.empid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                              and t1.acccode in (201, 202)
                         group by t1.cardtype, t2.detailname
                         union all
                         --次卡钱包
                         select   t2.detailname as cardtype, 0 as operno,
                                  0 as opermoney,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  nvl (sum (t1.operno), 0) as viceoperno,
                                  nvl (sum (t1.opermn), 0) as viceopermn
                             from st_payment_day t1 left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                                  left join base_emp
                                  on t1.empid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_acc_type a
                                  on t1.acccode = a.acccode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and t1.empid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                              and t1.acccode = 203
                         group by t1.cardtype, t2.detailname)
               group by cardtype;
         else
            open out_cursor for
               --查询电子钱包消费和月票消费
               select   cardtype, nvl (sum (operno), 0) as operno,
                        nvl (sum (opermoney), 0) as opermoney,
                        nvl (sum (discountmn), 0) as discountmn,
                        nvl (sum (viceoperno), 0) as viceoperno,
                        nvl (sum (viceopermn), 0) as viceopermn
                   from (                                 --电子钱包和月票钱包
                         select   t2.detailname as cardtype,
                                  nvl (sum (t1.operno), 0) operno,
                                  nvl (sum (t1.opermn), 0) opermoney,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  0 as viceoperno, 0 as viceopermn
                             from st_payment_day t1 left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                                  left join base_emp
                                  on t1.empid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_acc_type a
                                  on t1.acccode = a.acccode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and t1.empid <> 0
                              and t1.cardtype in (
                                        select *
                                          from table (split (prmcardtypes,
                                                             ',')
                                                     ))
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                              and t1.acccode in (201, 202)
                         group by t1.cardtype, t2.detailname
                         union all
                         --次卡钱包
                         select   t2.detailname as cardtype, 0 as operno,
                                  0 as opermoney,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  nvl (sum (t1.operno), 0) as viceoperno,
                                  nvl (sum (t1.opermn), 0) as viceopermn
                             from st_payment_day t1 left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                                  left join base_emp
                                  on t1.empid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_acc_type a
                                  on t1.acccode = a.acccode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and t1.empid <> 0
                              and t1.cardtype in (
                                        select *
                                          from table (split (prmcardtypes,
                                                             ',')
                                                     ))
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                              and t1.acccode = 203
                         group by t1.cardtype, t2.detailname)
               group by cardtype;
         /*
             querysql :=
                 'select cardtype, nvl (sum (operno), 0) as operno,
                     nvl (sum (opermoney), 0) as opermoney,
                     nvl (sum (discountmn), 0) as discountmn,
                     nvl (sum (viceoperno), 0) as viceoperno,
                     nvl (sum (viceopermn), 0) as viceopermn
               from (select   t2.detailname as cardtype,
                     nvl(sum (  t1.operno
                         ) ,0)operno,
                     nvl(sum (  t1.opermn
                         ),0) opermoney,
                     nvl(sum(t1.discountmn),0) discountmn,
                     0 as viceoperno, 0 as viceopermn
                from st_payment_day t1 left join base_cardtype_detail t2
                     on t1.cardtype = t2.detailid
                     left join base_emp on t1.empid = base_emp.empid
                     left join base_acc_type a on t1.acccode = a.acccode
                where  t1.cardtype in ('
                 || prmcardtypes
                 || ')
                      and  t1.balancedate >= to_date('''
                 || prmbegindate
                 || ''',''yyyy-mm-dd'') and t1.balancedate <= to_date('''
                 || prmenddate
                 || ''',''yyyy-mm-dd'') '
                 || ' and  t1.dptcode in (select dptcode from base_dept t5
                                 connect by t5.dptcode_p = prior t5.dptcode
                                 start with t5.dptcode_p = '''
                 || prmcode
                 || ''')

                 and t1.acccode in (201, 202)
                 and t1.empid<>0
                 and t1.customerunitcode = prmcustomerunitcode
                 group by t1.cardtype, t2.detailname
            union all
            select   t2.detailname as cardtype, 0 as operno, 0 as opermoney,
                nvl (sum (t1.discountmn), 0) discountmn,
                nvl (sum (t1.operno), 0) as viceoperno,
                nvl (sum (t1.opermn), 0) as viceopermn
                from st_payment_day t1 left join base_cardtype_detail t2
                     on t1.cardtype = t2.detailid
                     left join base_emp on t1.empid = base_emp.empid
                     left join base_acc_type a on t1.acccode = a.acccode
                where  t1.cardtype in ('
                 || prmcardtypes
                 || ')
                      and  t1.balancedate >= to_date('''
                 || prmbegindate
                 || ''',''yyyy-mm-dd'') and t1.balancedate <= to_date('''
                 || prmenddate
                 || ''',''yyyy-mm-dd'') '
                 || ' and  t1.dptcode in (select dptcode from base_dept t5
                                 connect by t5.dptcode_p = prior t5.dptcode
                                 start with t5.dptcode_p = '''
                 || prmcode
                 || ''')
                 and t1.acccode = 203
                 and t1.empid<>0
                 and t1.customerunitcode = prmcustomerunitcode
                 group by t1.cardtype, t2.detailname)
             group by cardtype';

             open out_cursor for querysql;*/
         end if;
      else            -- 选择的部门节点 显示该部门及所有下级部门下的卡交易数据
         if prmcardtypes is null or prmcardtypes = ''
         then
            open out_cursor for
               select   cardtype, nvl (sum (operno), 0) as operno,
                        nvl (sum (opermoney), 0) as opermoney,
                        nvl (sum (discountmn), 0) as discountmn,
                        nvl (sum (viceoperno), 0) as viceoperno,
                        nvl (sum (viceopermn), 0) as viceopermn
                   from (                                 --电子钱包和月票钱包
                         select   t2.detailname as cardtype,
                                  nvl (sum (t1.operno), 0) operno,
                                  nvl (sum (t1.opermn), 0) opermoney,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  0 as viceoperno, 0 as viceopermn
                             from st_payment_day t1 left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                                  left join base_emp
                                  on t1.empid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_acc_type a
                                  on t1.acccode = a.acccode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and t1.empid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode = prmcode)
                              and t1.acccode in (201, 202)
                         group by t1.cardtype, t2.detailname
                         union all
                         --次卡钱包
                         select   t2.detailname as cardtype, 0 as operno,
                                  0 as opermoney,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  nvl (sum (t1.operno), 0) as viceoperno,
                                  nvl (sum (t1.opermn), 0) as viceopermn
                             from st_payment_day t1 left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                                  left join base_emp
                                  on t1.empid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_acc_type a
                                  on t1.acccode = a.acccode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and t1.empid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode = prmcode)
                              and t1.acccode = 203
                         group by t1.cardtype, t2.detailname)
               group by cardtype;
         else
            open out_cursor for
               select   cardtype, nvl (sum (operno), 0) as operno,
                        nvl (sum (opermoney), 0) as opermoney,
                        nvl (sum (discountmn), 0) as discountmn,
                        nvl (sum (viceoperno), 0) as viceoperno,
                        nvl (sum (viceopermn), 0) as viceopermn
                   from (                                 --电子钱包和月票钱包
                         select   t2.detailname as cardtype,
                                  nvl (sum (t1.operno), 0) operno,
                                  nvl (sum (t1.opermn), 0) opermoney,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  0 as viceoperno, 0 as viceopermn
                             from st_payment_day t1 left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                                  left join base_emp
                                  on t1.empid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_acc_type a
                                  on t1.acccode = a.acccode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and t1.empid <> 0
                              and t1.cardtype in (
                                        select *
                                          from table (split (prmcardtypes,
                                                             ',')
                                                     ))
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode = prmcode)
                              and t1.acccode in (201, 202)
                         group by t1.cardtype, t2.detailname
                         union all
                         --次卡钱包
                         select   t2.detailname as cardtype, 0 as operno,
                                  0 as opermoney,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  nvl (sum (t1.operno), 0) as viceoperno,
                                  nvl (sum (t1.opermn), 0) as viceopermn
                             from st_payment_day t1 left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                                  left join base_emp
                                  on t1.empid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_acc_type a
                                  on t1.acccode = a.acccode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and t1.empid <> 0
                              and t1.cardtype in (
                                        select *
                                          from table (split (prmcardtypes,
                                                             ',')
                                                     ))
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode = prmcode)
                              and t1.acccode = 203
                         group by t1.cardtype, t2.detailname)
               group by cardtype;
         /*
             querysql :=
                 'select   cardtype, nvl (sum (operno), 0) as operno,
                     nvl (sum (opermoney), 0) as opermoney,
                     nvl (sum (discountmn), 0) as discountmn,
                     nvl (sum (viceoperno), 0) as viceoperno,
                     nvl (sum (viceopermn), 0) as viceopermn
                from (select   t2.detailname as cardtype,
                    nvl(sum (  t1.operno
                         ) ,0)operno,
                     nvl(sum (  t1.opermn
                         ),0) opermoney,
                      nvl(sum(t1.discountmn),0) discountmn,
                      0 as viceoperno,0 as viceopermn
                from st_payment_day t1 left join base_cardtype_detail t2
                     on t1.cardtype = t2.detailid
                     left join base_emp on t1.empid = base_emp.empid
                     left join base_acc_type a on t1.acccode = a.acccode
                where  t1.cardtype in ('
                 || prmcardtypes
                 || ')
                      and  t1.balancedate >= to_date('''
                 || prmbegindate
                 || ''',''yyyy-mm-dd'') and t1.balancedate <= to_date('''
                 || prmenddate
                 || ''',''yyyy-mm-dd'') '
                 || ' and  t1.dptcode in (select dptcode from base_dept t5
                                 connect by t5.dptcode_p = prior t5.dptcode
                                 start with t5.dptcode = '''
                 || prmcode
                 || ''')
                 and t1.acccode in (201, 202)
                 and t1.empid<>0
                 and t1.customerunitcode = prmcustomerunitcode
                 group by t1.cardtype, t2.detailname
            union all
            select   t2.detailname as cardtype, 0 as operno,0 as opermoney,
                     nvl(sum(t1.discountmn),0) discountmn,
                     nvl(sum(t1.operno),0) as viceoperno,
                     nvl(sum(t1.opermn),0) as viceopermn
                from st_payment_day t1 left join base_cardtype_detail t2
                     on t1.cardtype = t2.detailid
                     left join base_emp on t1.empid = base_emp.empid
                     left join base_acc_type a on t1.acccode = a.acccode
                where  t1.cardtype in ('
                 || prmcardtypes
                 || ')
                      and  t1.balancedate >= to_date('''
                 || prmbegindate
                 || ''',''yyyy-mm-dd'') and t1.balancedate <= to_date('''
                 || prmenddate
                 || ''',''yyyy-mm-dd'') '
                 || ' and  t1.dptcode in (select dptcode from base_dept t5
                                 connect by t5.dptcode_p = prior t5.dptcode
                                 start with t5.dptcode = '''
                 || prmcode
                 || ''')
                 and t1.acccode = 203
                 and t1.empid<>0
                 and t1.customerunitcode = prmcustomerunitcode
                 group by t1.cardtype, t2.detailname)
            group by cardtype';

             open out_cursor for querysql;*/
         end if;
      end if;
   end rpt_cardtypecollect;

   procedure rpt_drivercollect (
      prmbegindate          in       varchar2,                  --查询开始时间
      prmenddate            in       varchar2,                  --查询结束时间
      prmcode               in       varchar2,          --部门代码 或 司机编码
      prmcodetype           in       number,    --查询类型，总目录，部门，司机
      prmcustomerunitcode   in       varchar2,
      out_cursor            out      refcursortype
   )
   as
      /*
       --------------------------------------------------------------------------
       --存储过程：rpt_drivercollect
       --作　　者：张秋玲
       --时　　间：2009-06-10
       --说　　明：卡交易汇总表（按司机进行查询）
       --输入参数：
       --输出参数：
       ------------------------------------------------------------------
       --修改标识：张秋玲20090620
       --修改原因：以前的统计速度太慢，因此增加了一个表“st_payment_consum_day”
                   专用于这类统计
       ------------------------------------------------------------------
       --修改标识：周晓娜20110921
       --修改原因：增加次卡钱包的统计：报表上交易次数包括：电子钱包+月票钱包+次卡钱包
                   交易金额：电子+月票

       ------------------------------------------------------------------
       --修改标识：周晓娜20111013
       --修改原因：增加打折金额的统计
       ------------------------------------------------------------------
       --修改标识：叶体强20120503
       --修改原因：屏蔽虚拟职员empid=0的记录
       ------------------------------------------------------------------
       */
      begindate   date;
      enddate     date;
   begin
      begindate := to_date (prmbegindate, 'yyyy-mm-dd');
      enddate := to_date (prmenddate, 'yyyy-mm-dd');

      if prmcode = 'root'
      --选择的顶级部门 显示该顶级部门及所有下级部门下的司机刷卡交易数据
      then
         open out_cursor for
            select   dptname, userid, empname,
                     nvl (sum (opermoney), 0) opermoney,
                     nvl (sum (operno), 0) operno,
                     nvl (sum (viceconsumemn), 0) viceconsumemn,
                     nvl (sum (viceconsumeno), 0) viceconsumeno,
                     nvl (sum (discountmn), 0) discountmn
                from (select   base_dept.dptname, base_emp.userid,
                               base_emp.empname, sum (t1.opermn) opermoney,
                               sum (t1.operno) operno,
                               nvl (sum (t1.discountmn), 0) discountmn,
                               0 as viceconsumemn, 0 as viceconsumeno
                          from st_payment_consum_day t1 left join base_emp
                               on t1.driverid = base_emp.empid
                             and t1.customerunitcode =
                                                     base_emp.customerunitcode
                               left join base_dept
                               on base_emp.dptcode = base_dept.dptcode
                             and base_emp.customerunitcode =
                                                    base_dept.customerunitcode
                         where t1.balancedate >= begindate
                           and t1.balancedate <= enddate
                           and t1.driverid <> 0
                           and t1.customerunitcode = prmcustomerunitcode
                           and t1.acccode in (201, 202)       --电子钱包，月票
                           and base_emp.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                      group by base_dept.dptcode,
                               base_dept.dptname,
                               base_emp.empid,
                               base_emp.userid,
                               base_emp.empname
                      union all
                      select   base_dept.dptname, base_emp.userid,
                               base_emp.empname,
                               sum (t1.opermn) as viceconsumemn,
                               sum (t1.operno) as viceconsumeno,
                               nvl (sum (t1.discountmn), 0) discountmn,
                               0 as opermoney, 0 as operno
                          from st_payment_consum_day t1 left join base_emp
                               on t1.driverid = base_emp.empid
                             and t1.customerunitcode =
                                                     base_emp.customerunitcode
                               left join base_dept
                               on base_emp.dptcode = base_dept.dptcode
                             and base_emp.customerunitcode =
                                                    base_dept.customerunitcode
                         where t1.balancedate >= begindate
                           and t1.balancedate <= enddate
                           and t1.driverid <> 0
                           and t1.customerunitcode = prmcustomerunitcode
                           and t1.acccode = 203                         --次卡
                           and base_emp.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                      group by base_dept.dptcode,
                               base_dept.dptname,
                               base_emp.empid,
                               base_emp.userid,
                               base_emp.empname)
            group by dptname, userid, empname;
      else
         if prmcodetype = 0                                            --司机
         then
            open out_cursor for
               select   dptname, userid, empname, sum (opermoney) opermoney,
                        sum (operno) operno,
                        sum (viceconsumemn) viceconsumemn,
                        sum (viceconsumeno) viceconsumeno
                   from (select   base_dept.dptname, base_emp.userid,
                                  base_emp.empname, sum (t1.opermn) opermoney,
                                  sum (t1.operno) operno,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  0 as viceconsumemn, 0 as viceconsumeno
                             from st_payment_consum_day t1 left join base_emp
                                  on t1.driverid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_dept
                                  on base_emp.dptcode = base_dept.dptcode
                                and base_emp.customerunitcode =
                                                    base_dept.customerunitcode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and base_emp.empid = prmcode
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode in (201, 202)    --电子钱包，月票
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_emp.empid,
                                  base_emp.userid,
                                  base_emp.empname
                         union all
                         select   base_dept.dptname, base_emp.userid,
                                  base_emp.empname,
                                  sum (t1.opermn) viceconsumemn,
                                  sum (t1.operno) viceconsumeno,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  0 as opermoney, 0 as operno
                             from st_payment_consum_day t1 left join base_emp
                                  on t1.driverid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_dept
                                  on base_emp.dptcode = base_dept.dptcode
                                and base_emp.customerunitcode =
                                                    base_dept.customerunitcode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and base_emp.empid = prmcode
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode = 203                      --次卡
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_emp.empid,
                                  base_emp.userid,
                                  base_emp.empname)
               group by dptname, userid, empname;
         else --选择的是部门节点，显示此部门及所有下级部门下的司机刷卡交易数据
            open out_cursor for
               select   dptname, userid, empname, sum (opermoney) opermoney,
                        sum (operno) operno,
                        nvl (sum (discountmn), 0) discountmn,
                        sum (viceconsumemn) viceconsumemn,
                        sum (viceconsumeno) viceconsumeno
                   from (select   base_dept.dptname, base_emp.userid,
                                  base_emp.empname, sum (t1.opermn) opermoney,
                                  sum (t1.operno) operno,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  0 as viceconsumemn, 0 as viceconsumeno
                             from st_payment_consum_day t1 left join base_emp
                                  on t1.driverid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_dept
                                  on base_emp.dptcode = base_dept.dptcode
                                and base_emp.customerunitcode =
                                                    base_dept.customerunitcode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode in (201, 202)    --电子钱包，月票
                              and base_emp.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_emp.empid,
                                  base_emp.userid,
                                  base_emp.empname
                         union all
                         select   base_dept.dptname, base_emp.userid,
                                  base_emp.empname,
                                  sum (t1.opermn) viceconsumemn,
                                  sum (t1.operno) viceconsumeno,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  0 as opermoney, 0 as operno
                             from st_payment_consum_day t1 left join base_emp
                                  on t1.driverid = base_emp.empid
                                and t1.customerunitcode =
                                                     base_emp.customerunitcode
                                  left join base_dept
                                  on base_emp.dptcode = base_dept.dptcode
                                and base_emp.customerunitcode =
                                                    base_dept.customerunitcode
                            where t1.balancedate >= begindate
                              and t1.balancedate <= enddate
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode = 203                      --次卡
                              and base_emp.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_emp.empid,
                                  base_emp.userid,
                                  base_emp.empname)
               group by dptname, userid, empname;
         end if;
      end if;
   end rpt_drivercollect;

   procedure rpt_buscollect (
      prmbegindate          in       varchar2,                  --查询开始时间
      prmenddate            in       varchar2,                  --查询结束时间
      prmcode               in       varchar2,                      --部门代码
      prmbusids             in       varchar2,
                                         --查询的车辆集合，多个车辆之间用,隔开
      prmcustomerunitcode   in       varchar2,
      out_cursor            out      refcursortype
   )
   as
      /*
       -------------------------------------------------------------------------
       --存储过程：rpt_buscollect
       --作　　者：任大伟
       --时　　间：2013-01-30
       --说　　明：统计分析（按车辆查询）
       --输入参数：
       --输出参数：
       -------------------------------------------------------------------------
       */
      querysql       varchar2 (32767);
      dt_begindate   date;
      dt_enddate     date;
   begin
      dt_begindate := to_date (prmbegindate, 'yyyy-mm-dd');
      dt_enddate := to_date (prmenddate, 'yyyy-mm-dd');

      if prmcode = 'root'
      then  --选择的顶级部门 显示该顶级部门及所有下级部门下的车辆刷卡交易数据
         if prmbusids is null or prmbusids = ''
         then
            open out_cursor for
               select   dptname, to_char (trunc (busid)) busid, busnumber,
                        sum (opermoney) opermoney, sum (operno) operno,
                        sum (viceconsumeno) viceconsumeno,
                        sum (viceconsumemn) viceconsumemn,
                        nvl (sum (discountmn), 0) discountmn, cardtype,
                        cardtypename
                   from (select   base_dept.dptname,
                                  to_char (trunc (base_bus.busno)) busid,
                                  base_bus.busnumber,
                                  sum (t1.opermn) opermoney,
                                  sum (t1.operno) operno, 0 as viceconsumeno,
                                  0 as viceconsumemn,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  t1.cardtype, t2.detailname as cardtypename
                             from st_payment_consum_day t1 left join base_bus
                                  on t1.busid = base_bus.busno
                                and t1.customerunitcode =
                                                     base_bus.customerunitcode
                                  left join base_dept
                                  on base_bus.dptcode = base_dept.dptcode
                                and base_bus.customerunitcode =
                                                    base_dept.customerunitcode
                                  left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                            where t1.balancedate >= dt_begindate
                              and t1.balancedate <= dt_enddate
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode in (201, 202)
                              and base_bus.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_bus.busno,
                                  base_bus.busnumber,
                                  t1.cardtype,
                                  t2.detailname
                         union all
                         select   base_dept.dptname,
                                  to_char (trunc (base_bus.busno)) busid,
                                  base_bus.busnumber, 0 as opermoney,
                                  0 as operno, sum (t1.opermn) viceconsumeno,
                                  sum (t1.operno) viceconsumemn,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  t1.cardtype, t2.detailname as cardtypename
                             from st_payment_consum_day t1 left join base_bus
                                  on t1.busid = base_bus.busno
                                and t1.customerunitcode =
                                                     base_bus.customerunitcode
                                  left join base_dept
                                  on base_bus.dptcode = base_dept.dptcode
                                and base_bus.customerunitcode =
                                                    base_dept.customerunitcode
                                  left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                            where t1.balancedate >= dt_begindate
                              and t1.balancedate <= dt_enddate
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode = 203
                              and base_bus.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_bus.busno,
                                  base_bus.busnumber,
                                  t1.cardtype,
                                  t2.detailname)
               group by dptname, busid, busnumber, cardtype, cardtypename;
         else
            open out_cursor for
               select   dptname, to_char (trunc (busid)) busid, busnumber,
                        sum (opermoney) opermoney, sum (operno) operno,
                        sum (viceconsumeno) viceconsumeno,
                        sum (viceconsumemn) viceconsumemn,
                        nvl (sum (discountmn), 0) discountmn, cardtype,
                        cardtypename
                   from (select   base_dept.dptname,
                                  to_char (trunc (base_bus.busno)) busid,
                                  base_bus.busnumber,
                                  sum (t1.opermn) opermoney,
                                  sum (t1.operno) operno, 0 as viceconsumeno,
                                  0 as viceconsumemn,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  t1.cardtype, t2.detailname as cardtypename
                             from st_payment_consum_day t1 left join base_bus
                                  on t1.busid = base_bus.busno
                                and t1.customerunitcode =
                                                     base_bus.customerunitcode
                                  left join base_dept
                                  on base_bus.dptcode = base_dept.dptcode
                                and base_bus.customerunitcode =
                                                    base_dept.customerunitcode
                                  left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                            where base_bus.busno in (
                                           select *
                                             from table (split (prmbusids,
                                                                ',')
                                                        ))
                              and t1.balancedate >= dt_begindate
                              and t1.balancedate <= dt_enddate
                              and base_bus.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = 'root')
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode in (201, 202)
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_bus.busno,
                                  base_bus.busnumber,
                                  t1.cardtype,
                                  t2.detailname
                         union all
                         select   base_dept.dptname,
                                  to_char (trunc (base_bus.busno)) busid,
                                  base_bus.busnumber,
                                  sum (t1.opermn) viceconsumemn,
                                  sum (t1.operno) viceconsumeno, 0 as operno,
                                  0 as opermoney,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  t1.cardtype, t2.detailname as cardtypename
                             from st_payment_consum_day t1 left join base_bus
                                  on t1.busid = base_bus.busno
                                and t1.customerunitcode =
                                                     base_bus.customerunitcode
                                  left join base_dept
                                  on base_bus.dptcode = base_dept.dptcode
                                and base_bus.customerunitcode =
                                                    base_dept.customerunitcode
                                  left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                            where base_bus.busno in (
                                           select *
                                             from table (split (prmbusids,
                                                                ',')
                                                        ))
                              and t1.balancedate >= dt_begindate
                              and t1.balancedate <= dt_enddate
                              and base_bus.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = 'root')
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode = 203
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_bus.busno,
                                  base_bus.busnumber,
                                  t1.cardtype,
                                  t2.detailname)
               group by dptname, busid, busnumber, cardtype, cardtypename;
         /*
         querysql :=
             ' select dptname,
                      to_char (trunc (busid)) busid,
                      busnumber,
                      sum (opermoney)  opermoney,
                      sum (operno)  operno,
                      sum (viceconsumeno) viceconsumeno,
                      sum (viceconsumemn) viceconsumemn,
                      nvl (sum (discountmn), 0) discountmn,
                      cardtype,
                      cardtypename
             from(
                 select base_dept.dptname,
                        to_char (trunc (base_bus.busno)) busid,
                        base_bus.busnumber,
                        sum (t1.opermn)  opermoney,
                        sum (t1.operno)  operno,
                        0 as viceconsumeno,
                        0 as viceconsumemn,
                        nvl (sum (t1.discountmn), 0) discountmn,
                        t1.cardtype,
                        t2.detailname as cardtypename
                   from st_payment_consum_day t1
                        left join base_bus on t1.busid = base_bus.busno
                        left join base_dept on base_bus.dptcode = base_dept.dptcode
                        left join base_cardtype_detail t2 on t1.cardtype = t2.detailid
                 where  base_bus.busno in (' || prmbusids || ')
                   and  t1.balancedate  >= to_date('''|| prmbegindate || ''',''yyyy-mm-dd'')
                   and  t1.balancedate  <= to_date('''|| prmenddate   || ''',''yyyy-mm-dd'')
                   and  base_bus.dptcode in (select dptcode from base_dept t5
                                 connect by t5.dptcode_p = prior t5.dptcode
                                 start with t5.dptcode_p = ''' || prmcode || ''')
                  and t1.driverid <> 0
                  and t1.customerunitcode = prmcustomerunitcode
                  and t1.acccode in (201,202)
             group by base_dept.dptcode,
                      base_dept.dptname,
                      base_bus.busno,
                      base_bus.busnumber,
                      t1.cardtype,
                      t2.detailname
            union all
                select  base_dept.dptname,
                        to_char (trunc (base_bus.busno)) busid,
                        base_bus.busnumber,
                        sum (t1.opermn)  viceconsumemn,
                        sum (t1.operno)  viceconsumeno,
                        0 as operno,
                        0 as opermoney,
                        nvl (sum (t1.discountmn), 0) discountmn,
                        t1.cardtype,
                        t2.detailname as cardtypename
                   from st_payment_consum_day t1
                        left join base_bus on t1.busid = base_bus.busno
                        left join base_dept on base_bus.dptcode = base_dept.dptcode
                        left join base_cardtype_detail t2 on t1.cardtype = t2.detailid
                where   base_bus.busno in (' || prmbusids || ')
                  and  t1.balancedate  >= to_date(''' || prmbegindate || ''',''yyyy-mm-dd'')
                  and  t1.balancedate  <= to_date(''' || prmenddate|| ''',''yyyy-mm-dd'')
                  and  base_bus.dptcode in (select dptcode from base_dept t5
                                 connect by t5.dptcode_p = prior t5.dptcode
                                 start with t5.dptcode_p = ''' || prmcode || ''')
                  and  t1.driverid <> 0
                  and  t1.customerunitcode = prmcustomerunitcode
                  and  t1.acccode = 203
             group by  base_dept.dptcode,
                       base_dept.dptname,
                       base_bus.busno,
                       base_bus.busnumber,
                       t1.cardtype,
                       t2.detailname )
          group by dptname,
                   busid,
                   busnumber,
                   cardtype,
                   cardtypename ';

             open out_cursor for querysql;*/
         end if;
      else    --选择的部门节点，则显示该部门及所有下级部门下的车辆刷卡交易数据
         if prmbusids is null or prmbusids = ''
         then
            open out_cursor for
               select   dptname, to_char (trunc (busid)) busid, busnumber,
                        sum (opermoney) opermoney, sum (operno) operno,
                        sum (viceconsumeno) viceconsumeno,
                        sum (viceconsumemn) viceconsumemn,
                        nvl (sum (discountmn), 0) discountmn, cardtype,
                        cardtypename
                   from (select   base_dept.dptname,
                                  to_char (trunc (base_bus.busno)) busid,
                                  base_bus.busnumber,
                                  sum (t1.opermn) opermoney,
                                  sum (t1.operno) operno, 0 as viceconsumeno,
                                  0 as viceconsumemn,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  t1.cardtype, t2.detailname as cardtypename
                             from st_payment_consum_day t1 left join base_bus
                                  on t1.busid = base_bus.busno
                                and t1.customerunitcode =
                                                     base_bus.customerunitcode
                                  left join base_dept
                                  on base_bus.dptcode = base_dept.dptcode
                                and base_bus.customerunitcode =
                                                    base_dept.customerunitcode
                                  left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                            where t1.balancedate >= dt_begindate
                              and t1.balancedate <= dt_enddate
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode in (201, 202)
                              and base_bus.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_bus.busno,
                                  base_bus.busnumber,
                                  t1.cardtype,
                                  t2.detailname
                         union all
                         select   base_dept.dptname,
                                  to_char (trunc (base_bus.busno)) busid,
                                  base_bus.busnumber, 0 as opermoney,
                                  0 as operno, sum (t1.opermn) viceconsumeno,
                                  sum (t1.operno) viceconsumemn,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  t1.cardtype, t2.detailname as cardtypename
                             from st_payment_consum_day t1 left join base_bus
                                  on t1.busid = base_bus.busno
                                and t1.customerunitcode =
                                                     base_bus.customerunitcode
                                  left join base_dept
                                  on base_bus.dptcode = base_dept.dptcode
                                and base_bus.customerunitcode =
                                                    base_dept.customerunitcode
                                  left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                            where t1.balancedate >= dt_begindate
                              and t1.balancedate <= dt_enddate
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode = 203
                              and base_bus.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_bus.busno,
                                  base_bus.busnumber,
                                  t1.cardtype,
                                  t2.detailname)
               group by dptname, busid, busnumber, cardtype, cardtypename;
         else
            open out_cursor for
               select   dptname, to_char (trunc (busid)) busid, busnumber,
                        sum (opermoney) opermoney, sum (operno) operno,
                        sum (viceconsumeno) viceconsumeno,
                        sum (viceconsumemn) viceconsumemn,
                        nvl (sum (discountmn), 0) discountmn, cardtype,
                        cardtypename
                   from (select   base_dept.dptname,
                                  to_char (trunc (base_bus.busno)) busid,
                                  base_bus.busnumber,
                                  sum (t1.opermn) opermoney,
                                  sum (t1.operno) operno, 0 as viceconsumeno,
                                  0 as viceconsumemn,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  t1.cardtype, t2.detailname as cardtypename
                             from st_payment_consum_day t1 left join base_bus
                                  on t1.busid = base_bus.busno
                                and t1.customerunitcode =
                                                     base_bus.customerunitcode
                                  left join base_dept
                                  on base_bus.dptcode = base_dept.dptcode
                                and base_bus.customerunitcode =
                                                    base_dept.customerunitcode
                                  left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                            where base_bus.busno in (
                                           select *
                                             from table (split (prmbusids,
                                                                ',')
                                                        ))
                              and t1.balancedate >= dt_begindate
                              and t1.balancedate <= dt_enddate
                              and base_bus.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = 'root')
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode in (201, 202)
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_bus.busno,
                                  base_bus.busnumber,
                                  t1.cardtype,
                                  t2.detailname
                         union all
                         select   base_dept.dptname,
                                  to_char (trunc (base_bus.busno)) busid,
                                  base_bus.busnumber,
                                  sum (t1.opermn) viceconsumemn,
                                  sum (t1.operno) viceconsumeno, 0 as operno,
                                  0 as opermoney,
                                  nvl (sum (t1.discountmn), 0) discountmn,
                                  t1.cardtype, t2.detailname as cardtypename
                             from st_payment_consum_day t1 left join base_bus
                                  on t1.busid = base_bus.busno
                                and t1.customerunitcode =
                                                     base_bus.customerunitcode
                                  left join base_dept
                                  on base_bus.dptcode = base_dept.dptcode
                                and base_bus.customerunitcode =
                                                    base_dept.customerunitcode
                                  left join base_cardtype_detail t2
                                  on t1.cardtype = t2.detailid
                            where base_bus.busno in (
                                           select *
                                             from table (split (prmbusids,
                                                                ',')
                                                        ))
                              and t1.balancedate >= dt_begindate
                              and t1.balancedate <= dt_enddate
                              and base_bus.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode_p = 'root')
                              and t1.driverid <> 0
                              and t1.customerunitcode = prmcustomerunitcode
                              and t1.acccode = 203
                         group by base_dept.dptcode,
                                  base_dept.dptname,
                                  base_bus.busno,
                                  base_bus.busnumber,
                                  t1.cardtype,
                                  t2.detailname)
               group by dptname, busid, busnumber, cardtype, cardtypename;
         /*
             querysql :=
             ' select dptname,
                      to_char (trunc (busid)) busid,
                      busnumber,
                      sum (opermoney)  opermoney,
                      sum (operno)  operno,
                      sum (viceconsumeno) viceconsumeno,
                      sum (viceconsumemn) viceconsumemn,
                      nvl (sum (discountmn), 0) discountmn,
                      cardtype,
                      cardtypename
             from(
                 select base_dept.dptname,
                        to_char (trunc (base_bus.busno)) busid,
                        base_bus.busnumber,
                        sum (t1.opermn)  opermoney,
                        sum (t1.operno)  operno,
                        0 as viceconsumeno,
                        0 as viceconsumemn,
                        nvl (sum (t1.discountmn), 0) discountmn,
                        t1.cardtype,
                        t2.detailname as cardtypename
                   from st_payment_consum_day t1
                        left join base_bus on t1.busid = base_bus.busno
                        left join base_dept on base_bus.dptcode = base_dept.dptcode
                        left join base_cardtype_detail t2 on t1.cardtype = t2.detailid
                where   base_bus.busno in ('|| prmbusids|| ')
                   and  t1.balancedate  >= to_date('''|| prmbegindate|| ''',''yyyy-mm-dd'')
                   and  t1.balancedate  <= to_date('''|| prmenddate || ''',''yyyy-mm-dd'')
                   and  base_bus.dptcode in (select dptcode from base_dept t5
                                 connect by t5.dptcode_p = prior t5.dptcode
                                 start with t5.dptcode_p = '''|| prmcode || ''')
                   and t1.driverid <> 0
                   and t1.customerunitcode = prmcustomerunitcode
                   and t1.acccode in (201,202)
              group by base_dept.dptcode,
                       base_dept.dptname,
                       base_bus.busno,
                       base_bus.busnumber,
                       t1.cardtype,
                       t2.detailname
                union all
                select base_dept.dptname,
                        to_char (trunc (base_bus.busno)) busid,
                        base_bus.busnumber,
                        sum (t1.opermn)  viceconsumemn,
                        sum (t1.operno)  viceconsumeno,
                        0 as operno,
                        0 as opermoney,
                        nvl (sum (t1.discountmn), 0) discountmn,
                        t1.cardtype,
                        t2.detailname as cardtypename
                   from st_payment_consum_day t1
                        left join base_bus on t1.busid = base_bus.busno
                        left join base_dept on base_bus.dptcode = base_dept.dptcode
                        left join base_cardtype_detail t2 on t1.cardtype = t2.detailid
                 where  base_bus.busno in ('|| prmbusids|| ')
                   and  t1.balancedate  >= to_date('''|| prmbegindate|| ''',''yyyy-mm-dd'')
                   and  t1.balancedate  <= to_date(''' || prmenddate|| ''',''yyyy-mm-dd'')
                   and base_bus.dptcode in (select dptcode from base_dept t5
                                 connect by t5.dptcode_p = prior t5.dptcode
                                 start with t5.dptcode_p = ''' || prmcode|| ''')
                   and t1.driverid <> 0
                   and t1.customerunitcode = prmcustomerunitcode
                   and t1.acccode = 203
              group by base_dept.dptcode,
                       base_dept.dptname,
                       base_bus.busno,
                       base_bus.busnumber,
                       t1.cardtype,
                       t2.detailname )
             group by dptname,
                      busid,
                      busnumber,
                      cardtype,
                      cardtypename ';
             open out_cursor for querysql;*/
         end if;
      end if;
   end rpt_buscollect;

   procedure rpt_buslinecollect (
      prmbegindate          in       varchar2,                  --查询开始时间
      prmenddate            in       varchar2,                  --查询结束时间
      prmcode               in       varchar2,          --部门代码 或 线路编码
      prmcodetype           in       number,    --查询类型，总目录，部门，线路
      prmcustomerunitcode   in       varchar2,                      --客户代码
      prmlineids            in       varchar2,
      out_cursor            out      refcursortype
   )
   as
       /*
      -------------------------------------------------------------------------------
      --存储过程：rpt_buslinecollect
      --作　　者：张秋玲
      --时　　间：2009-06-09
      --说　　明：线路刷卡交易汇总报表
      --输入参数：
      --输出参数：
      --------------------------------------------------------------------------
      --修改标识：张秋玲20090620
      --修改原因：以前的统计速度太慢，因此增加了一个表“st_payment_consum_day”
                专用于这类统计
      --------------------------------------------------------------------------
      --修改标识：周晓娜20110921
       --修改原因：增加次卡钱包的统计：报表上交易次数包括：电子钱包+月票钱包
                   交易金额：电子+月票
       ------------------------------------------------------------------
       --修改标识：周晓娜20111013
      --修改原因：增加打折金额的查询、并增加卡类型的分组查询
      ------------------------------------------------------------------
      ------------------------------------------------------------------
      --修改标识：叶体强20120503
      --修改原因：屏蔽虚拟职员empid=0的记录
      ------------------------------------------------------------------
      */
      begindate   date;
      enddate     date;
   begin
      begindate := to_date (prmbegindate, 'yyyy-mm-dd');
      enddate := to_date (prmenddate, 'yyyy-mm-dd');

      /*
              if prmcode = 'root'
              --选择的顶级部门 显示该顶级部门及所有下级部门下的线路刷卡交易数据
              then
                  open out_cursor for
                  select dptname,
                         linename,
                         nvl (sum(opermn),0) opermn,
                         nvl (sum(operno),0) operno,
                         nvl (sum(viceconsumemn),0) viceconsumemn,
                         nvl (sum(viceconsumeno),0) viceconsumeno,
                         nvl (sum(discountmn),0),
                         cardtype,
                         cardtypename
                  from(
                      select base_dept.dptname,
                             base_busline.linename,
                             sum (t1.opermn) opermn,
                             sum (t1.operno) operno,
                             nvl (sum (t1.discountmn), 0) discountmn,
                             t1.cardtype,
                             t2.detailname as cardtypename,
                             0 as viceconsumemn,
                             0 as viceconsumeno
                        from st_payment_consum_day t1
                             left join base_busline  on t1.buslineid = base_busline.lineid
                             left join base_dept  on base_busline.dptcode = base_dept.dptcode
                             left join base_cardtype_detail t2  on t1.cardtype = t2.detailid
                       where     t1.balancedate >= begindate
                             and t1.balancedate <= enddate
                             and t1.driverid <> 0
                             and t1.customerunitcode  = prmcustomerunitcode
                             and t1.acccode in (201,202)  --电子钱包，月票
                             and base_busline.dptcode in (select dptcode from base_dept t5
                                                              connect by t5.dptcode_p = prior t5.dptcode
                                                              start with t5.dptcode_p = prmcode)
                      group by base_dept.dptcode,
                               base_dept.dptname,
                               base_busline.lineid,
                               base_busline.linename,
                               t1.cardtype,
                               t2.detailname

                      union  all
                      select base_dept.dptname,
                             base_busline.linename,
                             sum (t1.opermn) viceconsumemn,
                             sum (t1.operno) viceconsumeno,
                             nvl (sum (t1.discountmn), 0) vdiscountmn,
                             t1.cardtype,
                             t2.detailname as cardtypename,
                             0 as opermoney,
                             0 as operno
                        from st_payment_consum_day t1
                             left join base_busline  on t1.buslineid = base_busline.lineid
                             left join base_dept on base_busline.dptcode = base_dept.dptcode
                             left join base_cardtype_detail t2 on t1.cardtype = t2.detailid

                       where     t1.balancedate >= begindate
                             and t1.balancedate <= enddate
                             and t1.driverid <> 0
                             and t1.customerunitcode  = prmcustomerunitcode
                             and t1.acccode = 203  --次卡钱包
                             and base_busline.dptcode in
                                     (select dptcode
                                        from base_dept t5
                                      connect by t5.dptcode_p = prior t5.dptcode
                                      start with t5.dptcode_p = prmcode)
                      group by base_dept.dptcode,
                               base_dept.dptname,
                               base_busline.lineid,
                               base_busline.linename,
                               t1.cardtype,
                               t2.detailname
                       )
                  group by dptname,
                           linename,
                           cardtype,
                           cardtypename;
              else*/
      if prmcodetype = 3                   --线路 ,显示指定的线路刷卡交易数据
      then
         open out_cursor for
            select   dptname, linename, nvl (sum (opermoney), 0) opermoney,
                     nvl (sum (operno), 0) operno,
                     nvl (sum (viceconsumemn), 0) viceconsumemn,
                     nvl (sum (viceconsumeno), 0) viceconsumeno,
                     nvl (sum (discountmn), 0), cardtype, cardtypename
                from (select   base_dept.dptname, base_busline.linename,
                               sum (t1.opermn) opermoney,
                               sum (t1.operno) operno,
                               nvl (sum (t1.discountmn), 0) discountmn,
                               t1.cardtype, t2.detailname as cardtypename,
                               0 as viceconsumemn, 0 as viceconsumeno
                          from st_payment_consum_day t1 left join base_busline
                               on t1.buslineid = base_busline.lineid
                             and t1.customerunitcode =
                                                 base_busline.customerunitcode
                               left join base_dept
                               on base_busline.dptcode = base_dept.dptcode
                             and base_busline.customerunitcode =
                                                    base_dept.customerunitcode
                               left join base_cardtype_detail t2
                               on t1.cardtype = t2.detailid
                         where t1.balancedate >= begindate
                           and t1.balancedate <= enddate
                           and t1.buslineid in (
                                          select *
                                            from table (split (prmlineids,
                                                               ',')
                                                       ))
                           and t1.driverid <> 0
                           and t1.customerunitcode = prmcustomerunitcode
                           and t1.acccode in (201, 202)
                      group by base_dept.dptcode,
                               base_dept.dptname,
                               base_busline.lineid,
                               base_busline.linename,
                               t1.cardtype,
                               t2.detailname
                      union all
                      select   base_dept.dptname, base_busline.linename,
                               sum (t1.opermn) viceconsumemn,
                               sum (t1.operno) viceconsumeno,
                               nvl (sum (t1.discountmn), 0) vdiscountmn,
                               t1.cardtype, t2.detailname as cardtypename,
                               0 as opermoney, 0 as operno
                          from st_payment_consum_day t1 left join base_busline
                               on t1.buslineid = base_busline.lineid
                             and t1.customerunitcode =
                                                 base_busline.customerunitcode
                               left join base_dept
                               on base_busline.dptcode = base_dept.dptcode
                             and base_busline.customerunitcode =
                                                    base_dept.customerunitcode
                               left join base_cardtype_detail t2
                               on t1.cardtype = t2.detailid
                         where t1.balancedate >= begindate
                           and t1.balancedate <= enddate
                           and t1.buslineid in (
                                          select *
                                            from table (split (prmlineids,
                                                               ',')
                                                       ))
                           and t1.driverid <> 0
                           and t1.customerunitcode = prmcustomerunitcode
                           and t1.acccode = 203
                      group by base_dept.dptcode,
                               base_dept.dptname,
                               base_busline.lineid,
                               base_busline.linename,
                               t1.cardtype,
                               t2.detailname)
            group by dptname, linename, cardtype, cardtypename;
      else                 --部门,显示该部门及所有下级部门下的线路刷卡交易数据
         open out_cursor for
            select   dptname, linename, nvl (sum (opermoney), 0) opermoney,
                     nvl (sum (operno), 0) operno,
                     nvl (sum (viceconsumemn), 0) viceconsumemn,
                     nvl (sum (viceconsumeno), 0) viceconsumeno,
                     nvl (sum (discountmn), 0), cardtype, cardtypename
                from (select   base_dept.dptname, base_busline.linename,
                               sum (t1.opermn) opermoney,
                               sum (t1.operno) operno,
                               nvl (sum (t1.discountmn), 0) discountmn,
                               t1.cardtype, t2.detailname as cardtypename,
                               0 as viceconsumemn, 0 as viceconsumeno
                          from st_payment_consum_day t1 left join base_busline
                               on t1.buslineid = base_busline.lineid
                             and t1.customerunitcode =
                                                 base_busline.customerunitcode
                               left join base_dept
                               on base_busline.dptcode = base_dept.dptcode
                             and base_busline.customerunitcode =
                                                    base_dept.customerunitcode
                               left join base_cardtype_detail t2
                               on t1.cardtype = t2.detailid
                         where t1.balancedate >= begindate
                           and t1.balancedate <= enddate
                           and t1.driverid <> 0
                           and t1.customerunitcode = prmcustomerunitcode
                           and t1.acccode in (201, 202)
                           and base_busline.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode = prmcode)
                      group by base_dept.dptcode,
                               base_dept.dptname,
                               base_busline.lineid,
                               base_busline.linename,
                               t1.cardtype,
                               t2.detailname
                      union all
                      select   base_dept.dptname, base_busline.linename,
                               sum (t1.opermn) viceconsumemn,
                               sum (t1.operno) viceconsumeno,
                               nvl (sum (t1.discountmn), 0) vdiscountmn,
                               t1.cardtype, t2.detailname as cardtypename,
                               0 as opermoney, 0 as operno
                          from st_payment_consum_day t1 left join base_busline
                               on t1.buslineid = base_busline.lineid
                             and t1.customerunitcode =
                                                 base_busline.customerunitcode
                               left join base_dept
                               on base_busline.dptcode = base_dept.dptcode
                             and base_busline.customerunitcode =
                                                    base_dept.customerunitcode
                               left join base_cardtype_detail t2
                               on t1.cardtype = t2.detailid
                         where t1.balancedate >= begindate
                           and t1.balancedate <= enddate
                           and t1.driverid <> 0
                           and t1.customerunitcode = prmcustomerunitcode
                           and t1.acccode = 203
                           and base_busline.dptcode in (
                                      select     dptcode
                                            from base_dept t5
                                      connect by t5.dptcode_p =
                                                               prior t5.dptcode
                                      start with t5.dptcode = prmcode)
                      group by base_dept.dptcode,
                               base_dept.dptname,
                               base_busline.lineid,
                               base_busline.linename,
                               t1.cardtype,
                               t2.detailname)
            group by dptname, linename, cardtype, cardtypename;
      end if;
   --end if;
   end rpt_buslinecollect;
-- enter further code below as specified in the package spec.
end;

/
create or replace package pkg_rpt_thirdrecord
is
    type ref_cursor is ref cursor;

    --第三方明细报表
    procedure proc_thirdrecord_detail (
        prmmaincardtypes      in     varchar2, --主卡类型（格式,隔开的）
        prmdatakind           in     number, --清算类型：0:全部；1：已清算；2：待清算
        prmdatetype           in     number, --日期类型：0：清算日期；1：交易日期；2：入库日期
        prmsdate              in     varchar2, --开始日期
        prmedate              in     varchar2, --结束日期
        prmcustomerunitcode   in     varchar2, --客户法人
        io_allrec                out ref_cursor);

    --第三方汇总报表
    procedure proc_thirdrecord_group (
        prmdatetype           in     number, --日期类型：1：清算日期；2：交易日期；3：入库日期
        prmsdate              in     varchar2, --开始日期
        prmedate              in     varchar2, --结束日期
        prmcustomerunitcode   in     varchar2, --客户法人
        io_allrec                out ref_cursor);
end pkg_rpt_thirdrecord;/
create or replace package body pkg_rpt_thirdrecord
is
    --第三方明细报表
    procedure proc_thirdrecord_detail (
        prmmaincardtypes      in     varchar2, --主卡类型（格式,隔开的）
        prmdatakind           in     number, --清算类型：0:全部；1：已清算；2：待清算
        prmdatetype           in     number, --日期类型：0：清算日期；1：交易日期；2：入库日期
        prmsdate              in     varchar2, --开始日期
        prmedate              in     varchar2, --结束日期
        prmcustomerunitcode   in     varchar2, --客户法人
        io_allrec                out ref_cursor)
    as
        v_datakindsql   varchar2 (200);
        v_datesql       varchar2 (1000);
        v_sql           varchar2 (4000);
        v_ordersql      varchar2 (200);
    begin
        v_datakindsql := '';
        v_datesql := '';
        v_ordersql := '';

        --拼接清算状态sql
        if prmdatakind = 1 --已清算
        then
            v_datakindsql :=
                ' and v.status in (1,2) and v.responsecode is not null';
        elsif prmdatakind = 2 --待清算
        then
            v_datakindsql := ' and v.status =0 and v.responsecode is null';
        end if;


        --拼接日期sql
        if prmdatetype = 0 --清算日期
        then
            v_datesql :=
                   ' and v.accountdate >='
                || 'to_date('
                || ''''
                || prmsdate
                || ''''
                || ',''yyyy-mm-dd'') and v.accountdate <'
                || 'to_date('
                || ''''
                || prmedate
                || ''''
                || ',''yyyy-mm-dd'') + 1';
            v_ordersql := ' order by v.accountdate desc ';
        elsif prmdatetype = 1 --交易日期
        then
            v_datesql :=
                   ' and v.opdt >='
                || 'to_date('
                || ''''
                || prmsdate
                || ''''
                || ',''yyyy-mm-dd'') and v.opdt <'
                || 'to_date('
                || ''''
                || prmedate
                || ''''
                || ',''yyyy-mm-dd'') + 1';
                            v_ordersql := ' order by v.opdt desc ';
        elsif prmdatetype = 2 --入库日期
        then
            v_datesql :=
                   ' and v.uploaddate >='
                || 'to_date('
                || ''''
                || prmsdate
                || ''''
                || ',''yyyy-mm-dd'') and v.uploaddate <'
                || 'to_date('
                || ''''
                || prmedate
                || ''''
                || ',''yyyy-mm-dd'') + 1';
            v_ordersql := ' order by v.uploaddate desc ';
        end if;

        v_sql :=
               'select to_char(v.poscode) as poscode,
               v.systracenum,
               v.opfare,
               v.discountfare,
               to_char(v.opdt,'''|| 'yyyy-mm-dd hh24:mi:ss'|| ''') as opdt,
               case v.status when 0 then '''||'待清算'||''' else '''||'已清算'||''' end as status,
               case v.status when 0 then '''||'待清算'||''' when 1 then '''||'清算失败'||''' else '''||'清算成功'||''' end as responsecode,
               to_char(v.accountdate,'''|| 'yyyy-mm-dd'|| ''') as accountdate,
               case to_number(v.ordertype) when '||'1'||' then '''||'正常行程单'||''' when '||'2'||' then '''||'带人行程单'||''' else '''||'换乘订单'||''' end as ordertype,
               v.filename
              from v_rec_thirdrecord v
             where v.maincardtype in ('
            || prmmaincardtypes
            || ') and v.customerunitcode ='''||prmcustomerunitcode||''''
            || v_datakindsql
            || v_datesql||v_ordersql;

        open io_allrec for v_sql;
    end;

    --第三方汇总报表
    procedure proc_thirdrecord_group (
        prmdatetype           in     number, --日期类型：1：清算日期；2：交易日期；3：入库日期
        prmsdate              in     varchar2, --开始日期
        prmedate              in     varchar2, --结束日期
        prmcustomerunitcode   in     varchar2, --客户法人
        io_allrec                out ref_cursor)
    as
        selectsqls   varchar (4000);
        wheresqls    varchar (4000);
        sqlstr       varchar (4000);
        sdate        varchar (4000);
        edate        varchar (4000);
    begin
        /*
        1.create date:2018-03-29 11:00
        2.author:林成行
        2.function:第三方发码(卡)清分清算消费汇总
        3.此存储过程用到视图 v_rec_thirdrecord 说明：在视图中 以 status = 2 标识自定义成功的记录
        4.sql 为动态sql
        */

        sdate := 'to_date(' || '''' || prmsdate || '''' || ',''yyyy-mm-dd'')';
        edate :=
            'to_date(' || '''' || prmedate || '''' || ',''yyyy-mm-dd'') + 1';

        if prmdatetype = 1
        then --清算日期
            selectsqls := 'accountdate';
            wheresqls :=
                   ' v.accountdate >='
                || sdate
                || ' and v.accountdate <'
                || edate;
        elsif prmdatetype = 2
        then --交易日期
            selectsqls := 'opdt';
            wheresqls := ' v.opdt >=' || sdate || ' and v.opdt <' || edate;
        else --入库日期
            selectsqls := 'uploaddate';
            wheresqls :=
                   ' v.uploaddate >='
                || sdate
                || ' and v.uploaddate <'
                || edate;
        end if;

        sqlstr :=
               ' with base_data as (select to_char(v.'
            || selectsqls
            || ',''yyyy-mm-dd'') '
            || selectsqls
            || ' , v.opfare,v.status from v_rec_thirdrecord v where v.customerunitcode = '
            || prmcustomerunitcode
            || ' and '
            || wheresqls
            || ' and v.status in(1, 2))'
            || ' select '
            || selectsqls
            || ' operatedate,failcount,failopfare,succcount,succopfare,failcount + succcount totalcount,failopfare + succopfare totalopfare from( '
            || ' select a.'
            || selectsqls
            || ', nvl(b.failcount,0) failcount, nvl(b.failopfare,0) failopfare,nvl(c.succcount,0) succcount, nvl(c.succopfare,0) succopfare '
            || ' from (select distinct '
            || selectsqls
            || ' from base_data) a'
            || ' left join (select '
            || selectsqls
            || ', count(1) failcount, sum(opfare) failopfare from base_data where status = 1 group by '
            || selectsqls
            || ') b'
            || '  on a.'
            || selectsqls
            || ' = '
            || 'b.'
            || selectsqls
            || ' left join (select '
            || selectsqls
            || ', count(1) succcount, sum(opfare) succopfare from base_data where status = 2 group by '
            || selectsqls
            || ') c'
            || '  on a.'
            || selectsqls
            || ' = '
            || 'c.'
            || selectsqls
            || ') order by ' || selectsqls || ' desc';

        open io_allrec for sqlstr;
    end;
end pkg_rpt_thirdrecord;/
create or replace package        pkg_rpt_tranaccount
is
/*
----------------------------------------------------------------------------
--过程包名：pkg_rpt_tranaccount
--作　　者：周晓娜
--时　　间： 2013-01-31
--说　　明：资金划拨相关报表和更新流程
----------------------------------------------------------------------------
*/
   type ref_cursor is ref cursor;              --游标类型定义，用于返回数据集

   --查询出纳交款信息
   procedure pro_emp_account (
      prmstartdate      in       varchar2,                     --结算开始日期
      prmenddate        in       varchar2,                     --结算结束日期
      prmtype           in       integer,  --查询类型0 全部 1 未划拨 2 已划拨
      prmcodeid         in       varchar2,              -- 出纳员或者部门编码
      prmcustunitcode   in       varchar2,                         --客户代码
      prmcodetype       in       number,
      --划拨类型：0 按照部门划拨 1 按照出纳员划拨
      io_allrec         out      ref_cursor
   );

   --汇总出纳交款总计数据
   procedure pro_emp_totalaccount (
      prmstartdate      in       varchar2,                     --结算开始日期
      prmenddate        in       varchar2,                     --结算结束日期
      prmtype           in       integer,  --查询类型0 全部 1 未划拨 2 已划拨
      prmcodeid         in       varchar2,              -- 出纳员或者部门编码
      prmcustunitcode   in       varchar2,                         --客户代码
      io_allrec         out      ref_cursor
   );

   --查询商户结算信息
   procedure pro_merchant_account (
      prmstartdate      in       varchar2,                     --结算开始日期
      prmenddate        in       varchar2,                     --结算结束日期
      prmtype           in       integer,  --查询类型0 全部 1 未划拨 2 已划拨
      prmcodeid         in       varchar2,            -- 商户代码或者部门编码
      prmcustunitcode   in       varchar2,                         --客户代码
      io_allrec         out      ref_cursor
   );

   --汇总商户结算总计数据
   procedure pro_merchant_totalaccount (
      prmstartdate      in       varchar2,                     --结算开始日期
      prmenddate        in       varchar2,                     --结算结束日期
      prmtype           in       integer,  --查询类型0 全部 1 未划拨 2 已划拨
      prmcodeid         in       varchar2,            -- 商户代码或者部门编码
      prmcustunitcode   in       varchar2,                         --客户代码
      io_allrec         out      ref_cursor
   );

   --根据条件更新划拨标记
   procedure pro_update_isaccount (
      prmstartdate      in       varchar2,                         --开始时间
      prmenddate        in       varchar2,                         --结束时间
      prmtype           in       integer,  --划拨类型 1：出纳交款 2：商户结算
      prmcodeid         in       varchar2,                             --编码
      prmcustunitcode   in       varchar2,                         --客户代码
      prmcodetype       in       number,
      prmempid          in       number,                        --操作人empid
      --划拨类型：0 按照部门划拨 1 按照出纳员划拨
      out_result        out      number,                             --返回值
      out_msg           out      varchar2                          --返回信息
   );
end;


 
 
 
 /
create or replace package body        pkg_rpt_tranaccount
is
/*
----------------------------------------------------------------------------
--过程包名：pkg_rpt_tranaccount
--作　　者：周晓娜
--时　　间： 2013-01-31
--说　　明：资金划拨相关报表和更新流程
----------------------------------------------------------------------------
*/
   procedure pro_emp_account (
      prmstartdate      in       varchar2,                     --结算开始日期
      prmenddate        in       varchar2,                     --结算结束日期
      prmtype           in       integer,  --查询类型0 全部 1 未划拨 2 已划拨
      prmcodeid         in       varchar2,              -- 出纳员或者部门编码
      prmcustunitcode   in       varchar2,                         --客户代码
      prmcodetype       in       number,
      --划拨类型：0 按照部门划拨 1 按照出纳员划拨
      io_allrec         out      ref_cursor
   )
   as
      t_startdate   date;                                      --查询开始日期
      t_enddate     date;                                      --查询结束日期
   begin
      /*
      --------------------------------------------------------------------------
      --存储过程：pro_emp_account
      --作　　者：周晓娜
      --时　　间：2013-01-31
      --说　　明：资金划拨-出纳交款划拨
      --输入参数：
               参考过程参数详细注释
      --输出参数：
      --  io_allrec      所获得的数据集
      --------------------------------------------------------------------------
      */
      t_startdate := to_date (prmstartdate, 'yyyy-mm-dd');
      t_enddate := to_date (prmenddate, 'yyyy-mm-dd');

      --查询全部的资金信息
      if prmtype = 0
      then
         open io_allrec for
            select   a.empid, nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn, b.empcode, b.empname,
                     a.balancedate, a.customerunitcode, a.acccode,
                     c.accdscrp,
                     case (a.flag)
                        when 0
                           then '未划拨'
                        when 1
                           then '已划拨'
                        else '其它'
                     end as flag
                from st_payment_cash_day a, base_emp b, base_acc_type c
               where a.empid = b.empid
                 and a.customerunitcode = b.customerunitcode
                 and a.acccode = c.acccode
                 and a.empid = prmcodeid
                 and a.customerunitcode = prmcustunitcode
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
            group by a.empid,
                     b.empcode,
                     b.empname,
                     a.balancedate,
                     a.customerunitcode,
                     a.acccode,
                     c.accdscrp,
                     a.flag;
      --查询未划拨的账目信息
      elsif prmtype = 1
      then
         open io_allrec for
            select   a.empid, nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn, b.empcode, b.empname,
                     a.balancedate, a.customerunitcode, a.acccode,
                     c.accdscrp,
                     case (a.flag)
                        when 0
                           then '未划拨'
                        when 1
                           then '已划拨'
                        else '其它'
                     end as flag
                from st_payment_cash_day a, base_emp b, base_acc_type c
               where a.empid = b.empid
                 and a.customerunitcode = b.customerunitcode
                 and a.acccode = c.acccode
                 and a.empid = prmcodeid
                 and a.customerunitcode = prmcustunitcode
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
                 and a.flag = 0
            group by a.empid,
                     b.empcode,
                     b.empname,
                     a.balancedate,
                     a.customerunitcode,
                     a.acccode,
                     c.accdscrp,
                     a.flag;
      --查询已划拨的账目
      elsif prmtype = 2
      then
         open io_allrec for
            select   a.empid, nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn, b.empcode, b.empname,
                     a.balancedate, a.customerunitcode, a.acccode,
                     c.accdscrp,
                     case (a.flag)
                        when 0
                           then '未划拨'
                        when 1
                           then '已划拨'
                        else '其它'
                     end as flag
                from st_payment_cash_day a, base_emp b, base_acc_type c
               where a.empid = b.empid
                 and a.customerunitcode = b.customerunitcode
                 and a.acccode = c.acccode
                 and a.empid = prmcodeid
                 and a.customerunitcode = prmcustunitcode
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
                 and a.flag = 1
            group by a.empid,
                     b.empcode,
                     b.empname,
                     a.balancedate,
                     a.customerunitcode,
                     a.acccode,
                     c.accdscrp,
                     a.flag;
      --其他情况下查询所有的资金信息
      else
         open io_allrec for
            select   a.empid, nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn, b.empcode, b.empname,
                     a.balancedate, a.customerunitcode, a.acccode,
                     c.accdscrp,
                     case (a.flag)
                        when 0
                           then '未划拨'
                        when 1
                           then '已划拨'
                        else '其它'
                     end as flag
                from st_payment_cash_day a, base_emp b, base_acc_type c
               where a.empid = b.empid
                 and a.customerunitcode = b.customerunitcode
                 and a.acccode = c.acccode
                 and a.empid = prmcodeid
                 and a.customerunitcode = prmcustunitcode
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
            group by a.empid,
                     b.empcode,
                     b.empname,
                     a.balancedate,
                     a.customerunitcode,
                     a.acccode,
                     c.accdscrp,
                     a.flag;
      end if;
   end;

   --汇总出纳交款总计数据
   procedure pro_emp_totalaccount (
      prmstartdate      in       varchar2,                      --结算开始日期
      prmenddate        in       varchar2,                      --结算结束日期
      prmtype           in       integer,   --查询类型0 全部 1 未划拨 2 已划拨
      prmcodeid         in       varchar2,               -- 出纳员或者部门编码
      prmcustunitcode   in       varchar2,                          --客户代码
      io_allrec         out      ref_cursor
   )
   as
      t_startdate   date;                                      --查询开始日期
      t_enddate     date;                                      --查询结束日期
   begin
      /*
      --------------------------------------------------------------------------
      --存储过程：pro_emp_totalaccount
      --作　　者：周晓娜
      --时　　间：2013-01-31
      --说　　明：资金划拨-出纳交款划拨汇总
      --输入参数：
               参考过程参数详细注释
      --输出参数：
      --  io_allrec      所获得的数据集
      --------------------------------------------------------------------------
      */
      t_startdate := to_date (prmstartdate, 'yyyy-mm-dd');
      t_enddate := to_date (prmenddate, 'yyyy-mm-dd');

      --查询全部的资金信息
      if prmtype = 0
      then
         open io_allrec for
            select   nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn, a.acccode,
                     b.accdscrp
                from st_payment_cash_day a, base_acc_type b
               where a.customerunitcode = prmcustunitcode
                 and a.acccode = b.acccode
                 and a.empid = prmcodeid
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
            group by a.acccode, b.accdscrp
            order by a.acccode;
      --查询未划拨的账目信息
      elsif prmtype = 1
      then
         open io_allrec for
            select   nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn, a.acccode,
                     b.accdscrp
                from st_payment_cash_day a, base_acc_type b
               where a.customerunitcode = prmcustunitcode
                 and a.acccode = b.acccode
                 and a.empid = prmcodeid
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
                 and a.flag = 0
            group by a.acccode, b.accdscrp
            order by a.acccode;
      --查询已划拨的账目
      elsif prmtype = 2
      then
         open io_allrec for
            select   nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn, a.acccode,
                     b.accdscrp
                from st_payment_cash_day a, base_acc_type b
               where a.customerunitcode = prmcustunitcode
                 and a.acccode = b.acccode
                 and a.empid = prmcodeid
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
                 and a.flag = 1
            group by a.acccode, b.accdscrp
            order by a.acccode;
      --其他情况下查询所有的资金信息
      else
         open io_allrec for
            select   nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn, a.acccode,
                     b.accdscrp
                from st_payment_cash_day a, base_acc_type b
               where a.customerunitcode = prmcustunitcode
                 and a.acccode = b.acccode
                 and a.empid = prmcodeid
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
            group by a.acccode, b.accdscrp
            order by a.acccode;
      end if;
   end;

   --查询商户结算信息
   procedure pro_merchant_account (
      prmstartdate      in       varchar2,                      --结算开始日期
      prmenddate        in       varchar2,                      --结算结束日期
      prmtype           in       integer,   --查询类型0 全部 1 未划拨 2 已划拨
      prmcodeid         in       varchar2,             -- 商户代码或者部门编码
      prmcustunitcode   in       varchar2,                          --客户代码
      io_allrec         out      ref_cursor
   )
   as
      t_startdate   date;                                      --查询开始日期
      t_enddate     date;                                      --查询结束日期
   begin
      /*
      --------------------------------------------------------------------------
      --存储过程：pro_merchant_account
      --作　　者：周晓娜
      --时　　间：2013-01-31
      --说　　明：资金划拨-商户结算划拨
      --输入参数：
               参考过程参数详细注释
      --输出参数：
      --  io_allrec      所获得的数据集
      --------------------------------------------------------------------------
      */
      t_startdate := to_date (prmstartdate, 'yyyy-mm-dd');
      t_enddate := to_date (prmenddate, 'yyyy-mm-dd');

      --查询全部的资金信息
      if prmtype = 0
      then
         open io_allrec for
            select   a.dptcode, b.dptname, nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn,
                     nvl (sum (a.cityagencymn), 0) as cityagencymn,
                     nvl (sum (a.banktranmn), 0) as banktranmn,
                     nvl (sum (a.realtranmn), 0) as realtranmn,
                     case (a.isaccount)
                        when 0
                           then '未划拨'
                        when 6
                           then '已划拨'
                        else '其它状态'
                     end as isaccount,
                     a.balancedate
                from st_tranaccount a, base_dept b
               where a.dptcode = b.dptcode
                 and a.customerunitcode = b.customerunitcode
                 and a.dptcode = prmcodeid
                 and a.customerunitcode = prmcustunitcode
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
            group by a.dptcode, b.dptname, a.isaccount, a.balancedate
            order by a.dptcode;
      --查询未划拨的账目信息
      elsif prmtype = 1
      then
         open io_allrec for
            select   a.dptcode, b.dptname, nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn,
                     nvl (sum (a.cityagencymn), 0) as cityagencymn,
                     nvl (sum (a.banktranmn), 0) as banktranmn,
                     nvl (sum (a.realtranmn), 0) as realtranmn,
                     case (a.isaccount)
                        when 0
                           then '未划拨'
                        when 6
                           then '已划拨'
                        else '其它状态'
                     end as isaccount,
                     a.balancedate
                from st_tranaccount a, base_dept b
               where a.dptcode = b.dptcode
                 and a.customerunitcode = b.customerunitcode
                 and a.dptcode = prmcodeid
                 and a.customerunitcode = prmcustunitcode
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
                 and a.isaccount = 0
            group by a.dptcode, b.dptname, a.isaccount, a.balancedate
            order by a.dptcode;
      --查询已划拨的账目
      elsif prmtype = 2
      then
         open io_allrec for
            select   a.dptcode, b.dptname, nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn,
                     nvl (sum (a.cityagencymn), 0) as cityagencymn,
                     nvl (sum (a.banktranmn), 0) as banktranmn,
                     nvl (sum (a.realtranmn), 0) as realtranmn,
                     case (a.isaccount)
                        when 0
                           then '未划拨'
                        when 6
                           then '已划拨'
                        else '其它状态'
                     end as isaccount,
                     a.balancedate
                from st_tranaccount a, base_dept b
               where a.dptcode = b.dptcode
                 and a.customerunitcode = b.customerunitcode
                 and a.dptcode = prmcodeid
                 and a.customerunitcode = prmcustunitcode
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
                 and a.isaccount = 6
            group by a.dptcode, b.dptname, a.isaccount, a.balancedate
            order by a.dptcode;
      --其他情况下查询所有的资金信息
      else
         open io_allrec for
            select   a.dptcode, b.dptname, nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn), 0) as opermn,
                     nvl (sum (a.cityagencymn), 0) as cityagencymn,
                     nvl (sum (a.banktranmn), 0) as banktranmn,
                     nvl (sum (a.realtranmn), 0) as realtranmn,
                     case (a.isaccount)
                        when 0
                           then '未划拨'
                        when 6
                           then '已划拨'
                        else '其它状态'
                     end as isaccount,
                     a.balancedate
                from st_tranaccount a, base_dept b
               where a.dptcode = b.dptcode
                 and a.customerunitcode = b.customerunitcode
                 and a.dptcode = prmcodeid
                 and a.customerunitcode = prmcustunitcode
                 and a.balancedate >= t_startdate
                 and a.balancedate <= t_enddate
            group by a.dptcode, b.dptname, a.isaccount, a.balancedate
            order by a.dptcode;
      end if;
   end;

   --汇总商户结算总计数据
   procedure pro_merchant_totalaccount (
      prmstartdate      in       varchar2,                      --结算开始日期
      prmenddate        in       varchar2,                      --结算结束日期
      prmtype           in       integer,   --查询类型0 全部 1 未划拨 2 已划拨
      prmcodeid         in       varchar2,             -- 商户代码或者部门编码
      prmcustunitcode   in       varchar2,                          --客户代码
      io_allrec         out      ref_cursor
   )
   as
      t_startdate   date;                                      --查询开始日期
      t_enddate     date;                                      --查询结束日期
   begin
      /*
      --------------------------------------------------------------------------
      --存储过程：pro_merchant_account
      --作　　者：周晓娜
      --时　　间：2013-01-31
      --说　　明：资金划拨-商户结算划拨汇总
      --输入参数：
               参考过程参数详细注释
      --输出参数：
      --  io_allrec      所获得的数据集
      --------------------------------------------------------------------------
      */
      t_startdate := to_date (prmstartdate, 'yyyy-mm-dd');
      t_enddate := to_date (prmenddate, 'yyyy-mm-dd');

      --查询全部的资金信息
      if prmtype = 0
      then
         open io_allrec for
            select nvl (sum (a.operno), 0) as operno,
                   nvl (sum (a.opermn), 0) as opermn,
                   nvl (sum (a.cityagencymn), 0) as cityagencymn,
                   nvl (sum (a.banktranmn), 0) as banktranmn,
                   nvl (sum (a.realtranmn), 0) as realtranmn
              from st_tranaccount a, base_dept b
             where a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.dptcode = prmcodeid
               and a.customerunitcode = prmcustunitcode
               and a.balancedate >= t_startdate
               and a.balancedate <= t_enddate;
      --查询未划拨的账目信息
      elsif prmtype = 1
      then
         open io_allrec for
            select nvl (sum (a.operno), 0) as operno,
                   nvl (sum (a.opermn), 0) as opermn,
                   nvl (sum (a.cityagencymn), 0) as cityagencymn,
                   nvl (sum (a.banktranmn), 0) as banktranmn,
                   nvl (sum (a.realtranmn), 0) as realtranmn
              from st_tranaccount a, base_dept b
             where a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.dptcode = prmcodeid
               and a.customerunitcode = prmcustunitcode
               and a.balancedate >= t_startdate
               and a.balancedate <= t_enddate
               and a.isaccount = 0;
      --查询已划拨的账目
      elsif prmtype = 2
      then
         open io_allrec for
            select nvl (sum (a.operno), 0) as operno,
                   nvl (sum (a.opermn), 0) as opermn,
                   nvl (sum (a.cityagencymn), 0) as cityagencymn,
                   nvl (sum (a.banktranmn), 0) as banktranmn,
                   nvl (sum (a.realtranmn), 0) as realtranmn
              from st_tranaccount a, base_dept b
             where a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.dptcode = prmcodeid
               and a.customerunitcode = prmcustunitcode
               and a.balancedate >= t_startdate
               and a.balancedate <= t_enddate
               and a.isaccount = 6;
      --其他情况下查询所有的资金信息
      else
         open io_allrec for
            select nvl (sum (a.operno), 0) as operno,
                   nvl (sum (a.opermn), 0) as opermn,
                   nvl (sum (a.cityagencymn), 0) as cityagencymn,
                   nvl (sum (a.banktranmn), 0) as banktranmn,
                   nvl (sum (a.realtranmn), 0) as realtranmn
              from st_tranaccount a, base_dept b
             where a.dptcode = b.dptcode
               and a.customerunitcode = b.customerunitcode
               and a.dptcode = prmcodeid
               and a.customerunitcode = prmcustunitcode
               and a.balancedate >= t_startdate
               and a.balancedate <= t_enddate;
      end if;
   end;

   --根据条件更新划拨标记
   procedure pro_update_isaccount (
      prmstartdate      in       varchar2,                          --开始时间
      prmenddate        in       varchar2,                          --结束时间
      prmtype           in       integer,   --划拨类型 1：出纳交款 2：商户结算
      prmcodeid         in       varchar2,                              --编码
      prmcustunitcode   in       varchar2,                          --客户代码
      prmcodetype       in       number,
      prmempid          in       number,                         --操作人empid
      --划拨类型：0 按照部门划拨 1 按照出纳员划拨
      out_result        out      number,                              --返回值
      out_msg           out      varchar2                           --返回信息
   )
   as
   /*
      --------------------------------------------------------------------------
      --存储过程：pro_update_isaccount
      --作　　者：周晓娜
      --时　　间：2013-01-31
      --说　　明：资金划拨-内部处理流程，更新划拨的账目标记
      --输入参数：
               参考过程参数详细注释
      --输出参数：
      --  out_result      返回值 100，处理成功，其他值参考详细描述
          out_msg    返回信息
      --------------------------------------------------------------------------
      */
   begin
      --出纳交款划拨
      if prmtype = 1
      then
         --更新原始日结数据
         update st_payment_cash_day a
            set flag = 1
          where a.empid = prmcodeid
            and a.balancedate >= to_date (prmstartdate, 'yyyy-mm-dd')
            and a.balancedate <= to_date (prmenddate, 'yyyy-mm-dd')
            and a.customerunitcode = prmcustunitcode;

         --更新日结信息表
         update st_payment_day a
            set a.flag = 1
          where a.acccode in (
                     select b.acccode
                       from st_payment_day b, base_acc_type c
                      where b.acccode = c.acccode
                            and c.groupid in (1, 3, 7, 8))
            and a.empid = prmcodeid
            and a.balancedate >= to_date (prmstartdate, 'yyyy-mm-dd')
            and a.balancedate <= to_date (prmenddate, 'yyyy-mm-dd')
            and a.customerunitcode = prmcustunitcode;

         --更新收支 日结数据
         update st_sys_income_outpay_day
            set flag = 1
          where codeid = prmcodeid
            and accounttype = 3
            and balancedate >= to_date (prmstartdate, 'yyyy-mm-dd')
            and balancedate < = to_date (prmenddate, 'yyyy-mm-dd')
            and customerunitcode = prmcustunitcode;

         --更新会计账目日结数据
         update st_account_acc_day
            set flag = 1
          where subcode = 101
            and dir = 1
            and subdscrp = '现金科目'
            and balancedate >= to_date (prmstartdate, 'yyyy-mm-dd')
            and balancedate <= to_date (prmenddate, 'yyyy-mm-dd')
            and customerunitcode = prmcustunitcode;

         --插入资金划拨日志
         insert into st_tranaccount_log
                     (empid, operationtype, balancedate, accountstr, codeid,
                      opdt, opfare, customerunitcode)
            select prmempid, 0, balancedate, id, prmcodeid,
                   trunc (sysdate, 'dd'), opermn, prmcustunitcode
              from st_payment_cash_day
             where empid = prmcodeid
               and flag = 1
               and balancedate >= to_date (prmstartdate, 'yyyy-mm-dd')
               and balancedate <= to_date (prmenddate, 'yyyy-mm-dd')
               and customerunitcode = prmcustunitcode;
      else
         --更新实际转账数据
         update st_tranaccount
            set isaccount = 6
          where dptcode = prmcodeid
            and balancedate >= to_date (prmstartdate, 'yyyy-mm-dd')
            and balancedate < = to_date (prmenddate, 'yyyy-mm-dd')
            and customerunitcode = prmcustunitcode;

         --更新原始日结数据
         update st_payment_consum_day
            set flag = 1
          where dptcode = prmcodeid
            and balancedate >= to_date (prmstartdate, 'yyyy-mm-dd')
            and balancedate < = to_date (prmenddate, 'yyyy-mm-dd')
            and customerunitcode = prmcustunitcode;

         --更新日结信息表
         update st_payment_day a
            set a.flag = 1
          where a.acccode in (
                           select b.acccode
                             from st_payment_day b, base_acc_type c
                            where b.acccode = c.acccode
                                  and c.groupid in (2, 4))
            and a.dptcode = prmcodeid
            and a.balancedate >= to_date (prmstartdate, 'yyyy-mm-dd')
            and a.balancedate <= to_date (prmenddate, 'yyyy-mm-dd')
            and a.customerunitcode = prmcustunitcode;

         --更新收支 日结数据
         update st_mincome_outpay_day
            set flag = 1
          where merchantcode = prmcodeid
            and accounttype = 6
            and balancedate >= to_date (prmstartdate, 'yyyy-mm-dd')
            and balancedate <= to_date (prmenddate, 'yyyy-mm-dd')
            and customerunitcode = prmcustunitcode;

         --更新会计账目日结数据
         update st_account_acc_day
            set flag = 1
          where subcode = to_number (201002 || prmcodeid)
            and dir = -1
            and balancedate >= to_date (prmstartdate, 'yyyy-mm-dd')
            and balancedate <= to_date (prmenddate, 'yyyy-mm-dd')
            and customerunitcode = prmcustunitcode;

         --插入商户的划拨日志
         insert into st_tranaccount_log
                     (empid, operationtype, balancedate, accountstr, codeid,
                      opdt, opfare, customerunitcode)
            select prmempid, 2, balancedate, dptcode, prmcodeid,
                   trunc (sysdate, 'dd'), opermn, customerunitcode
              from st_payment_consum_day
             where dptcode = prmcodeid
               and flag = 1
               and balancedate >= to_date (prmstartdate, 'yyyy-mm-dd')
               and balancedate < = to_date (prmenddate, 'yyyy-mm-dd')
               and customerunitcode = prmcustunitcode;
      end if;

      out_result := 100;
      out_msg := '账目划拨操作成功！';
      commit;
      return;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
   end;
end;

/
create or replace package pkg_rpt_unionpay is

  type ref_cursor is ref cursor;

  -- oda消费汇总
  procedure proc_unionpay_consumegp(prmcustomerunitcode in varchar2,
                                    prmstartdate        in varchar2,
                                    prmenddate          in varchar2,
                                    prmdatetype         in varchar2,
                                    prmsearchkind       in varchar2,
                                    prmsearchvalue      in varchar2,
                                    io_allrec           out ref_cursor);

  -- oda消费明细
  procedure proc_unionpay_consumedt(prmcustomerunitcode in varchar2,
                                    prmstartdate        in varchar2,
                                    prmenddate          in varchar2,
                                    prmdatetype         in varchar2,
                                    prmsearchkind       in varchar2,
                                    prmsearchvalue      in varchar2,
                                    io_allrec           out ref_cursor);

end;

 
 
 
 /
create or replace package body pkg_rpt_unionpay is
  -- oda消费汇总
  procedure proc_unionpay_consumegp(prmcustomerunitcode in varchar2,
                                    prmstartdate        in varchar2,
                                    prmenddate          in varchar2,
                                    prmdatetype         in varchar2, --0交易日期，1结算日期
                                    prmsearchkind       in varchar2, --0全部，1未清算，2成功，3失败
                                    prmsearchvalue      in varchar2,
                                    io_allrec           out ref_cursor) as
    sqlstr varchar2(4000);
  begin
    if prmdatetype = '0' --交易时间
     then
      open io_allrec for
      
        select opdt as "date",
               customerunitcode,
               sum(successopmoney) as successopmoney,
               sum(successopcount) as successopcount,
               sum(failedopmoney) as failedopmoney,
               sum(failedopcount) as failedopcount,
               sum(successopmoney + failedopmoney) as sumopmoney,
               sum(successopcount + failedopcount) as sumopcount
          from (select to_char(accdate, 'yyyy-mm-dd') as opdt,
                       a.customerunitcode,
                       a.opermn as successopmoney,
                       a.operno as successopcount,
                       0 as failedopmoney,
                       0 as failedopcount
                  from st_payment_consum_day a
                 where a.acccode = 205
                   and a.accdate >= to_date(prmstartdate, 'yyyy-mm-dd')
                   and a.accdate <= to_date(prmenddate, 'yyyy-mm-dd')
                   and a.customerunitcode = prmcustomerunitcode
                union all
                select to_char(accdate, 'yyyy-mm-dd') as opdt,
                       a.customerunitcode,
                       0 as successopmoney,
                       0 as successopcount,
                       a.opermn as failedopmoney,
                       a.operno as failedopcount
                  from st_payment_third_unsettle a
                 where a.acccode = 205
                   and a.accdate >= to_date(prmstartdate, 'yyyy-mm-dd')
                   and a.accdate <= to_date(prmenddate, 'yyyy-mm-dd')
                   and a.customerunitcode = prmcustomerunitcode)
         group by opdt, customerunitcode
         order by opdt;
    
    else
      --结算时间
      open io_allrec for
      
        select opdt as "date",
               customerunitcode,
               sum(successopmoney) as successopmoney,
               sum(successopcount) as successopcount,
               sum(failedopmoney) as failedopmoney,
               sum(failedopcount) as failedopcount,
               sum(successopmoney + failedopmoney) as sumopmoney,
               sum(successopcount + failedopcount) as sumopcount
          from (select to_char(balancedate, 'yyyy-mm-dd') as opdt,
                       a.customerunitcode,
                       a.opermn as successopmoney,
                       a.operno as successopcount,
                       0 as failedopmoney,
                       0 as failedopcount
                  from st_payment_consum_day a
                 where a.acccode = 205
                   and a.balancedate >= to_date(prmstartdate, 'yyyy-mm-dd')
                   and a.balancedate <= to_date(prmenddate, 'yyyy-mm-dd')
                   and a.customerunitcode = prmcustomerunitcode
                union all
                select to_char(balancedate, 'yyyy-mm-dd') as opdt,
                       a.customerunitcode,
                       0 as successopmoney,
                       0 as successopcount,
                       a.opermn as failedopmoney,
                       a.operno as failedopcount
                  from st_payment_third_unsettle a
                 where a.acccode = 205
                   and a.balancedate >= to_date(prmstartdate, 'yyyy-mm-dd')
                   and a.balancedate <= to_date(prmenddate, 'yyyy-mm-dd')
                   and a.customerunitcode = prmcustomerunitcode)
         group by opdt, customerunitcode
         order by opdt;
    end if;
  end;

  -- oda消费明细
  procedure proc_unionpay_consumedt(prmcustomerunitcode in varchar2,
                                    prmstartdate        in varchar2,
                                    prmenddate          in varchar2,
                                    prmdatetype         in varchar2, --0交易日期，1结算日期
                                    prmsearchkind       in varchar2, --0全部，1未清算，2成功，3失败
                                    prmsearchvalue      in varchar2,
                                    io_allrec           out ref_cursor) as
    v_status varchar(1000); --处理状态
    v_date   varchar2(1000);
    sqlstr   varchar(4000);
  begin
  
    if prmsearchkind = '0' then
      v_status := '';
    elsif prmsearchkind = '1' then --未清算
      v_status := ' and status = 0 ';
    elsif prmsearchkind = '2' then --成功
      v_status := ' and status = 1 and responsecode = ''00'' ';
    else
      v_status := ' and status = 1 and responsecode <> ''00'' ';
    end if;
  
    if prmdatetype = '0' then--交易时间
      v_date := ' and opdt >= to_date('''|| prmstartdate|| ''', ''yyyy-mm-dd'') and opdt <= to_date('''|| prmenddate || ''', ''yyyy-mm-dd'') ';
    elsif prmdatetype = '1' then--结算时间
      v_date := ' and accountdate >= to_date('''|| prmstartdate|| ''', ''yyyy-mm-dd'') and accountdate <= to_date('''|| prmenddate || ''', ''yyyy-mm-dd'') ';
    end if;
  
    sqlstr := 'select opdt,
                      accountdate,
                      bankcardno as cardno,
                      electronopfare as opfare,
                      discount,
                      decode(status,0, ''未清算'', ''已清算'' ) as describe,
                      decode(responsecode,''00'', ''清算成功'',null,''待清算'', ''清算失败'' ) as bankrecode,
                      responsecode as responsecode,
                      uploaddate,
                      collectdt,
                      '''' as filename
                 from rec_unionpay_consume_oda
                where customerunitcode =''' || prmcustomerunitcode || '''';
  
    if prmsearchvalue <> '' then
      -- 卡号条件    
      sqlstr := sqlstr || ' and bankcardno like ''%' || prmsearchvalue || '%''';
    end if;
  
    sqlstr := sqlstr || v_status ||v_date||
              ' order by opdt';
  
    open io_allrec for sqlstr;
    
  end;

end;
/
create or replace package pkg_rpt_unionthird is

  -- author  : 林成行
  -- created : 2017-12-15 09:45:53
  -- purpose : 银联第三方消费明细、汇总报表

  type ref_cursor is ref cursor;

  -- 银联第三方消费明细报表
  procedure rec_unionthird_detail_sp(prmcustomerunitcode in varchar2, --客户法人
                                     prmdatatype         in varchar2, --数据类型
                                     prmoptype           in varchar2, --交易类型
                                     prmstartdate        in varchar2, --开始日期
                                     prmenddate          in varchar2, --结束日期
                                     prmdatetype         in varchar2, --日期类型
                                     io_allrec           out ref_cursor);

  -- 银联第三方消费汇总报表
  procedure rec_unionthird_group_sp(prmcustomerunitcode in varchar2, --客户法人
                                    prmdatetype         in varchar2, --日期类型
                                    prmstartdate        in varchar2, --开始日期
                                    prmenddate          in varchar2, --结束日期
                                    io_allrec           out ref_cursor);

end pkg_rpt_unionthird;
/
create or replace package body pkg_rpt_unionthird is

  procedure rec_unionthird_detail_sp(prmcustomerunitcode in varchar2, --客户法人
                                     prmdatatype         in varchar2, --数据类型
                                     prmoptype           in varchar2, --交易类型
                                     prmstartdate        in varchar2, --开始日期
                                     prmenddate          in varchar2, --结束日期
                                     prmdatetype         in varchar2, --日期类型
                                     io_allrec           out ref_cursor) as
    pflag        varchar2(100);
    responsecode varchar2(10);
    maincardtype varchar2(10);
    sqlstr       varchar2(4000);
    wherestr     varchar2(4000);
    order_sqtr   varchar2(4000);
  begin

    --数据类型
    if prmdatatype = 0 then
      --全部
      pflag := ''''' is null';
    elsif prmdatatype = 1 then
      --清算成功
      pflag := ' v.accountresult = 1 and resultcode = ''0000''';
    elsif prmdatatype = 2 then
      --待清算
      pflag := ' v.accountresult = 0';
    elsif prmdatatype = 3 then
      --清算失败
      pflag := ' v.accountresult = 1 and resultcode <> ''0000''';
    end if;

    --交易类型
    if prmoptype = 0 then
      wherestr := ' and '''' is null';
    elsif prmoptype = 1 then
      wherestr := ' and v.maincardtype in (9,042)'; --银联oda
    elsif prmoptype = 2 then
      wherestr := ' and v.maincardtype in (10,072)'; --银联双免
    elsif prmoptype = 3 then
      wherestr := ' and v.maincardtype in (11,032)'; --银联二维码
    end if;

    --日期类型
    if prmdatetype = 0 then
      --清算日期
      sqlstr := ' (v.accountdate is null or ( to_date(v.accountdate,''yyyy-mm-dd'') >= to_date(' || '''' ||
                prmstartdate || '''' ||
                ',''yyyy-mm-dd'')
                and to_date(v.accountdate,''yyyy-mm-dd'') < to_date(' || '''' ||
                prmenddate || '''' || ',''yyyy-mm-dd'') + 1))';
      --order_sqtr := ',v.accountdate';
    elsif prmdatetype = 1 then
      --入库日期
      sqlstr := ' (v.uploaddate is null or ( to_date(v.uploaddate,''yyyy-mm-dd'') >= to_date(' || '''' ||
                prmstartdate || '''' ||
                ',''yyyy-mm-dd'')
                and to_date(v.uploaddate,''yyyy-mm-dd'') < to_date(' || '''' ||
                prmenddate || '''' || ',''yyyy-mm-dd'') + 1))';
    end if;

    sqlstr := 'select v.bankcardno, v.opfare, v.busid, v.linename, v.dptname,' ||
              ' case when v.accountresult = 1 and resultcode = ''0000'' then ''清算成功''
                when v.accountresult = 1 and resultcode <> ''0000'' then ''清算失败''
                  else ''待清算'' end as accountresult,v.accountdate,
              v.opdt,v.uploaddate,v.merchantcode,
              decode(v.maincardtype,9,''银联oda'',042,''银联oda'',10,''银联双免'',072,''银联双免'',
              11,''银联二维码'',032,''银联二维码'',1,''电子现金'') as maincardtype
                      from v_rec_unionthird_all v
                      where ' || pflag ||
              ' and v.customerunitcode =' || prmcustomerunitcode ||
              wherestr || ' and' ||
              sqlstr ||
              ' order by v.order_str desc';
    open io_allrec for sqlstr;
  end;

  procedure rec_unionthird_group_sp(prmcustomerunitcode in varchar2, --客户法人
                                    prmdatetype         in varchar2, --日期类型
                                    prmstartdate        in varchar2, --开始日期
                                    prmenddate          in varchar2, --结束日期
                                    io_allrec out ref_cursor) as
    selstr varchar2(4000);
    sqlstr varchar2(4000);
  begin
    --日期类型
    if prmdatetype = 0 then
      --清算日期
      selstr := 'accountdate';
      sqlstr := ' (v.accountdate is null or ( to_date(v.accountdate,''yyyy-mm-dd'') >=to_date(' || '''' ||
                prmstartdate || '''' ||
                ',''yyyy-mm-dd'')
                and to_date(v.accountdate,''yyyy-mm-dd'') < to_date(' || '''' ||
                prmenddate || '''' || ',''yyyy-mm-dd'') + 1))';
    elsif prmdatetype = 1 then
      --入库日期
      selstr := 'uploaddate';
      sqlstr := ' (v.uploaddate is null or ( to_date(v.uploaddate,''yyyy-mm-dd'') >=to_date(' || '''' ||
                prmstartdate || '''' ||
                ',''yyyy-mm-dd'')
                and to_date(v.uploaddate,''yyyy-mm-dd'') < to_date(' || '''' ||
                prmenddate || '''' || ',''yyyy-mm-dd'') + 1)) ';
    end if;

    sqlstr := 'with datagroup as
            (select ' ||
             'v.' || selstr || ',' ||
                 'v.opfare,
                 v.accountresult,
                 v.resultcode
            from v_rec_unionthird_all v
               where' || sqlstr ||
               ' and v.customerunitcode = ''' || prmcustomerunitcode || ''')' ||
               ' select datetable.' || selstr || ' as accupldate,
               nvl(successtable.opnumber,0) as sopnumber,
               nvl(successtable.opfare,0) as sopfare,
               nvl(failedtable.opnumber,0) as fopnumber,
               nvl(failedtable.opfare,0) as fopfare
          from (select distinct g.' || selstr || ' from datagroup g) datetable
           left join (select s.' || selstr || ',' ||
                            'count(1) as opnumber,
                            sum(s.opfare) as opfare
                       from datagroup s
                      where s.accountresult = 1 and s.resultcode = ''0000''
                      group by s.' || selstr || ') successtable
            on datetable.' || selstr || '= successtable.' || selstr ||
          ' left join (select f.' || selstr || ',
                            count(1) as opnumber,
                            sum(f.opfare) as opfare
                       from datagroup f
                      where f.accountresult = 1 and f.resultcode <> ''0000''
                      group by f.' || selstr || ') failedtable
            on datetable.' || selstr || ' = failedtable.' || selstr ||
            ' order by datetable.' || selstr || ' desc';

    open io_allrec for sqlstr;
  end;

end pkg_rpt_unionthird;
/
create or replace package pkg_rpt_ydxf_query is
  type ref_cursor is ref cursor;
  -- 本地卡异地消费 统计报表
  procedure rpt_localcardremoteconsume_gp(prmcustomerunitcode in varchar2, --节点值
                                          prmstartdate        in varchar2,
                                          prmenddate          in varchar2,
                                          prmdatetype         in varchar2,
                                          prmdatatype         in varchar2,
                                          prmsearchtype       in varchar2,
                                          prmsearchvalue      in varchar2,
                                          io_allrec           out ref_cursor);
  -- 异地卡本地消费统计报表
  procedure rpt_remotecardlocalconsume_gp(prmcustomerunitcode in varchar2, --节点值
                                          prmstartdate        in varchar2,
                                          prmenddate          in varchar2,
                                          prmdatetype         in varchar2,
                                          prmdatatype         in varchar2,
                                          prmsearchtype       in varchar2,
                                          prmsearchvalue      in varchar2,
                                          io_allrec           out ref_cursor);

  -- 本地卡异地消费 ， 异地卡本地消费明细 报表
  procedure rpt_localcardremoteconusme_dt(prmcustomerunitcode in varchar2, --节点值
                                          prmstartdate        in varchar2,
                                          prmenddate          in varchar2,
                                          prmdatetype         in varchar2,
                                          prmdatatype         in varchar2,
                                          prmsearchtype       in varchar2,
                                          prmlocalproccess    in varchar2,
                                          prmremoteproccess   in varchar2,
                                          prmsearchvalue      in varchar2,
                                          prmcardno           in varchar2,
                                          io_allrec           out ref_cursor);
  -- 异地卡本地消费明细 报表
  procedure rpt_remotecardlocalconusme_dt(prmcustomerunitcode in varchar2, --节点值
                                          prmstartdate        in varchar2,
                                          prmenddate          in varchar2,
                                          prmdatetype         in varchar2,
                                          prmdatatype         in varchar2,
                                          prmsearchtype       in varchar2,
                                          prmlocalproccess    in varchar2,
                                          prmremoteproccess   in varchar2,
                                          prmsearchvalue      in varchar2,
                                          prmcardno           in varchar2,
                                          io_allrec           out ref_cursor);
end pkg_rpt_ydxf_query;

 
 
 
 
/
create or replace package body pkg_rpt_ydxf_query is

  -- 本地卡异地消费 统计报表
  procedure rpt_localcardremoteconsume_gp(prmcustomerunitcode in varchar2, --商户号
                                          prmstartdate        in varchar2, --开始日期
                                          prmenddate          in varchar2, --结束日期
                                          prmdatetype         in varchar2, --日期类型
                                          prmdatatype         in varchar2, --数据类型
                                          prmsearchtype       in varchar2, --查询数据类型
                                          prmsearchvalue      in varchar2, --查询条件
                                          io_allrec           out ref_cursor) as
    d_startdate date;
    d_enddate   date;
    v_filename  varchar2(100);
  begin
    d_startdate := to_date(prmstartdate, 'yyyy-mm-dd');
    d_enddate   := to_date(prmenddate, 'yyyy-mm-dd');
    v_filename  := prmsearchvalue;
  
    --本地卡异地消费   按清算时间查询
    if prmdatetype <> '0' then
      open io_allrec for
      
        select a.opdt as "date",
               a.customerunitcode,
               sum(successopmoney) as successopmoney,
               sum(successopcount) as successopcount,
               sum(failedopmoney) as failedopmoney,
               sum(failedopcount) as failedopcount,
               sum(successopmoney + failedopmoney) as sumopmoney,
               sum(successopcount + failedopcount) as sumopcount
          from (select to_char(settlementdate, 'yyyy-mm-dd') as opdt,
                       electronopfare as successopmoney,
                       1 as successopcount,
                       0 as failedopmoney,
                       0 as failedopcount,
                       accountdate,
                       customerunitcode,
                       a.tradecitycode as tradecitycode,
                       1 as status
                  from rec_city_localcardconsume a
                 where a.settlementdate >= d_startdate
                   and a.settlementdate < d_enddate + 1
                   and a.customerunitcode = prmcustomerunitcode
                union all
                select to_char(accountdate, 'yyyy-mm-dd') as opdt,
                       0 as successopmoney,
                       0 as successopcount,
                       electronopfare as failedopmoney,
                       1 as failedopcount,
                       accountdate,
                       customerunitcode,
                       a.operatorcode as tradecitycode,
                       2 as status
                  from rec_city_localcardconsume_cl a
                 where a.accountdate >= d_startdate
                   and a.accountdate < d_enddate + 1
                   and a.customerunitcode = prmcustomerunitcode
                   and ((status = 1 and dealtype <> 1) or
                       errorcode <> '000000')
                union all
                select to_char(settlementdate, 'yyyy-mm-dd') as opdt,
                       0 as successopmoney,
                       0 as successopcount,
                       electronopfare as failedopmoney,
                       1 as failedopcount,
                       accountdate,
                       customerunitcode,
                       a.tradecitycode,
                       3 as status
                  from rec_city_localcardconsume_cq a
                 where a.settlementdate >= d_startdate
                   and a.settlementdate < d_enddate + 1
                   and a.customerunitcode = prmcustomerunitcode
                   and ((status = 1 and dealtype <> 1) or
                       errorcode <> '000000')) a
         group by a.opdt, a.customerunitcode
         order by a.opdt;
    else
      --本地卡异地消费   按文件创建时间查询
      open io_allrec for
      
        select a.opdt as "date",
               a.customerunitcode,
               sum(successopmoney) as successopmoney,
               sum(successopcount) as successopcount,
               sum(failedopmoney) as failedopmoney,
               sum(failedopcount) as failedopcount,
               sum(successopmoney + failedopmoney) as sumopmoney,
               sum(successopcount + failedopcount) as sumopcount
          from (select to_char(filecreatedate, 'yyyy-mm-dd') as opdt,
                       electronopfare as successopmoney,
                       1 as successopcount,
                       0 as failedopmoney,
                       0 as failedopcount,
                       accountdate,
                       customerunitcode,
                       a.tradecitycode as tradecitycode,
                       1 as status
                  from rec_city_localcardconsume a
                 where a.filecreatedate >= d_startdate
                   and a.filecreatedate < d_enddate + 1
                   and a.customerunitcode = prmcustomerunitcode
                union all
                select to_char(filecreatedate, 'yyyy-mm-dd') as opdt,
                       0 as successopmoney,
                       0 as successopcount,
                       electronopfare as failedopmoney,
                       1 as failedopcount,
                       accountdate,
                       customerunitcode,
                       a.operatorcode as tradecitycode,
                       2 as status
                  from rec_city_localcardconsume_cl a
                 where a.filecreatedate >= d_startdate
                   and a.filecreatedate < d_enddate + 1
                   and a.customerunitcode = prmcustomerunitcode
                   and ((status = 1 and dealtype <> 1) or
                       errorcode <> '000000')
                union all
                select to_char(filecreatedate, 'yyyy-mm-dd') as opdt,
                       0 as successopmoney,
                       0 as successopcount,
                       electronopfare as failedopmoney,
                       1 as failedopcount,
                       accountdate,
                       customerunitcode,
                       a.tradecitycode,
                       3 as status
                  from rec_city_localcardconsume_cq a
                 where a.filecreatedate >= d_startdate
                   and a.filecreatedate < d_enddate + 1
                   and a.customerunitcode = prmcustomerunitcode
                   and ((status = 1 and dealtype <> 1) or
                       errorcode <> '000000')) a
         group by a.opdt, a.customerunitcode
         order by a.opdt;
    end if;
  end;

  --异地卡本地消费统计报表
  procedure rpt_remotecardlocalconsume_gp(prmcustomerunitcode in varchar2, --节点值
                                          prmstartdate        in varchar2,
                                          prmenddate          in varchar2,
                                          prmdatetype         in varchar2,
                                          prmdatatype         in varchar2,
                                          prmsearchtype       in varchar2,
                                          prmsearchvalue      in varchar2,
                                          io_allrec           out ref_cursor) as
    d_startdate date;
    d_enddate   date;
    v_filename  varchar2(100);
  begin
    d_startdate := to_date(prmstartdate, 'yyyy-mm-dd');
    d_enddate   := to_date(prmenddate, 'yyyy-mm-dd') ;
    v_filename  := prmsearchvalue;
  
    if prmdatetype = '0' then
      --异地卡本地消费清算成功 清算时间
      open io_allrec for
        select opdt as "date",
               customerunitcode,
               sum(successopmoney) as successopmoney,
               sum(successopcount) as successopcount,
               sum(failedopmoney) as failedopmoney,
               sum(failedopcount) as failedopcount,
               sum(successopmoney + failedopmoney) as sumopmoney,
               sum(successopcount + failedopcount) as sumopcount
          from (select to_char(accountdate, 'yyyy-mm-dd') as opdt,
                       a.customerunitcode,
                       a.opfare as successopmoney,
                       1 as successopcount,
                       0 as failedopmoney,
                       0 as failedopcount,
                       1 as status
                  from rec_city_nonlocalsuccess a
                 where a.accountdate >= d_startdate
                   and a.accountdate < d_enddate + 1
                   and a.customerunitcode = prmcustomerunitcode
                union all
                select to_char(accountdate, 'yyyy-mm-dd') as opdt,
                       a.customerunitcode,
                       0 as successopmoney,
                       0 as successopcount,
                       a.opfare as failedopmoney,
                       1 as failedopcount,
                       2 as status
                  from rec_city_nonlocalconsume a
                 where a.accountdate >= d_startdate
                   and a.accountdate < d_enddate + 1
                   and a.customerunitcode = prmcustomerunitcode
                   and ((a.status <> 0 and a.dealtype <> 1 and
                       a.dealtype <> 0) or
                       (a.errorcode is not null and a.errorcode <> '000000'))
                
                )
         group by opdt, customerunitcode
         order by opdt;
    
    else
      --异地卡本地消费清算成功  文件创建日期
      open io_allrec for
        select a.opdt as "date",
               customerunitcode,
               sum(successopmoney) as successopmoney,
               sum(successopcount) as successopcount,
               sum(failedopmoney) as failedopmoney,
               sum(failedopcount) as failedopcount,
               sum(successopmoney + failedopmoney) as sumopmoney,
               sum(successopcount + failedopcount) as sumopcount
          from (select to_char(filecreatedate, 'yyyy-mm-dd') as opdt,
                       a.customerunitcode,
                       a.opfare as successopmoney,
                       1 as successopcount,
                       0 as failedopmoney,
                       0 as failedopcount,
                       1 as status
                  from rec_city_nonlocalsuccess a
                 where a.filecreatedate >= d_startdate
                   and a.filecreatedate < d_enddate + 1
                   and a.customerunitcode = prmcustomerunitcode
                union all
                select to_char(filecreatedate, 'yyyy-mm-dd') as opdt,
                       a.customerunitcode,
                       0 as successopmoney,
                       0 as successopcount,
                       a.opfare as failedopmoney,
                       1 as failedopcount,
                       2 as status
                  from rec_city_nonlocalconsume a
                 where a.filecreatedate >= d_startdate
                   and a.filecreatedate < d_enddate + 1
                   and a.customerunitcode = prmcustomerunitcode
                   and ((a.status <> 0 and a.dealtype <> 1 and
                       a.dealtype <> 0) or
                       (a.errorcode is not null and a.errorcode <> '000000'))) a
         group by a.opdt, a.customerunitcode
         order by opdt;
    end if;
  
  end;

  -- 本地卡异地消费 明细 报表
  procedure rpt_localcardremoteconusme_dt(prmcustomerunitcode in varchar2, --节点值
                                          prmstartdate        in varchar2,
                                          prmenddate          in varchar2,
                                          prmdatetype         in varchar2,
                                          prmdatatype         in varchar2,
                                          prmsearchtype       in varchar2,
                                          prmlocalproccess    in varchar2,
                                          prmremoteproccess   in varchar2,
                                          prmsearchvalue      in varchar2,
                                          prmcardno           in varchar2,
                                          io_allrec           out ref_cursor) as
    d_startdate      date;
    d_enddate        date;
    v_status         varchar(500); --处理状态
    v_localproccess  varchar(500); --本地清算结果
    v_remoteproccess varchar(500); --清算机构清算结果
    v_filename       varchar2(100);
    v_cardno         varchar2(20);
    --v_tablename   varchar2(50);
    v_date varchar2(50);
    sqlstr varchar2(4000);
  begin
    v_filename := prmsearchvalue;
    v_cardno   := prmcardno;
  
    if prmdatatype = '0' then
      --本地卡异地消费清算成功明细（rec_city_localcardconsume）
      if prmdatetype = '0' then
        --本地卡异地消费    交易时间     
        v_date := 'opdt';
      elsif prmdatetype = '1' then
        --本地卡异地消费    清算时间
        v_date := 'accountdate';
      else
        v_date := 'filecreatedate'; --本地卡异地消费    文件生成时间
      end if;
      sqlstr := ' select a.opdt,
                 a.electronopfare as opfare,
                 a.accountdate,
                 a.customerunitcode,
                 a.tradecitycode as tradecitycode,
                 a.ownercitycode as ownercitycode,
                 a.electronoddfare as oddfare,
                 a.filename,
                 a.filecreatedate,
                 ''310'' || trim(to_char(a.cardno, ''xxxxxxxxxxxxxxxx'')) as cardno,
                 ''已清算'' as describe,
                 ''清算成功'' as localproccess,
                 ''清算成功'' as remoteproccess
            from rec_city_localcardconsume a
              where a.' || v_date || ' >= to_date(''' ||
                prmstartdate || ''', ''yyyy-mm-dd'')
             and a.' || v_date || ' < to_date(''' ||
                prmenddate || ''', ''yyyy-mm-dd'') + 1           
              and a.customerunitcode =''' ||
                prmcustomerunitcode || '''';
      --文件名判断
      if v_filename <> '' then
        sqlstr := sqlstr || ' and (a.filename is null or a.filename = ' ||
                  v_filename || ') ';
      end if;
      --卡号判断
      if v_cardno <> '' then
        sqlstr := sqlstr || ' and a.cardno = ' || v_cardno || '';
      end if;
      --排序
      sqlstr := sqlstr || ' order by a.' || v_date || '';
    
      open io_allrec for sqlstr;
    
    elsif prmdatatype = '1' then
      -- 本地卡异地消费清算机构下发清算明细（rec_city_localcardconsume_cl）
    
      if prmsearchtype = '0' then--全部
        v_status := '';
      elsif prmsearchtype = '1' then--清算成功
        v_status := ' and status = 1 and dealtype=1 and  errorcode = ''000000''';
      
      elsif prmsearchtype = '2' then--清算失败
        v_status := ' and status = 1  and (dealtype<>1  or (errorcode <> ''000000'' and errorcode is not null)) ';
      else-- 清算机构已清算本地待清算    
        v_status := ' and status = 0  and dealtype=0  and  errorcode is not null  ';
      end if;
    
      if prmdatetype = '0' then--交易时间
        v_date := 'opdt';
      elsif prmdatetype = '1' then--清算时间
        v_date := 'accountdate';
      else
        v_date := 'filecreatedate';--文件生成时间
      end if;
    
      sqlstr := ' select a.opdt,
                 a.electronopfare as opfare,
                 a.accountdate,
                 a.customerunitcode,
                 a.operatorcode as tradecitycode,
                 a.ownercitycode as ownercitycode,
                 a.electronoddfare as oddfare,
                 a.filename,
                 a.filecreatedate,
                 ''310''||trim(to_char(a.cardno,''xxxxxxxxxxxxxxxx'')) as cardno,
                 decode(a.status,0, ''未清算'', ''已清算'' ) as describe,
                 decode(a.dealtype,1, ''清算成功'',0,''待清算'', ''清算失败'' ) as localproccess,
                 decode(a.errorcode,''000000'', ''清算成功'',null,''待清算'', ''清算失败'' ) as remoteproccess
            from rec_city_localcardconsume_cl a
           where a.' || v_date || ' >= to_date(''' ||
                prmstartdate || ''', ''yyyy-mm-dd'')
             and a.' || v_date || ' < to_date(''' ||
                prmenddate || ''', ''yyyy-mm-dd'') + 1
             and a.customerunitcode =''' ||
                prmcustomerunitcode || '''';
      if v_filename <> '' then
        -- 文件名条件
        sqlstr := sqlstr || ' and (a.filename is null or a.filename = ' ||
                  v_filename || ') ';
      end if;
    
      if v_cardno <> '' then
        -- 卡号条件
        sqlstr := sqlstr || ' and a.cardno = ' || v_cardno || '';
      end if;
    
      sqlstr := sqlstr || v_status || v_localproccess || v_remoteproccess ||
                ' order by a.' || v_date;
      open io_allrec for sqlstr;
    
    else -- 本地卡异地消费清算机构下发清算明细（rec_city_localcardconsume_cq）
    
      if prmsearchtype = '0' then--全部
        v_status := '';
      elsif prmsearchtype = '1' then--清算成功
        v_status := ' and status = 1 and dealtype=1 and  errorcode = ''000000'' ';
      
      elsif prmsearchtype = '2' then--清算失败
        v_status := ' and status = 1  and (dealtype<>1  or (errorcode <> ''000000'' and errorcode is not null))';
      
      else--本地已清算机构待清算 
        v_status := ' and status = 1  and dealtype<>0  and  errorcode is  null  ';
      end if;
    
      if prmdatetype = '0' then--交易时间
        v_date := 'opdt';
      elsif prmdatetype = '1' then--清算时间
        v_date := 'accountdate';
      else
        v_date := 'filecreatedate';--文件生成时间
      end if;
    
      sqlstr := ' select a.opdt,
                 a.electronopfare as opfare,
                 a.accountdate,
                 a.customerunitcode,
                 a.tradecitycode as tradecitycode,
                 a.ownercitycode as ownercitycode,
                 a.electronoddfare as oddfare,
                 a.filename,
                 a.filecreatedate,
                  ''310''||trim(to_char(a.cardno,''xxxxxxxxxxxxxxxx'')) as cardno,
                 decode(a.status,0, ''未清算'', ''已清算'' ) as describe,
                 decode(a.dealtype,1, ''清算成功'',0,''待清算'', ''清算失败'' ) as localproccess,
                 decode(a.errorcode,''000000'', ''清算成功'',null,''待清算'', ''清算失败'' ) as remoteproccess
            from rec_city_localcardconsume_cq a
           where a.' || v_date || ' >= to_date(''' ||
                prmstartdate || ''', ''yyyy-mm-dd'')
             and a.' || v_date || ' < to_date(''' ||
                prmenddate || ''', ''yyyy-mm-dd'') + 1
             and a.customerunitcode =''' ||
                prmcustomerunitcode || '''';
    
      if v_filename <> '' then
        -- 文件名条件
        sqlstr := sqlstr || ' and (a.filename is null or a.filename = ' ||
                  v_filename || ') ';
      end if;
    
      if v_cardno <> '' then
        -- 卡号条件
        sqlstr := sqlstr || ' and a.cardno = ' || v_cardno || '';
      end if;
    
      sqlstr := sqlstr || v_status || v_localproccess || v_remoteproccess ||
                ' order by a.' || v_date;
    
      open io_allrec for sqlstr;
    end if;
  end;
  -- 异地卡本地消费明细 报表
  procedure rpt_remotecardlocalconusme_dt(prmcustomerunitcode in varchar2, --节点值
                                          prmstartdate        in varchar2,
                                          prmenddate          in varchar2,
                                          prmdatetype         in varchar2,
                                          prmdatatype         in varchar2,
                                          prmsearchtype       in varchar2,
                                          prmlocalproccess    in varchar2,
                                          prmremoteproccess   in varchar2,
                                          prmsearchvalue      in varchar2,
                                          prmcardno           in varchar2,
                                          io_allrec           out ref_cursor) as
    d_startdate      date;
    d_enddate        date;
    v_status         varchar(500); --处理状态
    v_localproccess  varchar(500); --本地清算结果
    v_remoteproccess varchar(500); --清算机构清算结果
    v_filename       varchar2(100);
    v_cardno         varchar2(20);
    --v_tablename      varchar2(50);
    v_date varchar2(50);
    sqlstr varchar2(4000);
  begin
    d_startdate := to_date(prmstartdate, 'yyyy-mm-dd');
    d_enddate   := to_date(prmenddate, 'yyyy-mm-dd');
  
    v_filename := prmsearchvalue;
    v_cardno   := prmcardno;
  
    if prmdatatype = '0' then
      --异地卡本地消费原始明细（rec_city_localcardconsume）
      if prmdatetype = '0' then
        --异地卡本地消费    交易时间
        sqlstr := 'select a.opdt,
                 a.opfare as opfare,
                 a.accountdate,
                 a.customerunitcode,
                 a.tradecitycode as tradecitycode,
                 a.ownercitycode as ownercitycode,
                 a.oddfare as oddfare,
                 a.filename,
                 a.filecreatedate,
                 a.uploaddate,
                 ''310'' || trim(to_char(a.cardno, ''xxxxxxxxxxxxxxxx'')) as cardno,
                 decode(a.status, 0, ''未清算'', ''已清算'') as describe,
                 decode(a.dealtype, 0, ''待清算'', 1, ''清算成功'', ''清算失败'') as localproccess,
                 decode(a.errorcode,
                        ''000000'',
                        ''清算成功'',
                        null,
                        ''待清算'',
                        ''清算失败'') as remoteproccess
            from rec_city_nonlocalconsume a
            where a.opdt >= to_date(''' || prmstartdate ||
                  ''', ''yyyy-mm-dd'')
             and a.opdt < to_date(''' || prmenddate ||
                  ''', ''yyyy-mm-dd'') + 1
             and a.customerunitcode = ''' ||
                  prmcustomerunitcode || '''';
      
        if v_cardno is not null then
          sqlstr := sqlstr || ' and a.cardno = ''' || v_cardno || '''';
        end if;
      
        if prmlocalproccess = '0' then
          sqlstr := sqlstr;
        elsif prmlocalproccess = '1' then
          sqlstr := sqlstr || ' and a.status= 1 ';
        else
          sqlstr := sqlstr || ' and a.status= 0 ';
        end if;
      
        sqlstr := sqlstr || ' order by a.opdt';
      
        open io_allrec for sqlstr;
      else
        --异地卡本地消费    入库日期
        sqlstr := 'select a.opdt,
                 a.opfare as opfare,
                 a.accountdate,
                 a.customerunitcode,
                 a.tradecitycode as tradecitycode,
                 a.ownercitycode as ownercitycode,
                 a.oddfare as oddfare,
                 a.filename,
                 a.filecreatedate,
                 a.uploaddate,
                 ''310'' || trim(to_char(a.cardno, ''xxxxxxxxxxxxxxxx'')) as cardno,
                 decode(a.status, 0, ''未清算'', ''已清算'') as describe,
                 decode(a.dealtype, 0, ''待清算'', 1, ''清算成功'', ''清算失败'') as localproccess,
                 decode(a.errorcode,
                        ''000000'',
                        ''清算成功'',
                        null,
                        ''待清算'',
                        ''清算失败'') as remoteproccess
            from rec_city_nonlocalconsume a
         where a.uploaddate >= to_date(''' || prmstartdate ||
                  ''', ''yyyy-mm-dd'')
             and a.uploaddate < to_date(''' || prmenddate ||
                  ''', ''yyyy-mm-dd'') + 1
             and a.customerunitcode = ''' ||
                  prmcustomerunitcode || '''';
        if v_cardno is not null then
          sqlstr := sqlstr || ' and a.cardno= ''' || v_cardno || '''';
        end if;
        if prmlocalproccess = '0' then
          sqlstr := sqlstr;
        elsif prmlocalproccess = '1' then
          sqlstr := sqlstr || ' and a.status= 1 ';
        else
          sqlstr := sqlstr || ' and a.status= 0 ';
        end if;
      
        sqlstr := sqlstr || ' order by a.uploaddate';
        open io_allrec for sqlstr;
      end if;
    else
      -- 清算结果明细信息查询（与清算机构对账使用）
      if prmdatetype = '0' then
        v_date := 'opdt';
      elsif prmdatetype = '1' then
        v_date := 'accountdate';
      else
        v_date := 'filecreatedate';
      end if;
    
      sqlstr := ' select a.opdt,
                 a.electronopfare as opfare,
                 a.accountdate,
                 a.customerunitcode,
                 a.operatorcode as tradecitycode,
                 a.ownercitycode as ownercitycode,
                 a.electronoddfare as oddfare,
                 a.filename,
                 a.filecreatedate,
                 ''310''||trim(to_char(a.cardno,''xxxxxxxxxxxxxxxx'')) as cardno,
                 decode(a.status,0, ''未清算'', ''已清算'' ) as describe,
                 decode(a.dealtype,1, ''清算成功'',0,''待清算'', ''清算失败'' ) as localproccess,
                 decode(a.errorcode,''000000'', ''清算成功'',null,''未清算'', ''清算失败'' ) as remoteproccess
            from rec_city_nolocalcardconsume_fb a
           where a.' || v_date || '  >= to_date(''' ||
                prmstartdate || ''', ''yyyy-mm-dd'')
             and a.' || v_date || ' < to_date(''' ||
                prmenddate || ''', ''yyyy-mm-dd'') + 1
             and a.customerunitcode =''' ||
                prmcustomerunitcode || '''';
    
      if prmsearchtype = '0' then
        v_status := ''; --       全部
      elsif prmsearchtype = '1' then
        v_status := ''; --       清算成功
        sqlstr   := ' select a.opdt,
                 a.opfare as opfare,
                 a.accountdate,
                 a.customerunitcode,
                 a.tradecitycode as tradecitycode,
                 a.ownercitycode as ownercitycode,
                 a.oddfare as oddfare,
                 a.filename,
                 a.filecreatedate,
                 ''310''||trim(to_char(a.cardno,''xxxxxxxxxxxxxxxx'')) as cardno,
                 ( ''已清算'' ) as describe,
                 ( ''清算成功'' ) as localproccess,
                  ''清算成功''  as remoteproccess
            from rec_city_nonlocalsuccess a
           where a.' || v_date || '  >= to_date(''' ||
                    prmstartdate || ''', ''yyyy-mm-dd'')
             and a.' || v_date || ' < to_date(''' ||
                    prmenddate || ''', ''yyyy-mm-dd'') + 1
             and a.customerunitcode =''' ||
                    prmcustomerunitcode || '''';
      
      elsif prmsearchtype = '2' then
        --       清算失败
        v_status := ' and status = 1 and dealtype <> 1 and errorcode <>''000000'' and errorcode is not null  ';
      else
        --      清算机构已清算本地待清算
        v_status := ' and status = 0  and errorcode is not null ';
      end if;
    
    if v_filename is not null then
      sqlstr := sqlstr || ' and (a.filename is null or a.filename = ''' || --文件名：
                v_filename || ''') ';
    end if;
    
    if v_cardno is not null then
      sqlstr := sqlstr || ' and a.cardno = ''' || v_cardno || ''''; --卡号：
    end if;
    
      sqlstr := sqlstr || v_status || ' order by a.' || v_date;
    
      open io_allrec for sqlstr;
    end if;
  end;
end pkg_rpt_ydxf_query;
/
create or replace package pkg_st_income_balance
is
/*
----------------------------------------------------------------------------
--copyright (c) 1992-2007 郑州新开普电子股份有限公司 版权所有。
--
-- 存储过程名称：pkg_st_income_balance
-- 功能描述：1、处理系统收支、会计日结账目
---------------------------------------------------------------------------
*/ --个人账户-客户收支数据日结
   procedure stat_income_balance (
      prmdate                 varchar2,
      prmcustunitcode         varchar2,                            --客户代码
      out_msg           out   varchar2,
      out_result        out   number
   );

   --个人账户-商户收支数据日结
   procedure stat_mincome_balance (
      prmdate                 varchar2,
      prmcustunitcode         varchar2,                            --客户代码
      out_msg           out   varchar2,
      out_result        out   number
   );

   --系统账户收支数据日结
   procedure stat_sys_income_balance (
      prmdate                 varchar2,
      prmcustunitcode         varchar2,                            --客户代码
      out_msg           out   varchar2,
      out_result        out   number
   );

   --资产负债数据
   procedure stat_assets_balance (
      prmdate                 varchar2,
      prmcustunitcode         varchar2,
      out_msg           out   varchar2,
      out_result        out   number
   );
end;


 

 
 
 /
create or replace package body pkg_st_income_balance
is
      /*
   ----------------------------------------------------------------------------
   --copyright (c) 1992-2007 郑州新开普电子股份有限公司 版权所有。
   --
   -- 存储过程名称：pkg_st_income_balance
   -- 功能描述：1、处理系统收支、会计日结账目
   ---------------------------------------------------------------------------
   */
      --个人账户收支数据日结
   procedure stat_income_balance (
      prmdate                 varchar2,                            --日结日期
      prmcustunitcode         varchar2,                            --客户代码
      out_msg           out   varchar2,                            --返回信息
      out_result        out   number                                 --返回值
   )
   as
         /*
      --------------------------------------------------------------------------
      --存储过程：stat_income_balance
      --作　　者：周晓娜
      --时　　间：2012-12-21
      --说　　明：个人账户-客户收支数据统计
      --输入参数：见过程头参数注解
      --输出参数：见过程头参数注解
      --------------------------------------------------------------------------
      */
      t_balancedate       date;                                    --账目日期
      i_count             number;                                    --记录数
      dt_maxbalancedate   date;                                --最大日结日期
      n_incomepre         number;                              --前期收入总额
      n_payoutpre         number;                              --前期支出总额
      n_income            number;                              --本期收入总额
      n_payout            number;                              --本期支出总额
      n_oddfarepre        number;                              --前期账户余额
      n_oddfare           number;                              --本期账户余额
      i_accounttype       integer;                                 --账户类型
   --
   begin
      out_msg := '初始化变量';
      out_result := -1001;
-----------------------------------------------

      --先对t_balancedate设初值，以防止传入日期格式错误造成转换异常无法记录日志
      t_balancedate := to_date ('1800-01-01', 'yyyy-mm-dd');
      t_balancedate := to_date (prmdate, 'yyyy-mm-dd');

      --统计时间校验
      select count (*)
        into i_count
        from st_income_outpay_day
       where customerunitcode = prmcustunitcode and accounttype = 5;

      if i_count > 0
      then
         select max (statdate)
           into dt_maxbalancedate
           from st_income_outpay_day
          where customerunitcode = prmcustunitcode and accounttype = 5;
      end if;

      out_msg := '锁定统计表';
      dt_maxbalancedate := to_date ('1800-01-01', 'yyyy-mm-dd');
      --锁定统计表，不允许其他用户修改，保证数据一致，统计结束解锁
      lock table st_income_outpay in exclusive mode;
      lock table st_income_outpay_day in exclusive mode;
      lock table st_income_balance_day in exclusive mode;
      out_msg := '插入个人账户收支账目统计日结表';
      out_result := -1002;

      --一、形成个人账户-日结数据
      insert into st_income_outpay_day
                  (stid, statdate, operno, opermn, accdate, acccode, dir,
                   customerid, wallettype, accounttype, balancedate, ver,
                   customerunitcode)
         select a.id, a.statdate, a.operno, a.opermn, a.accdate, a.acccode,
                a.dir, a.customerid, a.wallettype, a.accounttype,
                t_balancedate, a.ver, a.customerunitcode
           from st_income_outpay a
          where a.customerunitcode = prmcustunitcode and a.accounttype = 5;

      ---------------------形成个人账户-客户日平衡数据----------------
      --二、形成个人账户-客户日平衡数据
      out_msg := '个人账户-客户日平衡账目统计失败！';
      out_result := -1003;
      --初始化变量
      n_incomepre := 0.00;                                      --前期收入总额
      n_payoutpre := 0.00;                                      --前期支出总额
      n_income := 0.00;                                         --本期收入总额
      n_payout := 0.00;                                         --本期支出总额
      n_oddfarepre := 0.00;                                     --前期账户余额
      n_oddfare := 0.00;                                        --本期账户余额

      select count (*)
        into i_count
        from st_income_outpay a
       where a.accounttype = 5 and a.customerunitcode = prmcustunitcode;

      if i_count > 0                                              --有日结数据
      then
         ----------------------计算前期、本期金额-------------------
         declare
            cursor freeze_cur
            is
               select distinct (a.wallettype)
                          from st_income_outpay a
                         where a.accounttype = 5
                           and a.customerunitcode = prmcustunitcode
                      order by a.wallettype;

            freeze_row   freeze_cur%rowtype;
         begin
            open freeze_cur;

            loop
               fetch freeze_cur
                into freeze_row;

               exit when freeze_cur%notfound;

               ----判断前期日结是否已经存在
               select count (*)
                 into i_count
                 from st_income_balance_day t1
                where t1.statdate = dt_maxbalancedate
                  and t1.customerunitcode = prmcustunitcode
                  and t1.wallettype = freeze_row.wallettype
                  and t1.accounttype = 5;

               if i_count > 0
               then
                  -----------------计算前期金额---------------------
                         --累积收入总额=至结算日本期收入的合计
                  select nvl (sum (a.incomepre), 0),
                         --累积支出总额=至结算日本期支出的合计
                         nvl (sum (a.payoutpre), 0),
                         -
                          --前期账户余额 = 上个结算日oddfare（当前余额）
                          nvl (sum (a.oddfare), 0)
                    into n_incomepre,
                         n_payoutpre,
                         n_oddfarepre
                    from st_income_balance_day a
                   where statdate = dt_maxbalancedate
                     and a.customerunitcode = prmcustunitcode
                     and a.accounttype = 5
                     and a.wallettype = freeze_row.wallettype;
               else
                  --初始化变量
                  n_incomepre := 0.00;                         --前期收入总额
                  n_payoutpre := 0.00;                         --前期支出总额
                  n_oddfarepre := 0.00;                        --前期账户余额
               end if;

               n_income := 0.00;                                --本期收入总额
               n_payout := 0.00;                                --本期支出总额
               n_oddfare := 0.00;                               --本期账户余额

               ---------------计算本期金额-----------
               --本期收入
               select nvl (sum (a.opermn), 0)
                 into n_income
                 from st_income_outpay a
                where a.dir = 1
                  and a.accounttype = 5
                  and a.wallettype = freeze_row.wallettype
                  and a.customerunitcode = prmcustunitcode;

               --本期支出
               select nvl (sum (a.opermn), 0)
                 into n_payout
                 from st_income_outpay a
                where a.dir = -1
                  and a.accounttype = 5
                  and a.wallettype = freeze_row.wallettype
                  and a.customerunitcode = prmcustunitcode;

               n_incomepre := n_incomepre + n_income;
               n_payoutpre := n_payoutpre + n_payout;
               n_oddfare := n_oddfarepre + n_income - n_payout;

               --形成个人账户-客户日平衡数据
               insert into st_income_balance_day
                           (id, statdate, codeid, wallettype, accounttype,
                            incomepre, payoutpre, income, payout,
                            oddfarepre, oddfare, customerunitcode
                           )
                    values (0, t_balancedate, 0, freeze_row.wallettype, 5,
                            n_incomepre, n_payoutpre, n_income, n_payout,
                            n_oddfarepre, n_oddfare, prmcustunitcode
                           );
            end loop;                                               --游标循环

            close freeze_cur;
         end;
      else                                 --如果不存在数据 则执行形成一条平衡
         --形成个人账户-客户日平衡数据
         insert into st_income_balance_day
                     (id, statdate, codeid, wallettype, accounttype,
                      incomepre, payoutpre, income, payout,
                      oddfarepre, oddfare, customerunitcode
                     )
              values (0, t_balancedate, 0, 0, 5,
                      n_incomepre, n_payoutpre, n_income, n_payout,
                      n_oddfarepre, n_oddfare, prmcustunitcode
                     );
      end if;

      ----- 删除 及时账目统计表
      delete from st_income_outpay
            where customerunitcode = prmcustunitcode and accounttype = 5;

      out_msg := '系统账目(个人账户-客户收支)日结成功！';
      out_result := 100;
   exception
      when others
      then
         out_result := -1;
         out_result := out_result || '异常，具体信息为：' || sqlerrm;
   end;

   --个人账户-商户收支数据日结
   procedure stat_mincome_balance (
      prmdate                 varchar2,
      prmcustunitcode         varchar2,                             --客户代码
      out_msg           out   varchar2,
      out_result        out   number
   )
   as
         /*
      --------------------------------------------------------------------------
      --存储过程：stat_income_balance
      --作　　者：周晓娜
      --时　　间：2012-12-21
      --说　　明：个人账户-商户收支数据统计
      --输入参数：见过程头参数注解
      --输出参数：见过程头参数注解
      --------------------------------------------------------------------------
      */
      t_balancedate       date;                                    --账目日期
      i_count             number;                                    --记录数
      dt_maxbalancedate   date;                                --最大日结日期
      n_incomepre         number;                              --前期收入总额
      n_payoutpre         number;                              --前期支出总额
      n_income            number;                              --本期收入总额
      n_payout            number;                              --本期支出总额
      n_oddfarepre        number;                              --前期账户余额
      n_oddfare           number;                              --本期账户余额
      i_accounttype       integer;                                 --账户类型
   --
   begin
      out_msg := '初始化变量';
      out_result := -1001;
-----------------------------------------------

      --先对t_balancedate设初值，以防止传入日期格式错误造成转换异常无法记录日志
      t_balancedate := to_date ('1800-01-01', 'yyyy-mm-dd');
      t_balancedate := to_date (prmdate, 'yyyy-mm-dd');

      --统计时间校验
      select count (*)
        into i_count
        from st_mincome_outpay_day
       where customerunitcode = prmcustunitcode and accounttype = 6;

      if i_count > 0
      then
         select max (statdate)
           into dt_maxbalancedate
           from st_mincome_outpay_day
          where customerunitcode = prmcustunitcode and accounttype = 6;
      end if;

      out_msg := '锁定统计表';
      --锁定统计表，不允许其他用户修改，保证数据一致，统计结束解锁
      lock table st_mincome_outpay in exclusive mode;
      lock table st_mincome_outpay_day in exclusive mode;
      lock table st_income_balance_day in exclusive mode;
      out_msg := '插入个人账户收支账目统计日结表';
      out_result := -1002;

      --一、形成个人账户-商户日结数据
      insert into st_mincome_outpay_day
                  (stid, statdate, operno, opermn, accdate, acccode, dir,
                   accounttype, balancedate, ver, customerunitcode,
                   merchantcode, poscode)
         select a.id, a.statdate, a.operno, a.opermn, a.accdate, a.acccode,
                a.dir, a.accounttype, t_balancedate, a.ver,
                a.customerunitcode, a.merchantcode, a.poscode
           from st_mincome_outpay a
          where a.customerunitcode = prmcustunitcode and a.accounttype = 6;

      ---------------------形成个人账户-商户日平衡数据----------------

      --二、形成个人账户-商户日平衡数据
      out_msg := '个人账户-商户日平衡账目统计失败！';
      out_result := -1004;
      --初始化变量
      n_incomepre := 0.00;                                      --前期收入总额
      n_payoutpre := 0.00;                                      --前期支出总额
      n_income := 0.00;                                         --本期收入总额
      n_payout := 0.00;                                         --本期支出总额
      n_oddfarepre := 0.00;                                     --前期账户余额
      n_oddfare := 0.00;                                        --本期账户余额
      out_result := -1005;
      out_msg := '获取商户平衡所需日结数据失败';

      select count (*)
        into i_count
        from st_mincome_outpay a
       where a.customerunitcode = prmcustunitcode and a.accounttype = 6;

      if i_count > 0                                              --有日结数据
      then
         ----------------------计算前期、本期金额-------------------
         declare
            cursor freeze_cur
            is
               select distinct (a.merchantcode)
                          from st_mincome_outpay a
                         where a.accounttype = 6
                           and a.customerunitcode = prmcustunitcode
                      order by a.merchantcode;

            freeze_row   freeze_cur%rowtype;
         begin
            open freeze_cur;

            loop
               fetch freeze_cur
                into freeze_row;

               exit when freeze_cur%notfound;

               ----判断前期日结是否已经存在
               select count (*)
                 into i_count
                 from st_income_balance_day t1
                where t1.statdate = dt_maxbalancedate
                  and t1.customerunitcode = prmcustunitcode
                  and t1.codeid = freeze_row.merchantcode
                  and t1.accounttype = 6;

               if i_count > 0
               then
                  -----------------计算前期金额---------------------
                         --累积收入总额=至结算日本期收入的合计
                  select nvl (sum (a.incomepre), 0),
                         --累积支出总额=至结算日本期支出的合计
                         nvl (sum (a.payoutpre), 0),
                         -
                          --前期账户余额 = 上个结算日oddfare（当前余额）
                          nvl (sum (a.oddfare), 0)
                    into n_incomepre,
                         n_payoutpre,
                         n_oddfarepre
                    from st_income_balance_day a
                   where statdate = dt_maxbalancedate
                     and a.customerunitcode = prmcustunitcode
                     and a.accounttype = 6
                     and a.codeid = freeze_row.merchantcode;
               else
                  --初始化变量
                  n_incomepre := 0.00;                         --前期收入总额
                  n_payoutpre := 0.00;                         --前期支出总额
                  n_oddfarepre := 0.00;                        --前期账户余额
               end if;

               n_income := 0.00;                                --本期收入总额
               n_payout := 0.00;                                --本期支出总额
               n_oddfare := 0.00;                               --本期账户余额

               ---------------计算本期金额-----------
               --本期收入
               select nvl (sum (a.opermn), 0)
                 into n_income
                 from st_mincome_outpay a
                where a.dir = 1
                  and a.accounttype = 6
                  and a.merchantcode = freeze_row.merchantcode
                  and a.customerunitcode = prmcustunitcode;

               --本期支出
               select nvl (sum (a.opermn), 0)
                 into n_payout
                 from st_mincome_outpay a
                where a.dir = -1
                  and a.accounttype = 6
                  and a.merchantcode = freeze_row.merchantcode
                  and a.customerunitcode = prmcustunitcode;

               n_incomepre := n_incomepre + n_income;
               n_payoutpre := n_payoutpre + n_payout;
               n_oddfare := n_oddfarepre + n_income - n_payout;

               --形成个人账户-客户日平衡数据
               insert into st_income_balance_day
                           (id, statdate, codeid, wallettype, accounttype,
                            incomepre, payoutpre, income, payout,
                            oddfarepre, oddfare, customerunitcode
                           )
                    values (0, t_balancedate, freeze_row.merchantcode, -1, 6,
                            n_incomepre, n_payoutpre, n_income, n_payout,
                            n_oddfarepre, n_oddfare, prmcustunitcode
                           );
            end loop;                                               --游标循环

            close freeze_cur;
         end;
      else                                            --形成一条商户日平衡数据
         insert into st_income_balance_day
                     (id, statdate, codeid, wallettype, accounttype,
                      incomepre, payoutpre, income, payout,
                      oddfarepre, oddfare, customerunitcode
                     )
              values (0, t_balancedate, '-1', -1, 6,
                      n_incomepre, n_payoutpre, n_income, n_payout,
                      n_oddfarepre, n_oddfare, prmcustunitcode
                     );
      end if;

      ----- 删除 及时账目统计表
      delete from st_mincome_outpay
            where customerunitcode = prmcustunitcode and accounttype = 6;

      out_msg := '系统账目(个人账户-商户收支)日结成功！';
      out_result := 100;
   exception
      when others
      then
         out_result := -1;
         out_result := out_result || '异常，具体信息为：' || sqlerrm;
   end;

   --系统账户收支数据日结
   procedure stat_sys_income_balance (
      prmdate                 varchar2,                             --结算日期
      prmcustunitcode         varchar2,                             --客户代码
      out_msg           out   varchar2,                             --返回信息
      out_result        out   number                                  --返回值
   )
   as
      /*
        --------------------------------------------------------------------------
        --存储过程：stat_sys_income_balance
        --作　　者：周晓娜
        --时　　间：2012-12-21
        --说　　明：系统账户-收支数据统计
        --输入参数：见过程头参数注解
        --输出参数：见过程头参数注解
        --------------------------------------------------------------------------
        */
      t_balancedate       date;                                    --账目日期
      i_count             number;                                    --记录数
      dt_maxbalancedate   date;                                --最大日结日期
      n_incomepre         number;                              --前期收入总额
      n_payoutpre         number;                              --前期支出总额
      n_income            number;                              --本期收入总额
      n_payout            number;                              --本期支出总额
      n_oddfarepre        number;                              --前期账户余额
      n_oddfare           number;                              --本期账户余额
      v_codeid            varchar2 (20);                           --账户编号
   --
   begin
      out_msg := '初始化变量';
      out_result := -1001;
-----------------------------------------------

      --先对t_balancedate设初值，以防止传入日期格式错误造成转换异常无法记录日志
      t_balancedate := to_date ('1800-01-01', 'yyyy-mm-dd');
      t_balancedate := to_date (prmdate, 'yyyy-mm-dd');
      dt_maxbalancedate := to_date ('1800-01-01', 'yyyy-mm-dd');

      --统计时间校验
      select count (*)
        into i_count
        from st_sys_income_outpay_day
       where customerunitcode = prmcustunitcode;

      if i_count > 0
      then
         select max (statdate)
           into dt_maxbalancedate
           from st_sys_income_outpay_day
          where customerunitcode = prmcustunitcode;
      end if;

      out_msg := '锁定统计表';
      --锁定统计表，不允许其他用户修改，保证数据一致，统计结束解锁
      lock table st_sys_income_outpay in exclusive mode;
      lock table st_sys_income_outpay_day in exclusive mode;
      lock table st_sys_income_balance_day in exclusive mode;
      out_msg := '插入系统账户收支账目统计日结表';
      out_result := -1002;

      insert into st_sys_income_outpay_day
                  (stid, statdate, operno, opermn, accdate, acccode, dir,
                   codeid, accounttype, balancedate, ver, customerunitcode)
         select a.id, a.statdate, a.operno, a.opermn, a.accdate, a.acccode,
                a.dir, a.codeid, a.accounttype, t_balancedate, a.ver,
                a.customerunitcode
           from st_sys_income_outpay a
          where a.customerunitcode = prmcustunitcode;

      ---------------------形成系统账户-日平衡数据----------------
       --二、形成系统账户-日平衡数据
      out_msg := '系统账户-出纳日平衡账目统计失败！';
      out_result := -1003;
      --初始化变量
      n_incomepre := 0.00;                                      --前期收入总额
      n_payoutpre := 0.00;                                      --前期支出总额
      n_income := 0.00;                                         --本期收入总额
      n_payout := 0.00;                                         --本期支出总额
      n_oddfarepre := 0.00;                                     --前期账户余额
      n_oddfare := 0.00;                                        --本期账户余额
      out_result := -1005;
      out_msg := '获取系统账户平衡所需日结数据失败';

      select count (*)
        into i_count
        from st_sys_income_outpay a
       where a.customerunitcode = prmcustunitcode;

      if i_count > 0
      then
         ----------------------计算前期、本期金额-------------------
         declare
            cursor freeze_cur
            is
               select distinct a.codeid, a.accounttype
                          from st_sys_income_outpay a
                         where a.customerunitcode = prmcustunitcode
                      order by a.codeid;

            freeze_row   freeze_cur%rowtype;
         begin
            open freeze_cur;

            loop
               fetch freeze_cur
                into freeze_row;

               exit when freeze_cur%notfound;

               ----判断前期日结是否已经存在
               select count (*)
                 into i_count
                 from st_sys_income_balance_day t1
                where t1.statdate = dt_maxbalancedate
                  and t1.customerunitcode = prmcustunitcode
                  and t1.codeid = freeze_row.codeid
                  and t1.accounttype = freeze_row.accounttype;

               if i_count > 0
               then
                  -----------------计算前期金额---------------------
                         --累积收入总额=至结算日本期收入的合计
                  select nvl (sum (a.incomepre), 0),
                         --累积支出总额=至结算日本期支出的合计
                         nvl (sum (a.payoutpre), 0),
                         -
                          --前期账户余额 = 上个结算日oddfare（当前余额）
                          nvl (sum (a.oddfare), 0)
                    into n_incomepre,
                         n_payoutpre,
                         n_oddfarepre
                    from st_sys_income_balance_day a
                   where statdate = dt_maxbalancedate
                     and a.customerunitcode = prmcustunitcode
                     and a.codeid = freeze_row.codeid
                     and a.accounttype = freeze_row.accounttype;
               else
                  --初始化变量
                  n_incomepre := 0.00;                         --前期收入总额
                  n_payoutpre := 0.00;                         --前期支出总额
                  n_oddfarepre := 0.00;                        --前期账户余额
               end if;

               n_income := 0.00;                                --本期收入总额
               n_payout := 0.00;                                --本期支出总额
               n_oddfare := 0.00;                               --本期账户余额

               ---------------计算本期金额-----------
               --本期收入
               select nvl (sum (a.opermn), 0)
                 into n_income
                 from st_sys_income_outpay a
                where a.dir = 1
                  and a.accounttype = freeze_row.accounttype
                  and a.codeid = freeze_row.codeid
                  and a.customerunitcode = prmcustunitcode;

               --本期支出
               select nvl (sum (a.opermn), 0)
                 into n_payout
                 from st_sys_income_outpay a
                where a.dir = -1
                  and a.accounttype = freeze_row.accounttype
                  and a.codeid = freeze_row.codeid
                  and a.customerunitcode = prmcustunitcode;

               n_incomepre := n_incomepre + n_income;
               n_payoutpre := n_payoutpre + n_payout;
               n_oddfare := n_oddfarepre + n_income - n_payout;

               --形成系统账户-日平衡数据
               insert into st_sys_income_balance_day
                           (id, statdate, codeid,
                            accounttype, incomepre, payoutpre,
                            income, payout, oddfarepre, oddfare,
                            customerunitcode
                           )
                    values (0, t_balancedate, freeze_row.codeid,
                            freeze_row.accounttype, n_incomepre, n_payoutpre,
                            n_income, n_payout, n_oddfarepre, n_oddfare,
                            prmcustunitcode
                           );
            end loop;                                               --游标循环

            close freeze_cur;
         end;
      else
         --不存在则形成一条系统账户-日平衡数据
         insert into st_sys_income_balance_day
                     (id, statdate, codeid, accounttype, incomepre,
                      payoutpre, income, payout, oddfarepre,
                      oddfare, customerunitcode
                     )
              values (0, t_balancedate, -1, 0, n_incomepre,
                      n_payoutpre, n_income, n_payout, n_oddfarepre,
                      n_oddfare, prmcustunitcode
                     );
      end if;

      ----- 删除 及时账目统计表
      delete from st_sys_income_outpay
            where customerunitcode = prmcustunitcode;

      out_msg := '系统账目(系统账户收支)日结成功！';
      out_result := 100;
   exception
      when others
      then
         out_result := -1;
         out_result := out_result || '异常，具体信息为：' || sqlerrm;
   end;

   --资产负债数据
   procedure stat_assets_balance (
      prmdate                 varchar2,                             --结算日期
      prmcustunitcode         varchar2,                             --客户代码
      out_msg           out   varchar2,                             --返回信息
      out_result        out   number                                  --返回值
   )
   as
      /*
        --------------------------------------------------------------------------
        --存储过程：stat_assets_balance
        --作　　者：周晓娜
        --时　　间：2012-12-25
        --说　　明：形成资产负债表日结数据
        --输入参数：见过程头参数注解
        --输出参数：见过程头参数注解
        --------------------------------------------------------------------------
        */
      dt_balancedate   date;                                       --账目日期
      dt_maxstatdate   date;
      vsumopfarepre    number;
      vcount           number;
      vopfare          number;
      vsumopfare       number;
   --
   begin
      out_msg := '初始化变量';
      out_result := -1001;
      vsumopfare := 0;
-----------------------------------------------

      --先对t_balancedate设初值，以防止传入日期格式错误造成转换异常无法记录日志
      dt_balancedate := to_date ('1800-01-01', 'yyyy-mm-dd');
      dt_balancedate := to_date (prmdate, 'yyyy-mm-dd');
      dt_maxstatdate := to_date ('1800-01-01', 'yyyy-mm-dd');
      out_msg := '锁定统计表';
      --锁定统计表，不允许其他用户修改，保证数据一致，统计结束解锁
      lock table st_account_acc_day in exclusive mode;
      lock table st_assets_debts_day in exclusive mode;
      lock table st_account_acc in exclusive mode;
      out_msg := '插入个人账户收支账目统计日结表';
      out_result := -1018;
      out_msg := '统计会计账目平衡 插入 资产负债日表';
      out_result := -1002;

      insert into st_account_acc_day
                  (stid, statdate, subcode, subdscrp, operno, opermn, dir,
                   accdate, balancedate, ver, customerunitcode)
         select a.id, a.statdate, a.subcode, a.subdscrp, a.operno, a.opermn,
                a.dir, a.accdate, dt_balancedate, a.ver, a.customerunitcode
           from st_account_acc a
          where a.customerunitcode = prmcustunitcode;

      --获取该客户最大结算日期
      select max (statdate)
        into dt_maxstatdate
        from st_assets_debts_day a
       where a.customerunitcode = prmcustunitcode;

      --2.3.1形成会计账目平衡
      declare
         cursor mycur
         is
            select a.subcode, a.subdscrp, a.customerunitcode, a.dir,
                   a.opermn, b.subcodetype
              from st_account_acc_day a left join base_subject b
                   on a.subcode = b.subcode
                 and a.customerunitcode = b.customerunitcode
             where a.balancedate = dt_balancedate
               and a.customerunitcode = prmcustunitcode;
      begin
         for my_rec in mycur
         loop
            --2.3.1判断上期个人账户平衡中有数据没
            select count (*)
              into vcount
              from st_assets_debts_day
             where subcode = my_rec.subcode
               and statdate = dt_maxstatdate
               and customerunitcode = prmcustunitcode;

            if vcount = 0
            then
               --如果上期数据没有，则上期数据取0
               vsumopfarepre := 0;
            else
               --取出来上期的收入、支出、账户余额
               select nvl (sum (sumopfare), 0)
                 into vsumopfarepre
                 from st_assets_debts_day
                where subcode = my_rec.subcode
                  and statdate = dt_maxstatdate
                  and customerunitcode = prmcustunitcode;
            end if;

            --2.3.2判断本期个人账户平衡中有数据没
            select nvl (count (*), 0)
              into vcount
              from st_assets_debts_day
             where subcode = my_rec.subcode
               and statdate = dt_balancedate
               and customerunitcode = prmcustunitcode;

            if vcount = 0
            then
               --资产类的借是加 贷是减；资产类的借是减，贷是加
               if my_rec.subcodetype = 1
               then
                  if my_rec.dir = 1
                  then
                     vopfare := my_rec.opermn;
                     vsumopfare := vsumopfarepre + my_rec.opermn;
                  elsif my_rec.dir = -1
                  then
                     vopfare := 0 - my_rec.opermn;
                     vsumopfare := vsumopfarepre - my_rec.opermn;
                  else
                     vopfare := vopfare;
                     vsumopfare := vsumopfarepre;
                  end if;
               elsif my_rec.subcodetype = 2
               then
                  if my_rec.dir = 1
                  then
                     vopfare := 0 - my_rec.opermn;
                     vsumopfare := vsumopfarepre - my_rec.opermn;
                  elsif my_rec.dir = -1
                  then
                     vopfare := my_rec.opermn;
                     vsumopfare := vsumopfarepre + my_rec.opermn;
                  else
                     vopfare := vopfare;
                     vsumopfare := vsumopfarepre;
                  end if;
               end if;

               --2.3.2形成本期系统账户平衡数据
               insert into st_assets_debts_day
                           (statdate, subcode, subdscrp,
                            sumopfarepre, sumopfare, opfare,
                            customerunitcode
                           )
                    values (dt_balancedate, my_rec.subcode, my_rec.subdscrp,
                            vsumopfarepre, vsumopfare, my_rec.opermn,
                            prmcustunitcode
                           );
            else
               select nvl (sum (sumopfare), 0), nvl (sum (opfare), 0)
                 into vsumopfare, vopfare
                 from st_assets_debts_day
                where subcode = my_rec.subcode
                  and statdate = dt_balancedate
                  and customerunitcode = prmcustunitcode;

               --资产类的借是加 贷是减；负债类的借是减，贷是加
               if my_rec.subcodetype = 1
               then
                  if my_rec.dir = 1
                  then
                     vopfare := vopfare + my_rec.opermn;
                     vsumopfare := vsumopfare + my_rec.opermn;
                  elsif my_rec.dir = -1
                  then
                     vopfare := vopfare - my_rec.opermn;
                     vsumopfare := vsumopfare - my_rec.opermn;
                  else
                     vopfare := vopfare;
                     vsumopfare := vsumopfare;
                  end if;
               elsif my_rec.subcodetype = 2
               then
                  if my_rec.dir = 1
                  then
                     vopfare := vopfare - my_rec.opermn;
                     vsumopfare := vsumopfare - my_rec.opermn;
                  elsif my_rec.dir = -1
                  then
                     vopfare := vopfare + my_rec.opermn;
                     vsumopfare := vsumopfare + my_rec.opermn;
                  else
                     vopfare := vopfare;
                     vsumopfare := vsumopfare;
                  end if;
               end if;

               update st_assets_debts_day
                  set sumopfare = vsumopfare,
                      opfare = vopfare
                where subcode = my_rec.subcode
                  and statdate = dt_balancedate
                  and customerunitcode = prmcustunitcode;
            end if;
         end loop;
      end;

      --2.3.2形成不在本期当中的会计科目
      declare
         cursor mycur
         is
            select subcode, subname
              from base_subject
             where subcode not in (
                      select   subcode
                          from st_assets_debts_day
                         where statdate = dt_balancedate
                           and customerunitcode = prmcustunitcode
                      group by subcode)
               and customerunitcode = prmcustunitcode;
      begin
         for my_rec in mycur
         loop
            --2.3.1判断上期个人账户平衡中有数据没
            select nvl (count (*), 0)
              into vcount
              from st_assets_debts_day
             where subcode = my_rec.subcode
               and statdate = dt_maxstatdate
               and customerunitcode = prmcustunitcode;

            if vcount = 0
            then
               --如果上期数据没有，则上期数据取0
               vsumopfarepre := 0;
            else
               --取出来上期的收入、支出、账户余额
               select nvl (sum (sumopfare), 0)
                 into vsumopfarepre
                 from st_assets_debts_day
                where subcode = my_rec.subcode
                  and statdate = dt_maxstatdate
                  and customerunitcode = prmcustunitcode;
            end if;

            vsumopfare := vsumopfarepre;

            --2.3.2形成本期系统账户平衡数据
            insert into st_assets_debts_day
                        (statdate, subcode, subdscrp,
                         sumopfarepre, sumopfare, opfare, customerunitcode
                        )
                 values (dt_balancedate, my_rec.subcode, my_rec.subname,
                         vsumopfarepre, vsumopfare, 0, prmcustunitcode
                        );
         end loop;
      end;

      ----- 删除 及时账目统计表
      delete from st_account_acc
            where customerunitcode = prmcustunitcode;

      out_msg := '系统账目(会计账户)日结成功！';
      out_result := 100;
   exception
      when others
      then
         out_result := -1;
         out_msg := out_msg || '异常，具体信息为：' || sqlerrm;
   end;
end;

/
create or replace package pkg_st_payment
is
    procedure proc_custdataaccount_online (
        prmopdt           in     varchar2, --操作日期：yyyy-mm-dd hh24:mi:ss
        prmopfare         in     number, --统计金额
        prmacccode        in     number, --统计科目
        prmdiscountfare   in     number, --打折费用
        prmcardkind       in     number, --卡类型 1：m1卡 2：cpu卡
        prmcardtype       in     number, --卡类型，普通卡，月卡，老年卡等
        prmempid          in     number, --充值员或者司机id
        prmposcode        in     varchar2, --设备唯一运营编号
        prmsamcardno      in     varchar2, --sam卡号
        prmbuslineid      in     number, --线路id
        prmdeptcode       in     varchar2, --线路所属部门
        prmbusid          in     number, --车辆编号
        prmwallettype     in     number, --钱包类型 1电子 2月票
        prmopertype       in     number, --操作类型 0：正常 1：回滚
        prmcustunitcode   in     varchar2, --客户代码
        out_msg              out varchar2,
        out_result           out integer,
        prmmaincardtype   in     number := -1); --2017-12-26 新增主卡类型

    procedure proc_emptradeaccount_online (prmopdt           in     varchar2, --操作日期：yyyy-mm-dd hh24:mi:ss
                                           prmopfare         in     number, --统计金额，无金额传0
                                           prmacccode        in     number, --统计科目
                                           prmempid          in     number, --职员id
                                           prmposcode        in     number, --终端设备唯一编号
                                           prmpsamcardno     in     number, --终端psam卡号
                                           prmcardtype       in     integer, --卡类型，如普通卡，月卡，老年卡
                                           prmcardkind       in     integer, --交易卡类型 1：m1卡 2：cpu卡
                                           prmopertype       in     integer, --操作类型 0：正常 1：回滚
                                           prmcustunitcode   in     varchar2, --客户代码
                                           out_msg              out varchar2,
                                           out_result           out integer);

    procedure proc_nolocalaccount_online (
        prmopdt             in     varchar2, --操作日期：yyyy-mm-dd hh24:mi:ss
        prmopfare           in     number, --统计金额
        prmacccode          in     number, --统计科目
        prmdiscountfare     in     number, --打折费用
        prmcardkind         in     number, --卡类型 1：m1卡 2：cpu卡
        prmcardtype         in     number, --卡类型，普通卡，月卡，老年卡等
        prmempid            in     number, --充值员或者司机id
        prmposcode          in     varchar2, --设备唯一运营编号
        prmsamcardno        in     varchar2, --sam卡号
        prmbuslineid        in     number, --线路id
        prmdeptcode         in     varchar2, --线路所属部门
        prmbusid            in     number, --车辆编号
        prmwallettype       in     number, --钱包类型 1电子 2月票
        prmopertype         in     number, --操作类型 0：正常 1：回滚
        prmcustunitcode     in     varchar2, --客户代码
        prmaccountdate      in     varchar2, --结算日期：yyyy-mm-dd hh24:mi:ss
        prmsettlementdate   in     varchar2, --清算日期：yyyy-mm-dd hh24:mi:ss
        prmfilecreatedate   in     varchar2, --文件创建日期：yyyy-mm-dd hh24:mi:ss
        out_msg                out varchar2,
        out_result             out integer,
        prmmaincardtype     in     number); --2017-12-26 新增主卡类型

    -------------------------------------
    --修改人：张垒
    --修改时间：2013-12-24
    --说明：修改pkg_st_payment包的stat_thirdcardconsume_account过程的包头
    -------------------------------------

    procedure stat_thirdcardconsume_account (
        prmopdt               in     varchar2, --操作日期：yyyy-mm-dd hh24:mi:ss
        prmopfare             in     number, --统计金额
        prmacccode            in     number, --统计科目
        prmdiscountfare       in     number, --打折费用
        prmcardkind           in     number, --卡类型 1：m1卡 2：cpu卡
        prmcardtype           in     number, --卡类型，普通卡，月卡，老年卡等
        prmempid              in     number, --充值员或者司机id
        prmposcode            in     varchar2, --设备唯一运营编号
        prmsamcardno          in     varchar2, --sam卡号
        prmbuslineid          in     number, --线路id
        prmdeptcode           in     varchar2, --线路所属部门
        prmbusid              in     number, --车辆编号
        prmwallettype         in     number, --钱包类型 1电子 2月票
        prmopertype           in     number, --操作类型 0：正常 1：回滚
        prmmerchantcode       in     varchar2, --商户编号
        prmuniontermid        in     varchar2, --银联终端编号
        prmaccountdate        in     date, --银联账务日期
        prmresult             in     number, --记录处理结果 0失败，1成功
        prmcustomerunitcode   in     varchar2, --客户法人   (增加客户法人 张垒 2013-12-24)
        out_msg                  out varchar2,
        out_result               out integer);
end;
/
create or replace package body pkg_st_payment
is
    /*
    ----------------------------------------------------------------------------
    --copyright (c) 1992-2009 郑州新开普电子股份有限公司 版权所有。
    --
    -- 存储过程名称：pkg_st_payment
    -- 功能描述：1、完成数据的即时统计，此过程为内部过程，不允许提交回滚，
    --      需要在调用的外层判断统计结果，决定是否提交或者回滚
    ---------------------------------------------------------------------------
    */
    procedure proc_custdataaccount_online (
        prmopdt           in     varchar2, --操作日期：yyyy-mm-dd hh24:mi:ss
        prmopfare         in     number, --统计金额
        prmacccode        in     number, --统计科目
        prmdiscountfare   in     number, --打折费用
        prmcardkind       in     number, --卡类型 1：m1卡 2：cpu卡
        prmcardtype       in     number, --卡类型，普通卡，月卡，老年卡等
        prmempid          in     number, --充值员或者司机id
        prmposcode        in     varchar2, --设备唯一运营编号
        prmsamcardno      in     varchar2, --sam卡号
        prmbuslineid      in     number, --线路id
        prmdeptcode       in     varchar2, --线路所属部门
        prmbusid          in     number, --车辆编号
        prmwallettype     in     number, --钱包类型 1电子 2月票
        prmopertype       in     number, --操作类型 0：正常 1：回滚
        prmcustunitcode   in     varchar2, --客户代码
        out_msg              out varchar2,
        out_result           out integer,
        prmmaincardtype   in     number := -1)
    as
        --2017-12-26 新增主卡类型
        /*
        -------------------------------------------------------------------------------
        --存储过程：proc_custdataaccount_online
        --作　　者：朱鹏飞
        --时　　间：2009-05-27
        --说　　明：消费记录数据即时统计
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：帐目处理成功，其他失败
        --------------------------------------------------------------------------
        --修改标记：周晓娜 2012-09-11
        --修改说明：增加客户代码处理
        --------------------------------------------------------------------------
        --修改标记：周晓娜 2012-11-07
        --修改说明：去掉分区字段
        --------------------------------------------------------------------------
        */
        i_count        integer; --计数，用于查询记录数
        i_operno       integer; --操作次数
        n_opermn       number (10, 2); --操作金额
        n_discountmn   number (10, 2); --打折金额累计
        dt_accdate     date; --操作日期
        dt_statdate    date; --统计日期
        n_disacccode   number; --打折金额统计科目
    begin
        out_result := -1001;
        out_msg := '初始化数据';
        --
        dt_accdate := trunc (to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), 'dd');
        dt_statdate := trunc (sysdate, 'dd');

        if prmopertype = 0
        then
            --正常账目汇总
            i_operno := 1;
            n_opermn := prmopfare;
            n_discountmn := prmdiscountfare;
        elsif prmopertype = 1
        then
            --回滚操作
            i_operno := -1;
            n_opermn := -prmopfare;
            n_discountmn := -prmdiscountfare;
        else
            --参数错误
            out_result := -1;
            out_msg :=
                '参数类型错误opertype：' || to_char (prmopertype);
            return;
        end if;

        out_result := -1004;
        out_msg := '查询统计数据';

        select count (*)
          into i_count
          from st_payment a
         where     a.statdate = dt_statdate
               and a.accdate = dt_accdate
               and a.poscode = prmposcode
               and a.pasmcardno = prmsamcardno
               and a.busid = prmbusid
               and a.buslineid = prmbuslineid
               and a.empid = prmempid
               and a.wallettype = prmwallettype
               and a.cardtype = prmcardtype
               and a.cardkind = prmcardkind
               and a.dptcode = prmdeptcode
               and a.acccode = prmacccode
               and a.customerunitcode = prmcustunitcode
               and a.maincardtype = prmmaincardtype; --2017-12-26  新增

        if i_count > 0
        then
            out_result := -1005;
            out_msg := '更新统计数据';

            update st_payment a
               set a.operno = a.operno + i_operno,
                   a.opermn = a.opermn + n_opermn,
                   a.discountmn = a.discountmn + n_discountmn
             where     a.statdate = dt_statdate
                   and a.accdate = dt_accdate
                   and a.poscode = prmposcode
                   and a.pasmcardno = prmsamcardno
                   and a.busid = prmbusid
                   and a.buslineid = prmbuslineid
                   and a.empid = prmempid
                   and a.wallettype = prmwallettype
                   and a.cardtype = prmcardtype
                   and a.cardkind = prmcardkind
                   and a.dptcode = prmdeptcode
                   and a.acccode = prmacccode
                   and a.customerunitcode = prmcustunitcode
                   and a.maincardtype = prmmaincardtype; --2017-12-26  新增
        else
            out_result := -1006;
            out_msg := '插入统计数据';

            insert into st_payment (statdate,
                                    poscode,
                                    pasmcardno,
                                    busid,
                                    buslineid,
                                    empid,
                                    wallettype,
                                    cardtype,
                                    cardkind,
                                    accdate,
                                    dptcode,
                                    acccode,
                                    operno,
                                    opermn,
                                    discountmn,
                                    customerunitcode,
                                    maincardtype) --2017-12-26  新增
                 values (dt_statdate,
                         prmposcode,
                         prmsamcardno,
                         prmbusid,
                         prmbuslineid,
                         prmempid,
                         prmwallettype,
                         prmcardtype,
                         prmcardkind,
                         dt_accdate,
                         prmdeptcode,
                         prmacccode,
                         i_operno,
                         n_opermn,
                         n_discountmn,
                         prmcustunitcode,
                         prmmaincardtype); --2017-12-26  新增
        end if;

        out_result := 100;
        out_msg := '统计成功';
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常_+_' || sqlerrm;
    end;

    procedure proc_emptradeaccount_online (prmopdt           in     varchar2, --操作日期：yyyy-mm-dd hh24:mi:ss
                                           prmopfare         in     number, --统计金额，无金额传0
                                           prmacccode        in     number, --统计科目
                                           prmempid          in     number, --职员id
                                           prmposcode        in     number, --终端设备唯一编号,必须存在
                                           prmpsamcardno     in     number, --终端psam卡号
                                           prmcardtype       in     integer, --卡类型,普通卡，月卡，老年卡 0 其他
                                           prmcardkind       in     integer, --交易卡类型 1：m1卡 2：cpu卡 0 其他
                                           prmopertype       in     integer, --操作类型 0：正常 1：回滚
                                           prmcustunitcode   in     varchar2, --客户代码
                                           out_msg              out varchar2,
                                           out_result           out integer)
    as
        /*
        -------------------------------------------------------------------------------
        --存储过程：proc_emptradeaccount_online
        --作　　者：朱鹏飞
        --时　　间：2009-05-27
        --说　　明：职员操作记录数据即时统计，此过程不回滚不提交，完全由调用过程来回滚提交
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：帐目处理成功，其他失败
        --------------------------------------------------------------------------
        --修改标记：周晓娜 2012-09-11
        --修改说明：增加客户代码处理
        --------------------------------------------------------------------------
        --修改标记：周晓娜 2012-11-07
        --修改说明：去掉分区的处理
        --------------------------------------------------------------------------
        */
        i_count       integer; --计数，用于查询记录数
        v_deptcode    varchar2 (30); --职员所属部门
        i_operno      integer; --操作次数
        n_opermn      number (10, 2); --操作金额
        dt_accdate    date; --操作日期
        dt_statdate   date; --即时统计日期
        i_dptareaid   integer; --职员所属部门分区编号
    begin
        dt_accdate := trunc (to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), 'dd');
        dt_statdate := trunc (sysdate, 'dd');

        if prmopertype = 0
        then
            --回滚操作
            n_opermn := prmopfare;
            i_operno := 1;
        elsif prmopertype = 1
        then
            --正常账目汇总
            n_opermn := -prmopfare;
            i_operno := -1;
        else
            --参数错误
            out_result := -1;
            out_msg :=
                '参数类型错误opertype：' || to_char (prmopertype);
            return;
        end if;

        out_result := -1;
        out_msg := '获取职员所属部门';

        --获取职员所属部门，职员操作统计表，以职员的部门，不以终端所属部门
        select a.dptcode
          into v_deptcode
          from base_dept a, base_emp b
         where     a.dptcode = b.dptcode
               and b.empid = prmempid
               and a.customerunitcode = b.customerunitcode
               and a.customerunitcode = prmcustunitcode;

        select count (*)
          into i_count
          from st_emp_trade a
         where     a.statdt = dt_statdate
               and a.empid = prmempid
               and a.poscode = prmposcode
               and a.psamcardno = prmpsamcardno
               and a.acccode = prmacccode
               and a.accdt = dt_accdate
               and a.cardtype = prmcardtype
               and a.deptcode = v_deptcode
               --and a.cardareaid = prmcardareaid
               --and a.dptareaid = i_dptareaid
               and a.cardkind = prmcardkind
               and a.customerunitcode = prmcustunitcode;

        if i_count > 0
        then
            out_result := -2;
            out_msg := '更新统计数据';

            update st_emp_trade a
               set a.operno = a.operno + i_operno,
                   a.opermn = a.opermn + n_opermn
             where     a.statdt = dt_statdate
                   and a.empid = prmempid
                   and a.poscode = prmposcode
                   and a.psamcardno = prmpsamcardno
                   and a.acccode = prmacccode
                   and a.accdt = dt_accdate
                   and a.cardtype = prmcardtype
                   and a.deptcode = v_deptcode
                   --and a.cardareaid = prmcardareaid
                   --and a.dptareaid = i_dptareaid
                   and a.cardkind = prmcardkind
                   and a.customerunitcode = prmcustunitcode;
        else
            out_result := -3;
            out_msg := '插入统计数据';

            insert into st_emp_trade a (a.id,
                                        a.statdt,
                                        a.empid,
                                        a.poscode,
                                        a.psamcardno,
                                        a.acccode,
                                        a.operno,
                                        a.opermn,
                                        a.accdt,
                                        a.cardkind,
                                        a.cardtype,
                                        a.deptcode,
                                        a.ver,
                                        a.customerunitcode)
                 values (0,
                         dt_statdate,
                         prmempid,
                         prmposcode,
                         prmpsamcardno,
                         prmacccode,
                         i_operno,
                         n_opermn,
                         dt_accdate,
                         prmcardkind,
                         prmcardtype,
                         v_deptcode,
                         0,
                         prmcustunitcode);
        end if;

        out_result := 100;
        out_msg := '职员操作数据统计成功';
    exception
        when others
        then
            out_result := -1;
            out_msg :=
                   '职员操作统计失败_+_'
                || out_msg
                || '异常_+_'
                || sqlerrm;
    end;

    --消费记录数据即时统计（本地卡异地消费）
    procedure proc_nolocalaccount_online (
        prmopdt             in     varchar2, --操作日期：yyyy-mm-dd hh24:mi:ss
        prmopfare           in     number, --统计金额
        prmacccode          in     number, --统计科目
        prmdiscountfare     in     number, --打折费用
        prmcardkind         in     number, --卡类型 1：m1卡 2：cpu卡
        prmcardtype         in     number, --卡类型，普通卡，月卡，老年卡等
        prmempid            in     number, --充值员或者司机id
        prmposcode          in     varchar2, --设备唯一运营编号
        prmsamcardno        in     varchar2, --sam卡号
        prmbuslineid        in     number, --线路id
        prmdeptcode         in     varchar2, --线路所属部门
        prmbusid            in     number, --车辆编号
        prmwallettype       in     number, --钱包类型 1电子 2月票
        prmopertype         in     number, --操作类型 0：正常 1：回滚
        prmcustunitcode     in     varchar2, --客户代码
        prmaccountdate      in     varchar2, --结算日期：yyyy-mm-dd hh24:mi:ss
        prmsettlementdate   in     varchar2, --清算日期：yyyy-mm-dd hh24:mi:ss
        prmfilecreatedate   in     varchar2, --文件创建日期：yyyy-mm-dd hh24:mi:ss
        out_msg                out varchar2,
        out_result             out integer,
        prmmaincardtype     in     number)
    as
        --2017-12-26 新增主卡类型
        /*
        -------------------------------------------------------------------------------
        --存储过程：proc_nolocalaccount_online
        --作　　者：黎会芳
        --时　　间：2016-05-19
        --说　　明：消费记录数据即时统计（本地卡异地消费）
        --输入参数：
        --输出参数：
        --返回值和返回信息定义：
        --100 ：帐目处理成功，其他失败
        --------------------------------------------------------------------------
        */
        i_count             integer; --计数，用于查询记录数
        i_operno            integer; --操作次数
        n_opermn            number (10, 2); --操作金额
        n_discountmn        number (10, 2); --打折金额累计
        dt_accdate          date; --操作日期
        dt_statdate         date; --统计日期
        n_disacccode        number; --打折金额统计科目
        dt_accountdate      date; --结算日期
        dt_settlementdate   date; --清算日期
        dt_filecreatedate   date; --文件创建日期
    begin
        out_result := -1001;
        out_msg := '初始化数据';
        --
        dt_accdate := trunc (to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), 'dd');
        dt_statdate := trunc (sysdate, 'dd');

        dt_accountdate :=
            trunc (to_date (prmaccountdate, 'yyyy-mm-dd hh24:mi:ss'), 'dd'); --结算日期
        dt_settlementdate :=
            trunc (to_date (prmsettlementdate, 'yyyy-mm-dd hh24:mi:ss'),
                   'dd'); --清算日期
        dt_filecreatedate :=
            trunc (to_date (prmfilecreatedate, 'yyyy-mm-dd hh24:mi:ss'),
                   'dd'); --文件创建日期

        if prmopertype = 0
        then
            --正常账目汇总
            i_operno := 1;
            n_opermn := prmopfare;
            n_discountmn := prmdiscountfare;
        elsif prmopertype = 1
        then
            --回滚操作
            i_operno := -1;
            n_opermn := -prmopfare;
            n_discountmn := -prmdiscountfare;
        else
            --参数错误
            out_result := -1;
            out_msg :=
                '参数类型错误opertype：' || to_char (prmopertype);
            return;
        end if;

        out_result := -1004;
        out_msg := '查询统计数据';

        select count (*)
          into i_count
          from st_payment a
         where     a.statdate = dt_statdate
               and a.accdate = dt_accdate
               and a.poscode = prmposcode
               and a.pasmcardno = prmsamcardno
               and a.busid = prmbusid
               and a.buslineid = prmbuslineid
               and a.empid = prmempid
               and a.wallettype = prmwallettype
               and a.cardtype = prmcardtype
               and a.cardkind = prmcardkind
               and a.dptcode = prmdeptcode
               and a.acccode = prmacccode
               and a.customerunitcode = prmcustunitcode
               and a.maincardtype = prmmaincardtype --2017-12-26  新增
               and a.accountdate = dt_accountdate
               and a.settlementdate = dt_settlementdate
               and a.filecreatedate = dt_filecreatedate;

        if i_count > 0
        then
            out_result := -1005;
            out_msg := '更新统计数据';

            update st_payment a
               set a.operno = a.operno + i_operno,
                   a.opermn = a.opermn + n_opermn,
                   a.discountmn = a.discountmn + n_discountmn
             where     a.statdate = dt_statdate
                   and a.accdate = dt_accdate
                   and a.poscode = prmposcode
                   and a.pasmcardno = prmsamcardno
                   and a.busid = prmbusid
                   and a.buslineid = prmbuslineid
                   and a.empid = prmempid
                   and a.wallettype = prmwallettype
                   and a.cardtype = prmcardtype
                   and a.cardkind = prmcardkind
                   and a.dptcode = prmdeptcode
                   and a.acccode = prmacccode
                   and a.customerunitcode = prmcustunitcode
                   and a.maincardtype = prmmaincardtype --2017-12-26  新增
                   and a.accountdate = dt_accountdate
                   and a.settlementdate = dt_settlementdate
                   and a.filecreatedate = dt_filecreatedate;
        else
            out_result := -1006;
            out_msg := '插入统计数据' || ',--' || prmmaincardtype;

            insert into st_payment (statdate,
                                    poscode,
                                    pasmcardno,
                                    busid,
                                    buslineid,
                                    empid,
                                    wallettype,
                                    cardtype,
                                    cardkind,
                                    accdate,
                                    dptcode,
                                    acccode,
                                    operno,
                                    opermn,
                                    discountmn,
                                    customerunitcode,
                                    accountdate,
                                    settlementdate,
                                    filecreatedate,
                                    maincardtype) --2017-12-26  新增
                 values (dt_statdate,
                         prmposcode,
                         prmsamcardno,
                         prmbusid,
                         prmbuslineid,
                         prmempid,
                         prmwallettype,
                         prmcardtype,
                         prmcardkind,
                         dt_accdate,
                         prmdeptcode,
                         prmacccode,
                         i_operno,
                         n_opermn,
                         n_discountmn,
                         prmcustunitcode,
                         dt_accountdate,
                         dt_settlementdate,
                         dt_filecreatedate,
                         prmmaincardtype); --2017-12-26  新增
        end if;

        out_result := 100;
        out_msg := '统计成功';
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常_+_' || sqlerrm;
    end;

    -------------------------------------
    --修改人：张垒
    --修改时间：2013-12-24
    --说明：修改pkg_st_payment包的stat_thirdcardconsume_account过程的包体
    -------------------------------------

    procedure stat_thirdcardconsume_account (
        prmopdt               in     varchar2, --操作日期：yyyy-mm-dd hh24:mi:ss
        prmopfare             in     number, --统计金额
        prmacccode            in     number, --统计科目
        prmdiscountfare       in     number, --打折费用
        prmcardkind           in     number, --卡类型 1：m1卡 2：cpu卡
        prmcardtype           in     number, --卡类型，普通卡，月卡，老年卡等
        prmempid              in     number, --充值员或者司机id
        prmposcode            in     varchar2, --设备唯一运营编号
        prmsamcardno          in     varchar2, --sam卡号
        prmbuslineid          in     number, --线路id
        prmdeptcode           in     varchar2, --线路所属部门
        prmbusid              in     number, --车辆编号
        prmwallettype         in     number, --钱包类型 1电子 2月票
        prmopertype           in     number, --操作类型 0：正常 1：回滚
        prmmerchantcode       in     varchar2, --商户编号
        prmuniontermid        in     varchar2, --银联终端编号
        prmaccountdate        in     date, --银联账务日期
        prmresult             in     number, --记录处理结果 0失败，1成功
        prmcustomerunitcode   in     varchar2, --客户法人  (增加客户法人 张垒 2013-12-24)
        out_msg                  out varchar2,
        out_result               out integer)
    as
        i_count        integer; --计数，用于查询记录数
        i_operno       integer; --操作次数
        n_opermn       number (10, 2); --操作金额
        n_discountmn   number (10, 2); --打折金额累计
        dt_accdate     date; --操作日期
        dt_statdate    date; --统计日期
        n_disacccode   number; --打折金额统计科目
        n_cardtype     number;
    begin
        out_result := -1001;
        out_msg := '初始化数据';
        --
        dt_accdate := trunc (to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'), 'dd');
        dt_statdate := trunc (prmaccountdate, 'dd');

        /*
        --判断卡类型，如果是月票卡和次卡则卡类型都认为是电子现金卡
        --非月票卡、次卡消费不会出现行业应用消费，为了方便修改报表，
        --将行业应用统计字段值置为-1。报表查询如果数据为-1，则对应
        --字段要求显示为“---”。*/
        --if prmcardtype = 2 or prmcardtype = 12
        --then
        --   n_cardtype := 1;
        -- else
        --    n_cardtype := prmcardtype;
        -- end if;
        if prmopertype = 0
        then
            --正常账目汇总
            i_operno := 1;
            n_opermn := prmopfare;
            n_discountmn := prmdiscountfare;
        elsif prmopertype = 1
        then
            --回滚操作
            i_operno := -1;
            n_opermn := -prmopfare;
            n_discountmn := -prmdiscountfare;
        else
            --参数错误
            out_result := -1;
            out_msg :=
                '参数类型错误opertype：' || to_char (prmopertype);
            return;
        end if;

        out_result := -1004;
        out_msg := '查询统计数据';

        --------------------------------------------------------------------------------
        --开始进行日结统计

        if prmresult = 1
        then
            --成功时，入正常账目表
            select count (*)
              into i_count
              from st_payment_day a
             where     a.stid = 0
                   and a.statdate = dt_statdate
                   and a.poscode = prmposcode
                   and a.pasmcardno = prmsamcardno
                   and a.busid = prmbusid
                   and a.buslineid = prmbuslineid
                   and a.empid = prmempid
                   and a.wallettype = prmwallettype
                   and a.cardtype = prmcardtype
                   and a.cardkind = prmcardkind
                   and a.accdate = dt_accdate
                   and a.dptcode = prmdeptcode
                   and a.acccode = prmacccode
                   and a.balancedate = prmaccountdate
                   and a.merchantcode = prmmerchantcode
                   and a.uniontermid = prmuniontermid
                   and a.customerunitcode = prmcustomerunitcode;

            if i_count > 0
            then
                out_result := -1050;
                out_msg := '更新日结统计失败！';

                update st_payment_day a
                   set a.operno = a.operno + i_operno,
                       a.opermn = a.opermn + n_opermn,
                       a.discountmn = a.discountmn + n_discountmn
                 where     a.statdate = dt_statdate
                       and a.accdate = dt_accdate
                       and a.poscode = prmposcode
                       and a.pasmcardno = prmsamcardno
                       and a.busid = prmbusid
                       and a.buslineid = prmbuslineid
                       and a.empid = prmempid
                       and a.wallettype = prmwallettype
                       and a.cardtype = prmcardtype
                       and a.cardkind = prmcardkind
                       and a.dptcode = prmdeptcode
                       and a.acccode = prmacccode
                       and a.balancedate = prmaccountdate
                       and a.merchantcode = prmmerchantcode
                       and a.uniontermid = prmuniontermid
                       and a.customerunitcode = prmcustomerunitcode;

                out_result := 100;
                out_msg := '更新日结统计数据';
            else
                out_result := -1065;
                out_msg := '插入日结统计失败！';

                insert into st_payment_day (statdate,
                                            poscode,
                                            pasmcardno,
                                            busid,
                                            buslineid,
                                            empid,
                                            wallettype,
                                            cardtype,
                                            cardkind,
                                            accdate,
                                            dptcode,
                                            acccode,
                                            operno,
                                            opermn,
                                            discountmn,
                                            merchantcode,
                                            uniontermid,
                                            balancedate,
                                            stid,
                                            customerunitcode)
                     values (dt_statdate,
                             prmposcode,
                             prmsamcardno,
                             prmbusid,
                             prmbuslineid,
                             prmempid,
                             prmwallettype,
                             prmcardtype,
                             prmcardkind,
                             dt_accdate,
                             prmdeptcode,
                             prmacccode,
                             i_operno,
                             n_opermn,
                             n_discountmn,
                             prmmerchantcode,
                             prmuniontermid,
                             prmaccountdate,
                             0,
                             prmcustomerunitcode);
            end if;

            select count (*)
              into i_count
              from st_payment_consum_day a
             where     a.statdate = dt_statdate
                   and a.accdate = dt_accdate
                   and a.busid = prmbusid
                   and a.buslineid = prmbuslineid
                   and a.driverid = prmempid
                   and a.cardtype = prmcardtype
                   and a.dptcode = prmdeptcode
                   and a.acccode = prmacccode
                   and a.balancedate = prmaccountdate
                   and a.merchantcode = prmmerchantcode
                   and a.uniontermid = prmuniontermid
                   and a.customerunitcode = prmcustomerunitcode;

            if i_count > 0
            then
                out_result := -1054;
                out_msg := '更新日结消费统计失败！';

                update st_payment_consum_day a
                   set a.operno = a.operno + i_operno,
                       a.opermn = a.opermn + n_opermn,
                       a.discountmn = a.discountmn + n_discountmn,
                       a.elecdiscountmn = a.elecdiscountmn + n_discountmn
                 where     a.statdate = dt_statdate
                       and a.accdate = dt_accdate
                       and a.busid = prmbusid
                       and a.buslineid = prmbuslineid
                       and a.driverid = prmempid
                       and a.cardtype = prmcardtype
                       and a.dptcode = prmdeptcode
                       and a.acccode = prmacccode
                       and a.balancedate = prmaccountdate
                       and a.merchantcode = prmmerchantcode
                       and a.uniontermid = prmuniontermid
                       and a.customerunitcode = prmcustomerunitcode;
            else
                out_result := -1066;
                out_msg := '插入消费日结统计失败！';

                insert into st_payment_consum_day (statdate,
                                                   busid,
                                                   buslineid,
                                                   driverid,
                                                   cardtype,
                                                   accdate,
                                                   dptcode,
                                                   acccode,
                                                   operno,
                                                   opermn,
                                                   discountmn,
                                                   merchantcode,
                                                   uniontermid,
                                                   balancedate,
                                                   elecdiscountmn,
                                                   customerunitcode)
                     values (dt_statdate,
                             prmbusid,
                             prmbuslineid,
                             prmempid,
                             prmcardtype,
                             dt_accdate,
                             prmdeptcode,
                             prmacccode,
                             i_operno,
                             n_opermn,
                             n_discountmn,
                             prmmerchantcode,
                             prmuniontermid,
                             prmaccountdate,
                             n_discountmn,
                             prmcustomerunitcode);
            end if;

            out_result := 100;
            out_msg := '插入日结统计数据';
        else
            --失败时，如异常表
            select count (*)
              into i_count
              from st_payment_third_unsettle a
             where     a.statdate = dt_statdate
                   and a.poscode = prmposcode
                   and a.pasmcardno = prmsamcardno
                   and a.busid = prmbusid
                   and a.buslineid = prmbuslineid
                   and a.empid = prmempid
                   and a.wallettype = prmwallettype
                   and a.cardtype = prmcardtype
                   and a.cardkind = prmcardkind
                   and a.accdate = dt_accdate
                   and a.dptcode = prmdeptcode
                   and a.acccode = prmacccode
                   and a.balancedate = prmaccountdate
                   and a.merchantcode = prmmerchantcode
                   and a.uniontermid = prmuniontermid
                   and a.customerunitcode = prmcustomerunitcode;

            if i_count > 0
            then
                out_result := -1070;
                out_msg := '更新第三方异常消费记录统计失败！';

                update st_payment_third_unsettle a
                   set a.operno = a.operno + i_operno,
                       a.opermn = a.opermn + n_opermn,
                       a.discountmn = a.discountmn + n_discountmn
                 where     a.statdate = dt_statdate
                       and a.accdate = dt_accdate
                       and a.poscode = prmposcode
                       and a.pasmcardno = prmsamcardno
                       and a.busid = prmbusid
                       and a.buslineid = prmbuslineid
                       and a.empid = prmempid
                       and a.wallettype = prmwallettype
                       and a.cardtype = prmcardtype
                       and a.cardkind = prmcardkind
                       and a.dptcode = prmdeptcode
                       and a.acccode = prmacccode
                       and a.balancedate = prmaccountdate
                       and a.merchantcode = prmmerchantcode
                       and a.uniontermid = prmuniontermid
                       and a.customerunitcode = prmcustomerunitcode;

                out_result := 100;
                out_msg := '更新日结统计数据';
            else
                out_result := -1071;
                out_msg := '插入第三方异常消费记录统计失败！';

                insert into st_payment_third_unsettle (id,
                                                       statdate,
                                                       poscode,
                                                       pasmcardno,
                                                       busid,
                                                       buslineid,
                                                       empid,
                                                       wallettype,
                                                       cardtype,
                                                       cardkind,
                                                       accdate,
                                                       dptcode,
                                                       acccode,
                                                       operno,
                                                       opermn,
                                                       discountmn,
                                                       merchantcode,
                                                       uniontermid,
                                                       balancedate,
                                                       customerunitcode)
                     values (1,
                             dt_statdate,
                             prmposcode,
                             prmsamcardno,
                             prmbusid,
                             prmbuslineid,
                             prmempid,
                             prmwallettype,
                             prmcardtype,
                             prmcardkind,
                             dt_accdate,
                             prmdeptcode,
                             prmacccode,
                             i_operno,
                             n_opermn,
                             n_discountmn,
                             prmmerchantcode,
                             prmuniontermid,
                             prmaccountdate,
                             prmcustomerunitcode);

                out_result := 100;
                out_msg := '插入第三方异常消费记录统计成功';
            end if;
        end if;
    exception
        when others
        then
            out_result := out_result;
            out_msg := out_msg || '异常_+_' || sqlerrm;
    end;
end;
/
create or replace package        pkg_st_payment_day
is
   type refcursortype is ref cursor;           --游标类型定义，用于返回数据集

/*
----------------------------------------------------------------------------
--copyright (c) 1992-2007 郑州新开普电子股份有限公司 版权所有。
--
-- 存储过程名称：pkg_rec_statistics
-- 功能描述：冻结金额处理
---------------------------------------------------------------------------
*/
   procedure proc_empid_information (
      starttime             in       varchar2,                     --开始时期
      endtime               in       varchar2,                     --结束日期
      eid                   in       number,                   --操作职员编号
      prmcustomerunitcode   in       varchar2,
      out_cursor            out      refcursortype,
      out_result            out      number,   --返回值 100销户成功，其他失败
      out_msg               out      varchar2                      --返回信息
   );

   procedure proc_dptcode_information (
      starttime             in       varchar2,                     --开始时期
      endtime               in       varchar2,                     --结束日期
      dptcode               in       varchar2,                     --部门编号
      prmcustomerunitcode   in       varchar2,
      out_cursor            out      refcursortype,
      out_result            out      number,   --返回值 100销户成功，其他失败
      out_msg               out      varchar2                      --返回信息
   );
end;


 
 
 
 /
create or replace package body        pkg_st_payment_day
is
/*
----------------------------------------------------------------------------
--copyright (c) 1992-2007 郑州新开普电子股份有限公司 版权所有。
--
-- 存储过程名称：pkg_rec_statistics
-- 功能描述：冻结金额处理
---------------------------------------------------------------------------
*/
   procedure proc_empid_information (
      starttime             in       varchar2,                     --开始时期
      endtime               in       varchar2,                     --结束日期
      eid                   in       number,                   --操作职员编号
      prmcustomerunitcode   in       varchar2,
      out_cursor            out      refcursortype,
      out_result            out      number,   --返回值 100销户成功，其他失败
      out_msg               out      varchar2                      --返回信息
   )
   as
      /*
       --------------------------------------------------------------------------
       --存储过程：proc_empid_information
       --作　　者：马山
       --时　　间：2012-10-30
       --说　　明：操作员统计信息
       --------------------------------------------------------------------------
       */
      custom_exception         exception;                        --自定义异常
      hairpincount             integer;                        --用户发卡数量
      hairpinfare              number;                         --用户发卡费用
      empcardcount             integer;                      --功能卡发卡数量
      supplementarycardcount   integer;                            --补卡数量
      supplementarycardfare    number;                             --补卡费用
      supplementaryempcard     number;                       --功能卡补卡数量
      chargecount              integer;                            --充值次数
      chargefare               number;                           --充值总费用
      losscardcount            integer;                            --挂失卡数
      solutioncount            integer;                              --解挂数
      checkyear                integer;                          --年检卡数量
      cancellation             integer;                          --注销卡数量
      crozencount              integer;                        --领取冻结卡数
      crozenfare               integer;                        --领取冻结金额
      electropfarecount        number (10, 2);                     --钱包次数
      monopfarecount           number (10, 2);                     --月票次数
      viceoddfarecount         number (10, 2);                     --月次次数
      electropfare             number (10, 2);                     --钱包金额
      monopfare                number (10, 2);                     --月票金额
      viceoddfare              number (10, 2);                     --月次金额
      startdate                date;                               --开始时期
      enddate                  date;                               --结束日期
      total                    number;                               --总费用
   begin
      startdate := to_date (starttime, 'yyyy-mm-dd hh24:mi:ss');
      enddate := to_date (endtime, 'yyyy-mm-dd hh24:mi:ss');

         /*
            -------检查是否正在数据结算-----------
            proc_validateisbalance (out_result, out_msg);

            if (out_result <> 0)                              --0当前系统未进行结算
            then
               out_result := -1001;
               out_msg := '判断账目结算状态异常，' || out_msg;
               raise custom_exception;
            end if;
      */
      open out_cursor for
         select b.*
           from (select *
                   from v_st_payment_all
                 union
                 select a.id, a.statdt, a.poscode, a.psamcardno, 0 as busid,
                        0 as buslineid, a.empid, 0 as wallettype, a.cardtype,
                        a.cardkind, a.accdt as accdate, a.deptcode as dptcode,
                        a.acccode, a.operno, a.opermn, 0 as discountmn,
                        a.statdt as balancedate, customerunitcode
                   from st_emp_trade a) b
          where empid = eid
            and customerunitcode = prmcustomerunitcode
            and statdate between startdate and enddate;

      out_result := 100;
      out_msg := '成功！';
   exception
      when custom_exception
      then
         open out_cursor for
            select 0 as payments
              from dual;

         if out_result > 0
         then
            out_result := out_result * -1;
         else
            out_result := out_result;
         end if;

         out_msg := '查询错误，详细信息：' || out_msg;
      when others
      then
         open out_cursor for
            select 0 as payments
              from dual;

         if out_result > 0
         then
            out_result := out_result * -1;
         else
            out_result := out_result;
         end if;

         out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
   end;

   procedure proc_dptcode_information (
      starttime             in       varchar2,                      --开始时期
      endtime               in       varchar2,                      --结束日期
      dptcode               in       varchar2,                      --部门编号
      prmcustomerunitcode   in       varchar2,
      out_cursor            out      refcursortype,
      out_result            out      number,    --返回值 100销户成功，其他失败
      out_msg               out      varchar2                       --返回信息
   )
   as
      /*
       --------------------------------------------------------------------------
       --存储过程：proc_dptcode_information
       --作　　者：马山
       --时　　间：2012-10-30
       --说　　明：操作员统计信息
       --------------------------------------------------------------------------
       */
      custom_exception         exception;                        --自定义异常
      hairpincount             integer;                        --用户发卡数量
      hairpinfare              number;                         --用户发卡费用
      empcardcount             integer;                      --功能卡发卡数量
      supplementarycardcount   integer;                            --补卡数量
      supplementarycardfare    number;                             --补卡费用
      supplementaryempcard     number;                       --功能卡补卡数量
      chargecount              integer;                            --充值次数
      chargefare               number;                           --充值总费用
      losscardcount            integer;                            --挂失卡数
      solutioncount            integer;                              --解挂数
      checkyear                integer;                          --年检卡数量
      cancellation             integer;                          --注销卡数量
      crozencount              integer;                        --领取冻结卡数
      crozenfare               integer;                        --领取冻结金额
      electropfarecount        number;                             --钱包次数
      monopfarecount           number;                             --月票次数
      viceoddfarecount         number;                             --月次次数
      electropfare             number;                             --钱包金额
      monopfare                number;                             --月票金额
      viceoddfare              number;                             --月次金额
      vstartdate               date;                               --开始时期
      venddate                 date;                               --结束日期
      total                    number;                               --总费用
      v_dptcode                varchar2 (30);
   begin
      vstartdate := to_date (starttime, 'yyyy-mm-dd hh24:mi:ss');
      venddate := to_date (endtime, 'yyyy-mm-dd hh24:mi:ss');
      v_dptcode := dptcode;

            /*
            -------检查是否正在数据结算-----------
            proc_validateisbalance (out_result, out_msg);

            if (out_result <> 0)                              --0当前系统未进行结算
            then
               out_result := -1001;
               out_msg := '判断账目结算状态异常，' || out_msg;
               raise custom_exception;
            end if;
      */
      open out_cursor for
         select b.*
           from (select *
                   from v_st_payment_all
                 union
                 select a.id, a.statdt, a.poscode, a.psamcardno, 0 as busid,
                        0 as buslineid, a.empid, 0 as wallettype, a.cardtype,
                        a.cardkind, a.accdt as accdate, a.deptcode, a.acccode,
                        a.operno, a.opermn, 0 as discountmn,
                        a.statdt as balancedate, customerunitcode
                   from st_emp_trade a) b
          where customerunitcode = prmcustomerunitcode
            and deptcode = v_dptcode
            and statdate between vstartdate and venddate;

      out_result := 100;
      out_msg := '成功！';
   exception
      when custom_exception
      then
         rollback;

         open out_cursor for
            select 0 as payments
              from dual;

         if out_result > 0
         then
            out_result := out_result * -1;
         else
            out_result := out_result;
         end if;

         out_msg := '查询错误，详细信息：' || out_msg;
      when others
      then
         rollback;

         open out_cursor for
            select 0 as payments
              from dual;

         if out_result > 0
         then
            out_result := out_result * -1;
         else
            out_result := out_result;
         end if;

         out_msg := out_msg || '异常，具体原因为：' || sqlerrm;
   end;
end;

/
create or replace package pkg_st_sysbalance
is
    /*
    ----------------------------------------------------------------------------
    --copyright (c) 1992-2007 郑州新开普电子股份有限公司 版权所有。
    --
    -- 存储过程名称：pkg_st_sysbalance
    -- 功能描述：1、系统平衡账统计（日结过程，包含分区平衡）
    ---------------------------------------------------------------------------
    */
    procedure stat_sys_balance (prmdate           in     varchar2, --平衡日期 格式yyyy-mm-dd
                                prmempid          in     integer, --职员id
                                prmiplist         in     varchar2, --ip列表 格式 127.0.0.1|127.0.0.2
                                prmlocalver       in     varchar2, --本地程序版本号
                                prmismanual       in     integer, --是否手工结算0自动结算 1手工结算
                                prmcustunitcode   in     varchar2, --客户代码
                                out_msg              out varchar2,
                                out_result           out number);

    procedure stat_area_balance (prmdate                  varchar2,
                                 prmcustunitcode   in     varchar2,
                                 out_msg              out varchar2,
                                 out_result           out number);

    procedure stat_payment_balance (prmdate           in     varchar,
                                    prmcustunitcode   in     varchar2,
                                    out_msg              out varchar2,
                                    out_result           out number);

    procedure stat_verify_sysdate (prmdate           in     varchar2, --平衡日期 格式yyyy-mm-dd
                                   prmcustunitcode   in     varchar2,
                                   out_msg              out varchar2,
                                   out_result           out number);

    --集成版公交日结过程
    procedure stat_payment_account (prmdate           in     varchar,
                                    prmcustunitcode   in     varchar2,
                                    out_msg              out varchar2,
                                    out_result           out number);

    --商户结算费率统计
    procedure stat_account_rate (prmdate               varchar2,
                                 prmempid              number,
                                 prmcustunitcode       varchar2, --客户代码
                                 out_msg           out varchar2,
                                 out_result        out number);
end;
/
create or replace package body pkg_st_sysbalance
is
    /*
    ----------------------------------------------------------------------------
    --copyright (c) 1992-2007 郑州新开普电子股份有限公司 版权所有。
    --
    -- 存储过程名称：pkg_st_sysbalance
    -- 功能描述：1、系统平衡账统计（日结过程，包含分区平衡）
    ---------------------------------------------------------------------------
    */

    ----------------------------------------
    procedure stat_sys_balance (prmdate           in     varchar2, --平衡日期 格式yyyy-mm-dd
                                prmempid          in     integer, --职员id
                                prmiplist         in     varchar2, --ip列表 格式 127.0.0.1|127.0.0.2
                                prmlocalver       in     varchar2, --本地程序版本号
                                prmismanual       in     integer, --是否手工结算0自动结算 1手工结算
                                prmcustunitcode   in     varchar2, --客户代码
                                out_msg              out varchar2, --返回信息
                                out_result           out number --返回结果 100 成功 其他失败
                                                               )
    as
        /*
        -------------------------------------------------------------------------------
        --存储过程：stat_sys_balance
        --作　　者：朱鹏飞
        --时　　间：2009-05-31
        --说　　明：系统平衡帐统计
        --输入参数：见过程头参数注解
        --------------------------------------------------------------------------
        */
        t_balancedate      date; --账目日期
        t_begintime        date; --开始执行时间
        --
        --报警参数
        t_alertbase        number (10, 2);
        i_isalert          integer; --是否报警 0：不报警 1 ：报警
        i_typelevel        integer; --报警级别
        n_validity         number; --此类报警对应的级别的失败时长
        v_alerttitle       varchar2 (30); --报警信息标题
        v_alertmsg         varchar2 (500); --报警信息内容
        n_insidereturn     number; --内部过程返回值，不需要输出时使用
        v_insidemessgae    varchar (1000); --内部过得返回信息，不需要输出时使用
        --
        custom_exception   exception; --自定义异常
        v_isindependent    varchar (1); --系统部署方式
    begin
        out_msg := '初始化变量';
        out_result := -1001;
        -----------------------------------------------
        t_alertbase := 0;
        t_begintime := sysdate;
        --先对t_balancedate设初值，以防止传入日期格式错误造成转换异常无法记录日志
        t_balancedate := to_date ('1800-01-01', 'yyyy-mm-dd');
        t_balancedate := to_date (prmdate, 'yyyy-mm-dd');
        ------------------------------------------------
        --
        v_isindependent := '0'; --设置初始值 0：独立部署  1：集成部署
        out_result := -1001;
        out_msg := '校验程序版本及ip信息';

        --自动日结并且职员为0，说明是自动统计调用自动日结
        if (prmismanual = 0 and prmempid = 0)
        then
            pkg_base_app.app_verify_apprequest (1, --自动统计程序编码
                                                prmiplist,
                                                prmlocalver,
                                                '08600000000',
                                                out_msg,
                                                out_result);
        else
            out_msg := '管理中心手工日结不验证版本信息';
            out_result := 100;
        end if;

        if (out_result <> 100) --100验证通过
        then
            out_msg := '校验程序版本及ip信息，' || out_msg;
            out_result := out_result;
            raise custom_exception;
        end if;

        out_msg := '判断法人是否合法或者正在日结';
        out_result := -1002;
        proc_validateisbalancebycode (prmcustunitcode, out_result, out_msg);

        --日结状态为0：未日结 2：准备日结都可以进行日结，其他状态不允许日结
        --out_result=0：数据库正常，没有日结
        --out_result=-1800002 数据库准备结算
        --以上两种状态只允许进行日结，其他状态不允许日结
        if (out_result <> 0 and out_result <> -1800002)
        then
            out_msg := out_msg;
            out_result := out_result;
            raise custom_exception;
        end if;

        out_result := -1001;
        out_msg := '校验系统时间';
        stat_verify_sysdate (prmdate,
                             prmcustunitcode,
                             out_msg,
                             out_result);

        if (out_result <> 100)
        then
            out_msg := '判断校验系统时间异常，' || out_msg;
            out_result := out_result;
            raise custom_exception;
        end if;

        --增加分区的检查
        begin
            pkg_partition.initsysbyauto (out_result, out_msg);

            if (out_result <> 100)
            then
                out_msg := '自动扩展分区失败：' || out_msg;
                out_result := out_result;

                -----记录异常日志
                insert into st_account_log (accountdate,
                                            operatorid,
                                            begintime,
                                            endtime,
                                            accounttype,
                                            results,
                                            description,
                                            ismanual,
                                            customerunitcode)
                     values (t_balancedate,
                             prmempid,
                             t_begintime,
                             sysdate,
                             9,
                             out_result,
                             out_msg,
                             prmismanual,
                             '00000000000');

                commit;
            end if;
        end;

        ----- 三、将日结标志置为正在日结-----
        out_msg := '三、将日结标志置为正在日结';
        out_result := -1012;

        update base_legal_person
           set isbalance = 1
         where customerunitcode = prmcustunitcode;

        commit;
        out_msg := '锁定统计表';
        out_result := -1001;
        --锁定统计表，不允许其他用户修改，保证数据一致，统计结束解锁
        lock table st_payment in exclusive mode;
        lock table st_payment_day in exclusive mode;
        lock table st_dept_payment_day in exclusive mode;

        --形成结算数据
        out_msg := '形成结算数据';
        out_result := -1014;

        stat_payment_balance (prmdate,
                              prmcustunitcode,
                              out_msg,
                              out_result);

        if (out_result <> 99)
        then
            out_msg := '汇总结算数据错误' || out_msg;
            out_result := out_result;
            raise custom_exception;
        end if;

        ----- 九、插入 账目统计日结表
        out_msg := '九、插入账目统计日结表';
        out_result := -1018;

        insert into st_payment_day (stid,
                                    statdate,
                                    poscode,
                                    pasmcardno,
                                    busid,
                                    buslineid,
                                    empid,
                                    wallettype,
                                    cardtype,
                                    cardkind,
                                    accdate,
                                    dptcode,
                                    acccode,
                                    operno,
                                    opermn,
                                    discountmn,
                                    balancedate,
                                    customerunitcode,
                                    flag,
                                    accountdate, --2017-12-26 日结表新增字段
                                    settlementdate,
                                    filecreatedate,
                                    maincardtype) --2017-12-26 新增主卡类型
            select a.id,
                   a.statdate,
                   a.poscode,
                   a.pasmcardno,
                   a.busid,
                   buslineid,
                   a.empid,
                   a.wallettype,
                   a.cardtype,
                   a.cardkind,
                   a.accdate,
                   a.dptcode,
                   a.acccode,
                   a.operno,
                   a.opermn,
                   a.discountmn,
                   t_balancedate,
                   prmcustunitcode,
                   0,
                   accountdate, --2017-12-26 日结表新增字段
                   settlementdate,
                   filecreatedate,
                   maincardtype --2017-12-26 新增主卡类型
              from st_payment a
             where a.customerunitcode = prmcustunitcode;

        out_msg := '十、插入账目统计日结表';
        out_result := -1019;

        insert into st_dept_payment_day (id,
                                         statdate,
                                         empid,
                                         accdate,
                                         dptcode,
                                         acccode,
                                         operno,
                                         opermn,
                                         discountmn,
                                         ismon,
                                         balancedate,
                                         customerunitcode,
                                         flag,
                                         accountdate, --2017-12-26 日结表新增字段
                                         settlementdate,
                                         filecreatedate,
                                         maincardtype) --2017-12-26 新增主卡类型
              select 0,
                     a.statdate,
                     a.empid,
                     a.accdate,
                     a.dptcode,
                     a.acccode,
                     sum (a.operno),
                     sum (a.opermn),
                     sum (a.discountmn),
                     0,
                     t_balancedate,
                     prmcustunitcode,
                     0,
                     accountdate, --2017-12-26 日结表新增字段
                     settlementdate,
                     filecreatedate,
                     maincardtype --2017-12-26 新增主卡类型
                from st_payment a
               where a.customerunitcode = prmcustunitcode
            group by a.statdate,
                     a.empid,
                     a.accdate,
                     a.dptcode,
                     a.acccode,
                     accountdate, --2017-12-26 日结表新增字段
                     settlementdate,
                     filecreatedate,
                     maincardtype; --2017-12-26 新增主卡类型

        ----- 十一、删除 账目统计日表
        delete from st_payment
              where customerunitcode = prmcustunitcode;

        ----- 十四、重置数据日结标志

        --平台手工日结的时候在次数更新标记，自动统计日结在统计服务中判断所有的客户日结完成更新标记
        --已经改为在客户法人表中进行分别标志，更新该客户法人的日结标志,base_syspara中的标志在过程外面更新
        update base_legal_person
           set isbalance = 0
         where customerunitcode = prmcustunitcode;

        ----日结成功，取消所有日结异常报警
        update alert_message a
           set a.state = -1, --更新为自动失效
                            a.canceldate = sysdate
         where     a.state = 1 --状态为有效
               and a.typeid in (10, 14) --日结异常类和系统时间异常
               and a.customerunitcode = prmcustunitcode;

        --更新所有已过期的信息
        update alert_message a
           set a.state = 0, --更新为自动过期
                           a.canceldate = sysdate
         where     a.state = 1 --状态为有效
               and invaliddate <= sysdate
               and a.customerunitcode = prmcustunitcode;

        ----- 十五、记录成功日志
        insert into st_account_log (accountdate,
                                    operatorid,
                                    begintime,
                                    endtime,
                                    accounttype,
                                    results,
                                    description,
                                    ismanual,
                                    customerunitcode)
             values (t_balancedate,
                     prmempid,
                     t_begintime,
                     sysdate,
                     9,
                     100,
                     '系统账目日结成功！',
                     prmismanual,
                     prmcustunitcode);

        ----- 十六、完成提交
        out_msg := '系统账目(平衡账目)日结成功！';
        out_result := 100;
        commit;
    exception
        when custom_exception --自定义异常处理
        then
            rollback;

            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;

            -----重置数据日结标志
            update base_legal_person
               set isbalance = 0
             where customerunitcode = prmcustunitcode;

            out_msg := out_msg;
            out_result := out_result;

            -----记录异常日志
            insert into st_account_log (accountdate,
                                        operatorid,
                                        begintime,
                                        endtime,
                                        accounttype,
                                        results,
                                        description,
                                        ismanual,
                                        customerunitcode)
                 values (t_balancedate,
                         prmempid,
                         t_begintime,
                         sysdate,
                         9,
                         out_result,
                         out_msg,
                         prmismanual,
                         prmcustunitcode);

            commit;
        when others
        then
            rollback;

            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;

            out_result := out_result || '异常，具体信息为：' || sqlerrm;

            -----重置数据日结标志
            update base_legal_person
               set isbalance = 0
             where customerunitcode = prmcustunitcode;

            -----记录异常日志
            insert into st_account_log (accountdate,
                                        operatorid,
                                        begintime,
                                        endtime,
                                        accounttype,
                                        results,
                                        description,
                                        ismanual,
                                        customerunitcode)
                 values (t_balancedate,
                         prmempid,
                         t_begintime,
                         sysdate,
                         9,
                         out_result,
                         out_msg,
                         prmismanual,
                         prmcustunitcode);

            v_alerttitle := '系统日结失败';
            v_alertmsg :=
                   '【js-sys-0001】：系统日结失败！ 日报日期['
                || prmdate
                || ']，日结执行时间['
                || to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss')
                || ']，异常消息：['
                || out_result
                || '_+_'
                || out_msg
                || ']。';
            --日结失败，产生报警
            pkg_alert.alert_createalert (v_alerttitle,
                                         v_alertmsg,
                                         10,
                                         prmempid,
                                         null,
                                         null,
                                         0, --不更新同类消费为取消
                                         1, --产生报警日志
                                         prmcustunitcode,
                                         v_insidemessgae,
                                         n_insidereturn);
            commit;
    end;

    procedure stat_area_balance (prmdate                  varchar2,
                                 prmcustunitcode   in     varchar2, --客户代码
                                 out_msg              out varchar2,
                                 out_result           out number)
    as
        /*
     --------------------------------------------------------------------------
     --存储过程：stat_area_balance
     --作　　者：朱鹏飞
     --时　　间：2009-05-31
     --说　　明：系统平衡帐统计
     --输入参数：见过程头参数注解
     --输出参数：见过程头参数注解
     --------------------------------------------------------------------------
      --修改标示：朱鹏飞
      --修改说明：投币收入（本期，前期，累计）汇总增加赋初始值0。00
      -------------------------------------------------------------------------
       --修改标示：周晓娜 20110722
      --修改说明：增加次卡钱包的统计
      -------------------------------------------------------------------------
      --修改标示：周晓娜 20120526
      --修改说明：处理次卡钱包入账
      -------------------------------------------------------------------------
      --修改标示：周晓娜 2012-11-08
      --修改说明：根据2.0账目改动需求业务处理：增加客户代码和去掉分区处理
      --------------------------------------------------------------------------
     */
        i_count                    integer;
        dt_maxbalancedate          date;
        dt_balancedate             date; --账目日期
        dt_thisyear                date; --年份
        v_sql                      varchar2 (1000); --sql语句
        --冻结金额临时变量,用于计算月票冻结金额
        n_fzfare                   number (10, 2);
        --冻结金额临时变量,用于计算次卡冻结金额
        n_vicefzfare               number (10, 2);
        --当前余额＝oddfarepre+本期收入－本期支出
        n_oddfare                  number;
        --卡余额=电子钱包卡余额+月票钱包卡余额+未领冻结金额+次卡钱包卡余额
        n_cardoddfare              number;
        --系统余额=电子钱包系统余额+月票钱包系统余额+次卡钱包系统余额
        n_accoddfare               number;
        --本期收入
        n_income                   number;
        --本期支出
        n_payout                   number;
        --累计收入=至结算日本期收入的合计
        n_totalincome              number;
        --累计支出=至结算日本期支出的合计
        n_totalpayout              number;
        --本期结余=本期收入-本期支出
        n_bussmn                   number;
        --电子钱包余额
        n_elecoddfare              number;
        --月票钱包余额
        n_monoddfare               number;
        --次卡钱包余额
        n_viceoddfare              number; --20110722新增
        --电子钱包未领冻结金额
        n_elecfreezemn             number;
        --月票钱包未领冻结金额
        n_monfreezemn              number;
        --次卡钱包未领冻结金额
        n_vicefreezemn             number; --20110722新增
        --电子钱包系统余额
        n_elecaccoddfare           number;
        --月票钱包系统余额
        n_monaccoddfare            number;
        --次卡钱包系统余额
        n_viceaccoddfare           number; --20110722新增
        --本期与卡无关金额（成本费＋卡套费+管理费等）
        n_nocardmn                 number;
        --与卡无关金额累计＝上个结算日与卡无关金额累计+本期与卡无关金额
        n_totalnocardmn            number;
        --投币收入
        n_paperincome              number;
        --累计前期投币收入
        n_totalpaperincomepre      number;
        --累计投币收入
        n_totalpaperincome         number;
        --当前打折金额合计
        n_discountmn               number;
        --前期打折金额合计
        n_totaldiscountmnpre       number;
        --累计打折金额合计
        n_totaldiscountmn          number;
        --前期卡余额＝上个结算日oddfare（卡余额）
        n_oddfarepre               number;
        --前期与卡无关金额累计＝上个结算日与卡无关金额累计
        n_totalnocardmnpre         number;
        --前期累计收入=上个结算日的累计收入
        n_totalincomepre           number;
        --前期累计支出=上个结算日的累计支出
        n_totalpayoutpre           number;
        --注销表中的电子钱包系统余额累计
        n_writeoffelecaccoddfare   number;
        --注销表中的月票钱包系统余额累计
        n_writeoffmonaccoddfare    number;
        --注销表中次卡钱包系统余额累计
        n_writeoffviceaccoddfare   number; --20110722新增
    begin
        /*
        --------------------------------------------------------------------------
        --存储过程：statsysbalance
        --作　　者：朱鹏飞
        --时　　间：2009-05-31
        --说　　明：系统平衡帐统计
        --输入参数：
           prmdate = 账目日期；
        --输出参数：
        --返回值定义：
        --------------------------------------------------------------------------
        */
        --账目日期
        dt_balancedate := to_date (prmdate, 'yyyy-mm-dd');
        --统计日期年的第一天
        dt_thisyear := trunc (dt_balancedate, 'yyyy');
        --
        out_msg := '系统分区平衡账目统计失败！';
        out_result := -1001;

        -------------------------------------------------------------------------------
        --统计时间校验
        select count (*)
          into i_count
          from st_balance_area
         where customerunitcode = prmcustunitcode;

        if i_count > 0
        then
            select max (balancedate)
              into dt_maxbalancedate
              from st_balance_area
             where customerunitcode = prmcustunitcode;
        end if;

        ---------------------------------------------------------------------------
        out_msg := '锁定统计表';
        out_result := -1001;
        --锁定统计表，不允许其他用户修改，保证数据一致，统计结束解锁
        lock table st_balance_area in exclusive mode;
        lock table st_balance_area_total in exclusive mode;
        --
        out_msg := '形成大类合计数据';
        out_result := -1001;

        --形成统计帐目明细
        insert into st_balance_area (balancedate,
                                     accgroupid,
                                     operno,
                                     opermn,
                                     discountmn,
                                     createdate,
                                     customerunitcode)
              select dt_balancedate,
                     b.groupid,
                     nvl (sum (a.operno), 0) as operno,
                     nvl (sum (a.opermn * b.dir), 0) as opermn,
                     nvl (sum (a.discountmn), 0) as discountmn,
                     sysdate,
                     a.customerunitcode
                from st_payment a join base_acc_type b on a.acccode = b.acccode
               where a.customerunitcode = prmcustunitcode
            group by b.groupid, a.customerunitcode;

        ---------------------------------------------------------------------------
        -----变量初始化-----
        --当前余额＝oddfarepre+本期收入－本期支出
        n_oddfare := 0.00;
        --卡余额=电子钱包卡余额+月票钱包卡余额+未领冻结金额 + 次卡钱包卡余额
        n_cardoddfare := 0.00;
        --系统余额=电子钱包系统余额+月票钱包系统余额 + 次卡钱包系统余额
        n_accoddfare := 0.00;
        --本期收入
        n_income := 0.00;
        --本期支出
        n_payout := 0.00;
        --累计收入=至结算日本期收入的合计
        n_totalincome := 0.00;
        --累计支出=至结算日本期支出的合计
        n_totalpayout := 0.00;
        --本期结余=本期收入-本期支出
        n_bussmn := 0.00;
        --电子钱包余额
        n_elecoddfare := 0.00;
        --月票钱包余额
        n_monoddfare := 0.00;
        --次卡钱包余额
        n_viceoddfare := 0.00;
        --电子钱包未领冻结金额
        n_elecfreezemn := 0.00;
        --月票钱包未领冻结金额
        n_monfreezemn := 0.00;
        --次卡钱包未领冻结金额
        n_vicefreezemn := 0.00;
        --电子钱包系统余额
        n_elecaccoddfare := 0.00;
        --月票钱包系统余额
        n_monaccoddfare := 0.00;
        --次卡钱包系统余额
        n_viceaccoddfare := 0.00;
        --本期与卡无关金额（成本费＋卡套费+管理费等）
        n_nocardmn := 0.00;
        --与卡无关金额累计＝上个结算日与卡无关金额累计+本期与卡无关金额
        n_totalnocardmn := 0.00;
        --投币收入
        n_paperincome := 0.00;
        --累计前期投币收入
        n_totalpaperincomepre := 0.00;
        --累计投币收入
        n_totalpaperincome := 0.00;
        --本期打折金额
        n_discountmn := 0.00;
        --累计打折金额
        n_totaldiscountmnpre := 0.00;
        --前期卡余额＝上个结算日oddfare（卡余额）
        n_oddfarepre := 0.00;
        --前期与卡无关金额累计＝上个结算日与卡无关金额累计
        n_totalnocardmnpre := 0.00;
        --前期累计收入=上个结算日的累计收入
        n_totalincomepre := 0.00;
        --前期累计支出=上个结算日的累计支出
        n_totalpayoutpre := 0.00;
        --注销表中的电子钱包系统余额累计
        n_writeoffelecaccoddfare := 0.00;
        --注销表中的月票钱包系统余额累计
        n_writeoffmonaccoddfare := 0.00;
        --注销表中次卡钱包系统余额累计
        n_writeoffviceaccoddfare := 0.00;

        ----判断前期日结是否已经存在
        select count (*)
          into i_count
          from st_balance_area_total t1
         where     t1.balancedate = dt_maxbalancedate
               and t1.customerunitcode = prmcustunitcode;

        if i_count > 0
        then
            -----------------计算前期金额---------------------
            --前期卡余额
            select nvl (sum (a.oddfare), 0),
                   --前期与卡无关费用
                   nvl (sum (a.totalnocardmn), 0),
                   --前期累计收入
                   nvl (sum (a.totalincome), 0),
                   --前期累计支出
                   nvl (sum (a.totalpayout), 0),
                   --前期累计投币收入
                   nvl (sum (a.totalpaperincome), 0),
                   --前期累计打折收入
                   nvl (sum (a.totaldiscountmn), 0)
              into n_oddfarepre,
                   n_totalnocardmnpre,
                   n_totalincomepre,
                   n_totalpayoutpre,
                   n_totalpaperincomepre,
                   n_totaldiscountmnpre
              from st_balance_area_total a
             where     balancedate = dt_maxbalancedate
                   and a.customerunitcode = prmcustunitcode;
        end if;

        -------------计算本期产生金额------------------------
        --计算本期手续费卡成本(7：成本费用类（成本费、卡套费、管理费）)
        select nvl (sum (t1.opermn), 0)
          into n_nocardmn
          from st_balance_area t1
         where     t1.balancedate = dt_balancedate
               and t1.accgroupid = 7
               and t1.customerunitcode = prmcustunitcode;

        --计算纸币收入（4：投币收入大类）
        select nvl (sum (t1.opermn), 0)
          into n_paperincome
          from st_balance_area t1
         where     t1.balancedate = dt_balancedate
               and t1.accgroupid = 4
               and t1.customerunitcode = prmcustunitcode;

        --计算本期收入(120)(与卡有关)
        select nvl (sum (a.opermn * b.dir), 0)
          into n_income
          from     st_balance_area a
               join
                   base_acc_group b
               on     a.accgroupid = b.id
                  and a.balancedate = dt_balancedate
                  and b.location = 1 --方向为收入
                  and b.ifcard = 1 --与卡有关
                  and a.customerunitcode = prmcustunitcode;

        --计算本期支出(121)(与卡有关) 注：计算出来为正数
        select nvl (sum (a.opermn * b.dir * b.location), 0)
          into n_payout
          from     st_balance_area a
               join
                   base_acc_group b
               on     a.accgroupid = b.id
                  and a.balancedate = dt_balancedate
                  and b.location = -1 --方向为支出
                  and b.ifcard = 1 --与卡有关
                  and a.customerunitcode = prmcustunitcode;

        --计算本期打折收入
        select nvl (sum (a.discountmn), 0)
          into n_discountmn
          from st_balance_area a
         where     a.balancedate = dt_balancedate
               and a.customerunitcode = prmcustunitcode;

        --累计收入(130)=本期收入+前期累计收入
        n_totalincome := n_income + n_totalincomepre;
        --累计支出(131)=本期支出+前期累计支出
        n_totalpayout := n_payout + n_totalpayoutpre;
        --统计系统余额（101）（期末数）=前期余额+本期收入－本期支出
        n_oddfare := n_oddfarepre + n_income - n_payout;
        --手续费卡成本累计（280）=本期手续费卡成本+前期手续费手续卡成本累计
        n_totalnocardmn := n_nocardmn + n_totalnocardmnpre;
        --累计投币收入=本期投币收入 + 前期累计
        n_totalpaperincome := n_paperincome + n_totalpaperincomepre;
        --累计打折金额=本期打折金额 + 前期累计
        n_totaldiscountmn := n_discountmn + n_totaldiscountmnpre;

        -----计算账本表中金额
        --电子钱包卡余额（140）
        --电子钱包系统余额
        --月票系统余额

        --20110722新增
        --次卡钱包卡余额
        --次卡钱包系统余额
        --20130107 修改月票钱包卡余额的计算
        select nvl (sum (a.electroddfare), 0),
               nvl (sum (a.electroddfareacc), 0),
               nvl (sum (a.summonthoddfareacc), 0),
               nvl (sum (a.numberoddfare), 0),
               nvl (sum (a.numberoddfareacc), 0),
               nvl (sum (a.monoddfare), 0)
          into n_elecoddfare,
               n_elecaccoddfare,
               n_monaccoddfare,
               n_viceoddfare,
               n_viceaccoddfare,
               n_monoddfare
          from base_customers a
         where a.customerunitcode = prmcustunitcode;

        --电子钱包未转冻结金额（142）
        select nvl (sum (a.freezefare), 0)
          into n_elecfreezemn
          from rec_freezefare_acc a
         where a.freezefareflag <> 1 and a.customerunitcode = prmcustunitcode;

        --月票钱包未转冻结金额（144）
        i_count := 1;
        n_monfreezemn := 0.00;
        n_fzfare := 0.00;

        --计算月票冻结金额，不处理标志异常
        select nvl (sum (a.monthfreezefare), 0)
          into n_monfreezemn
          from rec_freezefare_acc a
         where     a.monthfreezefareflag <> 1
               and a.customerunitcode = prmcustunitcode;

        --次卡钱包未转冻结金额（144）
        i_count := 1;
        n_vicefreezemn := 0.00;
        n_vicefzfare := 0.00;

        select nvl (sum (a.vicefreezefare), 0)
          into n_vicefreezemn
          from rec_freezefare_acc a
         where     a.vicefreezefareflag <> 1
               and a.customerunitcode = prmcustunitcode;

        --注销表中的电子钱包卡余额累计(146),月票钱包余额累计(147)
        --20110722新增 注销表中次卡钱包系统余额
        select nvl (sum (a.electroddfareacc), 0),
               nvl (sum (a.summonthoddfareacc), 0),
               nvl (sum (a.numberoddfareacc), 0)
          into n_writeoffelecaccoddfare,
               n_writeoffmonaccoddfare,
               n_writeoffviceaccoddfare
          from base_writeoff a
         where a.customerunitcode = prmcustunitcode;

        --当前卡余额(102) = 电子钱包卡余额(140)
        -- + 月票钱包卡余额(141)
        -- + 电子钱包未转冻结金额（142）
        -- + 月票钱包未转冻结金额（144）

        --20110722 新增
        --增加次卡钱包卡余额 + 次卡钱包未转冻结金额

        --当前卡余额计算也必须在分区相等时才有意义
        n_cardoddfare :=
              n_elecoddfare
            + n_monoddfare
            + n_elecfreezemn
            + n_monfreezemn
            + n_viceoddfare
            + n_vicefreezemn;
        --系统余额(103) = 账本表电子钱包系统余额（150）
        --  + 账本表月票系统余额（151）
        --  + 注销表的电子钱包余额累计(146)
        --  + 注销表的月票余额累计(147)

        --20110722 新增
        --增加次卡钱包系统余额 + 注销表的次卡钱包余额累计
        n_accoddfare :=
              n_elecaccoddfare
            + n_monaccoddfare
            + n_writeoffelecaccoddfare
            + n_writeoffmonaccoddfare
            + n_viceaccoddfare
            + n_writeoffviceaccoddfare;

        --zxn 20120526新增次卡钱包的信息入账viceoddfare, viceaccoddfare,  logoutviceaccoddfare, vicefreezemn
        insert into st_balance_area_total (balancedate,
                                           oddfarepre,
                                           oddfare,
                                           cardoddfare,
                                           accoddfare,
                                           income,
                                           payout,
                                           totalincome,
                                           totalpayout,
                                           elecoddfare,
                                           monoddfare,
                                           elecaccoddfare,
                                           monaccoddfare,
                                           logoutelecaccoddfare,
                                           logoutmonaccoddfare,
                                           elecfreezemn,
                                           monfreezemn,
                                           nocardmn,
                                           totalnocardmn,
                                           paperincome,
                                           totalpaperincome,
                                           discountmn,
                                           totaldiscountmn,
                                           viceoddfare,
                                           viceaccoddfare,
                                           logoutviceaccoddfare,
                                           vicefreezemn,
                                           customerunitcode)
             values (dt_balancedate,
                     n_oddfarepre,
                     n_oddfare,
                     n_cardoddfare,
                     n_accoddfare,
                     n_income,
                     n_payout,
                     n_totalincome,
                     n_totalpayout,
                     n_elecoddfare,
                     n_monoddfare,
                     n_elecaccoddfare,
                     n_monaccoddfare,
                     n_writeoffelecaccoddfare,
                     n_writeoffmonaccoddfare,
                     n_elecfreezemn,
                     n_monfreezemn,
                     n_nocardmn,
                     n_totalnocardmn,
                     n_paperincome,
                     n_totalpaperincome,
                     n_discountmn,
                     n_totaldiscountmn,
                     n_viceoddfare,
                     n_viceaccoddfare,
                     n_writeoffviceaccoddfare,
                     n_vicefreezemn,
                     prmcustunitcode);

        -----------------------------------------------------------------------

        -----完成输出
        out_msg := '系统分区平衡账目统计成功！';
        out_result := 98;
    end;

    procedure stat_verify_sysdate (prmdate           in     varchar2, --平衡日期 格式yyyy-mm-dd
                                   prmcustunitcode   in     varchar2,
                                   out_msg              out varchar2,
                                   out_result           out number)
    as
        /*
         -------------------------------------------------------------------------------
         --存储过程：stat_verify_sysdate
         --作　　者：朱鹏飞
         --时　　间：2009-05-31
         --说　　明：验证系统时间是否正常，不正常则产生报警信息
         --输入参数：
           prmdate：账目日期
         --输出参数：
           out_result：返回结果 100 校验通过 其他失败
           out_msg：返回信息
         -------------------------------------------------------------------------------
         --修改标示：zxn 2012-10-12
        --修改说明：增加多客户和划拨标识的处理
        --------------------------------------------------------------------------
         */
        vmaxbalancedate   date; --最大结算日期
        t_balancedate     date;
        i_count           integer;
        t_alertbase       number (10, 2);
        --
        --报警参数
        i_isalert         integer; --是否报警 0：不报警 1 ：报警
        i_typelevel       integer; --报警级别
        n_validity        number; --此类报警对应的级别的失败时长
        v_alerttitle      varchar2 (30); --报警信息标题
        v_alertmsg        varchar2 (500); --报警信息内容
    begin
        t_alertbase := 0;
        --先对t_balancedate设初值，以防止传入日期格式错误造成转换异常无法记录日志
        t_balancedate := to_date ('1800-01-01', 'yyyy-mm-dd');
        t_balancedate := to_date (prmdate, 'yyyy-mm-dd');
        out_msg := '校验统计时间是否正确';
        out_result := -1002;

        ----- 一、统计时间校验-----
        select nvl (count (*), 0)
          into i_count
          from st_balance_area_total
         where customerunitcode = prmcustunitcode;

        if i_count > 0
        then
            select max (balancedate)
              into vmaxbalancedate
              from st_balance_area_total
             where customerunitcode = prmcustunitcode;

            if t_balancedate <= vmaxbalancedate
            then
                out_msg :=
                       '统计时间校验错，'
                    || to_char (t_balancedate, 'yyyy-mm-dd')
                    || '可能已经日结过,数据库最大日结时间为:'
                    || to_char (vmaxbalancedate, 'yyyy-mm-dd');
                out_result := -1003;
                return;
            end if;
        else --系统已开通，但还没有进行日结
            select sysstartdt
              into vmaxbalancedate
              from base_syspara a;
        end if;

        select count (*)
          into i_count
          from v_alert_typeinfo a
         where a.typeid = 13;

        if i_count = 0
        then
            out_msg := '检查系统时间报警信息不存在';
            out_result := -1022;
            return;
        end if;

        out_result := -22;
        out_msg := '获取报警参数信息';

        --获取个人平衡报警基数
        select a.alertbase
          into t_alertbase
          from v_alert_typeinfo a
         where a.typeid = 13;

        --系统时间 > 最大日结时间 || 系统时间 - 最大日结时间 > 报警基线
        if (sysdate < vmaxbalancedate)
        --or floor (sysdate - vmaxbalancedate) > t_alertbase
        then
            if (sysdate < vmaxbalancedate)
            then
                v_alertmsg := '数据库时间变小。';
            else
                v_alertmsg := '数据库时间变大超过了警界值。';
            end if;

            v_alerttitle := '系统时间错误';
            v_alertmsg :=
                   '【xt-sys-0001】：系统时间异常！ 日结最大时间['
                || to_char (vmaxbalancedate, 'yyyy-mm-dd hh24:mi:ss')
                || ']，当前数据库时间['
                || to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss')
                || ']，数据库时间变大警界值：['
                || to_char (t_alertbase)
                || ']天，异常消息：'
                || v_alertmsg;
            pkg_alert.alert_createalert (v_alerttitle,
                                         v_alertmsg,
                                         13, --消息类别
                                         0, --消息创建职员
                                         null, --消息终端
                                         null,
                                         --消息工作站
                                         1, --是否更新同类消息自动取消
                                         1, --是否记录报警日志
                                         prmcustunitcode,
                                         out_msg,
                                         out_result);

            if (out_result = 100)
            then
                out_msg := '系统时间错误，已产生报警信息！';
            else
                out_msg := '系统时间错误，产生报警信息异常！' || out_result;
            end if;

            out_result := -1024;
            return;
        end if;

        out_result := 100;
        out_msg := '系统时间校验通过';
    exception
        when others
        then
            out_result := -1000;
            out_msg := '系统时间校验过程中产生异常，具体信息为：' || sqlerrm;
    end;

    procedure stat_payment_balance (prmdate           in     varchar,
                                    prmcustunitcode   in     varchar2, --客户代码
                                    out_msg              out varchar2,
                                    out_result           out number)
    as
        --------------------------------------------------------------------------
        --修改标示：周晓娜 2011-07-22
        --修改说明：增加次卡钱包的统计
        --------------------------------------------------------------------------
        --修改标示：周晓娜 2012-11-08
        --修改说明：根据2.0账目改动需求业务处理
        --------------------------------------------------------------------------
        dt_balancedate   date;
    begin
        ---------------------------------------------------------------------------
        --先对t_balancedate设初值，以防止传入日期格式错误造成转换异常无法记录日志
        dt_balancedate := to_date ('1800-01-01', 'yyyy-mm-dd');
        dt_balancedate := to_date (prmdate, 'yyyy-mm-dd');
        --
        out_msg := '锁定统计表';
        out_result := -1001;
        --锁定统计表，不允许其他用户修改，保证数据一致，统计结束解锁
        lock table st_payment_cash_day in exclusive mode;
        lock table st_payment_consum_day in exclusive mode;
        ------------------------------------
        out_msg := '形成充值结算数据 ';
        out_result := -1002;

        --形成充值结算数据
        insert into st_payment_cash_day (cardtype,
                                         empid,
                                         poscode,
                                         statdate,
                                         balancedate,
                                         customerunitcode,
                                         acccode,
                                         operno,
                                         opermn,
                                         flag,
                                         accdate)
              select cardtype,
                     empid,
                     poscode,
                     statdate,
                     dt_balancedate as balancedate,
                     customerunitcode,
                     a.acccode,
                     nvl (sum (operno), 0) as operno,
                     nvl (sum (opermn), 0) as opermn,
                     0,
                     accdate
                from st_payment a, base_acc_type b
               where     a.customerunitcode = prmcustunitcode
                     and a.acccode = b.acccode
                     and b.groupid in (1, 3, 7, 8)
            group by a.cardtype,
                     a.empid,
                     a.poscode,
                     a.statdate,
                     a.customerunitcode,
                     a.acccode,
                     a.accdate;

        out_msg := '形成消费结算数据 ';
        out_result := -1003;

        --形成消费结算数据
        --zxn 20111013 增加cardtype和discountmn统计
        --形成消费结算数据
        insert into st_payment_consum_day (buslineid,
                                           busid,
                                           driverid,
                                           statdate,
                                           balancedate,
                                           cardtype,
                                           discountmn,
                                           customerunitcode,
                                           acccode,
                                           operno,
                                           opermn,
                                           accdate,
                                           flag,
                                           dptcode,
                                           accountdate, --2017-12-26 新增日结字段
                                           settlementdate,
                                           filecreatedate,
                                           maincardtype) --2017-12-26 新增主卡类型
              select buslineid,
                     busid,
                     empid,
                     statdate,
                     dt_balancedate as balancedate,
                     cardtype,
                     nvl (sum (discountmn), 0) as discountmn,
                     customerunitcode,
                     a.acccode,
                     sum (operno) as operno,
                     sum (opermn) as opermn,
                     accdate,
                     0,
                     dptcode,
                     accountdate, --2017-12-26 新增日结字段
                     settlementdate,
                     filecreatedate,
                     maincardtype --2017-12-26 新增主卡类型
                from st_payment a, base_acc_type b
               where     customerunitcode = prmcustunitcode
                     and a.acccode = b.acccode
                     and b.groupid in (2, 4)
            group by buslineid,
                     busid,
                     empid,
                     statdate,
                     customerunitcode,
                     a.acccode,
                     accdate,
                     cardtype,
                     dptcode,
                     accountdate, --2017-12-26 新增日结字段
                     settlementdate,
                     filecreatedate,
                     maincardtype; --2017-12-26 新增主卡类型

        out_result := 99;
        out_msg := '形成汇总结算数据成功';
    end;

    procedure stat_payment_account (prmdate           in     varchar,
                                    prmcustunitcode   in     varchar2, --客户代码
                                    out_msg              out varchar2,
                                    out_result           out number)
    as
        --------------------------------------------------------------------------
        --修改标示：周晓娜 2011-10-25
        --修改说明：集成版系统统计充值、消费日结数据过程
        --------------------------------------------------------------------------
        --修改标示：周晓娜 2012-11-08
        --修改说明：根据2.0账目改动需求业务处理
        --------------------------------------------------------------------------
        dt_balancedate   date;
        vcount           integer;
    begin
        ---------------------------------------------------------------------------
        --先对t_balancedate设初值，以防止传入日期格式错误造成转换异常无法记录日志
        dt_balancedate := to_date ('1800-01-01', 'yyyy-mm-dd');
        dt_balancedate := to_date (prmdate, 'yyyy-mm-dd');
        --
        out_msg := '锁定统计表';
        out_result := -1001;
        vcount := 0; --查询记录数
        --锁定统计表，不允许其他用户修改，保证数据一致，统计结束解锁
        lock table st_payment_cash_day in exclusive mode;
        lock table st_payment_consum_day in exclusive mode;
        ------------------------------------
        out_msg := '形成充值结算数据 ';
        out_result := -1002;

        --形成充值结算数据
        --形成充值结算数据
        insert into st_payment_cash_day (cardtype,
                                         empid,
                                         poscode,
                                         statdate,
                                         balancedate,
                                         customerunitcode,
                                         acccode,
                                         operno,
                                         opermn,
                                         flag,
                                         accdate)
              select cardtype,
                     empid,
                     poscode,
                     statdate,
                     dt_balancedate as balancedate,
                     customerunitcode,
                     a.acccode,
                     nvl (sum (operno), 0) as operno,
                     nvl (sum (opermn), 0) as opermn,
                     0,
                     accdate
                from st_payment a, base_acc_type b
               where     a.customerunitcode = prmcustunitcode
                     and a.acccode = b.acccode
                     and b.groupid in (1, 3, 7, 8)
            group by a.cardtype,
                     a.empid,
                     a.poscode,
                     a.statdate,
                     a.customerunitcode,
                     a.acccode,
                     a.accdate;

        ---------------形成消费结算数据---------------------------------------
        out_msg := '形成消费结算数据 ';
        out_result := -1003;

        declare
            cursor cur_record
            is
                  select buslineid,
                         busid,
                         empid,
                         statdate,
                         dt_balancedate as balancedate,
                         cardtype,
                         nvl (sum (discountmn), 0) as discountmn,
                         customerunitcode,
                         a.acccode,
                         sum (operno) as operno,
                         sum (opermn) as opermn,
                         accdate,
                         dptcode,
                         accountdate, --2017-12-26 新增日结字段
                         settlementdate,
                         filecreatedate,
                         maincardtype --2017-12-26 新增主卡类型
                    from st_payment a, base_acc_type b
                   where     customerunitcode = prmcustunitcode
                         and a.acccode = b.acccode
                         and b.groupid in (2, 4)
                group by buslineid,
                         busid,
                         empid,
                         statdate,
                         customerunitcode,
                         a.acccode,
                         accdate,
                         cardtype,
                         dptcode,
                         accountdate, --2017-12-26 新增日结字段
                         settlementdate,
                         filecreatedate,
                         maincardtype; --2017-12-26 新增主卡类型

            row_record   cur_record%rowtype;
        begin
            --检查是否打开允许执行语句开关
            open cur_record;

            loop
                fetch cur_record into row_record;

                exit when cur_record%notfound;

                --判断是否有数据
                select count (*)
                  into vcount
                  from st_payment_consum_day a
                 where     a.buslineid = row_record.buslineid
                       and a.busid = row_record.busid
                       and a.driverid = row_record.empid
                       and a.statdate = row_record.statdate
                       and a.balancedate = row_record.balancedate
                       and a.acccode = row_record.acccode
                       and a.accdate = row_record.accdate
                       and a.cardtype = row_record.cardtype
                       and a.dptcode = row_record.dptcode
                       and a.customerunitcode = row_record.customerunitcode
                       and a.flag = 0
                       and a.accountdate = row_record.accountdate --2017-12-26 新增日结字段
                       and a.settlementdate = row_record.settlementdate
                       and a.filecreatedate = row_record.filecreatedate
                       and a.maincardtype = row_record.maincardtype; --2017-12-26 新增主卡类型

                if vcount > 0
                then
                    out_result := -1008;
                    out_msg := '更新日结消费统计数据';

                    update st_payment_consum_day a
                       set a.operno = a.operno + row_record.operno,
                           a.opermn = a.opermn + row_record.opermn,
                           a.discountmn = a.discountmn + row_record.discountmn
                     where     a.buslineid = row_record.buslineid
                           and a.busid = row_record.busid
                           and a.driverid = row_record.empid
                           and a.statdate = row_record.statdate
                           and a.balancedate = row_record.balancedate
                           and a.acccode = row_record.acccode
                           and a.accdate = row_record.accdate
                           and a.cardtype = row_record.cardtype
                           and a.dptcode = row_record.dptcode
                           and a.customerunitcode =
                                   row_record.customerunitcode
                           and a.flag = 0
                           and a.accountdate = row_record.accountdate --2017-12-26 新增日结字段
                           and a.settlementdate = row_record.settlementdate
                           and a.filecreatedate = row_record.filecreatedate
                           and a.maincardtype = row_record.maincardtype; --2017-12-26 新增主卡类型
                else
                    out_result := -1009;
                    out_msg := '插入日结消费统计数据';

                    --形成消费结算数据
                    insert into st_payment_consum_day (buslineid,
                                                       busid,
                                                       driverid,
                                                       statdate,
                                                       balancedate,
                                                       cardtype,
                                                       discountmn,
                                                       customerunitcode,
                                                       acccode,
                                                       operno,
                                                       opermn,
                                                       accdate,
                                                       flag,
                                                       dptcode,
                                                       accountdate, --2017-12-26 新增日结字段
                                                       settlementdate,
                                                       filecreatedate,
                                                       maincardtype) --2017-12-26 新增主卡类型
                         values (row_record.buslineid,
                                 row_record.busid,
                                 row_record.empid,
                                 row_record.statdate,
                                 row_record.balancedate,
                                 row_record.cardtype,
                                 row_record.discountmn,
                                 row_record.customerunitcode,
                                 row_record.acccode,
                                 row_record.operno,
                                 row_record.opermn,
                                 row_record.accdate,
                                 0,
                                 row_record.dptcode,
                                 row_record.accountdate, --2017-12-26 新增日结字段
                                 row_record.settlementdate,
                                 row_record.filecreatedate,
                                 row_record.maincardtype); --2017-12-26 新增主卡类型
                end if;
            end loop;

            close cur_record;
        end;

        out_result := 99;
        out_msg := '形成汇总结算数据成功';
    end;

    procedure stat_account_rate (prmdate               varchar2,
                                 prmempid              number,
                                 prmcustunitcode       varchar2, --客户代码
                                 out_msg           out varchar2,
                                 out_result        out number)
    as
        --------------------------------------------------------------------------
        --修改标示：周晓娜 2011-11-15
        --修改说明：商户实际结算账目统计
        --------------------------------------------------------------------------
        n_count                 number; --操作计数
        n_flag                  number;
        --结算费率标志：0：按每笔交易收费 1：按金额收费
        d_balancedate           date; --结算日期
        v_merchantcode          varchar2 (10); --商户编号
        v_dptbankcardno         varchar2 (30); -- 商户开户行账号
        v_dptbankcardowner      varchar2 (50); --商户转账卡所属人
        n_dptbankid             number; --商户开户行编号
        ------
        n_bankcode              number; --运营商开户行银行
        v_transaccountid        varchar2 (30); --运营商转账开户行账号
        v_bankname              varchar2 (30); --运营商开户行名称
        n_operno                number; --结算次数
        n_opermn                number (20, 2); --结算金额
        n_feepersale            number (20, 2); --每笔收费（元）
        n_transferratesofbank   number (20, 2); --银行转账费率
        n_cityagencymn          number (20, 2); --市民卡公司代理费
        n_currencyrates         number (20, 2);
        --金额收费（%），0表示不收取费用、其它整数表示的是按%收费
        n_banktranmn            number (20, 2);
    --银行转账费用：（结算金额-运营公司代理费）*银行转账费率
    begin
        out_result := -10000;
        out_msg := '计算商户结算费率';
        d_balancedate := to_date (prmdate, 'yyyy-mm-dd');

        declare
            cursor cur_merchantcode
            is
                --循环商户表中交易类型为消费类型的商户
                select a.dptcode,
                       a.dptbankcardno,
                       a.dptbankcardowner,
                       a.transaccountno,
                       a.transaccoutbankcode
                  from base_dept a
                 where a.customerunitcode = prmcustunitcode;
        --a.depttype <> 1 and;
        --1 为充值类型的商户
        begin
            open cur_merchantcode;

            loop
                fetch cur_merchantcode
                into v_merchantcode,
                     v_dptbankcardno,
                     v_dptbankcardowner,
                     v_transaccountid,
                     n_bankcode;

                --获取运营商开户行名称
                select a.bankname
                  into v_bankname
                  from base_bank a
                 where a.id = n_bankcode;

                exit when cur_merchantcode%notfound;
                --1.账目标识：第一次确认成功账目统计
                --------------------------------------------------------------------------------
                out_result := -15001;
                out_msg := '获取第一次确认成功转账金额异常';
                n_cityagencymn := 0.00;
                n_banktranmn := 0.00;
                n_operno := 0;
                n_opermn := 0.00;

                --获取商户未转账的结算金额
                select nvl (sum (a.operno), 0), nvl (sum (a.opermn), 0)
                  into n_operno, n_opermn
                  from st_payment_consum_day a
                 where     a.dptcode = v_merchantcode
                       and a.flag = 0
                       and a.balancedate = d_balancedate
                       and a.customerunitcode = prmcustunitcode;

                --只有结算金额大于零的才形成结算数据
                if n_opermn > 0
                then
                    out_result := -15002;
                    out_msg := '获取此商户是否有转账费率异常';

                    --判断商户是否有结算费率
                    select count (*)
                      into n_count
                      from base_clearingrates a
                     where     a.merchantcode = v_merchantcode
                           and a.customerunitcode = prmcustunitcode;

                    --结算费率表中有此商户的结算费率
                    if n_count = 1
                    then
                        --获取费率计算方式
                        select a.flag
                          into n_flag
                          from base_clearingrates a
                         where     a.merchantcode = v_merchantcode
                               and a.customerunitcode = prmcustunitcode;

                        out_result := -15003;
                        out_msg := '获取此商户结算费率异常';

                        --------------------------------------------------------------------------------

                        --按笔收取结算费率
                        if n_flag = 0
                        then
                            select a.feepersale, a.transferratesofbank
                              into n_feepersale, n_transferratesofbank
                              from base_clearingrates a
                             where     a.merchantcode = v_merchantcode
                                   and a.customerunitcode = prmcustunitcode;

                            --每笔收费金额大于0
                            if n_feepersale > 0
                            then
                                n_cityagencymn := n_operno * n_feepersale;
                            end if;

                            --银行转账费率大于0
                            if n_transferratesofbank > 0
                            then
                                n_banktranmn :=
                                      (n_opermn - n_cityagencymn)
                                    * n_transferratesofbank
                                    / 100;
                            end if;

                            out_result := -15004;
                            out_msg := '形成转账金额异常';

                            insert into st_tranaccount (id,
                                                        businessbankno,
                                                        businessbankname,
                                                        dptcode,
                                                        operno,
                                                        opermn,
                                                        cityagencymn,
                                                        banktranmn,
                                                        realtranmn,
                                                        dptbankno,
                                                        dptbankowner,
                                                        isaccount,
                                                        balancedate,
                                                        customerunitcode)
                                 values (
                                            0,
                                            v_transaccountid,
                                            v_bankname,
                                            v_merchantcode,
                                            n_operno,
                                            n_opermn,
                                            n_cityagencymn,
                                            n_banktranmn,
                                              n_opermn
                                            - n_cityagencymn
                                            - n_banktranmn,
                                            v_dptbankcardno,
                                            v_dptbankcardowner,
                                            0,
                                            d_balancedate,
                                            prmcustunitcode);
                        --------------------------------------------------------------------------------
                        --按金额收取结算费率
                        else
                            select a.currencyrates, a.transferratesofbank
                              into n_currencyrates, n_transferratesofbank
                              from base_clearingrates a
                             where     a.merchantcode = v_merchantcode
                                   and a.customerunitcode = prmcustunitcode;

                            if n_currencyrates > 0
                            then
                                n_cityagencymn :=
                                    n_opermn * n_currencyrates / 100;
                            end if;

                            if n_transferratesofbank > 0
                            then
                                n_banktranmn :=
                                      (n_opermn - n_cityagencymn)
                                    * n_transferratesofbank
                                    / 100;
                            end if;

                            out_result := -15005;
                            out_msg := '形成转账金额异常';

                            insert into st_tranaccount (id,
                                                        businessbankno,
                                                        businessbankname,
                                                        dptcode,
                                                        operno,
                                                        opermn,
                                                        cityagencymn,
                                                        banktranmn,
                                                        realtranmn,
                                                        dptbankno,
                                                        dptbankowner,
                                                        isaccount,
                                                        balancedate,
                                                        customerunitcode)
                                 values (
                                            0,
                                            v_transaccountid,
                                            v_bankname,
                                            v_merchantcode,
                                            n_operno,
                                            n_opermn,
                                            n_cityagencymn,
                                            n_banktranmn,
                                              n_opermn
                                            - n_cityagencymn
                                            - n_banktranmn,
                                            v_dptbankcardno,
                                            v_dptbankcardowner,
                                            0,
                                            d_balancedate,
                                            prmcustunitcode);
                        end if;
                    --------------------------------------------------------------------------------
                    --结算费率表中没有此商户的结算费率,记录直接入转账表
                    else
                        out_result := -15006;
                        out_msg := '形成转账金额异常';

                        insert into st_tranaccount (id,
                                                    businessbankno,
                                                    businessbankname,
                                                    dptcode,
                                                    operno,
                                                    opermn,
                                                    cityagencymn,
                                                    banktranmn,
                                                    realtranmn,
                                                    dptbankno,
                                                    dptbankowner,
                                                    isaccount,
                                                    balancedate,
                                                    customerunitcode)
                             values (
                                        0,
                                        v_transaccountid,
                                        v_bankname,
                                        v_merchantcode,
                                        n_operno,
                                        n_opermn,
                                        n_cityagencymn,
                                        n_banktranmn,
                                          n_opermn
                                        - n_cityagencymn
                                        - n_banktranmn,
                                        v_dptbankcardno,
                                        v_dptbankcardowner,
                                        0,
                                        d_balancedate,
                                        prmcustunitcode);
                    end if;
                end if;
            --------------------------------------------------------------------------------
            end loop;

            close cur_merchantcode;
        end;

        out_result := 300;
        out_msg := '形成商户转账金额成功';
    exception
        when others
        then
            --rollback;
            out_result := out_result;
            out_msg := out_msg || to_char (sqlcode) || '_+_' || sqlerrm;
    end;
end;/
create or replace package        pkg_subsection_charge
is
   /*
    ----------------------------------------------------------------------------
    --过程包名：pkg_subsection_charge
    --作　　者：周晓娜
    --时　　间： 2012-3-13
    --说　　明：分段计费，用于处理新增分段计费的相关业务
    ----------------------------------------------------------------------------
    */

   --上传站点gps信息
   procedure insert_stopgps (
      prmstopid             in       number,                       --站点编号
      prmlongitude          in       varchar2,                 --站点对应经度
      prmlatitude           in       varchar2,                     --站点纬度
      prmcollectdt          in       varchar2,                     --采集时间
      prmcustomerunitcode   in       varchar2,                     --客户代码
      out_result            out      integer,
      out_msg               out      varchar2
   );
end;


 
 
 
 /
create or replace package body        pkg_subsection_charge
is
   --上传站点gps信息
   procedure insert_stopgps (
      prmstopid             in       number,                       --站点编号
      prmlongitude          in       varchar2,                 --站点对应经度
      prmlatitude           in       varchar2,                     --站点纬度
      prmcollectdt          in       varchar2,                     --采集时间
      prmcustomerunitcode   in       varchar2,                     --客户代码
      out_result            out      integer,
      out_msg               out      varchar2
   )
   as
        /*
      ----------------------------------------------------------------------------
      --存储过程：insert_stopgps
      --功　　能：上传站点gps信息
      --作    者： 周晓娜
      --创建日期： 2012-03-13
      --输出参数：
      --      out_result:　100-为成功， 其它异常
      --      out_msg:输出信息
      --------------------------------------------------------------------------
      */
        --
      v_count    number;
      n_lineid   number;                             --获取站点对应的线路信息
   begin
      --先判断上传的站点是否存在
      select count (*)
        into v_count
        from base_busstop a
       where a.stopid = prmstopid and a.customerunitcode = prmcustomerunitcode;

      if v_count != 1
      then
         --站点编号系统保证唯一，如果记录不是一条，要么不存在，要么数据错误
         out_result := -1001;
         out_msg := '站点编号为：' || prmstopid || '的信息不合法！';
         return;
      end if;

      --更新站点的经纬度信息
      update base_busstop
         set longitude = prmlongitude,
             latitude = prmlatitude,
             collectdt = to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss')
       where stopid = prmstopid and customerunitcode = prmcustomerunitcode;

      if (sql%rowcount != 1)
      then
         out_result := -1002;
         out_msg := '更新站点：' || prmstopid || '的经纬度信息失败！';
         return;
      end if;

      --定义游标更新站点对应线路的stopver信息
      declare
         cursor linestop_cur
         is
            --获取使用该站点的线路信息
            select distinct (a.lineid)
                       from base_busroute a
                      where a.stopid = prmstopid
                        and a.customerunitcode = prmcustomerunitcode;

         linestop_row   linestop_cur%rowtype;
      begin
         open linestop_cur;

         loop
            fetch linestop_cur
             into linestop_row;

            exit when linestop_cur%notfound;

            select count (a.id)
              into v_count
              from base_busline a
             where a.customerunitcode = prmcustomerunitcode
               and a.isdelete = 0
               and a.lineid = linestop_row.lineid;

            if v_count = 1
            then
               update base_busline
                  set stopver = stopver + 1
                where lineid = linestop_row.lineid
                  and isdelete = 0
                  and customerunitcode = prmcustomerunitcode;
            end if;
         end loop;                                                  --游标循环

         close linestop_cur;
      end;

      out_result := 100;
      out_msg := '处理成功！';
      commit;
   exception
      when others
      then
         rollback;
         out_result := -1;
         out_msg := out_msg || '异常_+_' || sqlerrm;
         commit;
   end;
end;

/
create or replace package pkg_test
is
    procedure alert_statday_weberr (prmempid          in     number, --职员id
                                    prmcheckday       in     varchar2, --yyyy-mm-dd日结是否成功
                                    prmcustunitcode   in     varchar2, --客户代码
                                    out_result           out integer,
                                    out_msg              out varchar2);

    procedure alert_createalert (prmtitle          in     varchar2, --报警标题
                                 prmmessage        in     varchar2, --报警信息
                                 prmtypeid         in     number, --报警类别
                                 prmempid          in     number, --创建消息职员
                                 prmtermid         in     number, --终端报警的终端
                                 prmstation        in     number, --工作站报警的工作站
                                 prmifupdate       in     number,
                                 --更新同类消息为取消 1：更新 0：不更新
                                 prmiflog          in     number, --是否记报警日志 1：记录 0：不记录
                                 prmcustunitcode   in     varchar2, --客户代码
                                 out_msg              out varchar2,
                                 out_result           out integer);
end;/
create or replace package body pkg_test
is
    procedure alert_statday_weberr (prmempid          in     number, --职员id
                                    prmcheckday       in     varchar2, --yyyy-mm-dd日结是否成功
                                    prmcustunitcode   in     varchar2, --客户代码
                                    out_result           out integer,
                                    out_msg              out varchar2)
    as
        /*
      ----------------------------------------------------------------------------
      --存储过程：alert_check_statday
      --功　　能：检查日结是否成功，自动服务在日结时调用web服务异常时，产生报警信息
      --作    者： 朱鹏飞
      --创建日期： 2009-03-30
      --输出参数：
      --      out_result:　100-为成功， -1异常
      --      out_msg:输出信息
      --------------------------------------------------------------------------
      --修改标示：朱鹏飞 2009-08-04
      --修改说明：日结失败，增加修改数据库日结状态为日结完毕
      --------------------------------------------------------------------------
      --修改标示：周晓娜 2012-11-09
      --修改说明：增加多客户处理
      --------------------------------------------------------------------------
      */
        --
        v_alerttitle   varchar2 (30); --报警信息标题
        v_alertmsg     varchar2 (500); --报警信息内容
        n_count        number;
    begin
        --先检查当日结是否成功，如果日结成功，则不报警
        select count (*)
          into n_count
          from st_balance_area_total a
         where     a.balancedate = to_date (prmcheckday, 'yyyy-mm-dd')
               and a.customerunitcode = prmcustunitcode;

        if n_count > 0
        then
            --如果日结表有当天数据，说明已经日结成功，则不产生报警
            out_result := 100;
            out_msg := prmcheckday || '已经日结成功，无须产生报警';
            return;
        end if;

        --更新数据库为未日结状态
        update base_syspara
           set isbalance = 0;

        v_alerttitle := '系统日结失败';
        v_alertmsg :=
               '【js-sys-0001】：系统日结失败！ 日报日期['
            || to_char (prmcheckday)
            || ']，日结执行时间['
            || to_char (sysdate, 'yyyy-mm-dd hh24:mi:ss')
            || ']，异常消息：[自动服务返回日结失败]。';
        alert_createalert (v_alerttitle,
                           v_alertmsg,
                           10, --消息类别
                           0, --消息创建职员
                           null, --消息终端
                           null, --消息工作站
                           1, --是否更新同类消息自动取消
                           1, --是否记录报警日志
                           prmcustunitcode,
                           out_msg,
                           out_result);

        if (out_result > 0)
        then
            commit;
        else
            rollback;
        end if;
    exception
        when others
        then
            rollback;
            out_result := -1;
            out_msg := out_msg || '异常_+_' || sqlerrm;

            insert into alert_log (operatorid,
                                   begintime,
                                   endtime,
                                   altertype,
                                   results,
                                   description)
                 values (prmempid,
                         sysdate,
                         sysdate,
                         10,
                         out_result,
                         out_msg);

            commit;
    end;

    procedure alert_createalert (prmtitle          in     varchar2, --报警标题
                                 prmmessage        in     varchar2, --报警信息
                                 prmtypeid         in     number, --报警类别
                                 prmempid          in     number, --创建消息职员
                                 prmtermid         in     number, --终端报警的终端
                                 prmstation        in     number, --工作站报警的工作站
                                 prmifupdate       in     number,
                                 --更新同类消息为取消 1：更新 0：不更新
                                 prmiflog          in     number, --是否记报警日志 1：记录 0：不记录
                                 prmcustunitcode   in     varchar2, --客户代码
                                 out_msg              out varchar2,
                                 out_result           out integer)
    as
        /*
        --------------------------------------------------------------------------
        --存储过程：alert_createalert
        --功　　能：产生新的报警信息
        --作    者： 朱鹏飞
        --创建日期： 2009-03-30
        --------------------------------------------------------------------------
        --修改标示：周晓娜 2012-11-09
        --修改说明：增加多客户处理
        --------------------------------------------------------------------------
        */
        i_isalert     integer; --是否报警 0：不报警 1 ：报警
        i_typelevel   integer; --报警级别
        n_validity    number; --此类报警对应的级别的失败时长
        --
        i_count       integer;
    begin
        out_result := -1;
        out_msg := '未找到此类报警信息。';

        select count (*)
          into i_count
          from v_alert_typeinfo a
         where a.typeid = prmtypeid;

        if (i_count <= 0)
        then
            out_result := -2;
            out_msg := '未找到此类报警信息。';

            insert into alert_log (operatorid,
                                   begintime,
                                   endtime,
                                   altertype,
                                   results,
                                   description,
                                   customerunitcode)
                 values (prmempid,
                         sysdate,
                         sysdate,
                         prmtypeid,
                         out_result,
                         out_msg,
                         prmcustunitcode);

            return;
        end if;

        out_result := -1;
        out_msg := '更新已过期的信息';

        --更新已过期的信息
        update alert_message a
           set a.state = 0, --更新为自动过期
                           a.canceldate = sysdate
         where     a.state = 1 --状态为有效
               and invaliddate <= sysdate
               and a.customerunitcode = prmcustunitcode;

        out_result := -1;
        out_msg := '更新以前同类消费状态为自动取消';

        if (prmifupdate = 1)
        then
            out_result := -2;
            out_msg := '更新以前同类消费状态为自动取消';

            --1、更新以前同类消费状态为自动取消
            if (prmtermid is not null)
            then
                update alert_message a
                   set a.state = -1, a.canceldate = sysdate
                 where     a.typeid = prmtypeid
                       and a.state = 1
                       and a.termid = prmtermid
                       and a.customerunitcode = prmcustunitcode;
            else
                if (prmstation is not null)
                then
                    update alert_message a
                       set a.state = -1, a.canceldate = sysdate
                     where     a.typeid = prmtypeid
                           and a.state = 1
                           and a.stationid = prmstation
                           and a.customerunitcode = prmcustunitcode;
                else
                    update alert_message a
                       set a.state = -1, a.canceldate = sysdate
                     where     a.typeid = prmtypeid
                           and a.state = 1
                           and a.customerunitcode = prmcustunitcode;
                end if;
            end if;
        end if;

        out_result := -3;
        out_msg := '获取报警配置';

        select a.typelevel, a.validity, a.usingalert
          into i_typelevel, n_validity, i_isalert
          from v_alert_typeinfo a
         where a.typeid = prmtypeid;

        out_result := -4;
        out_msg := '产生报警信息';

        --2、然后再形成新的报警信息
        insert into alert_message (title,
                                   message,
                                   typeid,
                                   showing,
                                   createdate,
                                   empid,
                                   msglevel,
                                   state,
                                   invaliddate,
                                   messagecode,
                                   termid,
                                   stationid,
                                   customerunitcode)
             values (prmtitle,
                     prmmessage,
                     prmtypeid,
                     i_isalert,
                     sysdate,
                     prmempid,
                     i_typelevel,
                     1,
                     sysdate + (n_validity / 24),
                     0,
                     prmtermid,
                     prmstation,
                     prmcustunitcode);

        if (prmiflog = 1)
        then
            out_result := -5;
            out_msg := '形成报警日志';

            insert into alert_log (operatorid,
                                   begintime,
                                   endtime,
                                   altertype,
                                   results,
                                   description,
                                   customerunitcode)
                 values (prmempid,
                         sysdate,
                         sysdate,
                         prmtypeid,
                         100,
                         '产生' || prmtitle || '报警信息成功',
                         prmcustunitcode);
        end if;

        out_result := 100;
        out_msg := '产生' || prmtitle || '报警信息成功';
    exception
        when others
        then
            if out_result > 0
            then
                out_result := out_result * -1;
            else
                out_result := out_result;
            end if;

            out_msg := out_msg || '异常_+_' || sqlerrm;

            insert into alert_log (operatorid,
                                   begintime,
                                   endtime,
                                   altertype,
                                   results,
                                   description,
                                   customerunitcode)
                 values (prmempid,
                         sysdate,
                         sysdate,
                         prmtypeid,
                         out_result,
                         out_msg,
                         prmcustunitcode);
    end;
end;/
create or replace package pkg_third_consume
is

   procedure proc_uploadthirdcardconsumerec (
      --客户基本信息-------------
      prmthirdcardno       in       varchar2,
      prmwallettype        in       number,
      prmcardkind          in       number,         --卡种类 1：m1卡 2：cpu卡
      prmcardtype          in       number,     --卡类型 普通卡 月卡 老年卡等
      prmopdt              in       varchar2, --操作时间yyyy-mm-dd hh24:mi:ss
      prmopcount           in       number,      --消费操作计数，根据钱包判断
      --客户金额信息-------------
      prmsumelectrfare     in       number,                          --卡总额
      prmoddfare           in       number,
      --消费后余额，根据钱包类型判断钱包
      prmopfare            in       number,  --消费金额，根据钱包类型判断钱包
      prmdiscountfare      in       number,                        --打折金额
      --终端交易信息-------------
      prmbusid             in       number,                          --车辆id
      prmposcode           in       number,                --设备唯一运营编号
      prmsamcardno         in       number,                      --pasm卡卡号
      prmtac               in       number,                       --tac验证码
      prmdriverid          in       number,                        --司机编号
      prmbuslineid         in       number,                        --线路编号
      prmdeptcode          in       varchar2,                  --线路所属部门
      prmdealtype          in       number,          --记录类型，用于确定科目
      prmtradetype         in       number,                    --交易应用类型
      prmcollectdt         in       varchar2, --采集时间yyyy-mm-dd hh24:mi:ss
      prmtotalrecno        in       number,
      --总交易流水号包含交易流水和日志流水
      prmtraderecno        in       number,                  --终端交易流水号
      prmsamtradeno        in       number,                --pasm卡交易流水号
      --cpu卡加入字段------------
      prmcardasn           in       number,                    --卡应用序列号
      prmtradecitycode     in       varchar2,                --交易地城市代码
      prmownercitycode     in       varchar2,                --所属地城市代码
      prmmaincardtype      in       number,                        --主卡类型
      prmassocardtype      in       number,                        --子卡类型
      prmcardversion       in       number,                        --卡内版本
      prmtradekind         in       number,                        --交易性质
      prmtestflag          in       number,                        --测试标记
      prmcollectpoint      in       varchar2,                    --采集点编号
      prmoperatorpoint     in       varchar2,                  --营运单位编号
      prmscardsnr          in       varchar2,
      prmsaveopcount       in       number,
      prmlatteroddfare     in       number,
      prmridesort          in       varchar2,
      prmpreviousposcode   in       varchar2,
      prmpreviousopdt      in       varchar2,
      prmaccountdetach     in       varchar2,
      prmverifycode        in       varchar2,
      prmticketcharge      in       varchar2,
      prmlocalcstaccfc     in       number,
      prmbatno             in       number,
      --返回值-------------------
      out_result           out      number,
      out_msg              out      varchar2
   );
end;
 

 
 
 
/
create or replace package body pkg_third_consume
is
   procedure proc_uploadthirdcardconsumerec (
      --客户基本信息-------------
      prmthirdcardno       in       varchar2,
      prmwallettype        in       number,
      prmcardkind          in       number,          --卡种类 1：m1卡 2：cpu卡
      prmcardtype          in       number,      --卡类型 普通卡 月卡 老年卡等
      prmopdt              in       varchar2,  --操作时间yyyy-mm-dd hh24:mi:ss
      prmopcount           in       number,       --消费操作计数，根据钱包判断
      --客户金额信息-------------
      prmsumelectrfare     in       number,                           --卡总额
      prmoddfare           in       number, --消费后余额，根据钱包类型判断钱包
      prmopfare            in       number,   --消费金额，根据钱包类型判断钱包
      prmdiscountfare      in       number,                         --打折金额
      --终端交易信息-------------
      prmbusid             in       number,                           --车辆id
      prmposcode           in       number,                 --设备唯一运营编号
      prmsamcardno         in       number,                       --pasm卡卡号
      prmtac               in       number,                        --tac验证码
      prmdriverid          in       number,                         --司机编号
      prmbuslineid         in       number,                         --线路编号
      prmdeptcode          in       varchar2,                   --线路所属部门
      prmdealtype          in       number,           --记录类型，用于确定科目
      prmtradetype         in       number,                     --交易应用类型
      prmcollectdt         in       varchar2,  --采集时间yyyy-mm-dd hh24:mi:ss
      prmtotalrecno        in       number,
      --总交易流水号包含交易流水和日志流水
      prmtraderecno        in       number,                   --终端交易流水号
      prmsamtradeno        in       number,                 --pasm卡交易流水号
      --cpu卡加入字段------------
      prmcardasn           in       number,                     --卡应用序列号
      prmtradecitycode     in       varchar2,                 --交易地城市代码
      prmownercitycode     in       varchar2,                 --所属地城市代码
      prmmaincardtype      in       number,                         --主卡类型
      prmassocardtype      in       number,                         --子卡类型
      prmcardversion       in       number,                         --卡内版本
      prmtradekind         in       number,                         --交易性质
      prmtestflag          in       number,                         --测试标记
      prmcollectpoint      in       varchar2,                     --采集点编号
      prmoperatorpoint     in       varchar2,                   --营运单位编号
      prmscardsnr          in       varchar2,
      prmsaveopcount       in       number,
      prmlatteroddfare     in       number,
      prmridesort          in       varchar2,
      prmpreviousposcode   in       varchar2,
      prmpreviousopdt      in       varchar2,
      prmaccountdetach     in       varchar2,
      prmverifycode        in       varchar2,
      prmticketcharge      in       varchar2,
      prmlocalcstaccfc     in       number,
      prmbatno             in       number,
      --返回值-------------------
      out_result           out      number,
      out_msg              out      varchar2
   )
   as
      /*
      --------------------------------------------------------------------------
      --修改标识：程文平2011123
      --修改说明：增加岭南通协议字段
      --------------------------------------------------------------------------
      --修改标识：周晓娜 20111218
      --修改说明：增加联动优势协议字段处理
      --------------------------------------------------------------------------
      --修改标识：周晓娜 20121109
      --修改说明：去掉分区的相关判断处理
      --------------------------------------------------------------------------
      */
      i_count              integer;                                    --计数
      n_acccode   constant number         := 201;          --电子钱包消费科目
      v_accdesc            varchar2 (50);
      i_dbcardsn           integer;                    --客户数据库内持卡序号
      n_dbopcount          number;                     --客户数据库内操作计数
      n_dbsaveopcount      number;                     --数据库内充值操作计数
      i_dptareaid          integer;                    --线路营业部门所属分区
      i_cardareaid         integer;                          --客户卡所属分区
      i_cflg               integer;                    --冻结金额是否领取标志
      i_pty                integer;             --卡操作类型 新卡，补卡，换卡
      i_badrectype         integer;                                --坏账类型
      n_busid              number;                                   --车辆id
      n_wallettype         number;                                 --钱包类型
      --
      n_unset_planid       number;
      i_unset_cardsn       integer;
      n_unset_opcount      number;
      n_unset_oddfare      number (10, 2);
      n_unset_acccode      number;
      i_unset_accgroupid   integer;
      custom_exception     exception;                            --自定义错误
      n_cardkind           number;
      n_poscode            number;                     --车辆对应的设备唯一号
      n_buslineid          number;                                 --线路编号
   begin
      n_busid := prmbusid;
      i_dptareaid := 0;
      i_cardareaid := 0;
      n_cardkind := 3;                                           --物理卡类型

      --银联通卡类型
      if prmassocardtype = 1
      then
         n_wallettype := 4;
      --岭南通卡类型
      elsif prmassocardtype = 2
      then
         n_wallettype := 5;
      --联动优势移动卡
      elsif prmassocardtype = 3
      then
         n_wallettype := 6;
      else
         out_msg := '发卡方卡类型不正确';
         out_result := -1001;
         raise custom_exception;
      end if;

      select count (*)
        into i_count
        from base_acc_type a
       where a.acccode = n_acccode;

      if (i_count <> 1)
      then
         out_msg := '电子钱包消费科目不存在';
         out_result := -1003;
         raise custom_exception;
      end if;

      select a.accdscrp
        into v_accdesc
        from base_acc_type a
       where a.acccode = n_acccode;

      out_result := -1004;
      out_msg := '检查终端合法性';

      -----根据psam卡号找对应的终端编号、车辆编号、线路编号--------------------
      select count (*)
        into i_count
        from base_samcard a
       where samcardno = prmsamcardno;

      if i_count <> 1
      then
         out_result := -1005;
         out_msg := 'psam号不存在！samcardno：' || to_char (prmsamcardno);
         return;
      end if;

      --判断对应的终端信息是否存在
      select count (*)
        into i_count
        from base_term a
       where psamcardno = prmsamcardno and isdelete = 0;

      if i_count <> 1
      then
         out_result := -1006;
         out_msg :=
            'psam卡号对应的终端不存在！psamcardno：'
            || to_char (prmsamcardno);
         return;
      end if;

      --获取设备编号
      select poscode
        into n_poscode
        from base_term a
       where psamcardno = prmsamcardno and isdelete = 0;

      --根据设备编号找对应的车辆信息
      select count (*)
        into i_count
        from base_term a, base_bus b
       where a.poscode = b.poscode and b.isuse = 0 and a.poscode = n_poscode;

      if i_count <> 0
      then
         select b.busno, b.lineid
           into n_busid, n_buslineid
           from base_term a, base_bus b
          where a.poscode = b.poscode and b.isuse = 0
                and a.poscode = n_poscode;
      else
         out_result := -1007;
         out_msg :=
                '终端对应的车辆信息不存在！poscode：' || to_char (prmposcode);
         return;
      end if;

      select count (*)
        into i_count
        from base_dept a
       where a.dptcode = prmdeptcode and a.isdelete = 0;

      if (i_count = 0)
      then
         out_msg := -1007;
         out_result := '分公司编号不存在';
         raise custom_exception;
      end if;

      --zxn 20121109 去掉分区处理
      /*
      select a.areaid
        into i_dptareaid
        from base_dept a
       where a.dptcode = prmdeptcode and a.isdelete = 0;*/

      --形成电子钱包消费记录
      insert into rec_thirdcard_consume
                  (thirdcardno, cardtype,
                   opdt,
                   sumelectraddfare, electronoddfare, electronopfare,
                   acccode, dscrp, opcount, dealtype,
                   collectdt, uploaddate,
                   busid, driverid, poscode, samcardno,
                   cardkind, traderecno, tac, samtradeno,
                   buslineid, totalrecno, discount, tradetype,
                   linedept, tradecitycode, ownercitycode,
                   maincardtype, assocardtype, cardversion,
                   tradekind, testflag, collectpoint,
                   operatorpoint, cardownbusiness, wallettype,
                   localcstaccfc, batchno
                  )
           values (prmthirdcardno, prmcardtype,
                   to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
                   prmsumelectrfare, prmoddfare, prmopfare,
                   n_acccode, v_accdesc, prmopcount, prmdealtype,
                   to_date (prmcollectdt, 'yyyy-mm-dd hh24:mi:ss'), sysdate,
                   n_busid, prmdriverid, prmposcode, prmsamcardno,
                   n_cardkind, prmtraderecno, prmtac, prmsamtradeno,
                   n_buslineid, prmtotalrecno, prmdiscountfare, prmtradetype,
                   prmdeptcode, prmtradecitycode, prmownercitycode,
                   prmmaincardtype, prmassocardtype, prmcardversion,
                   prmtradekind, prmtestflag, prmcollectpoint,
                   prmoperatorpoint, prmassocardtype, n_wallettype,
                   prmlocalcstaccfc, prmbatno
                  );

      --消费记录即时统计
      pkg_st_payment.proc_custdataaccount_online (prmopdt,
                                                  prmopfare,
                                                  n_acccode,
                                                  prmdiscountfare,
                                                  prmcardkind,
                                                  prmcardtype,
                                                  prmdriverid,
                                                  n_poscode,
                                                  prmsamcardno,
                                                  n_buslineid,
                                                  prmdeptcode,
                                                  n_busid,
                                                  -- i_cardareaid,
                                                  -- i_dptareaid,
                                                  n_wallettype,
                                                  --钱包类型
                                                  0,     --0正常 1回滚统计操作
                                                  '',               --客户代码
                                                  out_msg,
                                                  out_result,
                                                  prmmaincardtype);--2017-12-26 新增主卡类型

      if (out_result <> 100)
      then
         out_result := out_result;
         out_msg := '记录上传统计失败,' || out_msg;
         raise custom_exception;
      end if;

      out_result := 100;
      out_msg := '记录上传成功';
      return;
   exception
      when custom_exception
      -----先处理自定义异常
      then
         --统一异常，为后续版本在异常部分增加某种异常处理，如报警，记录日志等功能
         if out_result > 0
         then
            out_result := out_result * -1;
         else
            out_result := out_result;
         end if;

         out_msg := out_msg;
      when others
      then
         out_result := -1;
         out_msg :=
            '记录上传失败，处理[' || out_msg || ']异常，具体原因为：'
            || sqlerrm;
   end;
end;
/
create or replace package pkg_unionpay_consume is
  type refcursortype is ref cursor; --游标类型定义，用于返回数据集

  procedure proc_build_bllt(prmoptype           in number,
                            prmcardno           in number,
                            prmsuorcetype       in number,
                            prmsourceip         in varchar2,
                            prmcustomerunitcode in varchar2, --客户代码
                            prmcardownbusiness  in number,
                            out_result          out number,
                            out_msg             out varchar2);

end;
/
create or replace package body pkg_unionpay_consume is

  --生成黑名单
  procedure proc_build_bllt(prmoptype           in number,
                            prmcardno           in number,
                            prmsuorcetype       in number,
                            prmsourceip         in varchar2,
                            prmcustomerunitcode in varchar2, --客户代码
                            prmcardownbusiness  in number,--卡所属行业，0市民卡，1银联卡，2岭南通卡  
                            out_result          out number,
                            out_msg             out varchar2) as
    vcount     number;
    vnousedate date;
  begin
    out_result := -1100;
    out_msg    := '生成黑名单开始！';

    if vnousedate is null then
      vnousedate := sysdate + 1460;
    end if;

    --3、查询黑名单中是否有记录
    select count(*)
      into vcount
      from rec_bllt a
     where a.cardno = prmcardno
       and a.customerunitcode = prmcustomerunitcode;
    if prmoptype = 0 then
      --4、没有则插入一条黑名单记录
      if vcount = 0 then
        insert into rec_bllt
          (cardno,
           lossdt,
           suorcetype,
           suorceip,
           nousedate,
           state,
           cardasn,
           customerunitcode,
           cardownbusiness)
        values
          (prmcardno,
           sysdate,
           prmsuorcetype,
           prmsourceip,
           vnousedate,
           prmoptype,
           prmcardno,
           prmcustomerunitcode,
           prmcardownbusiness);
        --5、如果有黑名单记录
      else
        --5.1查询黑名单中是否该记录
        select count(*)
          into vcount
          from rec_bllt a
         where a.cardno = prmcardno
           and a.state = 0
           and a.customerunitcode = prmcustomerunitcode;

        --5.2黑名单表中已经存在此黑名单，并且状态不是挂失状态
        if vcount = 0 then
          --5.3将记录状态更新成挂失状态
          update rec_bllt a
             set a.state = 0, losscount = losscount + 1
           where a.cardno = prmcardno
             and a.customerunitcode = prmcustomerunitcode;
        end if;
      end if;
    else
      update rec_bllt
         set state = 1
       where cardno = prmcardno
         and customerunitcode = prmcustomerunitcode;
    end if;

    out_result := 100;
    out_msg    := '生成黑名单成功！';
  exception
    when others then
      out_result := -1;
      out_msg    := '验证黑名单异常：' || to_char(sqlcode) || '||||' || sqlerrm;
  end;
end;
/
create or replace package pkg_union_account is

  type ref_cursor is ref cursor;
  procedure proc_unionconsume_account(prmthirdcardno   in varchar2, --银联卡号
                                      prmmerchantcode  in varchar2, --商户编号
                                      prmuniontermid   in varchar2, --银联终端编号
                                      prmtraderecno    in number, --终端交易流水号
                                      prmopdt          in varchar2, --交易时间，yyyymmddhhmiss
                                      prmopfare        in number, --交易金额
                                      prmunioncstaccfc in varchar2, --银联交易流水号
                                      prmaccountdate   in varchar2, --银联账务日期,yyyymmdd
                                      prmunionappkey   in varchar2, --应用密文
                                      prmopcount       in number, --卡片序列号
                                      prmbankcode      in varchar2, --银行代码
                                      prmresultcode    in varchar2, --应答码
                                      prmcstaccfc      in varchar2, --解析结果文件临时表中的流水
                                        prmfilename in varchar2,--文件名
                                      out_msg          out varchar2,
                                      out_result       out integer);

  procedure proc_unionconsume_result(prmthirdcardno   in varchar2, --银联卡号
                                     prmmerchantcode  in varchar2, --商户编号
                                     prmuniontermid   in varchar2, --银联终端编号
                                     prmtraderecno    in number, --终端交易流水号
                                     prmopdt          in varchar2, --交易时间，yyyymmddhhmiss
                                     prmopfare        in number, --交易金额
                                     prmunioncstaccfc in varchar2, --银联交易流水号
                                     prmaccountdate   in varchar2, --银联账务日期,yyyymmdd
                                     out_msg          out varchar2,
                                     out_result       out integer);

  --电子现金已清算报表数据
  procedure proc_thirdunion_accounts(prmstartdate           in varchar2, --开始时间
                                     prmenddate             in varchar2, --结束时间
                                     prmissuccess           in number, --是否清算成功  1:成功 0：失败
                                     prmisgroup             in number, --0：明细 1：汇总
                                     prmsearchkind          in number, --0:线路汇总 1:车辆汇总 2：日期汇总 3:按人员汇总
                                     prmlineorbusstr        in varchar2, --搜索的线路或者车辆 用逗号分开
                                     prmdept                in varchar2, --部门
                                     prmcustomerunitcode    in varchar2, --客户法人
                                     prmdeptorempidorlineid in number, --0：部门 1：员工 2：线路
                                     io_allrec              out ref_cursor);

  --电子现金未清算报表数据
  procedure proc_thirdunion_consume(prmstartdate           in varchar2, --开始时间
                                    prmenddate             in varchar2, --结束时间
                                    prmisgroup             in number, --0：明细 1：汇总
                                    prmsearchkind          in number, --0:线路汇总 1:车辆汇总 2：日期汇总 3:按人员汇总
                                    prmlineorbusstr        in varchar2, --搜索的线路或者车辆 用逗号分开
                                    prmdept                in varchar2, --部门
                                    prmcustomerunitcode    in varchar2, --客户法人
                                    prmdeptorempidorlineid in number, --0：部门 1：员工 2：线路
                                    io_allrec              out ref_cursor);

  --安县电子现金临时传递数据
  procedure proc_uploadcuprecordresult(prmthirdcardno   in varchar2, --银联卡号
                                       prmmerchantcode  in varchar2, --商户编号
                                       prmuniontermid   in varchar2, --银联终端编号
                                       prmtraderecno    in number, --终端交易流水号
                                       prmopdt          in varchar2, --交易时间，yyyymmddhhmiss
                                       prmopfare        in number, --交易金额
                                       prmunioncstaccfc in varchar2, --银联交易流水号
                                       prmaccountdate   in varchar2, --银联账务日期,yyyymmdd
                                       out_msg          out varchar2,
                                       out_result       out integer);
end;
/
create or replace package body pkg_union_account is

  procedure proc_unionconsume_account(prmthirdcardno   in varchar2, --银联卡号
                                      prmmerchantcode  in varchar2, --商户编号
                                      prmuniontermid   in varchar2, --银联终端编号
                                      prmtraderecno    in number, --终端交易流水号
                                      prmopdt          in varchar2, --交易时间，yyyymmddhhmiss
                                      prmopfare        in number, --交易金额
                                      prmunioncstaccfc in varchar2, --银联交易流水号
                                      prmaccountdate   in varchar2, --银联账务日期,yyyymmdd
                                      prmunionappkey   in varchar2, --应用密文
                                      prmopcount       in number, --卡片交易计数
                                      prmbankcode      in varchar2, --银行代码
                                      prmresultcode    in varchar2, --应答码
                                      prmcstaccfc      in varchar2, --解析结果文件临时表中的流水
                                      prmfilename in varchar2,--文件名
                                      out_msg          out varchar2,
                                      out_result       out integer) as
    n_count            number;
    d_unionopdt        date;
    d_accountdate      date;
    n_acccode          number;
    v_accdscrp         varchar(20); --科目描述
    n_discount         number(10, 2);
    n_cardkind         number;
    n_cardtype         number;
    n_driverid         number;
    n_poscode          number;
    n_samcardno        number;
    n_buslineid        number;
    v_linedept         varchar2(10);
    n_busid            number;
    n_wallettype       number;
    v_customerunitcode varchar2(11);
    n_maincardtype     number;
    i_badrectype       number;
  begin
    out_result  := -1000;
    out_msg     := '记录入库异常';
    n_discount  := 0; --打折金额
    n_cardkind  := 2;
    n_cardtype  := 0;
    n_busid     := 0;
    n_buslineid := 0;
    n_driverid  := 0;
    v_linedept  := '000';
    --
    d_unionopdt   := to_date(prmopdt, 'yyyy-mm-dd hh24:mi:ss'); --交易时间
    d_accountdate := to_date(prmaccountdate, 'yyyy-mm-dd'); --清算时间
  
    ------------------------检查是否正在数据结算-------------------------
    out_result := -1001;
    out_msg    := '检查当前是否正在结算';
  
    proc_validateisbalance(out_result, out_msg);
  
    if (out_result <> 0) --0当前系统未进行结算
     then
      out_result := 101; --返回给采集101，采集上传数据不进行转储继续上传该条数据
      out_msg    := '判断账目结算状态异常，' || out_msg;
      return;
    end if;
  
    ------------------------设置主卡类型，获取科目描述------------------------------ 
    n_maincardtype := 1; --银联卡
    n_acccode      := 204; --电子现金消费支出
    n_wallettype   := 4; --电子现金钱包类型
  
    out_result := -1002;
    out_msg    := '取交易科目描述信息失败！';
  
    select nvl(max(a.accdscrp), '未知')
      into v_accdscrp
      from base_acc_type a
     where a.acccode = n_acccode;
  
    -----------------------------根据银联终端编号及商户号查询终端及商户代码--------------------------------
    out_result := -1003;
    out_msg    := '根据银联终端编号及商户号查询终端及商户代码失败！';
  
    select count(*)
      into n_count
      from base_term_union a
     where a.unionposcode = prmuniontermid
       and a.unionmerchantcode = prmmerchantcode;
  
    if n_count = 0 then
      --更新临时记录表
      update rec_thirdcard_51b a
         set a.status     = 1,
             a.updatedate = sysdate,
             a.resultcode = '0001',
             a.resultdsc  = '找不到对应的商户及终端'
       where cstaccfc = prmcstaccfc;
    
      out_result := 100;
      out_msg    := '测试数据找不到对应的商户及终端，原始数据处理成功';
      commit;
      return;
    
    else
      select a.poscode, a.customerunitcode
        into n_poscode, v_customerunitcode
        from base_term_union a
       where a.unionposcode = prmuniontermid
         and a.unionmerchantcode = prmmerchantcode;
    
      n_samcardno := n_poscode;
    end if;
  
    -------------------------验证终端,车辆，线路，部门是否正确-----------------------------
    out_result := -1004;
    out_msg    := '验证终端,车辆，线路，部门是否正确';
    proc_validatetermbusline(n_poscode,
                             v_customerunitcode,
                             n_busid,
                             n_buslineid,
                             v_linedept,
                             i_badrectype,
                             out_result,
                             out_msg);
  
    if (out_result <> 100) then
      out_result := out_result;
      out_msg    := '查询终端，车辆，线路信息失败,' || out_msg;
      rollback;
      return;
    end if;
  
    --上传的记录是异常记录
    if prmresultcode <> 'y1' and prmresultcode <> 'y3' then
      out_result := -1005;
      out_msg    := '消费记录入统计失败表时，上传统计失败';
    
      --更新临时记录表
      update rec_thirdcard_51b a
         set a.status           = 1,
             a.updatedate       = sysdate,
             a.resultcode       = '0002',
             a.resultdsc        = '记录银联返回为异常账,解析帐目处理成功',
             a.customerunitcode = v_customerunitcode
       where cstaccfc = prmcstaccfc;
    
      out_result := 100;
      out_msg    := '记录银联返回为异常账,解析帐目处理成功';
      commit;
      return;
    else
      ----------------------------------判断重复------------------------------
      out_result := -1006;
      out_msg    := '开始判断成功表中的数据是已存在';
    
      select count(*)
        into n_count
        from rec_thirdcard_consumesucess a
       where a.thirdcardno = prmthirdcardno
         and a.opcount = prmopcount
         and a.opdt = d_unionopdt
         and a.customerunitcode = v_customerunitcode;
    
      if n_count > 0 then
        out_msg := '银联电子现金记录入成功表数据重复';
        return;
      end if;
    
      -------------------------------形成正式帐-----------------------
      out_result := -1007;
      out_msg    := '开始形成银联电子现金交易记录及时统计信息';
    
      --消费记录即时统计
      pkg_st_payment.proc_nolocalaccount_online(to_char(d_unionopdt,
                                                        'yyyymmddhh24miss'),
                                                prmopfare,
                                                n_acccode,
                                                n_discount,
                                                n_cardkind,
                                                n_cardtype, --银联卡卡类型
                                                n_driverid,
                                                n_poscode,
                                                n_samcardno,
                                                n_buslineid,
                                                v_linedept,
                                                n_busid,
                                                n_wallettype,
                                                --钱包类型
                                                0,
                                                --0正常 1回滚统计操作
                                                v_customerunitcode,
                                                to_char(d_accountdate,
                                                        'yyyy-mm-dd hh24:mi:ss'),
                                                to_char(d_accountdate,
                                                        'yyyy-mm-dd hh24:mi:ss'),
                                                to_char(d_accountdate,
                                                        'yyyy-mm-dd hh24:mi:ss'),
                                                out_msg,
                                                out_result,
                                                n_maincardtype);
      if (out_result <> 100) then
        out_result := out_result;
        out_msg    := '银联电子现金记录上传统计失败,' || out_msg;
        rollback;
        return;
      else
        out_result := -1008;
        out_msg    := '开始形成银联电子现金交易成功记录';
      
        insert into rec_thirdcard_consumesucess
          (thirdcardno,
           opdt,
           sumelectraddfare,
           electronoddfare,
           electronopfare,
           acccode,
           dscrp,
           cardtype,
           opcount,
           dealtype,
           busid,
           driverid,
           poscode,
           samcardno,
           cardkind,
           traderecno,
           tac,
           samtradeno,
           buslineid,
           totalrecno,
           discount,
           tradetype,
           linedept,
           tradecitycode,
           ownercitycode,
           maincardtype,
           accountdate,
           wallettype,
           cardownbusiness,
           bankcode,
           merchantcode,
           localcstaccfc,
           batchno,
           uniontermid,
           unionbatchno,
           unionappkey,
           extentvalue,
           customerunitcode,
           filename)
        values
          (prmthirdcardno,
           d_unionopdt,
           0,
           0,
           prmopfare,
           n_acccode,
           v_accdscrp,
           n_cardtype,
           prmopcount,
           1,
           n_busid,
           n_driverid,
           n_poscode,
           n_samcardno,
           n_cardkind,
           0,
           0,
           prmtraderecno,
           n_buslineid,
           0,
           n_discount,
           4,
           v_linedept,
           '',
           '',
           n_maincardtype,
           d_accountdate,
           n_wallettype,
           1,
           prmbankcode,
           prmmerchantcode,
           prmunioncstaccfc,
           prmunioncstaccfc,
           prmuniontermid,
           prmunioncstaccfc,
           prmunionappkey,
           '',
           v_customerunitcode,
           prmfilename);
      
        out_result := -1009;
        out_msg    := '更新解析51b文件的临时记录表失败！';
      
        --更新临时记录表
        update rec_thirdcard_51b a
           set a.status           = 1,
               a.updatedate       = sysdate,
               a.resultcode       = '0000',
               a.resultdsc        = '处理为正常帐成功',
               a.customerunitcode = v_customerunitcode
         where cstaccfc = prmcstaccfc;
      end if;
    
      out_result := 100;
      out_msg    := '入库成功';
      commit;
      return;
    end if;
  exception
    when others then
      rollback;
      out_result := out_result;
      out_msg    := out_msg || '银联电子现金入库异常_+_' || sqlerrm;
  end;

  procedure proc_unionconsume_result(prmthirdcardno   in varchar2, --银联卡号
                                     prmmerchantcode  in varchar2, --商户编号
                                     prmuniontermid   in varchar2, --银联终端编号
                                     prmtraderecno    in number, --终端交易流水号
                                     prmopdt          in varchar2, --交易时间，yyyymmdd
                                     prmopfare        in number, --交易金额
                                     prmunioncstaccfc in varchar2, --银联交易流水号
                                     prmaccountdate   in varchar2, --银联账务日期,yyyymmdd
                                     out_msg          out varchar2,
                                     out_result       out integer) as
    n_count          number;
    d_accountdate    date;
    n_status         number;
    d_opdt           date;
    n_acccode        number;
    n_discount       number(10, 2);
    n_cardkind       number;
    n_cardtype       number;
    n_driverid       number;
    n_poscode        number;
    n_samcardno      number;
    n_buslineid      number;
    v_linedept       varchar2(10);
    n_busid          number;
    n_cardareaid     number;
    n_dptareaid      number;
    n_wallettype     number;
    v_merchantcode   varchar2(15);
    v_uniontermid    varchar2(8);
    n_electronopfare number(12, 2);
    n_isuseflag      number; --是否分段计费记录，1分段计费 0 普通票价
    n_flag           number; --是否逃票记录 0 正常记录 1 逃票记录
    n_tbusno         number; --逃票车辆
    n_tposcode       number; --逃票终端编号
    v_custunitcode   varchar2(12);
  begin
    out_result    := -1000;
    out_msg       := '记录入库异常';
    n_status      := 0;
    d_accountdate := to_date(prmaccountdate, 'yyyy-mm-dd');
    out_result    := -1001;
    out_msg       := '开始形成银联电子现金交易记录';
  
    select count(*)
      into n_count
      from rec_thirdcard_consume a
     where a.merchantcode = prmmerchantcode
       and a.thirdcardno = prmthirdcardno
       and a.uniontermid = prmuniontermid
       and a.opcount = prmtraderecno
       and a.status = 0;
  
    if n_count > 0 then
      --获取统计过程参数
      select a.opdt,
             a.acccode,
             a.discount,
             a.cardkind,
             a.cardtype,
             a.driverid,
             a.poscode,
             a.samcardno,
             a.buslineid,
             a.linedept,
             a.busid,
             a.wallettype,
             a.merchantcode,
             a.uniontermid,
             a.electronopfare,
             a.recordtype,
             a.flag,
             a.freeposcode,
             a.customerunitcode
        into d_opdt,
             n_acccode,
             n_discount,
             n_cardkind,
             n_cardtype,
             n_driverid,
             n_poscode,
             n_samcardno,
             n_buslineid,
             v_linedept,
             n_busid,
             n_wallettype,
             v_merchantcode,
             v_uniontermid,
             n_electronopfare,
             n_isuseflag,
             n_flag,
             n_tbusno,
             v_custunitcode
        from rec_thirdcard_consume a
       where a.merchantcode = prmmerchantcode
         and a.thirdcardno = prmthirdcardno
         and a.uniontermid = prmuniontermid
         and a.opcount = prmtraderecno;
    
      --上传的记录是异常记录
      if prmunioncstaccfc <> '800' then
        insert into rec_thirdcard_unsettled
          (thirdcardno,
           opdt,
           sumelectraddfare,
           electronoddfare,
           electronopfare,
           acccode,
           dscrp,
           cardtype,
           opcount,
           dealtype,
           collectdt,
           uploaddate,
           busid,
           driverid,
           poscode,
           samcardno,
           cardkind,
           traderecno,
           tac,
           samtradeno,
           buslineid,
           totalrecno,
           discount,
           tradetype,
           linedept,
           repealempid,
           electrdummyopfare,
           tradecitycode,
           ownercitycode,
           maincardtype,
           assocardtype,
           cardversion,
           tradekind,
           testflag,
           operatorpoint,
           collectpoint,
           accountdate,
           wallettype,
           cardownbusiness,
           bankcode,
           merchantcode,
           localcstaccfc,
           batchno,
           uniontermid,
           unionbatchno,
           unionappkey,
           status,
           extentvalue,
           badtype,
           customerunitcode)
          select a.thirdcardno,
                 a.opdt,
                 a.sumelectraddfare,
                 a.electronoddfare,
                 a.electronopfare,
                 a.acccode,
                 a.dscrp,
                 a.cardtype,
                 a.opcount,
                 a.dealtype,
                 a.collectdt,
                 a.uploaddate,
                 a.busid,
                 a.driverid,
                 a.poscode,
                 a.samcardno,
                 a.cardkind,
                 a.traderecno,
                 a.tac,
                 a.samtradeno,
                 a.buslineid,
                 a.totalrecno,
                 a.discount,
                 a.tradetype,
                 a.linedept,
                 a.repealempid,
                 a.electrdummyopfare,
                 a.tradecitycode,
                 a.ownercitycode,
                 a.maincardtype,
                 a.assocardtype,
                 a.cardversion,
                 a.tradekind,
                 a.testflag,
                 a.operatorpoint,
                 a.collectpoint,
                 d_accountdate,
                 a.wallettype,
                 a.cardownbusiness,
                 a.bankcode,
                 a.merchantcode,
                 a.localcstaccfc,
                 a.batchno,
                 a.uniontermid,
                 a.unionbatchno,
                 a.unionappkey,
                 a.status,
                 a.extentvalue,
                 prmunioncstaccfc,
                 a.customerunitcode
            from rec_thirdcard_consume a
           where a.merchantcode = prmmerchantcode
             and a.thirdcardno = prmthirdcardno
             and a.uniontermid = prmuniontermid
             and a.opcount = prmtraderecno;
      
        --将记录入统计记录表
        pkg_st_payment.stat_thirdcardconsume_account(to_char(d_opdt,
                                                             'yyyymmddhh24miss'),
                                                     n_electronopfare,
                                                     n_acccode,
                                                     n_discount,
                                                     n_cardkind,
                                                     n_cardtype,
                                                     n_driverid,
                                                     n_poscode,
                                                     n_samcardno,
                                                     n_buslineid,
                                                     v_linedept,
                                                     n_busid,
                                                     n_wallettype,
                                                     --钱包类型
                                                     0,
                                                     --0正常 1回滚统计操作
                                                     v_merchantcode,
                                                     v_uniontermid,
                                                     d_accountdate,
                                                     0, --交易记录处理失败
                                                     v_custunitcode,
                                                     out_msg,
                                                     out_result);
      
        if (out_result <> 100) then
          out_result := out_result;
          out_msg    := '记录上传统计失败,' || out_msg;
          rollback;
          return;
        end if;
      
        --更新临时记录表
        update rec_thirdcard_consume
           set status = 1, accountdate = d_accountdate
         where merchantcode = prmmerchantcode
           and thirdcardno = prmthirdcardno
           and uniontermid = prmuniontermid
           and opcount = prmtraderecno;
      
        commit;
        out_result := 100;
        out_msg    := '记录入异常账目表成功';
        --银联校验成功
      else
        insert into rec_thirdcard_consumesucess
          (thirdcardno,
           opdt,
           sumelectraddfare,
           electronoddfare,
           electronopfare,
           acccode,
           dscrp,
           cardtype,
           opcount,
           dealtype,
           collectdt,
           uploaddate,
           busid,
           driverid,
           poscode,
           samcardno,
           cardkind,
           traderecno,
           tac,
           samtradeno,
           buslineid,
           totalrecno,
           discount,
           tradetype,
           linedept,
           repealempid,
           electrdummyopfare,
           tradecitycode,
           ownercitycode,
           maincardtype,
           assocardtype,
           cardversion,
           tradekind,
           testflag,
           operatorpoint,
           collectpoint,
           accountdate,
           wallettype,
           cardownbusiness,
           bankcode,
           merchantcode,
           localcstaccfc,
           batchno,
           uniontermid,
           unionbatchno,
           unionappkey,
           extentvalue,
           customerunitcode)
          select a.thirdcardno,
                 a.opdt,
                 a.sumelectraddfare,
                 a.electronoddfare,
                 a.electronopfare,
                 a.acccode,
                 a.dscrp,
                 a.cardtype,
                 a.opcount,
                 a.dealtype,
                 a.collectdt,
                 a.uploaddate,
                 a.busid,
                 a.driverid,
                 a.poscode,
                 a.samcardno,
                 a.cardkind,
                 a.traderecno,
                 a.tac,
                 a.samtradeno,
                 a.buslineid,
                 a.totalrecno,
                 a.discount,
                 a.tradetype,
                 a.linedept,
                 a.repealempid,
                 a.electrdummyopfare,
                 a.tradecitycode,
                 a.ownercitycode,
                 a.maincardtype,
                 a.assocardtype,
                 a.cardversion,
                 a.tradekind,
                 a.testflag,
                 a.operatorpoint,
                 a.collectpoint,
                 d_accountdate,
                 a.wallettype,
                 a.cardownbusiness,
                 a.bankcode,
                 a.merchantcode,
                 a.localcstaccfc,
                 a.batchno,
                 a.uniontermid,
                 a.unionbatchno,
                 a.unionappkey,
                 a.extentvalue,
                 a.customerunitcode
            from rec_thirdcard_consume a
           where a.merchantcode = prmmerchantcode
             and a.thirdcardno = prmthirdcardno
             and a.uniontermid = prmuniontermid
             and a.opcount = prmtraderecno;
      
        --将记录入统计记录表
        pkg_st_payment.stat_thirdcardconsume_account(to_char(d_opdt,
                                                             'yyyymmddhh24miss'),
                                                     n_electronopfare,
                                                     n_acccode,
                                                     n_discount,
                                                     n_cardkind,
                                                     n_cardtype,
                                                     n_driverid,
                                                     n_poscode,
                                                     n_samcardno,
                                                     n_buslineid,
                                                     v_linedept,
                                                     n_busid,
                                                     n_wallettype,
                                                     --钱包类型
                                                     0,
                                                     --0正常 1回滚统计操作
                                                     v_merchantcode,
                                                     v_uniontermid,
                                                     d_accountdate,
                                                     1, --交易记录处理失败
                                                     v_custunitcode,
                                                     out_msg,
                                                     out_result);
      
        if (out_result <> 100) then
          out_result := out_result;
          out_msg    := '记录上传统计失败,' || out_msg;
          rollback;
          return;
        end if;
      
        --更新临时记录表
        update rec_thirdcard_consume
           set status = 1, accountdate = d_accountdate
         where merchantcode = prmmerchantcode
           and thirdcardno = prmthirdcardno
           and uniontermid = prmuniontermid
           and opcount = prmtraderecno;
      
        commit;
        out_result := 100;
        out_msg    := '记录入正常账目表成功';
      end if;
    end if;
  exception
    when others then
      rollback;
      out_result := out_result;
      out_msg    := out_msg || '异常_+_' || sqlerrm;
  end;

  --电子现金以清算报表数据
  procedure proc_thirdunion_accounts(prmstartdate  in varchar2, --开始时间
                                     prmenddate    in varchar2, --结束时间
                                     prmissuccess  in number, --是否清算成功  1:成功 0：失败
                                     prmisgroup    in number, --0：明细 1：汇总
                                     prmsearchkind in number,
                                     --0:线路搜索 1:车辆搜索 2：日期搜索  3:司机搜索  4:车辆日期
                                     prmlineorbusstr in varchar2,
                                     --搜索的线路或者车辆 用逗号分开
                                     prmdept                in varchar2, --部门
                                     prmcustomerunitcode    in varchar2, --客户法人
                                     prmdeptorempidorlineid in number, --0：部门 1：员工 2：线路
                                     io_allrec              out ref_cursor) as
    sqlstr varchar2(4000);
  begin
    if prmisgroup = 0 then
      --明细，日期范围采用交易日期
      --加上交易时间条件
      sqlstr := '  to_date(trunc(a.opdt,''dd''))>=to_date(''' ||
                prmstartdate ||
                ''', ''yyyy-mm-dd'') and to_date(trunc(a.opdt,''dd''))<=to_date(''' ||
                prmenddate || ''', ''yyyy-mm-dd'') ';
    
      --部门 包含下级部门
      if prmdept <> 'root' then
        if prmdeptorempidorlineid = 0 then
          --部门
          sqlstr := sqlstr ||
                    ' and exists( select 1
from base_dept t1 where t1.dptcode=a.linedept and t1.customerunitcode = ''' ||
                    prmcustomerunitcode || ''' connect by t1.dptcode_p = prior t1.dptcode start with
 t1.dptcode=''' || prmdept ||
                    ''' and t1.customerunitcode =''' || prmcustomerunitcode ||
                    ''' )  ';
        else
          sqlstr := sqlstr || ' and a.buslineid=' || prmdept;
        end if;
      end if;
    else
      --汇总采用清算日期
      --加上客户法人，时间条件
      sqlstr := 'a.customerunitcode=''' || prmcustomerunitcode ||
                ''' and a.balancedate>=to_date(''' || prmstartdate ||
                ''', ''yyyy-mm-dd'') and a.balancedate<=to_date(''' ||
                prmenddate || ''', ''yyyy-mm-dd'') ';
    
      --部门 包含下级部门
      if prmdept <> 'root' then
        if prmdeptorempidorlineid = 0 then
          --部门
          sqlstr := sqlstr ||
                    ' and exists( select 1
from base_dept t1 where t1.dptcode=a.dptcode and t1.customerunitcode = ''' ||
                    prmcustomerunitcode || ''' connect by t1.dptcode_p = prior t1.dptcode start with
 t1.dptcode=''' || prmdept ||
                    ''' and t1.customerunitcode =''' || prmcustomerunitcode ||
                    ''' )  ';
        else
          sqlstr := sqlstr || ' and a.buslineid=' || prmdept;
        end if;
      end if;
    end if;
  
    if prmisgroup = 0 then
      --明细
      if prmissuccess = 1 then
        --清算成功
        if prmsearchkind = 0 then
          --按线路搜索
          sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_consumesucess a left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                    sqlstr;
        
          if prmdeptorempidorlineid = 0 then
            --部门
            sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
          else
            if length(prmlineorbusstr) > 0 then
              sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
            end if;
          end if;
        
          sqlstr := sqlstr || ' and a.customerunitcode=''' ||
                    prmcustomerunitcode ||
                    ''' and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
        else
          if prmsearchkind = 1 or prmsearchkind = 4 then
            --按车辆搜索
            sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_consumesucess a  left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid  left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                      sqlstr;
          
            if prmdeptorempidorlineid = 0 then
              --部门
              sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
            else
              if length(prmlineorbusstr) > 0 then
                sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
              end if;
            end if;
          
            sqlstr := sqlstr || ' and a.customerunitcode=''' ||
                      prmcustomerunitcode ||
                      ''' and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
          else
            if prmsearchkind = 3 then
              --按司机搜索
              sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_consumesucess a  left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid  left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                        sqlstr;
            
              if prmdeptorempidorlineid = 0 then
                --部门
                sqlstr := sqlstr || ' and a.driverid in(' ||
                          prmlineorbusstr || ')';
              else
                if length(prmlineorbusstr) > 0 then
                  sqlstr := sqlstr || ' and a.driverid in(' ||
                            prmlineorbusstr || ')';
                end if;
              end if;
            
              sqlstr := sqlstr || ' and a.customerunitcode=''' ||
                        prmcustomerunitcode ||
                        ''' and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
            else
              sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_consumesucess a  left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid  left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                        sqlstr;
              sqlstr := sqlstr || ' and a.customerunitcode=''' ||
                        prmcustomerunitcode ||
                        '''  and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
            end if;
          end if;
        end if;
      else
        --清算失败
        if prmsearchkind = 0 then
          --按线路汇总
          sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_unsettled a left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno  left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid  left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                    sqlstr;
        
          if prmdeptorempidorlineid = 0 then
            --部门
            sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
          else
            if length(prmlineorbusstr) > 0 then
              sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
            end if;
          end if;
        
          sqlstr := sqlstr || ' and  a.customerunitcode=''' ||
                    prmcustomerunitcode ||
                    '''  and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
        else
          if prmsearchkind = 1 or prmsearchkind = 4 then
            --按车辆汇总
            sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_unsettled a left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno  left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid  left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                      sqlstr;
          
            if prmdeptorempidorlineid = 0 then
              --部门
              sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
            else
              if length(prmlineorbusstr) > 0 then
                sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
              end if;
            end if;
          
            sqlstr := sqlstr || ' and  a.customerunitcode=''' ||
                      prmcustomerunitcode ||
                      '''   and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
          else
            if prmsearchkind = 3 then
              --按司机搜索
              sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_unsettled a left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno  left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid  left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                        sqlstr;
            
              if prmdeptorempidorlineid = 0 then
                --部门
                sqlstr := sqlstr || ' and a.driverid in(' ||
                          prmlineorbusstr || ')';
              else
                if length(prmlineorbusstr) > 0 then
                  sqlstr := sqlstr || ' and a.driverid in(' ||
                            prmlineorbusstr || ')';
                end if;
              end if;
            
              sqlstr := sqlstr || ' and  a.customerunitcode=''' ||
                        prmcustomerunitcode ||
                        '''   and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
            else
              sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_unsettled a left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno  left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid  left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                        sqlstr;
              sqlstr := sqlstr || ' and a.customerunitcode=''' ||
                        prmcustomerunitcode ||
                        '''  and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
            end if;
          end if;
        end if;
      end if;
    else
      --汇总
      if prmissuccess = 1 then
        --清算成功
        if prmsearchkind = 0 then
          --按线路汇总
          sqlstr := 'select to_char(a.buslineid) as buslineid,b.linename,sum(a.operno) as operno,sum(a.opermn) as opermn,sum(a.discountmn)  as discountmn from st_payment_consum_day a  left join base_busline b on a.customerunitcode=b.customerunitcode and a.buslineid=b.lineid where ' ||
                    sqlstr;
        
          if prmdeptorempidorlineid = 0 then
            --部门
            sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
          else
            if length(prmlineorbusstr) > 0 then
              sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
            end if;
          end if;
        
          sqlstr := sqlstr ||
                    ' and a.acccode=204 and b.isdelete=0  group by a.buslineid,b.linename order by a.buslineid';
        else
          if prmsearchkind = 1 then
            --按车辆汇总
            sqlstr := 'select to_char(a.buslineid) as buslineid,c.linename,to_char(a.busid) busid,b.busnumber,sum(a.operno) as operno,sum(a.opermn) as opermn,sum(a.discountmn)  as discountmn from st_payment_consum_day a  left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid where ' ||
                      sqlstr;
          
            if prmdeptorempidorlineid = 0 then
              --部门
              sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
            else
              if length(prmlineorbusstr) > 0 then
                sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
              end if;
            end if;
          
            sqlstr := sqlstr ||
                      ' and a.acccode=204 and b.isdelete=0  group by a.buslineid,c.linename,a.busid,b.busnumber order by buslineid,busid';
          else
            if prmsearchkind = 2 then
              --按日期汇总
              sqlstr := ' select trunc(a.balancedate,''dd'') as balancedate,sum(a.operno) as operno,sum(a.opermn) as opermn,sum(a.discountmn)  as discountmn from st_payment_consum_day a  where ' ||
                        sqlstr;
              sqlstr := sqlstr ||
                        ' and a.acccode=204  group by trunc(a.balancedate,''dd'') order by balancedate';
            else
              if prmsearchkind = 3 then
                --按司机汇总
                sqlstr := 'select a.driverid,b.userid,b.empname,sum(a.operno) as operno,sum(a.opermn) as opermn,sum(a.discountmn)  as discountmn from st_payment_consum_day a  left join base_emp b on a.customerunitcode=b.customerunitcode and a.driverid=b.empid where ' ||
                          sqlstr;
              
                if prmdeptorempidorlineid = 0 then
                  --部门
                  sqlstr := sqlstr || ' and a.driverid in(' ||
                            prmlineorbusstr || ')';
                else
                  if length(prmlineorbusstr) > 0 then
                    sqlstr := sqlstr || ' and a.driverid in(' ||
                              prmlineorbusstr || ')';
                  end if;
                end if;
              
                sqlstr := sqlstr ||
                          ' and a.acccode=204 and b.isdelete=0  group by a.driverid,b.userid,b.empname order by a.driverid';
              else
                if prmsearchkind = 4 then
                  sqlstr := 'select to_char(a.buslineid) as buslineid,c.linename,to_char(a.busid) busid,b.busnumber,trunc(a.balancedate,''dd'') as balancedate,sum(a.operno) as operno,sum(a.opermn) as opermn,sum(a.discountmn)  as discountmn from st_payment_consum_day a  left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid where ' ||
                            sqlstr;
                
                  if prmdeptorempidorlineid = 0 then
                    --部门
                    sqlstr := sqlstr || ' and a.busid in(' ||
                              prmlineorbusstr || ')';
                  else
                    if length(prmlineorbusstr) > 0 then
                      sqlstr := sqlstr || ' and a.busid in(' ||
                                prmlineorbusstr || ')';
                    end if;
                  end if;
                
                  sqlstr := sqlstr ||
                            ' and a.acccode=204 and b.isdelete=0  group by a.buslineid,c.linename,a.busid,b.busnumber,trunc(a.balancedate,''dd'') order by buslineid,busid,balancedate';
                end if;
              end if;
            end if;
          end if;
        end if;
      else
        if prmsearchkind = 0 then
          --按线路汇总
          sqlstr := 'select to_char(a.buslineid) as buslineid,b.linename,sum(a.operno) as operno,sum(a.opermn) as opermn,sum(a.discountmn)  as discountmn from st_payment_third_unsettle a  left join base_busline b on a.customerunitcode=b.customerunitcode and a.buslineid=b.lineid where ' ||
                    sqlstr;
        
          if prmdeptorempidorlineid = 0 then
            --部门
            sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
          else
            if length(prmlineorbusstr) > 0 then
              sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
            end if;
          end if;
        
          sqlstr := sqlstr ||
                    ' and a.acccode=204 and b.isdelete=0  group by a.buslineid,b.linename order by a.buslineid';
        else
          if prmsearchkind = 1 then
            --按车辆汇总
            sqlstr := 'select to_char(a.buslineid) as buslineid,c.linename,to_char(a.busid) busid,b.busnumber,sum(a.operno) as operno,sum(a.opermn) as opermn,sum(a.discountmn)  as discountmn from st_payment_third_unsettle a  left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid where ' ||
                      sqlstr;
          
            if prmdeptorempidorlineid = 0 then
              --部门
              sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
            else
              if length(prmlineorbusstr) > 0 then
                sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
              end if;
            end if;
          
            sqlstr := sqlstr ||
                      ' and a.acccode=204 and b.isdelete=0  group by a.buslineid,c.linename,a.busid,b.busnumber order by buslineid,busid';
          else
            if prmsearchkind = 2 then
              --按日期汇总
              sqlstr := ' select trunc(a.balancedate,''dd'') as balancedate,sum(a.operno) as operno,sum(a.opermn) as opermn,sum(a.discountmn)  as discountmn from st_payment_third_unsettle a  where ' ||
                        sqlstr;
              sqlstr := sqlstr ||
                        ' and a.acccode=204  group by trunc(a.balancedate,''dd'') order by balancedate';
            else
              if prmsearchkind = 3 then
                --按司机汇总
                sqlstr := 'select a.empid,b.userid,b.empname,sum(a.operno) as operno,sum(a.opermn) as opermn,sum(a.discountmn)  as discountmn from st_payment_third_unsettle a  left join base_emp b on a.customerunitcode=b.customerunitcode and a.empid=b.empid where ' ||
                          sqlstr;
              
                if prmdeptorempidorlineid = 0 then
                  --部门
                  sqlstr := sqlstr || ' and a.empid in(' || prmlineorbusstr || ')';
                else
                  if length(prmlineorbusstr) > 0 then
                    sqlstr := sqlstr || ' and a.empid in(' ||
                              prmlineorbusstr || ')';
                  end if;
                end if;
              
                sqlstr := sqlstr ||
                          ' and a.acccode=204 and b.isdelete=0  group by a.empid,b.userid,b.empname order by a.empid';
              else
                if prmsearchkind = 4 --车辆日期
                 then
                  sqlstr := 'select to_char(a.buslineid) as buslineid,c.linename,to_char(a.busid) busid,b.busnumber,trunc(a.balancedate,''dd'') as balancedate,sum(a.operno) as operno,sum(a.opermn) as opermn,sum(a.discountmn)  as discountmn from st_payment_third_unsettle a  left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid where ' ||
                            sqlstr;
                
                  if prmdeptorempidorlineid = 0 then
                    --部门
                    sqlstr := sqlstr || ' and a.busid in(' ||
                              prmlineorbusstr || ')';
                  else
                    if length(prmlineorbusstr) > 0 then
                      sqlstr := sqlstr || ' and a.busid in(' ||
                                prmlineorbusstr || ')';
                    end if;
                  end if;
                
                  sqlstr := sqlstr ||
                            ' and a.acccode=204 and b.isdelete=0  group by a.buslineid,c.linename,a.busid,b.busnumber,trunc(a.balancedate,''dd'') order by buslineid,busid,balancedate';
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  
    open io_allrec for sqlstr;
  end;

  --电子现金未清算报表数据
  procedure proc_thirdunion_consume(prmstartdate  in varchar2, --开始时间
                                    prmenddate    in varchar2, --结束时间
                                    prmisgroup    in number, --0：明细 1：汇总
                                    prmsearchkind in number,
                                    --0:线路汇总 1:车辆汇总 2：日期汇总 3:按人员汇总 4:车辆日期
                                    prmlineorbusstr in varchar2,
                                    --搜索的线路或者车辆 用逗号分开
                                    prmdept                in varchar2, --部门
                                    prmcustomerunitcode    in varchar2, --客户法人
                                    prmdeptorempidorlineid in number, --0：部门 1：员工 2：线路
                                    io_allrec              out ref_cursor) as
    sqlstr varchar2(4000);
  begin
    --加上交易时间条件  汇总和明细都采用交易时间
    sqlstr := ' a.customerunitcode=''' || prmcustomerunitcode ||
              ''' and a.status=0 and to_date(trunc(a.opdt,''dd''))>=to_date(''' ||
              prmstartdate ||
              ''', ''yyyy-mm-dd'') and to_date(trunc(a.opdt,''dd''))<=to_date(''' ||
              prmenddate || ''', ''yyyy-mm-dd'') ';
  
    --部门 包含下级部门
    if prmdept <> 'root' then
      if prmdeptorempidorlineid = 0 then
        --部门
        sqlstr := sqlstr ||
                  ' and exists( select 1
from base_dept t1 where t1.dptcode=a.linedept and t1.customerunitcode = ''' ||
                  prmcustomerunitcode || ''' connect by t1.dptcode_p = prior t1.dptcode start with
 t1.dptcode=''' || prmdept ||
                  ''' and t1.customerunitcode =''' || prmcustomerunitcode ||
                  ''' )  ';
      else
        sqlstr := sqlstr || ' and a.buslineid=' || prmdept;
      end if;
    end if;
  
    if prmisgroup = 0 then
      --明细
      if prmsearchkind = 0 then
        --按线路搜索
        sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_consume a left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                  sqlstr;
      
        if prmdeptorempidorlineid = 0 then
          --部门
          sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
        else
          if length(prmlineorbusstr) > 0 then
            sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
          end if;
        end if;
      
        sqlstr := sqlstr ||
                  '  and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
      else
        if prmsearchkind = 1 then
          --按车辆搜索
          sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_consume a left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid  left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                    sqlstr;
        
          if prmdeptorempidorlineid = 0 then
            --部门
            sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
          else
            if length(prmlineorbusstr) > 0 then
              sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
            end if;
          end if;
        
          sqlstr := sqlstr ||
                    '  and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
        else
          if prmsearchkind = 3 or prmsearchkind = 4 then
            --按司机搜索
            sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_consume a left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid  left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                      sqlstr;
          
            if prmdeptorempidorlineid = 0 then
              --部门
              sqlstr := sqlstr || ' and a.driverid in(' || prmlineorbusstr || ')';
            else
              if length(prmlineorbusstr) > 0 then
                sqlstr := sqlstr || ' and a.driverid in(' ||
                          prmlineorbusstr || ')';
              end if;
            end if;
          
            sqlstr := sqlstr ||
                      '   and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
          else
            --按日期搜索
            sqlstr := 'select e.empname,b.busnumber,to_char(a.poscode) as poscode,c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount from rec_thirdcard_consume a left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid  left join base_emp e on a.customerunitcode=e.customerunitcode and a.driverid=e.empid  where ' ||
                      sqlstr;
            sqlstr := sqlstr ||
                      ' and b.isdelete=0 and c.isdelete=0 and e.isdelete=0 order by a.buslineid,a.busid,e.empname,a.opdt ';
          end if;
        end if;
      end if;
    else
      --汇总
      if prmsearchkind = 0 then
        --按线路汇总
        sqlstr := 'select to_char(a.buslineid) as buslineid,b.linename,count(*) as operno,sum(a.electronopfare) as opermn,sum(a.discount) as discountmn from rec_thirdcard_consume a  left join base_busline b on a.customerunitcode=b.customerunitcode and a.buslineid=b.lineid where ' ||
                  sqlstr;
      
        if prmdeptorempidorlineid = 0 then
          --部门
          sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
        else
          if length(prmlineorbusstr) > 0 then
            sqlstr := sqlstr || ' and a.buslineid in(' || prmlineorbusstr || ')';
          end if;
        end if;
      
        sqlstr := sqlstr ||
                  ' and b.isdelete=0  group by a.buslineid,b.linename order by a.buslineid';
      else
        if prmsearchkind = 1 then
          --按车辆汇总
          sqlstr := 'select c.linename,to_char(a.busid) busid,b.busnumber,count(*) as operno,sum(a.electronopfare) as opermn,sum(a.discount) as discountmn from rec_thirdcard_consume a left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid where ' ||
                    sqlstr;
        
          if prmdeptorempidorlineid = 0 then
            --部门
            sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
          else
            if length(prmlineorbusstr) > 0 then
              sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
            end if;
          end if;
        
          sqlstr := sqlstr ||
                    ' and b.isdelete=0  group by a.buslineid,c.linename,a.busid,b.busnumber order by a.buslineid,a.busid';
        else
          if prmsearchkind = 2 then
            --按日期汇总
            sqlstr := ' select to_char(a.opdt,''yyyy-mm-dd'') as opdt,count(*) as operno,sum(a.electronopfare) as opermn,sum(a.discount)  as discountmn from rec_thirdcard_consume a  where ' ||
                      sqlstr;
            sqlstr := sqlstr ||
                      ' group by to_char(a.opdt,''yyyy-mm-dd'') order by opdt';
          else
            if prmsearchkind = 3 then
              --按司机汇总
              sqlstr := 'select a.driverid,b.userid,b.empname,count(*) as operno,sum(a.electronopfare) as opermn,sum(a.discount)  as discountmn from rec_thirdcard_consume a   left join base_emp b on a.customerunitcode=b.customerunitcode and a.driverid=b.empid where ' ||
                        sqlstr;
            
              if prmdeptorempidorlineid = 0 then
                --部门
                sqlstr := sqlstr || ' and a.driverid in(' ||
                          prmlineorbusstr || ')';
              else
                if length(prmlineorbusstr) > 0 then
                  sqlstr := sqlstr || ' and a.driverid in(' ||
                            prmlineorbusstr || ')';
                end if;
              end if;
            
              sqlstr := sqlstr ||
                        ' and  b.isdelete=0  group by a.driverid,b.userid,b.empname order by a.driverid';
            else
              --按车辆日期
              sqlstr := 'select c.linename,to_char(a.busid) busid,b.busnumber,trunc(a.opdt,''dd'') as opdt,count(*) as operno,sum(a.electronopfare) as opermn,sum(a.discount) as discountmn from rec_thirdcard_consume a  left join base_bus b on a.customerunitcode=b.customerunitcode and a.busid=b.busno left join base_busline c on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid where ' ||
                        sqlstr;
            
              if prmdeptorempidorlineid = 0 then
                --部门
                sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
              else
                if length(prmlineorbusstr) > 0 then
                  sqlstr := sqlstr || ' and a.busid in(' || prmlineorbusstr || ')';
                end if;
              end if;
            
              sqlstr := sqlstr ||
                        ' and b.isdelete=0  group by a.buslineid,c.linename,a.busid,b.busnumber,trunc(a.opdt,''dd'')  order by a.buslineid,a.busid,opdt';
            end if;
          end if;
        end if;
      end if;
    end if;
  
    open io_allrec for sqlstr;
  end;

  --安县电子现金临时传递数据
  procedure proc_uploadcuprecordresult(prmthirdcardno   in varchar2, --银联卡号
                                       prmmerchantcode  in varchar2, --商户编号
                                       prmuniontermid   in varchar2, --银联终端编号
                                       prmtraderecno    in number, --终端交易流水号
                                       prmopdt          in varchar2, --交易时间，yyyymmddhhmiss
                                       prmopfare        in number, --交易金额
                                       prmunioncstaccfc in varchar2, --银联交易流水号
                                       prmaccountdate   in varchar2, --银联账务日期,yyyymmdd
                                       out_msg          out varchar2,
                                       out_result       out integer) as
    n_count          number;
    d_unionopdt      date;
    d_accountdate    date;
    n_status         number;
    d_opdt           date;
    n_acccode        number;
    n_discount       number(10, 2);
    n_cardkind       number;
    n_cardtype       number;
    n_driverid       number;
    n_poscode        number;
    n_samcardno      number;
    n_buslineid      number;
    v_linedept       varchar2(10);
    n_busid          number;
    n_cardareaid     number;
    n_dptareaid      number;
    n_wallettype     number;
    v_merchantcode   varchar2(15);
    v_uniontermid    varchar2(8);
    n_electronopfare number(12, 2);
    n_isuseflag      number; --是否分段计费记录，1分段计费 0 普通票价
    n_flag           number; --是否逃票记录 0 正常记录 1 逃票记录
    n_tbusno         number; --逃票车辆
    n_tposcode       number; --逃票终端编号
  
    v_custunitcode varchar2(12);
    v_poscode      number;
    v_accdesc      varchar2(50);
    v_termthirdno  number; --银联对账终端序列号
    v_citycode     number;
  begin
    out_result := 10;
    out_msg    := '记录入库异常';
    n_status   := 0;
    --
    d_unionopdt   := to_date(prmopdt, 'yyyy-mm-dd hh24:mi:ss');
    d_accountdate := to_date(prmaccountdate, 'yyyy-mm-dd');
    out_result    := 11;
    out_msg       := '开始形成银联电子现金交易记录';
  
    select count(*)
      into n_count
      from rec_thirdcard_consume a
     where a.merchantcode = prmmerchantcode
       and a.thirdcardno = prmthirdcardno
       and a.uniontermid = prmuniontermid
       and a.opcount = prmtraderecno
       and a.opdt = to_date(prmopdt, 'yyyy-mm-dd hh24:mi:ss');
  
    if n_count = 0 then
      --根据银联终端号获取信息
      select a.poscode, unionmerchantcode, termthridseqno, customerunitcode
        into v_poscode, v_merchantcode, v_termthirdno, v_custunitcode
        from base_term_union a
       where a.unionposcode = prmuniontermid;
    
      if v_termthirdno >= 999999 then
        v_termthirdno := 1;
      else
        v_termthirdno := v_termthirdno + 1;
      end if;
    
      out_result := 12;
      out_msg    := '获取终端poscode成功';
    
      n_acccode := 204; --电子现金消费科目
    
      select a.accdscrp
        into v_accdesc
        from base_acc_type a
       where a.acccode = n_acccode;
    
      --获取城市代码
      select citycode into v_citycode from base_syspara a;
    
      --根据银联终端号获取到的poscode获取车辆、线路、部门
      select a.busno, a.lineid, a.dptcode
        into n_busid, n_buslineid, v_linedept
        from base_bus a
       where a.poscode = v_poscode;
    
      out_result := 13;
      out_msg    := '记录开始入库';
    
      --形成临时电子钱包消费记录
      insert into rec_thirdcard_consume
        (thirdcardno,
         cardtype,
         opdt,
         sumelectraddfare,
         electronoddfare,
         electronopfare,
         acccode,
         dscrp,
         opcount,
         dealtype,
         status,
         collectdt,
         uploaddate,
         busid,
         driverid,
         poscode,
         samcardno,
         cardkind,
         traderecno,
         tac,
         samtradeno,
         buslineid,
         totalrecno,
         discount,
         tradetype,
         linedept,
         tradecitycode,
         ownercitycode,
         maincardtype,
         assocardtype,
         cardversion,
         tradekind,
         testflag,
         collectpoint,
         operatorpoint,
         cardownbusiness,
         wallettype,
         merchantcode,
         uniontermid,
         localcstaccfc,
         batchno,
         unionbatchno,
         unionappkey,
         extentvalue,
         recordtype,
         flag,
         freeposcode,
         upstopid,
         downstopid,
         customerunitcode,
         termthridseqno)
      values
        (prmthirdcardno,
         0,
         prmopdt,
         0,
         0,
         prmopfare,
         n_acccode,
         v_accdesc,
         0,
         1,
         0,
         to_date(prmopdt, 'yyyy-mm-dd hh24:mi:ss'),
         sysdate,
         n_busid,
         0,
         n_poscode,
         0,
         2,
         prmtraderecno,
         0,
         0,
         n_buslineid,
         0,
         0,
         1,
         v_linedept,
         v_citycode,
         v_citycode,
         0,
         1,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         v_merchantcode,
         prmuniontermid,
         0,
         0,
         '',
         '',
         '',
         0,
         0,
         0,
         0,
         0,
         v_custunitcode,
         v_termthirdno);
    
      out_result := 00;
      out_msg    := '记录入库成功';
    end if;
  exception
    when others then
      rollback;
      out_result := out_result;
      out_msg    := out_msg || '异常_+_' || sqlerrm;
  end;
end;
/
create or replace package        pkg_union_cardtypeaccount
is

    type ref_cursor is ref cursor;           --游标类型定义，用于返回数据集

    procedure proc_thirdunion_cardtype (
        prmstartdate             in     varchar2,    --开始时间
        prmenddate               in     varchar2,    --结束时间
        prmisgroup               in     number,      --0：明细 1：汇总
        prmsearchkind            in     number,      --0:未清算 1:清算成功 2：清算失败
        cardtype                 in     varchar2,    --搜索的卡类型 用逗号分开
        prmdept                  in     varchar2,    --部门
        prmcustomerunitcode      in     varchar2,    --客户法人
        prmcardno                in     varchar2,    --银行卡号，明细用
        io_allrec                   out ref_cursor);

end pkg_union_cardtypeaccount;


 
 
 
 /
create or replace package body        pkg_union_cardtypeaccount
is
    procedure proc_thirdunion_cardtype (
        prmstartdate             in     varchar2,    --开始时间
        prmenddate               in     varchar2,    --结束时间
        prmisgroup               in     number,      --0：明细 1：汇总
        prmsearchkind            in     number,      --0:未清算 1:清算成功 2：清算失败
        cardtype                 in     varchar2,    --搜索的卡类型 用逗号分开
        prmdept                  in     varchar2,    --部门
        prmcustomerunitcode      in     varchar2,    --客户法人
        prmcardno                in     varchar2,    --银行卡号，明细用
        io_allrec                   out ref_cursor)
    as
    /*
    --------------------------------------------------------------------------
    --存储过程：proc_thirdunion_cardtype
    --作　　者：赵翠霞
    --时　　间：2014-06-18
    --说　　明：根据卡类型查询电子现金
    --------------------------------------------------------------------------
    */
        sqlstr   varchar2 (4000);
        tablename varchar2(50);
        begindate date;
        enddate date;
    begin
        begindate:=to_date(prmstartdate,'yyyy-mm-dd');
        enddate:=to_date(prmenddate,'yyyy-mm-dd')+1;

        tablename:='rec_thirdcard_consume'; --未清算
        if prmisgroup=0 then --明细
            if prmsearchkind=1 then          --清算成功
                tablename:='rec_thirdcard_consumesucess';
            else
                if prmsearchkind=2 then     --清算失败
                    tablename:='rec_thirdcard_unsettled';
                end if;
            end if;
            sqlstr:='select b.busnumber,trim(to_char(a.poscode,''xxxxxxxxxxxxxxxx'')) as poscode,
                c.linename,a.opdt,a.thirdcardno,a.electronopfare,a.discount,d.detailname
                from ' || tablename || ' a
                left join base_bus b
                on a.customerunitcode=b.customerunitcode and a.busid=b.busno
                left join base_busline c
                on a.customerunitcode=c.customerunitcode and a.buslineid=c.lineid
                left join v_cardtypedetail d
                on a.cardtype=d.detailid and a.customerunitcode=d.customerunitcode
                where b.isdelete=0 and c.isdelete=0
                and a.customerunitcode=''' || prmcustomerunitcode || '''
                and a.opdt>=''' || begindate || '''
                and a.opdt<''' || enddate ||'''
                and a.cardtype in (' || cardtype || ')';
            if prmcardno is not null then
                sqlstr:=sqlstr || ' and a.thirdcardno=''' || prmcardno || '''';
            end if;
            if prmdept<>'root' then   --部门
                sqlstr:=sqlstr || ' and exists( select 1
                        from base_dept t1 where t1.dptcode=a.linedept and t1.customerunitcode = '''
                        || prmcustomerunitcode
                        || ''' connect by t1.dptcode_p = prior t1.dptcode start with
                        t1.dptcode='''
                        || prmdept
                        || ''' and t1.customerunitcode ='''
                        || prmcustomerunitcode
                        || ''' )';
            end if;
            if prmsearchkind=0 then  --未清算
                sqlstr:=sqlstr || ' and a.status=0';
            end if;
        else  --汇总
            if prmsearchkind=1 then          --清算成功
                tablename:='st_payment_consum_day';
            else
                if prmsearchkind=2 then     --清算失败
                    tablename:='st_payment_third_unsettle';
                end if;
            end if;
            if prmsearchkind=0 then --未清算
                sqlstr:='select trunc(a.opdt,''dd'') as balancedate,b.detailname,
                count(*) as operno,
                sum(a.electronopfare) as opermn
                from rec_thirdcard_consume a
                left join v_cardtypedetail b
                on a.cardtype=b.detailid and a.customerunitcode=b.customerunitcode
                where a.status=0 and a.customerunitcode=''' || prmcustomerunitcode || '''
                and a.opdt>=''' || begindate || '''
                and a.opdt<''' || enddate ||'''';
            else
                sqlstr:='select trunc(a.balancedate,''dd'') as balancedate,b.detailname,
                sum(a.operno) as operno,
                sum(a.opermn) as opermn
                from ' || tablename || ' a
                left join v_cardtypedetail b
                on a.cardtype=b.detailid and a.customerunitcode=b.customerunitcode
                where a.acccode=204 and a.customerunitcode='''|| prmcustomerunitcode || '''
                and a.balancedate>=''' || begindate || '''
                and a.balancedate<''' || enddate ||'''';
            end if;
            sqlstr:=sqlstr || ' and a.cardtype in (' || cardtype || ')';
            if prmdept<>'root' then   --部门
                sqlstr:=sqlstr || ' and exists( select 1
                        from base_dept t1 where t1.dptcode=a.linedept and t1.customerunitcode = '''
                        || prmcustomerunitcode
                        || ''' connect by t1.dptcode_p = prior t1.dptcode start with
                        t1.dptcode=''' || prmdept
                        || ''' and t1.customerunitcode ='''
                        || prmcustomerunitcode
                        || ''' )';
            end if;
            if prmsearchkind=0 then
                sqlstr:=sqlstr || ' group by trunc(a.opdt,''dd''),b.detailname';
            else
                sqlstr:=sqlstr || ' group by trunc(a.balancedate,''dd''),b.detailname';
            end if;
            sqlstr:=sqlstr || ' order by balancedate';
        end if;
        open io_allrec for sqlstr;
    end proc_thirdunion_cardtype;
end pkg_union_cardtypeaccount;

/
create or replace package        pkg_union_poundage
is
  type ref_cursor is ref cursor;

  procedure proc_updatepoundage_detail (
      prmthirdcardno     in       varchar2,                        --银联卡号
      prmmerchantcode    in       varchar2,                        --商户编号
      prmopdt            in       varchar2,                        --交易时间
      prmopfare          in       number,                          --交易金额
      prmaccountdate     in       varchar2,                    --银联账务日期
      prmpoundage        in       number,                       --手续费金额
      prmfilename        in       varchar2,                     --手续费文件名
      out_msg            out      varchar2,
      out_result         out      integer
   );

     procedure proc_buspoundage_total (
      prmaccountdate     in       varchar2,                    --银联账务日期
      prmcustomerunitcode in       varchar2,                    --客户编号
      out_msg            out      varchar2,
      out_result         out      integer
   );

      procedure proc_union_poundage(
      prmstartdate     in       varchar2,                          --开始时间
      prmenddate       in       varchar2,                          --结束时间
      prmlineorbusstr  in       varchar2,                          --搜索的线路或者车辆 用逗号分开
      prmcustomerunitcode in    varchar2,                          --客户法人
      io_allrec        out      ref_cursor
   );
end;


 
 
 
 /
create or replace package body        pkg_union_poundage
is

   procedure proc_updatepoundage_detail (
      prmthirdcardno     in       varchar2,                         --银联卡号
      prmmerchantcode    in       varchar2,                         --商户编号
      prmopdt            in       varchar2,                         --交易时间
      prmopfare          in       number,                           --交易金额
      prmaccountdate     in       varchar2,                     --银联账务日期
      prmpoundage        in       number,                       --手续费金额
      prmfilename        in       varchar2,                     --手续费文件名
      out_msg            out      varchar2,
      out_result         out      integer
   )
   as
      n_count            number;
      d_accountdate      date;
      d_opdt             date;
      n_status           number;
      n_acccode          number;
      n_discount         number (10, 2);
      n_cardkind         number;
      n_cardtype         number;
      n_driverid         number;
      n_poscode          number;
      n_samcardno        number;
      n_buslineid        number;
      v_linedept         varchar2 (10);
      n_busid            number;
      n_cardareaid       number;
      n_dptareaid        number;
      n_wallettype       number;
      v_merchantcode     varchar2 (15);
      v_uniontermid      varchar2 (8);
   begin
      out_result := -1000;
      out_msg := '记录入库异常';
      d_accountdate := to_date (prmaccountdate, 'yyyy-mm-dd');
      d_opdt := to_date (prmopdt, 'yyyy-mm-dd hh24:mi:ss');

        out_result := -1001;
      select count (*)
        into n_count
        from rec_unionpoundage_detail a
       where a.thirdcardno = prmthirdcardno
         and a.merchantcode = prmmerchantcode
         and a.opdt = d_opdt;

      if n_count > 0
      then
         out_result := 100;
         out_msg := '重复记录';
         return;
      end if;
        out_result := -1003;
         insert into rec_unionpoundage_detail
                     (thirdcardno, merchantcode,
                      opdt, opfare,poundage, balancedate,filename
                     )
              values (prmthirdcardno, prmmerchantcode,
                      d_opdt, prmopfare,prmpoundage,d_accountdate,prmfilename
                     );

        out_result := -1004;
      select count (*)
        into n_count
        from rec_unionpoundage_total a
       where a.balancedate = d_accountdate
         and a.merchantcode = prmmerchantcode;

       if n_count > 0
       then
         out_result := -1005;
         out_msg := '更新统计数据';

         update rec_unionpoundage_total a
            set a.poundageamt = a.poundageamt + prmpoundage
         where a.balancedate = d_accountdate
         and a.merchantcode = prmmerchantcode;

      else
         out_result := -1006;
         out_msg := '插入统计数据';

         insert into rec_unionpoundage_total
                     (poundageamt,balancedate,merchantcode
                     )
              values (prmpoundage, d_accountdate, prmmerchantcode
                     );
      end if;

      commit;
      out_result := 100;
      out_msg := '更新状态成功';
   exception
      when others
      then
         rollback;
         out_result := out_result;
         out_msg := out_msg || '异常_+_' || sqlerrm;
   end;

   procedure proc_buspoundage_total (
      prmaccountdate     in       varchar2,                    --银联账务日期
      prmcustomerunitcode   in       varchar2,                    --客户编号
      out_msg            out      varchar2,
      out_result         out      integer
   )
   as
      n_count            number;
      d_accountdate      date;
      d_opdt             date;
      n_status           number;
      n_acccode          number;
      n_discount         number (10, 2);
      n_cardkind         number;
      n_cardtype         number;
      n_driverid         number;
      n_poscode          number;
      n_samcardno        number;
      n_buslineid        number;
      v_linedept         varchar2 (10);
      n_busid            number;
      n_cardareaid       number;
      n_dptareaid        number;
      n_wallettype       number;
      v_merchantcode     varchar2 (15);
      v_uniontermid      varchar2 (8);
   begin
      out_result := -1000;
      out_msg := '记录入库异常';
      d_accountdate := to_date (prmaccountdate, 'yyyy-mm-dd');


      select count (*)
        into n_count
        from rec_unionpoundage_bus a
       where a.balancedate = d_accountdate
       and a.customerunitcode = prmcustomerunitcode;

      if n_count > 0
      then
         out_result := 100;
         out_msg := '重复记录';
         return;
      end if;

      insert into rec_unionpoundage_bus
                  (busid, merchantcode,customerunitcode,
                  nombertxn,
                  poundageamt,
                  balancedate)
       select distinct a.busid,a.merchantcode,a.customerunitcode,
       sum(a.operno) over(partition by a.merchantcode,a.customerunitcode,a.busid) as nombertxn,
       sum(a.operno) over(partition by a.merchantcode,a.customerunitcode,a.busid)/sum(a.operno) over(partition by a.merchantcode) * b.poundageamt  as poundageamt,
       d_accountdate
        from st_payment_consum_day a
        inner join rec_unionpoundage_total b on (a.merchantcode=b.merchantcode)
        where a.acccode='204'
        and b.balancedate=a.balancedate
        and a.customerunitcode=prmcustomerunitcode
        and a.balancedate = d_accountdate;
        --and a.balancedate >= to_date(trunc(trunc(d_accountdate, 'month') - 1, 'month'))
        --and a.balancedate <= to_date(trunc(d_accountdate, 'month') - 1 / 86400);
        --group by a.busid,a.merchantcode,a.operno;

      commit;
      out_result := 100;
      out_msg := '更新状态成功';
   exception
      when others
      then
         rollback;
         out_result := out_result;
         out_msg := out_msg || '异常_+_' || sqlerrm;
   end;

   procedure proc_union_poundage (
      prmstartdate          in       varchar2,                      --开始时间
      prmenddate            in       varchar2,                      --结束时间
      prmlineorbusstr       in       varchar2, --搜索的线路或者车辆 用逗号分开
      prmcustomerunitcode   in       varchar2,                      --客户法人
      io_allrec             out      ref_cursor
   )
   as
   allrec         ref_cursor;
   begin
     open allrec for
        select to_char(c.lineid) as buslineid,
        c.linename,
        to_char(b.busno) busid,
        b.busnumber,
        trunc(dd.balancedate,'dd') as balancedate,
        nvl(sum(a.operno),0) as operno,
        nvl(sum(a.opermn),0) as opermn,
        nvl(sum(a.discountmn),0) as discountmn,
        nvl(sum(d.poundageamt),0) as poundageamt
        from base_bus b
        cross join (
        select to_date(prmstartdate,'yyyy-mm-dd') + (rownum -1) as balancedate
            from dual
            connect by rownum<=
            (trunc(to_date(prmenddate,'yyyy-mm-dd')+1, 'dd')
            -
            trunc(to_date(prmstartdate,'yyyy-mm-dd'), 'dd'))
        ) dd
        left join st_payment_consum_day a on a.customerunitcode=b.customerunitcode and a.busid=b.busno
                and a.acccode=204
                and trunc(a.balancedate,'dd')=trunc(dd.balancedate,'dd')
        left join base_busline c on b.customerunitcode=c.customerunitcode and b.lineid=c.lineid
        left join rec_unionpoundage_bus d on b.busno=d.busid and b.customerunitcode=d.customerunitcode
              and trunc(d.balancedate,'dd')=trunc(dd.balancedate,'dd')
        where
        b.customerunitcode=prmcustomerunitcode
        and b.busno in (select * from table (split (prmlineorbusstr, ',')))
         group by c.lineid,c.linename,
         b.busno,b.busnumber,
         trunc(dd.balancedate,'dd')
         order by buslineid,busid,balancedate;


      io_allrec := allrec;

   end;

end;

/
